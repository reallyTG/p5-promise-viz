{
  "promises": {
    "0": {
      "source": "node_modules/ava/lib/runner.js:489:17:489:17",
      "startTime": "1522351609242830",
      "endTime": "1522351609507516",
      "elapsedTime": "264686",
      "asyncId": 50,
      "triggerAsyncId": 33,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.start",
      "userCode": false,
      "line": "\n\t\t}\n\n\t\tawait Promise.all(this.waitForReady);\n\n\t\tif (concurrentTests.length === 0 && serialTests.length === 0) {\n\t\t\tthis.emit('finish')",
      "startLine": 489,
      "startCol": 17,
      "endLine": 489,
      "endCol": 17,
      "file": "node_modules/ava/lib/runner.js",
      "triggers": [
        51
      ],
      "uniqueid": 0
    },
    "1": {
      "source": "node_modules/ava/lib/runner.js:78:11:78:11",
      "startTime": "1522351610550682",
      "endTime": "1522351635965978",
      "elapsedTime": "25415296",
      "asyncId": 51,
      "triggerAsyncId": 50,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "triggers": [
        53,
        59,
        58,
        57,
        63
      ],
      "line": "\n\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\thasStarted = true;\n\t\t\t\t\tthis.start();\n\t\t\t\t});\n\t\t\t}",
      "startLine": 78,
      "startCol": 11,
      "endLine": 78,
      "endCol": 11,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 1
    },
    "2": {
      "source": "node_modules/ava/lib/runner.js:523:37:523:37",
      "startTime": "1522351628545998",
      "endTime": "1522351641261605",
      "elapsedTime": "12715607",
      "asyncId": 63,
      "triggerAsyncId": 51,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.start",
      "userCode": false,
      "line": "\n\t\t\t}, true);\n\t\t});\n\t\tconst concurrentPromise = Promise.all([beforePromise, serialPromise]).then(async ([beforeHooksOk, serialOk]) => { // eslint-disable-line promise/prefer-await-to-then\n\t\t\t// Don't run tests if a `before` hook failed, or if `failFast` is enabled\n\t\t\t// and a previous serial test failed.\n\t\t\tif (!beforeHooksOk || (!serialOk && this.failFast)) ",
      "startLine": 523,
      "startCol": 37,
      "endLine": 523,
      "endCol": 37,
      "file": "node_modules/ava/lib/runner.js",
      "triggers": [
        66,
        66
      ],
      "uniqueid": 2
    },
    "3": {
      "source": "node_modules/ava/lib/runner.js:523:73:523:73",
      "startTime": "1522351633516356",
      "endTime": "1522351731243565",
      "elapsedTime": "97727209",
      "asyncId": 66,
      "triggerAsyncId": 63,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.start",
      "userCode": false,
      "triggers": [
        72,
        71,
        70,
        69,
        76,
        68,
        67
      ],
      "line": "\n\t\t\t}, true);\n\t\t});\n\t\tconst concurrentPromise = Promise.all([beforePromise, serialPromise]).then(async ([beforeHooksOk, serialOk]) => { // eslint-disable-line promise/prefer-await-to-then\n\t\t\t// Don't run tests if a `before` hook failed, or if `failFast` is enabled\n\t\t\t// and a previous serial test failed.\n\t\t\tif (!beforeHooksOk || (!serialOk && this.failFast)) ",
      "startLine": 523,
      "startCol": 73,
      "endLine": 523,
      "endCol": 73,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 3
    },
    "4": {
      "source": "node_modules/ava/lib/runner.js:348:28:348:28",
      "startTime": "1522351646581870",
      "endTime": "1522351672829997",
      "elapsedTime": "26248127",
      "asyncId": 70,
      "triggerAsyncId": 66,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.runTest",
      "userCode": false,
      "triggers": [
        79,
        81,
        75
      ],
      "line": "\n\tasync runTest(task, contextRef) {\n\t\tconst hookSuffix = ` for ${task.title}`;\n\t\tlet hooksOk = await this.runHooks(\n\t\t\tthis.tasks.beforeEach,\n\t\t\tcontextRef,\n\t\t\t",
      "startLine": 348,
      "startCol": 28,
      "endLine": 348,
      "endCol": 28,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 4
    },
    "5": {
      "source": "node_modules/ava/lib/runner.js:538:17:538:17",
      "startTime": "1522351664769025",
      "endTime": "1522351685610717",
      "elapsedTime": "20841692",
      "asyncId": 75,
      "triggerAsyncId": 70,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "triggers": [
        81,
        82,
        82,
        80
      ],
      "line": "\n\t\t\t// stop other concurrent tests from running.\n\t\t\tconst allOkays = await Promise.all(concurrentTests.map(task => {\n\t\t\t\treturn this.runTest(task, contextRef.copy());\n\t\t\t}));\n\t\t\treturn allOkays.every(ok => ok);\n\t\t})",
      "startLine": 538,
      "startCol": 17,
      "endLine": 538,
      "endCol": 17,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 5
    },
    "6": {
      "source": "node_modules/ava/lib/runner.js:376:30:376:30",
      "startTime": "1522351675487820",
      "endTime": "1522351691377899",
      "elapsedTime": "15890079",
      "asyncId": 80,
      "triggerAsyncId": 75,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.runTest",
      "userCode": false,
      "line": "\n\t\t\t});\n\n\t\t\tconst result = await this.runSingle(test);\n\t\t\ttestOk = result.passed;\n\n\t\t\tif (testOk) ",
      "startLine": 376,
      "startCol": 30,
      "endLine": 376,
      "endCol": 30,
      "file": "node_modules/ava/lib/runner.js",
      "triggers": [
        86
      ],
      "uniqueid": 6
    },
    "7": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351685439566",
      "endTime": "1522351704551866",
      "elapsedTime": "19112300",
      "asyncId": 86,
      "triggerAsyncId": 80,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "triggers": [
        88,
        95,
        94,
        93,
        91
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 7
    },
    "8": {
      "source": "node_modules/ava/lib/runner.js:388:26:388:26",
      "startTime": "1522351695159548",
      "endTime": "1522351714690854",
      "elapsedTime": "19531306",
      "asyncId": 93,
      "triggerAsyncId": 86,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.runTest",
      "userCode": false,
      "line": "\n\t\t\t\t});\n\n\t\t\t\thooksOk = await this.runHooks(\n\t\t\t\t\tthis.tasks.afterEach,\n\t\t\t\t\tcontextRef,\n\t\t\t\t\t",
      "startLine": 388,
      "startCol": 26,
      "endLine": 388,
      "endCol": 26,
      "file": "node_modules/ava/lib/runner.js",
      "triggers": [
        98
      ],
      "uniqueid": 8
    },
    "9": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351703937183",
      "endTime": "1522351725204073",
      "elapsedTime": "21266890",
      "asyncId": 98,
      "triggerAsyncId": 93,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "triggers": [
        106,
        105,
        104
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 9
    },
    "10": {
      "source": "node_modules/ava/lib/runner.js:323:30:323:30",
      "startTime": "1522351718424453",
      "endTime": "1522351725666630",
      "elapsedTime": "7242177",
      "asyncId": 105,
      "triggerAsyncId": 98,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.runHooks",
      "userCode": false,
      "triggers": [
        108,
        108,
        108
      ],
      "line": "\n\t\t\ttestPassed\n\t\t}));\n\t\tconst outcome = await this.runMultiple(hooks, this.serial);\n\t\tfor (const result of outcome.storedResults) {\n\t\t\tif (result.passed) {\n\t\t\t\tthis.emit('stateChange', ",
      "startLine": 323,
      "startCol": 30,
      "endLine": 323,
      "endCol": 30,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 10
    },
    "11": {
      "source": "node_modules/ava/lib/runner.js:523:73:523:73",
      "startTime": "1522351539310748",
      "endTime": "1522352205779147",
      "elapsedTime": "666468399",
      "asyncId": 108,
      "triggerAsyncId": 105,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.start",
      "userCode": false,
      "triggers": [
        114,
        121,
        128,
        135,
        113,
        120,
        127,
        134,
        112,
        119,
        126,
        133,
        125,
        118,
        111,
        132,
        139,
        110,
        109
      ],
      "line": "\n\t\t\t}, true);\n\t\t});\n\t\tconst concurrentPromise = Promise.all([beforePromise, serialPromise]).then(async ([beforeHooksOk, serialOk]) => { // eslint-disable-line promise/prefer-await-to-then\n\t\t\t// Don't run tests if a `before` hook failed, or if `failFast` is enabled\n\t\t\t// and a previous serial test failed.\n\t\t\tif (!beforeHooksOk || (!serialOk && this.failFast)) ",
      "startLine": 523,
      "startCol": 73,
      "endLine": 523,
      "endCol": 73,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 11
    },
    "12": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351547580281",
      "endTime": "1522352204643879",
      "elapsedTime": "657063598",
      "asyncId": 110,
      "triggerAsyncId": 108,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "triggers": [
        115,
        145
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 12
    },
    "13": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351747284858",
      "endTime": "1522351761362258",
      "elapsedTime": "14077400",
      "asyncId": 115,
      "triggerAsyncId": 110,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "triggers": [
        118,
        117,
        116
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 13
    },
    "14": {
      "source": "node_modules/ava/lib/runner.js:554:15:554:15",
      "startTime": "1522351751317427",
      "endTime": "1522351762966927",
      "elapsedTime": "11649500",
      "asyncId": 116,
      "triggerAsyncId": 115,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.start",
      "userCode": false,
      "line": "\n\n\t\t\t// Always run `after.always` hooks.\n\t\t\tawait this.runHooks(this.tasks.afterAlways, contextRef);\n\t\t\tprocess.removeListener('beforeExit', beforeExitHandler);\n\t\t\tawait this.emit('finish');\n\t\t} catch (error) ",
      "startLine": 554,
      "startCol": 15,
      "endLine": 554,
      "endCol": 15,
      "file": "node_modules/ava/lib/runner.js",
      "triggers": [
        121
      ],
      "uniqueid": 14
    },
    "15": {
      "source": "node_modules/ava/lib/runner.js:323:30:323:30",
      "startTime": "1522351753176553",
      "endTime": "1522351761878076",
      "elapsedTime": "8701523",
      "asyncId": 117,
      "triggerAsyncId": 115,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.runHooks",
      "userCode": false,
      "triggers": [
        149,
        148,
        120,
        153,
        148,
        147,
        157,
        157,
        146
      ],
      "line": "\n\t\t\ttestPassed\n\t\t}));\n\t\tconst outcome = await this.runMultiple(hooks, this.serial);\n\t\tfor (const result of outcome.storedResults) {\n\t\t\tif (result.passed) {\n\t\t\t\tthis.emit('stateChange', ",
      "startLine": 323,
      "startCol": 30,
      "endLine": 323,
      "endCol": 30,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 15
    },
    "16": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351760851120",
      "endTime": "1522351769305630",
      "elapsedTime": "8454510",
      "asyncId": 121,
      "triggerAsyncId": 116,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "triggers": [
        122,
        122
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 16
    },
    "17": {
      "source": "node_modules/ava/lib/runner.js:556:15:556:15",
      "startTime": "1522351765362638",
      "endTime": "1522351815685879",
      "elapsedTime": "50323241",
      "asyncId": 122,
      "triggerAsyncId": 121,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.start",
      "userCode": false,
      "line": "\n\t\t\tawait this.runHooks(this.tasks.afterAlways, contextRef);\n\t\t\tprocess.removeListener('beforeExit', beforeExitHandler);\n\t\t\tawait this.emit('finish');\n\t\t} catch (error) {\n\t\t\tawait this.emit('error', error);\n\t\t",
      "startLine": 556,
      "startCol": 15,
      "endLine": 556,
      "endCol": 15,
      "file": "node_modules/ava/lib/runner.js",
      "triggers": [
        124
      ],
      "uniqueid": 17
    },
    "18": {
      "source": "node_modules/ava/lib/runner.js:556:15:556:15",
      "startTime": "1522351767330046",
      "endTime": "1522351794332287",
      "elapsedTime": "27002241",
      "asyncId": 123,
      "triggerAsyncId": 35,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.start",
      "userCode": false,
      "triggers": [
        127,
        125,
        126,
        125,
        129
      ],
      "line": "\n\t\t\tawait this.runHooks(this.tasks.afterAlways, contextRef);\n\t\t\tprocess.removeListener('beforeExit', beforeExitHandler);\n\t\t\tawait this.emit('finish');\n\t\t} catch (error) {\n\t\t\tawait this.emit('error', error);\n\t\t",
      "startLine": 556,
      "startCol": 15,
      "endLine": 556,
      "endCol": 15,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 18
    },
    "19": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351768808698",
      "endTime": "1522351816962342",
      "elapsedTime": "48153644",
      "asyncId": 124,
      "triggerAsyncId": 122,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "triggers": [
        165,
        169,
        164,
        173,
        164,
        163,
        178,
        178,
        162
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 19
    },
    "20": {
      "source": "node_modules/emittery/index.js:257:17:257:17",
      "startTime": "1522351779138674",
      "endTime": "1522351814649296",
      "elapsedTime": "35510622",
      "asyncId": 129,
      "triggerAsyncId": 123,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.emit",
      "userCode": false,
      "line": "\n\n\t\tawait resolvedPromise;\n\t\tawait Promise.all([\n\t\t\t...staticListeners.map(async listener => {\n\t\t\t\tif (listeners.has(listener)) {\n\t\t\t\t\treturn listener(eventData)",
      "startLine": 257,
      "startCol": 17,
      "endLine": 257,
      "endCol": 17,
      "file": "node_modules/emittery/index.js",
      "triggers": [
        131
      ],
      "uniqueid": 20
    },
    "21": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351793932288",
      "endTime": "1522351816200183",
      "elapsedTime": "22267895",
      "asyncId": 131,
      "triggerAsyncId": 129,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "triggers": [
        186,
        185,
        190,
        185,
        184,
        194,
        194,
        183
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 21
    },
    "22": {
      "source": "node_modules/ava/lib/runner.js:538:17:538:17",
      "startTime": "1522351593013304",
      "endTime": "1522352203095637",
      "elapsedTime": "610082333",
      "asyncId": 132,
      "triggerAsyncId": 108,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "triggers": [
        135,
        143
      ],
      "line": "\n\t\t\t// stop other concurrent tests from running.\n\t\t\tconst allOkays = await Promise.all(concurrentTests.map(task => {\n\t\t\t\treturn this.runTest(task, contextRef.copy());\n\t\t\t}));\n\t\t\treturn allOkays.every(ok => ok);\n\t\t})",
      "startLine": 538,
      "startCol": 17,
      "endLine": 538,
      "endCol": 17,
      "file": "node_modules/ava/lib/runner.js",
      "uniqueid": 22
    },
    "23": {
      "source": "node_modules/ava/lib/worker/subprocess.js:43:13:43:13",
      "startTime": "1522351822716369",
      "endTime": "1522351849787429",
      "elapsedTime": "27071060",
      "asyncId": 135,
      "triggerAsyncId": 132,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " exit",
      "userCode": false,
      "triggers": [
        136
      ],
      "line": "\n\n\t\tdependencyTracking.flush();\n\t\tawait ipc.flush();\n\t\tprocess.exit(); // eslint-disable-line unicorn/no-process-exit\n\t}",
      "startLine": 43,
      "startCol": 13,
      "endLine": 43,
      "endCol": 13,
      "file": "node_modules/ava/lib/worker/subprocess.js",
      "uniqueid": 23
    },
    "24": {
      "source": "node_modules/ava/lib/runner.js:323:30:323:30",
      "startTime": "1522351601749422",
      "endTime": "1522351611402288",
      "elapsedTime": "9652866",
      "asyncId": 136,
      "triggerAsyncId": 135,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Runner.runHooks",
      "userCode": false,
      "line": "\n\t\t\ttestPassed\n\t\t}));\n\t\tconst outcome = await this.runMultiple(hooks, this.serial);\n\t\tfor (const result of outcome.storedResults) {\n\t\t\tif (result.passed) {\n\t\t\t\tthis.emit('stateChange', ",
      "startLine": 323,
      "startCol": 30,
      "endLine": 323,
      "endCol": 30,
      "file": "node_modules/ava/lib/runner.js",
      "triggers": [
        137,
        137
      ],
      "uniqueid": 24
    },
    "25": {
      "source": "node_modules/ava/lib/worker/ipc.js:37:31:37:31",
      "startTime": "1522351824117837",
      "endTime": "1522351848877604",
      "elapsedTime": "24759767",
      "asyncId": 137,
      "triggerAsyncId": 136,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Object.flush",
      "userCode": false,
      "triggers": [
        142,
        140,
        138
      ],
      "line": "\nasync function flush() {\n\tref();\n\tconst promise = pendingPings.then(async () => { // eslint-disable-line promise/prefer-await-to-then\n\t\tsend({type: 'ping'});\n\t\tawait pEvent(process, 'message', selectAvaMessage('pong'));\n\t\tif (promise === pendingPings) ",
      "startLine": 37,
      "startCol": 31,
      "endLine": 37,
      "endCol": 31,
      "file": "node_modules/ava/lib/worker/ipc.js",
      "uniqueid": 25
    },
    "26": {
      "source": "node_modules/ava/lib/worker/subprocess.js:43:13:43:13",
      "startTime": "1522351825886011",
      "endTime": "1522351850230720",
      "elapsedTime": "24344709",
      "asyncId": 138,
      "triggerAsyncId": 137,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " exit",
      "userCode": false,
      "triggers": [
        202,
        201,
        206,
        201,
        200,
        210,
        210,
        199
      ],
      "line": "\n\n\t\tdependencyTracking.flush();\n\t\tawait ipc.flush();\n\t\tprocess.exit(); // eslint-disable-line unicorn/no-process-exit\n\t}",
      "startLine": 43,
      "startCol": 13,
      "endLine": 43,
      "endCol": 13,
      "file": "node_modules/ava/lib/worker/subprocess.js",
      "uniqueid": 26
    },
    "27": {
      "source": "test/lib/lbt/graph/dependencyGraph.js:57:24:57:24",
      "startTime": "1522351621814167",
      "endTime": "1522352044691226",
      "elapsedTime": "422877059",
      "asyncId": 148,
      "triggerAsyncId": 117,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tname: \"myroot\"\n\t}];\n\tconst oResult = await dependencyGraph(pool, roots);\n\tcheckNZero(t, oResult);\n\tt.deepEqual(Array.from(oResult.nodes.keys()), [\"\", \"myroot\", \"mydep\", \"superb\"]);",
      "startLine": 57,
      "startCol": 24,
      "endLine": 57,
      "endCol": 24,
      "file": "test/lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        156
      ],
      "uniqueid": 27
    },
    "28": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351623560762",
      "endTime": "1522351625718317",
      "elapsedTime": "2157555",
      "asyncId": 149,
      "triggerAsyncId": 117,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        150,
        150
      ],
      "uniqueid": 28
    },
    "29": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351627022722",
      "endTime": "1522351988925171",
      "elapsedTime": "361902449",
      "asyncId": 150,
      "triggerAsyncId": 149,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        215,
        219,
        151
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 29
    },
    "30": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351628718190",
      "endTime": "1522352003635128",
      "elapsedTime": "374916938",
      "asyncId": 151,
      "triggerAsyncId": 150,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        152
      ],
      "uniqueid": 30
    },
    "31": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:29:13:29",
      "startTime": "1522351630460988",
      "endTime": "1522352020320187",
      "elapsedTime": "389859199",
      "asyncId": 152,
      "triggerAsyncId": 151,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencie",
      "startLine": 13,
      "startCol": 29,
      "endLine": 13,
      "endCol": 29,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        154
      ],
      "uniqueid": 31
    },
    "32": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:164:13:164",
      "startTime": "1522351631764501",
      "endTime": "1522352021720913",
      "elapsedTime": "389956412",
      "asyncId": 153,
      "triggerAsyncId": 117,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " createDependencyGraph",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) ",
      "startLine": 13,
      "startCol": 164,
      "endLine": 13,
      "endCol": 164,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        155
      ],
      "uniqueid": 32
    },
    "33": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:171:13:171",
      "startTime": "1522351634888217",
      "endTime": "1522352040992872",
      "elapsedTime": "406104655",
      "asyncId": 155,
      "triggerAsyncId": 153,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " createDependencyGraph",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) ",
      "startLine": 13,
      "startCol": 171,
      "endLine": 13,
      "endCol": 171,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        221
      ],
      "uniqueid": 33
    },
    "34": {
      "source": "node_modules/ava/lib/test.js:622:21:622:21",
      "startTime": "1522351637313945",
      "endTime": "1522352049897266",
      "elapsedTime": "412583321",
      "asyncId": 156,
      "triggerAsyncId": 148,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Test.callFn",
      "userCode": false,
      "line": "\n\t\t\treturn {\n\t\t\t\tok: true,\n\t\t\t\tretval: this.fn.call(null, this.createExecutionContext())\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn ",
      "startLine": 622,
      "startCol": 21,
      "endLine": 622,
      "endCol": 21,
      "file": "node_modules/ava/lib/test.js",
      "triggers": [],
      "uniqueid": 34
    },
    "35": {
      "source": "test/lib/lbt/graph/dependencyGraph.js:98:24:98:24",
      "startTime": "1522351653766629",
      "endTime": "1522351990309025",
      "elapsedTime": "336542396",
      "asyncId": 164,
      "triggerAsyncId": 124,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tname: \"mydep\"\n\t}];\n\tconst oResult = await dependencyGraph(pool, roots);\n\tcheckNZero(t, oResult);\n\tt.deepEqual(Array.from(oResult.nodes.keys()), [\"\", \"myroot\", \"mydep\", \"superb\"]);",
      "startLine": 98,
      "startCol": 24,
      "endLine": 98,
      "endCol": 24,
      "file": "test/lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        177
      ],
      "uniqueid": 35
    },
    "36": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351654722701",
      "endTime": "1522351654981256",
      "elapsedTime": "258555",
      "asyncId": 165,
      "triggerAsyncId": 124,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        166,
        166
      ],
      "uniqueid": 36
    },
    "37": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351656091077",
      "endTime": "1522351943367474",
      "elapsedTime": "287276397",
      "asyncId": 166,
      "triggerAsyncId": 165,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        222,
        224,
        167
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 37
    },
    "38": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351657253736",
      "endTime": "1522351955056147",
      "elapsedTime": "297802411",
      "asyncId": 167,
      "triggerAsyncId": 166,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        168
      ],
      "uniqueid": 38
    },
    "39": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:29:13:29",
      "startTime": "1522351658628543",
      "endTime": "1522351961761918",
      "elapsedTime": "303133375",
      "asyncId": 168,
      "triggerAsyncId": 167,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencie",
      "startLine": 13,
      "startCol": 29,
      "endLine": 13,
      "endCol": 29,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        174
      ],
      "uniqueid": 39
    },
    "40": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351660104761",
      "endTime": "1522351660578619",
      "elapsedTime": "473858",
      "asyncId": 169,
      "triggerAsyncId": 124,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        170,
        170
      ],
      "uniqueid": 40
    },
    "41": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351661855363",
      "endTime": "1522351974375535",
      "elapsedTime": "312520172",
      "asyncId": 170,
      "triggerAsyncId": 169,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        226,
        230,
        171
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 41
    },
    "42": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351663400640",
      "endTime": "1522351976747151",
      "elapsedTime": "313346511",
      "asyncId": 171,
      "triggerAsyncId": 170,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        172
      ],
      "uniqueid": 42
    },
    "43": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:29:13:29",
      "startTime": "1522351664865696",
      "endTime": "1522351981800394",
      "elapsedTime": "316934698",
      "asyncId": 172,
      "triggerAsyncId": 171,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencie",
      "startLine": 13,
      "startCol": 29,
      "endLine": 13,
      "endCol": 29,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        175
      ],
      "uniqueid": 43
    },
    "44": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:164:13:164",
      "startTime": "1522351666442071",
      "endTime": "1522351984874617",
      "elapsedTime": "318432546",
      "asyncId": 173,
      "triggerAsyncId": 124,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " createDependencyGraph",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) ",
      "startLine": 13,
      "startCol": 164,
      "endLine": 13,
      "endCol": 164,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        176
      ],
      "uniqueid": 44
    },
    "45": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:171:13:171",
      "startTime": "1522351671023520",
      "endTime": "1522351987228751",
      "elapsedTime": "316205231",
      "asyncId": 176,
      "triggerAsyncId": 173,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " createDependencyGraph",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) ",
      "startLine": 13,
      "startCol": 171,
      "endLine": 13,
      "endCol": 171,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        232
      ],
      "uniqueid": 45
    },
    "46": {
      "source": "node_modules/ava/lib/test.js:622:21:622:21",
      "startTime": "1522351672756469",
      "endTime": "1522352005852425",
      "elapsedTime": "333095956",
      "asyncId": 177,
      "triggerAsyncId": 164,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Test.callFn",
      "userCode": false,
      "line": "\n\t\t\treturn {\n\t\t\t\tok: true,\n\t\t\t\tretval: this.fn.call(null, this.createExecutionContext())\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn ",
      "startLine": 622,
      "startCol": 21,
      "endLine": 622,
      "endCol": 21,
      "file": "node_modules/ava/lib/test.js",
      "triggers": [],
      "uniqueid": 46
    },
    "47": {
      "source": "test/lib/lbt/graph/dependencyGraph.js:133:24:133:24",
      "startTime": "1522351685771729",
      "endTime": "1522351964847873",
      "elapsedTime": "279076144",
      "asyncId": 185,
      "triggerAsyncId": 131,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t}];\n\n\tconst oResult = await dependencyGraph(pool, roots);\n\tcheckNZero(t, oResult);\n\tt.deepEqual(Array.from(oResult.nodes.keys()), [\"\", \"myroot\"]);",
      "startLine": 133,
      "startCol": 24,
      "endLine": 133,
      "endCol": 24,
      "file": "test/lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        193
      ],
      "uniqueid": 47
    },
    "48": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351686507077",
      "endTime": "1522351686727731",
      "elapsedTime": "220654",
      "asyncId": 186,
      "triggerAsyncId": 131,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        187
      ],
      "uniqueid": 48
    },
    "49": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351687685206",
      "endTime": "1522351808941004",
      "elapsedTime": "121255798",
      "asyncId": 187,
      "triggerAsyncId": 186,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        188
      ],
      "uniqueid": 49
    },
    "50": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351688490966",
      "endTime": "1522351847682844",
      "elapsedTime": "159191878",
      "asyncId": 188,
      "triggerAsyncId": 187,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        189
      ],
      "uniqueid": 50
    },
    "51": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:29:13:29",
      "startTime": "1522351689460664",
      "endTime": "1522351865062045",
      "elapsedTime": "175601381",
      "asyncId": 189,
      "triggerAsyncId": 188,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencie",
      "startLine": 13,
      "startCol": 29,
      "endLine": 13,
      "endCol": 29,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        191
      ],
      "uniqueid": 51
    },
    "52": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:164:13:164",
      "startTime": "1522351697691405",
      "endTime": "1522351945335383",
      "elapsedTime": "247643978",
      "asyncId": 190,
      "triggerAsyncId": 131,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " createDependencyGraph",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) ",
      "startLine": 13,
      "startCol": 164,
      "endLine": 13,
      "endCol": 164,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        192
      ],
      "uniqueid": 52
    },
    "53": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:171:13:171",
      "startTime": "1522351700719551",
      "endTime": "1522351956053837",
      "elapsedTime": "255334286",
      "asyncId": 192,
      "triggerAsyncId": 190,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " createDependencyGraph",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) ",
      "startLine": 13,
      "startCol": 171,
      "endLine": 13,
      "endCol": 171,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        234
      ],
      "uniqueid": 53
    },
    "54": {
      "source": "node_modules/ava/lib/test.js:622:21:622:21",
      "startTime": "1522351702796195",
      "endTime": "1522351971901316",
      "elapsedTime": "269105121",
      "asyncId": 193,
      "triggerAsyncId": 185,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Test.callFn",
      "userCode": false,
      "line": "\n\t\t\treturn {\n\t\t\t\tok: true,\n\t\t\t\tretval: this.fn.call(null, this.createExecutionContext())\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn ",
      "startLine": 622,
      "startCol": 21,
      "endLine": 622,
      "endCol": 21,
      "file": "node_modules/ava/lib/test.js",
      "triggers": [],
      "uniqueid": 54
    },
    "55": {
      "source": "test/lib/lbt/graph/dependencyGraph.js:167:24:167:24",
      "startTime": "1522351716700150",
      "endTime": "1522352100685749",
      "elapsedTime": "383985599",
      "asyncId": 201,
      "triggerAsyncId": 138,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tname: \"myroot\"\n\t}];\n\tconst oResult = await dependencyGraph(pool, roots);\n\tcheckNZero(t, oResult);\n\tt.deepEqual(Array.from(oResult.nodes.keys()), [\n\t\t\"\"",
      "startLine": 167,
      "startCol": 24,
      "endLine": 167,
      "endCol": 24,
      "file": "test/lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        209
      ],
      "uniqueid": 55
    },
    "56": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351717890933",
      "endTime": "1522351718257961",
      "elapsedTime": "367028",
      "asyncId": 202,
      "triggerAsyncId": 138,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        203,
        203
      ],
      "uniqueid": 56
    },
    "57": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351719559070",
      "endTime": "1522352047911493",
      "elapsedTime": "328352423",
      "asyncId": 203,
      "triggerAsyncId": 202,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        235,
        239,
        204
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 57
    },
    "58": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351720973461",
      "endTime": "1522352051795975",
      "elapsedTime": "330822514",
      "asyncId": 204,
      "triggerAsyncId": 203,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        205
      ],
      "uniqueid": 58
    },
    "59": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:29:13:29",
      "startTime": "1522351722046673",
      "endTime": "1522352065588662",
      "elapsedTime": "343541989",
      "asyncId": 205,
      "triggerAsyncId": 204,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencie",
      "startLine": 13,
      "startCol": 29,
      "endLine": 13,
      "endCol": 29,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        207
      ],
      "uniqueid": 59
    },
    "60": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:164:13:164",
      "startTime": "1522351723354014",
      "endTime": "1522352075940679",
      "elapsedTime": "352586665",
      "asyncId": 206,
      "triggerAsyncId": 138,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " createDependencyGraph",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) ",
      "startLine": 13,
      "startCol": 164,
      "endLine": 13,
      "endCol": 164,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        208
      ],
      "uniqueid": 60
    },
    "61": {
      "source": "lib/lbt/graph/dependencyGraph.js:13:171:13:171",
      "startTime": "1522351726343068",
      "endTime": "1522352083491946",
      "elapsedTime": "357148878",
      "asyncId": 208,
      "triggerAsyncId": 206,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " createDependencyGraph",
      "userCode": false,
      "line": "\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) ",
      "startLine": 13,
      "startCol": 171,
      "endLine": 13,
      "endCol": 171,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        241
      ],
      "uniqueid": 61
    },
    "62": {
      "source": "node_modules/ava/lib/test.js:622:21:622:21",
      "startTime": "1522351728438847",
      "endTime": "1522352104731213",
      "elapsedTime": "376292366",
      "asyncId": 209,
      "triggerAsyncId": 201,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " Test.callFn",
      "userCode": false,
      "line": "\n\t\t\treturn {\n\t\t\t\tok: true,\n\t\t\t\tretval: this.fn.call(null, this.createExecutionContext())\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn ",
      "startLine": 622,
      "startCol": 21,
      "endLine": 622,
      "endCol": 21,
      "file": "node_modules/ava/lib/test.js",
      "triggers": [],
      "uniqueid": 62
    },
    "63": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351752245678",
      "endTime": "1522351752832768",
      "elapsedTime": "587090",
      "asyncId": 215,
      "triggerAsyncId": 150,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        216,
        216
      ],
      "uniqueid": 63
    },
    "64": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351754557412",
      "endTime": "1522351976161754",
      "elapsedTime": "221604342",
      "asyncId": 216,
      "triggerAsyncId": 215,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        242,
        246,
        217
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 64
    },
    "65": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351756292645",
      "endTime": "1522351981543923",
      "elapsedTime": "225251278",
      "asyncId": 217,
      "triggerAsyncId": 216,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        218
      ],
      "uniqueid": 65
    },
    "66": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351758055650",
      "endTime": "1522351984461323",
      "elapsedTime": "226405673",
      "asyncId": 218,
      "triggerAsyncId": 217,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        220
      ],
      "uniqueid": 66
    },
    "67": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351759695404",
      "endTime": "1522351986825645",
      "elapsedTime": "227130241",
      "asyncId": 219,
      "triggerAsyncId": 150,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        248
      ],
      "uniqueid": 67
    },
    "68": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351763436948",
      "endTime": "1522352045233252",
      "elapsedTime": "281796304",
      "asyncId": 221,
      "triggerAsyncId": 155,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 68
    },
    "69": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:413:11:413",
      "startTime": "1522351765165639",
      "endTime": "1522351765420566",
      "elapsedTime": "254927",
      "asyncId": 222,
      "triggerAsyncId": 166,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencie",
      "startLine": 11,
      "startCol": 413,
      "endLine": 11,
      "endCol": 413,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        223
      ],
      "uniqueid": 69
    },
    "70": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351767187579",
      "endTime": "1522351844433913",
      "elapsedTime": "77246334",
      "asyncId": 223,
      "triggerAsyncId": 222,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        225
      ],
      "uniqueid": 70
    },
    "71": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351768820671",
      "endTime": "1522351863994073",
      "elapsedTime": "95173402",
      "asyncId": 224,
      "triggerAsyncId": 166,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        249
      ],
      "uniqueid": 71
    },
    "72": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351772234380",
      "endTime": "1522351772711475",
      "elapsedTime": "477095",
      "asyncId": 226,
      "triggerAsyncId": 170,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        227,
        227
      ],
      "uniqueid": 72
    },
    "73": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351774640061",
      "endTime": "1522351944653695",
      "elapsedTime": "170013634",
      "asyncId": 227,
      "triggerAsyncId": 226,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        250,
        228
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 73
    },
    "74": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351776360265",
      "endTime": "1522351955538772",
      "elapsedTime": "179178507",
      "asyncId": 228,
      "triggerAsyncId": 227,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        229
      ],
      "uniqueid": 74
    },
    "75": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351778049241",
      "endTime": "1522351962024159",
      "elapsedTime": "183974918",
      "asyncId": 229,
      "triggerAsyncId": 228,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        231
      ],
      "uniqueid": 75
    },
    "76": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351780362689",
      "endTime": "1522351965880399",
      "elapsedTime": "185517710",
      "asyncId": 230,
      "triggerAsyncId": 170,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        251
      ],
      "uniqueid": 76
    },
    "77": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351805249013",
      "endTime": "1522351990728692",
      "elapsedTime": "185479679",
      "asyncId": 232,
      "triggerAsyncId": 176,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 77
    },
    "78": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351810501730",
      "endTime": "1522351964906393",
      "elapsedTime": "154404663",
      "asyncId": 234,
      "triggerAsyncId": 192,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 78
    },
    "79": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351813746634",
      "endTime": "1522351814239487",
      "elapsedTime": "492853",
      "asyncId": 235,
      "triggerAsyncId": 203,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        236,
        236
      ],
      "uniqueid": 79
    },
    "80": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351815869834",
      "endTime": "1522352019922813",
      "elapsedTime": "204052979",
      "asyncId": 236,
      "triggerAsyncId": 235,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        252,
        256,
        260,
        237
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 80
    },
    "81": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351817365027",
      "endTime": "1522352021485242",
      "elapsedTime": "204120215",
      "asyncId": 237,
      "triggerAsyncId": 236,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        238
      ],
      "uniqueid": 81
    },
    "82": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351818878785",
      "endTime": "1522352040849904",
      "elapsedTime": "221971119",
      "asyncId": 238,
      "triggerAsyncId": 237,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        240
      ],
      "uniqueid": 82
    },
    "83": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351821390183",
      "endTime": "1522352043203056",
      "elapsedTime": "221812873",
      "asyncId": 239,
      "triggerAsyncId": 203,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        263
      ],
      "uniqueid": 83
    },
    "84": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351825184256",
      "endTime": "1522352101113120",
      "elapsedTime": "275928864",
      "asyncId": 241,
      "triggerAsyncId": 208,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 84
    },
    "85": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351826944335",
      "endTime": "1522351827414677",
      "elapsedTime": "470342",
      "asyncId": 242,
      "triggerAsyncId": 216,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        243,
        243
      ],
      "uniqueid": 85
    },
    "86": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351829545462",
      "endTime": "1522351954189823",
      "elapsedTime": "124644361",
      "asyncId": 243,
      "triggerAsyncId": 242,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        264,
        244
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 86
    },
    "87": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351831076742",
      "endTime": "1522351961273031",
      "elapsedTime": "130196289",
      "asyncId": 244,
      "triggerAsyncId": 243,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        245
      ],
      "uniqueid": 87
    },
    "88": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351832769005",
      "endTime": "1522351965758881",
      "elapsedTime": "132989876",
      "asyncId": 245,
      "triggerAsyncId": 244,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        247
      ],
      "uniqueid": 88
    },
    "89": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351833974114",
      "endTime": "1522351973051623",
      "elapsedTime": "139077509",
      "asyncId": 246,
      "triggerAsyncId": 216,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        265
      ],
      "uniqueid": 89
    },
    "90": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351844140152",
      "endTime": "1522351989252945",
      "elapsedTime": "145112793",
      "asyncId": 248,
      "triggerAsyncId": 219,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 90
    },
    "91": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351845203836",
      "endTime": "1522351943624165",
      "elapsedTime": "98420329",
      "asyncId": 249,
      "triggerAsyncId": 224,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 91
    },
    "92": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351845795325",
      "endTime": "1522351845937442",
      "elapsedTime": "142117",
      "asyncId": 250,
      "triggerAsyncId": 227,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        266
      ],
      "uniqueid": 92
    },
    "93": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351847286080",
      "endTime": "1522351974673012",
      "elapsedTime": "127386932",
      "asyncId": 251,
      "triggerAsyncId": 230,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 93
    },
    "94": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351849240093",
      "endTime": "1522351849514748",
      "elapsedTime": "274655",
      "asyncId": 252,
      "triggerAsyncId": 236,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        253,
        253
      ],
      "uniqueid": 94
    },
    "95": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351850668351",
      "endTime": "1522351983960904",
      "elapsedTime": "133292553",
      "asyncId": 253,
      "triggerAsyncId": 252,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        267,
        271,
        275,
        277,
        254
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 95
    },
    "96": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351851925327",
      "endTime": "1522351986578732",
      "elapsedTime": "134653405",
      "asyncId": 254,
      "triggerAsyncId": 253,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        255
      ],
      "uniqueid": 96
    },
    "97": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351853362061",
      "endTime": "1522351988114251",
      "elapsedTime": "134752190",
      "asyncId": 255,
      "triggerAsyncId": 254,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        261
      ],
      "uniqueid": 97
    },
    "98": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351854749672",
      "endTime": "1522351855209524",
      "elapsedTime": "459852",
      "asyncId": 256,
      "triggerAsyncId": 236,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        257,
        257
      ],
      "uniqueid": 98
    },
    "99": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351856723543",
      "endTime": "1522351960356994",
      "elapsedTime": "103633451",
      "asyncId": 257,
      "triggerAsyncId": 256,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        281,
        258
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 99
    },
    "100": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351857978685",
      "endTime": "1522351965680835",
      "elapsedTime": "107702150",
      "asyncId": 258,
      "triggerAsyncId": 257,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        259
      ],
      "uniqueid": 100
    },
    "101": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351859534833",
      "endTime": "1522351972790824",
      "elapsedTime": "113255991",
      "asyncId": 259,
      "triggerAsyncId": 258,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        262
      ],
      "uniqueid": 101
    },
    "102": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351860627401",
      "endTime": "1522352002705806",
      "elapsedTime": "142078405",
      "asyncId": 260,
      "triggerAsyncId": 236,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        282
      ],
      "uniqueid": 102
    },
    "103": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351862884863",
      "endTime": "1522352048299179",
      "elapsedTime": "185414316",
      "asyncId": 263,
      "triggerAsyncId": 239,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 103
    },
    "104": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351863251080",
      "endTime": "1522351863333203",
      "elapsedTime": "82123",
      "asyncId": 264,
      "triggerAsyncId": 243,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        283
      ],
      "uniqueid": 104
    },
    "105": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351863910676",
      "endTime": "1522351976476053",
      "elapsedTime": "112565377",
      "asyncId": 265,
      "triggerAsyncId": 246,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 105
    },
    "106": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351864767122",
      "endTime": "1522351945075887",
      "elapsedTime": "80308765",
      "asyncId": 266,
      "triggerAsyncId": 250,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 106
    },
    "107": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351865822831",
      "endTime": "1522351880102050",
      "elapsedTime": "14279219",
      "asyncId": 267,
      "triggerAsyncId": 253,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        268,
        268
      ],
      "uniqueid": 107
    },
    "108": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351881640083",
      "endTime": "1522351965081050",
      "elapsedTime": "83440967",
      "asyncId": 268,
      "triggerAsyncId": 267,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        284,
        269
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 108
    },
    "109": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351887124896",
      "endTime": "1522351972210166",
      "elapsedTime": "85085270",
      "asyncId": 269,
      "triggerAsyncId": 268,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        270
      ],
      "uniqueid": 109
    },
    "110": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351888560096",
      "endTime": "1522351975124699",
      "elapsedTime": "86564603",
      "asyncId": 270,
      "triggerAsyncId": 269,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        278
      ],
      "uniqueid": 110
    },
    "111": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:542:11:542",
      "startTime": "1522351889763262",
      "endTime": "1522351890235197",
      "elapsedTime": "471935",
      "asyncId": 271,
      "triggerAsyncId": 253,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 542,
      "endLine": 11,
      "endCol": 542,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        272,
        272
      ],
      "uniqueid": 111
    },
    "112": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:562:11:562",
      "startTime": "1522351891322105",
      "endTime": "1522351965449111",
      "elapsedTime": "74127006",
      "asyncId": 272,
      "triggerAsyncId": 271,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "triggers": [
        285,
        273
      ],
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) ",
      "startLine": 11,
      "startCol": 562,
      "endLine": 11,
      "endCol": 562,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "uniqueid": 112
    },
    "113": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1207:11:1207",
      "startTime": "1522351914618979",
      "endTime": "1522351972498987",
      "elapsedTime": "57880008",
      "asyncId": 273,
      "triggerAsyncId": 272,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with root",
      "startLine": 11,
      "startCol": 1207,
      "endLine": 11,
      "endCol": 1207,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        274
      ],
      "uniqueid": 113
    },
    "114": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351915909879",
      "endTime": "1522351975377103",
      "elapsedTime": "59467224",
      "asyncId": 274,
      "triggerAsyncId": 273,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        279
      ],
      "uniqueid": 114
    },
    "115": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:413:11:413",
      "startTime": "1522351918325898",
      "endTime": "1522351918358740",
      "elapsedTime": "32842",
      "asyncId": 275,
      "triggerAsyncId": 253,
      "io": false,
      "createdIn": 1626798636193,
      "functionName": " visitNode",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencie",
      "startLine": 11,
      "startCol": 413,
      "endLine": 11,
      "endCol": 413,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        276
      ],
      "uniqueid": 115
    },
    "116": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:918:11:918",
      "startTime": "1522351918721210",
      "endTime": "1522351950320509",
      "elapsedTime": "31599299",
      "asyncId": 276,
      "triggerAsyncId": 275,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t",
      "startLine": 11,
      "startCol": 918,
      "endLine": 11,
      "endCol": 918,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        280
      ],
      "uniqueid": 116
    },
    "117": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351932202312",
      "endTime": "1522351980930614",
      "elapsedTime": "48728302",
      "asyncId": 277,
      "triggerAsyncId": 253,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        286
      ],
      "uniqueid": 117
    },
    "118": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351937907769",
      "endTime": "1522351938349056",
      "elapsedTime": "441287",
      "asyncId": 281,
      "triggerAsyncId": 257,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        287
      ],
      "uniqueid": 118
    },
    "119": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351940593333",
      "endTime": "1522352020087291",
      "elapsedTime": "79493958",
      "asyncId": 282,
      "triggerAsyncId": 260,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 119
    },
    "120": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351942082405",
      "endTime": "1522351954606594",
      "elapsedTime": "12524189",
      "asyncId": 283,
      "triggerAsyncId": 264,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 120
    },
    "121": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351947243891",
      "endTime": "1522351947454556",
      "elapsedTime": "210665",
      "asyncId": 284,
      "triggerAsyncId": 268,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        288
      ],
      "uniqueid": 121
    },
    "122": {
      "source": "lib/lbt/graph/dependencyGraph.js:11:1089:11:1089",
      "startTime": "1522351949372281",
      "endTime": "1522351949395234",
      "elapsedTime": "22953",
      "asyncId": 285,
      "triggerAsyncId": 272,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err)",
      "startLine": 11,
      "startCol": 1089,
      "endLine": 11,
      "endCol": 1089,
      "file": "lib/lbt/graph/dependencyGraph.js",
      "triggers": [
        289
      ],
      "uniqueid": 122
    },
    "123": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351951670740",
      "endTime": "1522351984225220",
      "elapsedTime": "32554480",
      "asyncId": 286,
      "triggerAsyncId": 277,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 123
    },
    "124": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351952977290",
      "endTime": "1522351960844428",
      "elapsedTime": "7867138",
      "asyncId": 287,
      "triggerAsyncId": 281,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 124
    },
    "125": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351957481814",
      "endTime": "1522351965168735",
      "elapsedTime": "7686921",
      "asyncId": 288,
      "triggerAsyncId": 284,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 125
    },
    "126": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "1522351958608286",
      "endTime": "1522351965565108",
      "elapsedTime": "6956822",
      "asyncId": 289,
      "triggerAsyncId": 285,
      "io": "",
      "createdIn": 1626798636193,
      "functionName": "",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 126
    }
  },
  "antipatterns": {
    "0": {
      "patternID": "pattern2",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "185",
      "startCol": "11",
      "endLine": "188",
      "endCol": "5"
    },
    "1": {
      "patternID": "pattern2",
      "file": "lib/types/application/ApplicationFormatter.js",
      "startLine": "177",
      "startCol": "10",
      "endLine": "223",
      "endCol": "4"
    },
    "2": {
      "patternID": "pattern2",
      "file": "lib/types/library/LibraryFormatter.js",
      "startLine": "453",
      "startCol": "10",
      "endLine": "512",
      "endCol": "4"
    },
    "3": {
      "patternID": "pattern2",
      "file": "lib/types/module/ModuleFormatter.js",
      "startLine": "16",
      "startCol": "10",
      "endLine": "50",
      "endCol": "4"
    },
    "4": {
      "patternID": "pattern2",
      "file": "lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "38",
      "startCol": "10",
      "endLine": "86",
      "endCol": "4"
    },
    "5": {
      "patternID": "pattern1",
      "file": "lib/types/application/ApplicationFormatter.js",
      "startLine": "59",
      "startCol": "20",
      "endLine": "83",
      "endCol": "2"
    },
    "6": {
      "patternID": "pattern9",
      "file": "lib/lbt/resources/ResourceCollector.js",
      "startLine": "245",
      "startCol": "19",
      "endLine": "252",
      "endCol": "6"
    },
    "7": {
      "patternID": "pattern7",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "121",
      "startCol": "4",
      "endLine": "123",
      "endCol": "4"
    },
    "8": {
      "patternID": "pattern7",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "162",
      "startCol": "3",
      "endLine": "174",
      "endCol": "3"
    },
    "9": {
      "patternID": "pattern7",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "263",
      "startCol": "3",
      "endLine": "281",
      "endCol": "3"
    },
    "10": {
      "patternID": "pattern7",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "306",
      "startCol": "4",
      "endLine": "323",
      "endCol": "4"
    },
    "11": {
      "patternID": "pattern7",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "366",
      "startCol": "4",
      "endLine": "389",
      "endCol": "4"
    },
    "12": {
      "patternID": "pattern7",
      "file": "test/lib/builder/builder.js",
      "startLine": "67",
      "startCol": "2",
      "endLine": "92",
      "endCol": "2"
    },
    "13": {
      "patternID": "pattern8",
      "file": "lib/lbt/resources/ResourceCollector.js",
      "startLine": "245",
      "startCol": "19",
      "endLine": "252",
      "endCol": "6"
    },
    "14": {
      "patternID": "pattern8",
      "file": "lib/processors/bundlers/manifestBundler.js",
      "startLine": "151",
      "startCol": "30",
      "endLine": "172",
      "endCol": "3"
    },
    "15": {
      "patternID": "pattern8",
      "file": "lib/processors/jsdoc/lib/transformApiJson.js",
      "startLine": "739",
      "startCol": "10",
      "endLine": "750",
      "endCol": "4"
    },
    "16": {
      "patternID": "pattern8",
      "file": "lib/processors/jsdoc/lib/transformApiJson.js",
      "startLine": "759",
      "startCol": "19",
      "endLine": "763",
      "endCol": "5"
    },
    "17": {
      "patternID": "pattern8",
      "file": "lib/processors/jsdoc/lib/transformApiJson.js",
      "startLine": "835",
      "startCol": "10",
      "endLine": "840",
      "endCol": "4"
    },
    "18": {
      "patternID": "pattern8",
      "file": "lib/processors/jsdoc/lib/transformApiJson.js",
      "startLine": "918",
      "startCol": "10",
      "endLine": "938",
      "endCol": "4"
    },
    "19": {
      "patternID": "pattern8",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "462",
      "startCol": "10",
      "endLine": "466",
      "endCol": "4"
    },
    "20": {
      "patternID": "pattern10",
      "file": "lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "122",
      "startCol": "24",
      "endLine": "144",
      "endCol": "2"
    },
    "21": {
      "patternID": "pattern10",
      "file": "lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "82",
      "startCol": "24",
      "endLine": "105",
      "endCol": "2"
    },
    "22": {
      "patternID": "pattern10",
      "file": "lib/lbt/graph/dependencyGraph.js",
      "startLine": "23",
      "startCol": "1",
      "endLine": "65",
      "endCol": "1"
    },
    "23": {
      "patternID": "pattern10",
      "file": "lib/lbt/resources/Resource.js",
      "startLine": "18",
      "startCol": "14",
      "endLine": "20",
      "endCol": "2"
    },
    "24": {
      "patternID": "pattern10",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "194",
      "startCol": "20",
      "endLine": "202",
      "endCol": "2"
    },
    "25": {
      "patternID": "pattern10",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "204",
      "startCol": "28",
      "endLine": "212",
      "endCol": "2"
    },
    "26": {
      "patternID": "pattern10",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "220",
      "startCol": "21",
      "endLine": "225",
      "endCol": "2"
    },
    "27": {
      "patternID": "pattern10",
      "file": "lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "77",
      "startCol": "1",
      "endLine": "116",
      "endCol": "1"
    },
    "28": {
      "patternID": "pattern10",
      "file": "lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "142",
      "startCol": "1",
      "endLine": "162",
      "endCol": "1"
    },
    "29": {
      "patternID": "pattern10",
      "file": "lib/processors/libraryLessGenerator.js",
      "startLine": "22",
      "startCol": "19",
      "endLine": "22",
      "endCol": "76"
    },
    "30": {
      "patternID": "pattern10",
      "file": "lib/processors/themeBuilder.js",
      "startLine": "144",
      "startCol": "18",
      "endLine": "158",
      "endCol": "1"
    },
    "31": {
      "patternID": "pattern10",
      "file": "lib/tasks/generateCachebusterInfo.js",
      "startLine": "4",
      "startCol": "1",
      "endLine": "6",
      "endCol": "1"
    },
    "32": {
      "patternID": "pattern10",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "114",
      "startCol": "12",
      "endLine": "116",
      "endCol": "3"
    },
    "33": {
      "patternID": "pattern10",
      "file": "lib/types/AbstractUi5Formatter.js",
      "startLine": "75",
      "startCol": "14",
      "endLine": "92",
      "endCol": "2"
    },
    "34": {
      "patternID": "pattern10",
      "file": "lib/types/AbstractUi5Formatter.js",
      "startLine": "80",
      "startCol": "45",
      "endLine": "88",
      "endCol": "3"
    },
    "35": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "13",
      "startCol": "44",
      "endLine": "24",
      "endCol": "3"
    },
    "36": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "26",
      "startCol": "36",
      "endLine": "34",
      "endCol": "3"
    },
    "37": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "36",
      "startCol": "34",
      "endLine": "44",
      "endCol": "3"
    },
    "38": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "46",
      "startCol": "45",
      "endLine": "55",
      "endCol": "3"
    },
    "39": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "58",
      "startCol": "43",
      "endLine": "67",
      "endCol": "4"
    },
    "40": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "72",
      "startCol": "45",
      "endLine": "84",
      "endCol": "4"
    },
    "41": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "87",
      "startCol": "45",
      "endLine": "98",
      "endCol": "4"
    },
    "42": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "101",
      "startCol": "47",
      "endLine": "111",
      "endCol": "3"
    },
    "43": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "113",
      "startCol": "42",
      "endLine": "121",
      "endCol": "3"
    },
    "44": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "125",
      "startCol": "35",
      "endLine": "138",
      "endCol": "4"
    },
    "45": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "141",
      "startCol": "36",
      "endLine": "149",
      "endCol": "3"
    },
    "46": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "151",
      "startCol": "26",
      "endLine": "160",
      "endCol": "3"
    },
    "47": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "162",
      "startCol": "39",
      "endLine": "171",
      "endCol": "3"
    },
    "48": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "174",
      "startCol": "44",
      "endLine": "185",
      "endCol": "4"
    },
    "49": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationBuilder.js",
      "startLine": "188",
      "startCol": "36",
      "endLine": "196",
      "endCol": "3"
    },
    "50": {
      "patternID": "pattern10",
      "file": "lib/types/application/ApplicationFormatter.js",
      "startLine": "147",
      "startCol": "15",
      "endLine": "167",
      "endCol": "2"
    },
    "51": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "13",
      "startCol": "44",
      "endLine": "24",
      "endCol": "3"
    },
    "52": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "26",
      "startCol": "36",
      "endLine": "34",
      "endCol": "3"
    },
    "53": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "36",
      "startCol": "34",
      "endLine": "44",
      "endCol": "3"
    },
    "54": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "47",
      "startCol": "34",
      "endLine": "69",
      "endCol": "4"
    },
    "55": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "71",
      "startCol": "50",
      "endLine": "80",
      "endCol": "4"
    },
    "56": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "85",
      "startCol": "45",
      "endLine": "97",
      "endCol": "4"
    },
    "57": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "100",
      "startCol": "43",
      "endLine": "109",
      "endCol": "3"
    },
    "58": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "113",
      "startCol": "43",
      "endLine": "121",
      "endCol": "4"
    },
    "59": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "124",
      "startCol": "42",
      "endLine": "137",
      "endCol": "3"
    },
    "60": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "141",
      "startCol": "35",
      "endLine": "156",
      "endCol": "4"
    },
    "61": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "159",
      "startCol": "31",
      "endLine": "175",
      "endCol": "3"
    },
    "62": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "177",
      "startCol": "50",
      "endLine": "187",
      "endCol": "3"
    },
    "63": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "189",
      "startCol": "36",
      "endLine": "196",
      "endCol": "3"
    },
    "64": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryBuilder.js",
      "startLine": "198",
      "startCol": "26",
      "endLine": "206",
      "endCol": "3"
    },
    "65": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryFormatter.js",
      "startLine": "422",
      "startCol": "24",
      "endLine": "443",
      "endCol": "2"
    },
    "66": {
      "patternID": "pattern10",
      "file": "lib/types/library/LibraryFormatter.js",
      "startLine": "430",
      "startCol": "11",
      "endLine": "442",
      "endCol": "3"
    },
    "67": {
      "patternID": "pattern10",
      "file": "lib/types/themeLibrary/ThemeLibraryBuilder.js",
      "startLine": "6",
      "startCol": "36",
      "endLine": "14",
      "endCol": "3"
    },
    "68": {
      "patternID": "pattern10",
      "file": "lib/types/themeLibrary/ThemeLibraryBuilder.js",
      "startLine": "16",
      "startCol": "34",
      "endLine": "24",
      "endCol": "3"
    },
    "69": {
      "patternID": "pattern10",
      "file": "lib/types/themeLibrary/ThemeLibraryBuilder.js",
      "startLine": "26",
      "startCol": "31",
      "endLine": "37",
      "endCol": "3"
    },
    "70": {
      "patternID": "pattern10",
      "file": "lib/types/themeLibrary/ThemeLibraryBuilder.js",
      "startLine": "39",
      "startCol": "50",
      "endLine": "48",
      "endCol": "3"
    },
    "71": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "10",
      "startCol": "21",
      "endLine": "19",
      "endCol": "3"
    },
    "72": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "15",
      "startCol": "17",
      "endLine": "17",
      "endCol": "5"
    },
    "73": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "350",
      "startCol": "21",
      "endLine": "354",
      "endCol": "3"
    },
    "74": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "352",
      "startCol": "13",
      "endLine": "352",
      "endCol": "48"
    },
    "75": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "373",
      "startCol": "21",
      "endLine": "379",
      "endCol": "3"
    },
    "76": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "375",
      "startCol": "13",
      "endLine": "377",
      "endCol": "5"
    },
    "77": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "17",
      "startCol": "21",
      "endLine": "23",
      "endCol": "3"
    },
    "78": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "19",
      "startCol": "13",
      "endLine": "21",
      "endCol": "5"
    },
    "79": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "52",
      "startCol": "21",
      "endLine": "56",
      "endCol": "3"
    },
    "80": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "54",
      "startCol": "13",
      "endLine": "54",
      "endCol": "48"
    },
    "81": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "136",
      "startCol": "21",
      "endLine": "140",
      "endCol": "3"
    },
    "82": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "138",
      "startCol": "13",
      "endLine": "138",
      "endCol": "26"
    },
    "83": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "170",
      "startCol": "21",
      "endLine": "174",
      "endCol": "3"
    },
    "84": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "172",
      "startCol": "13",
      "endLine": "172",
      "endCol": "26"
    },
    "85": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "199",
      "startCol": "21",
      "endLine": "203",
      "endCol": "3"
    },
    "86": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "201",
      "startCol": "13",
      "endLine": "201",
      "endCol": "26"
    },
    "87": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "19",
      "startCol": "21",
      "endLine": "25",
      "endCol": "3"
    },
    "88": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "21",
      "startCol": "13",
      "endLine": "23",
      "endCol": "5"
    },
    "89": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "200",
      "startCol": "21",
      "endLine": "204",
      "endCol": "3"
    },
    "90": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "202",
      "startCol": "13",
      "endLine": "202",
      "endCol": "26"
    },
    "91": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "237",
      "startCol": "21",
      "endLine": "241",
      "endCol": "3"
    },
    "92": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "239",
      "startCol": "13",
      "endLine": "239",
      "endCol": "26"
    },
    "93": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "269",
      "startCol": "21",
      "endLine": "273",
      "endCol": "3"
    },
    "94": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "271",
      "startCol": "13",
      "endLine": "271",
      "endCol": "26"
    },
    "95": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "308",
      "startCol": "21",
      "endLine": "310",
      "endCol": "3"
    },
    "96": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "345",
      "startCol": "21",
      "endLine": "347",
      "endCol": "3"
    },
    "97": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "464",
      "startCol": "21",
      "endLine": "468",
      "endCol": "3"
    },
    "98": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/XMLCompositeAnalyzer.js",
      "startLine": "109",
      "startCol": "77",
      "endLine": "121",
      "endCol": "1"
    },
    "99": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/analyzer/XMLCompositeAnalyzer.js",
      "startLine": "123",
      "startCol": "53",
      "endLine": "133",
      "endCol": "1"
    },
    "100": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "11",
      "startCol": "29",
      "endLine": "35",
      "endCol": "3"
    },
    "101": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "21",
      "startCol": "13",
      "endLine": "21",
      "endCol": "61"
    },
    "102": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "32",
      "startCol": "17",
      "endLine": "32",
      "endCol": "65"
    },
    "103": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "170",
      "startCol": "13",
      "endLine": "170",
      "endCol": "39"
    },
    "104": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "189",
      "startCol": "13",
      "endLine": "189",
      "endCol": "39"
    },
    "105": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "205",
      "startCol": "13",
      "endLine": "205",
      "endCol": "44"
    },
    "106": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "210",
      "startCol": "17",
      "endLine": "210",
      "endCol": "58"
    },
    "107": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "232",
      "startCol": "13",
      "endLine": "232",
      "endCol": "31"
    },
    "108": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "246",
      "startCol": "13",
      "endLine": "246",
      "endCol": "32"
    },
    "109": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "260",
      "startCol": "13",
      "endLine": "260",
      "endCol": "29"
    },
    "110": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/AutoSplitter.js",
      "startLine": "277",
      "startCol": "13",
      "endLine": "277",
      "endCol": "45"
    },
    "111": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "33",
      "startCol": "11",
      "endLine": "35",
      "endCol": "3"
    },
    "112": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "55",
      "startCol": "11",
      "endLine": "55",
      "endCol": "49"
    },
    "113": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "59",
      "startCol": "11",
      "endLine": "59",
      "endCol": "24"
    },
    "114": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "63",
      "startCol": "11",
      "endLine": "73",
      "endCol": "11"
    },
    "115": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "114",
      "startCol": "11",
      "endLine": "114",
      "endCol": "86"
    },
    "116": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "118",
      "startCol": "11",
      "endLine": "118",
      "endCol": "66"
    },
    "117": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "122",
      "startCol": "11",
      "endLine": "122",
      "endCol": "58"
    },
    "118": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "171",
      "startCol": "11",
      "endLine": "171",
      "endCol": "86"
    },
    "119": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "175",
      "startCol": "11",
      "endLine": "175",
      "endCol": "66"
    },
    "120": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "179",
      "startCol": "11",
      "endLine": "179",
      "endCol": "66"
    },
    "121": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "183",
      "startCol": "11",
      "endLine": "183",
      "endCol": "49"
    },
    "122": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "187",
      "startCol": "11",
      "endLine": "190",
      "endCol": "8"
    },
    "123": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "194",
      "startCol": "11",
      "endLine": "194",
      "endCol": "58"
    },
    "124": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "198",
      "startCol": "11",
      "endLine": "198",
      "endCol": "39"
    },
    "125": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "265",
      "startCol": "11",
      "endLine": "265",
      "endCol": "86"
    },
    "126": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "269",
      "startCol": "11",
      "endLine": "269",
      "endCol": "66"
    },
    "127": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "273",
      "startCol": "11",
      "endLine": "273",
      "endCol": "66"
    },
    "128": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "277",
      "startCol": "11",
      "endLine": "277",
      "endCol": "49"
    },
    "129": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "281",
      "startCol": "11",
      "endLine": "284",
      "endCol": "8"
    },
    "130": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "288",
      "startCol": "11",
      "endLine": "288",
      "endCol": "58"
    },
    "131": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "292",
      "startCol": "11",
      "endLine": "292",
      "endCol": "39"
    },
    "132": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "362",
      "startCol": "11",
      "endLine": "362",
      "endCol": "86"
    },
    "133": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "366",
      "startCol": "11",
      "endLine": "366",
      "endCol": "65"
    },
    "134": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "424",
      "startCol": "11",
      "endLine": "424",
      "endCol": "86"
    },
    "135": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "428",
      "startCol": "11",
      "endLine": "428",
      "endCol": "80"
    },
    "136": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "432",
      "startCol": "11",
      "endLine": "432",
      "endCol": "58"
    },
    "137": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "483",
      "startCol": "11",
      "endLine": "483",
      "endCol": "86"
    },
    "138": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "487",
      "startCol": "11",
      "endLine": "487",
      "endCol": "86"
    },
    "139": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "491",
      "startCol": "11",
      "endLine": "491",
      "endCol": "58"
    },
    "140": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "495",
      "startCol": "11",
      "endLine": "495",
      "endCol": "65"
    },
    "141": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "557",
      "startCol": "11",
      "endLine": "557",
      "endCol": "49"
    },
    "142": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "561",
      "startCol": "11",
      "endLine": "561",
      "endCol": "49"
    },
    "143": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "565",
      "startCol": "11",
      "endLine": "565",
      "endCol": "24"
    },
    "144": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "569",
      "startCol": "11",
      "endLine": "579",
      "endCol": "11"
    },
    "145": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/bundle/Resolver.js",
      "startLine": "16",
      "startCol": "13",
      "endLine": "16",
      "endCol": "31"
    },
    "146": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/graph/dependencyGraph.js",
      "startLine": "8",
      "startCol": "22",
      "endLine": "21",
      "endCol": "3"
    },
    "147": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/graph/dependencyGraph.js",
      "startLine": "125",
      "startCol": "22",
      "endLine": "127",
      "endCol": "3"
    },
    "148": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/graph/dominatorTree.js",
      "startLine": "10",
      "startCol": "22",
      "endLine": "23",
      "endCol": "3"
    },
    "149": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/graph/topologicalSort.js",
      "startLine": "9",
      "startCol": "22",
      "endLine": "22",
      "endCol": "3"
    },
    "150": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/LocatorResourcePool.js",
      "startLine": "4",
      "startCol": "33",
      "endLine": "7",
      "endCol": "1"
    },
    "151": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ModuleInfo.js",
      "startLine": "5",
      "startCol": "33",
      "endLine": "14",
      "endCol": "1"
    },
    "152": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ModuleInfo.js",
      "startLine": "16",
      "startCol": "34",
      "endLine": "31",
      "endCol": "1"
    },
    "153": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ModuleInfo.js",
      "startLine": "33",
      "startCol": "26",
      "endLine": "48",
      "endCol": "1"
    },
    "154": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ModuleInfo.js",
      "startLine": "50",
      "startCol": "30",
      "endLine": "63",
      "endCol": "1"
    },
    "155": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/Resource.js",
      "startLine": "25",
      "startCol": "38",
      "endLine": "28",
      "endCol": "1"
    },
    "156": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/Resource.js",
      "startLine": "30",
      "startCol": "48",
      "endLine": "33",
      "endCol": "1"
    },
    "157": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "61",
      "startCol": "75",
      "endLine": "61",
      "endCol": "88"
    },
    "158": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "71",
      "startCol": "12",
      "endLine": "71",
      "endCol": "25"
    },
    "159": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "81",
      "startCol": "101",
      "endLine": "81",
      "endCol": "114"
    },
    "160": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "82",
      "startCol": "90",
      "endLine": "82",
      "endCol": "103"
    },
    "161": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "89",
      "startCol": "97",
      "endLine": "89",
      "endCol": "110"
    },
    "162": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "98",
      "startCol": "18",
      "endLine": "102",
      "endCol": "3"
    },
    "163": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "105",
      "startCol": "61",
      "endLine": "105",
      "endCol": "74"
    },
    "164": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "108",
      "startCol": "71",
      "endLine": "108",
      "endCol": "84"
    },
    "165": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "111",
      "startCol": "68",
      "endLine": "111",
      "endCol": "81"
    },
    "166": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "124",
      "startCol": "97",
      "endLine": "124",
      "endCol": "110"
    },
    "167": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "134",
      "startCol": "95",
      "endLine": "134",
      "endCol": "108"
    },
    "168": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "160",
      "startCol": "81",
      "endLine": "160",
      "endCol": "94"
    },
    "169": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "198",
      "startCol": "18",
      "endLine": "218",
      "endCol": "3"
    },
    "170": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceInfo.js",
      "startLine": "5",
      "startCol": "35",
      "endLine": "10",
      "endCol": "1"
    },
    "171": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceInfo.js",
      "startLine": "12",
      "startCol": "32",
      "endLine": "53",
      "endCol": "1"
    },
    "172": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourceInfo.js",
      "startLine": "55",
      "startCol": "30",
      "endLine": "101",
      "endCol": "1"
    },
    "173": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "45",
      "startCol": "14",
      "endLine": "52",
      "endCol": "1"
    },
    "174": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "54",
      "startCol": "19",
      "endLine": "61",
      "endCol": "1"
    },
    "175": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "63",
      "startCol": "33",
      "endLine": "71",
      "endCol": "1"
    },
    "176": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "75",
      "startCol": "21",
      "endLine": "77",
      "endCol": "2"
    },
    "177": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "104",
      "startCol": "49",
      "endLine": "104",
      "endCol": "64"
    },
    "178": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "119",
      "startCol": "49",
      "endLine": "119",
      "endCol": "64"
    },
    "179": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "132",
      "startCol": "11",
      "endLine": "132",
      "endCol": "24"
    },
    "180": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "158",
      "startCol": "49",
      "endLine": "158",
      "endCol": "64"
    },
    "181": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "233",
      "startCol": "27",
      "endLine": "242",
      "endCol": "1"
    },
    "182": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "266",
      "startCol": "11",
      "endLine": "266",
      "endCol": "24"
    },
    "183": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "271",
      "startCol": "11",
      "endLine": "271",
      "endCol": "41"
    },
    "184": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "276",
      "startCol": "11",
      "endLine": "276",
      "endCol": "74"
    },
    "185": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "32",
      "startCol": "11",
      "endLine": "34",
      "endCol": "3"
    },
    "186": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "63",
      "startCol": "11",
      "endLine": "65",
      "endCol": "3"
    },
    "187": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "92",
      "startCol": "11",
      "endLine": "94",
      "endCol": "3"
    },
    "188": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "118",
      "startCol": "11",
      "endLine": "120",
      "endCol": "3"
    },
    "189": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "144",
      "startCol": "11",
      "endLine": "146",
      "endCol": "3"
    },
    "190": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "170",
      "startCol": "11",
      "endLine": "172",
      "endCol": "3"
    },
    "191": {
      "patternID": "pattern10",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "196",
      "startCol": "11",
      "endLine": "198",
      "endCol": "3"
    },
    "192": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "95",
      "startCol": "15",
      "endLine": "95",
      "endCol": "48"
    },
    "193": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "348",
      "startCol": "15",
      "endLine": "348",
      "endCol": "48"
    },
    "194": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "354",
      "startCol": "15",
      "endLine": "354",
      "endCol": "48"
    },
    "195": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "360",
      "startCol": "15",
      "endLine": "360",
      "endCol": "48"
    },
    "196": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "366",
      "startCol": "15",
      "endLine": "366",
      "endCol": "48"
    },
    "197": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "372",
      "startCol": "15",
      "endLine": "372",
      "endCol": "48"
    },
    "198": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "378",
      "startCol": "15",
      "endLine": "378",
      "endCol": "48"
    },
    "199": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "476",
      "startCol": "15",
      "endLine": "476",
      "endCol": "48"
    },
    "200": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "482",
      "startCol": "15",
      "endLine": "482",
      "endCol": "48"
    },
    "201": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "50",
      "startCol": "14",
      "endLine": "52",
      "endCol": "4"
    },
    "202": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "78",
      "startCol": "14",
      "endLine": "80",
      "endCol": "4"
    },
    "203": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "105",
      "startCol": "14",
      "endLine": "109",
      "endCol": "4"
    },
    "204": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "114",
      "startCol": "14",
      "endLine": "114",
      "endCol": "30"
    },
    "205": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "150",
      "startCol": "14",
      "endLine": "150",
      "endCol": "39"
    },
    "206": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "155",
      "startCol": "14",
      "endLine": "155",
      "endCol": "30"
    },
    "207": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "160",
      "startCol": "14",
      "endLine": "160",
      "endCol": "30"
    },
    "208": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "198",
      "startCol": "14",
      "endLine": "198",
      "endCol": "39"
    },
    "209": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "203",
      "startCol": "14",
      "endLine": "203",
      "endCol": "30"
    },
    "210": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "208",
      "startCol": "14",
      "endLine": "208",
      "endCol": "30"
    },
    "211": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "252",
      "startCol": "14",
      "endLine": "252",
      "endCol": "39"
    },
    "212": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "257",
      "startCol": "14",
      "endLine": "257",
      "endCol": "30"
    },
    "213": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "262",
      "startCol": "14",
      "endLine": "262",
      "endCol": "30"
    },
    "214": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "267",
      "startCol": "14",
      "endLine": "267",
      "endCol": "41"
    },
    "215": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "272",
      "startCol": "14",
      "endLine": "272",
      "endCol": "41"
    },
    "216": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "320",
      "startCol": "14",
      "endLine": "320",
      "endCol": "39"
    },
    "217": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "362",
      "startCol": "14",
      "endLine": "362",
      "endCol": "39"
    },
    "218": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "367",
      "startCol": "14",
      "endLine": "367",
      "endCol": "30"
    },
    "219": {
      "patternID": "pattern10",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "372",
      "startCol": "14",
      "endLine": "372",
      "endCol": "30"
    },
    "220": {
      "patternID": "pattern10",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "570",
      "startCol": "51",
      "endLine": "582",
      "endCol": "1"
    },
    "221": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "116",
      "startCol": "14",
      "endLine": "118",
      "endCol": "3"
    },
    "222": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "147",
      "startCol": "14",
      "endLine": "168",
      "endCol": "3"
    },
    "223": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "193",
      "startCol": "14",
      "endLine": "208",
      "endCol": "3"
    },
    "224": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "235",
      "startCol": "14",
      "endLine": "267",
      "endCol": "3"
    },
    "225": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "314",
      "startCol": "14",
      "endLine": "331",
      "endCol": "3"
    },
    "226": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "358",
      "startCol": "14",
      "endLine": "360",
      "endCol": "3"
    },
    "227": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "396",
      "startCol": "14",
      "endLine": "398",
      "endCol": "3"
    },
    "228": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "432",
      "startCol": "14",
      "endLine": "434",
      "endCol": "3"
    },
    "229": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "466",
      "startCol": "14",
      "endLine": "468",
      "endCol": "3"
    },
    "230": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "541",
      "startCol": "14",
      "endLine": "547",
      "endCol": "3"
    },
    "231": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "606",
      "startCol": "14",
      "endLine": "612",
      "endCol": "3"
    },
    "232": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "681",
      "startCol": "14",
      "endLine": "687",
      "endCol": "3"
    },
    "233": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "706",
      "startCol": "14",
      "endLine": "712",
      "endCol": "3"
    },
    "234": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "771",
      "startCol": "14",
      "endLine": "777",
      "endCol": "3"
    },
    "235": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "796",
      "startCol": "14",
      "endLine": "798",
      "endCol": "3"
    },
    "236": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "857",
      "startCol": "14",
      "endLine": "863",
      "endCol": "3"
    },
    "237": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "882",
      "startCol": "14",
      "endLine": "888",
      "endCol": "3"
    },
    "238": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "947",
      "startCol": "14",
      "endLine": "953",
      "endCol": "3"
    },
    "239": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "972",
      "startCol": "14",
      "endLine": "978",
      "endCol": "3"
    },
    "240": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1037",
      "startCol": "14",
      "endLine": "1043",
      "endCol": "3"
    },
    "241": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1062",
      "startCol": "14",
      "endLine": "1068",
      "endCol": "3"
    },
    "242": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1119",
      "startCol": "14",
      "endLine": "1125",
      "endCol": "3"
    },
    "243": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1144",
      "startCol": "14",
      "endLine": "1152",
      "endCol": "3"
    },
    "244": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1201",
      "startCol": "14",
      "endLine": "1207",
      "endCol": "3"
    },
    "245": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1279",
      "startCol": "14",
      "endLine": "1285",
      "endCol": "3"
    },
    "246": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1304",
      "startCol": "14",
      "endLine": "1306",
      "endCol": "3"
    },
    "247": {
      "patternID": "pattern10",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1328",
      "startCol": "14",
      "endLine": "1331",
      "endCol": "3"
    },
    "248": {
      "patternID": "pattern10",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "14",
      "startCol": "16",
      "endLine": "20",
      "endCol": "1"
    },
    "249": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "98",
      "startCol": "14",
      "endLine": "110",
      "endCol": "3"
    },
    "250": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "145",
      "startCol": "14",
      "endLine": "163",
      "endCol": "3"
    },
    "251": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "170",
      "startCol": "14",
      "endLine": "183",
      "endCol": "3"
    },
    "252": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "229",
      "startCol": "14",
      "endLine": "242",
      "endCol": "3"
    },
    "253": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "248",
      "startCol": "14",
      "endLine": "261",
      "endCol": "3"
    },
    "254": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "302",
      "startCol": "14",
      "endLine": "319",
      "endCol": "3"
    },
    "255": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "326",
      "startCol": "14",
      "endLine": "338",
      "endCol": "3"
    },
    "256": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "384",
      "startCol": "14",
      "endLine": "397",
      "endCol": "3"
    },
    "257": {
      "patternID": "pattern10",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "403",
      "startCol": "14",
      "endLine": "417",
      "endCol": "3"
    },
    "258": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "9",
      "startCol": "23",
      "endLine": "17",
      "endCol": "1"
    },
    "259": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "19",
      "startCol": "16",
      "endLine": "38",
      "endCol": "1"
    },
    "260": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "40",
      "startCol": "16",
      "endLine": "59",
      "endCol": "1"
    },
    "261": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "61",
      "startCol": "18",
      "endLine": "79",
      "endCol": "1"
    },
    "262": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "81",
      "startCol": "23",
      "endLine": "94",
      "endCol": "1"
    },
    "263": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "96",
      "startCol": "29",
      "endLine": "109",
      "endCol": "1"
    },
    "264": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "111",
      "startCol": "39",
      "endLine": "121",
      "endCol": "1"
    },
    "265": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "123",
      "startCol": "39",
      "endLine": "147",
      "endCol": "1"
    },
    "266": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "149",
      "startCol": "39",
      "endLine": "173",
      "endCol": "1"
    },
    "267": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "175",
      "startCol": "39",
      "endLine": "199",
      "endCol": "1"
    },
    "268": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "201",
      "startCol": "45",
      "endLine": "214",
      "endCol": "1"
    },
    "269": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/TaskUtil.js",
      "startLine": "216",
      "startCol": "43",
      "endLine": "228",
      "endCol": "1"
    },
    "270": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/buildThemes.js",
      "startLine": "49",
      "startCol": "11",
      "endLine": "55",
      "endCol": "3"
    },
    "271": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/buildThemes.js",
      "startLine": "103",
      "startCol": "11",
      "endLine": "109",
      "endCol": "3"
    },
    "272": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/buildThemes.js",
      "startLine": "157",
      "startCol": "11",
      "endLine": "163",
      "endCol": "3"
    },
    "273": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "31",
      "startCol": "59",
      "endLine": "56",
      "endCol": "1"
    },
    "274": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "84",
      "startCol": "61",
      "endLine": "109",
      "endCol": "1"
    },
    "275": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/bundlers/generateStandaloneAppBundle.integration.js",
      "startLine": "32",
      "startCol": "53",
      "endLine": "58",
      "endCol": "1"
    },
    "276": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/bundlers/generateStandaloneAppBundle.js",
      "startLine": "31",
      "startCol": "11",
      "endLine": "33",
      "endCol": "3"
    },
    "277": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/bundlers/generateStandaloneAppBundle.js",
      "startLine": "82",
      "startCol": "11",
      "endLine": "84",
      "endCol": "3"
    },
    "278": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/bundlers/generateStandaloneAppBundle.js",
      "startLine": "122",
      "startCol": "11",
      "endLine": "124",
      "endCol": "3"
    },
    "279": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "59",
      "startCol": "34",
      "endLine": "65",
      "endCol": "3"
    },
    "280": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "69",
      "startCol": "34",
      "endLine": "75",
      "endCol": "3"
    },
    "281": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "187",
      "startCol": "34",
      "endLine": "193",
      "endCol": "3"
    },
    "282": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "194",
      "startCol": "34",
      "endLine": "200",
      "endCol": "3"
    },
    "283": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "296",
      "startCol": "34",
      "endLine": "298",
      "endCol": "3"
    },
    "284": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "345",
      "startCol": "34",
      "endLine": "351",
      "endCol": "3"
    },
    "285": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "420",
      "startCol": "34",
      "endLine": "426",
      "endCol": "3"
    },
    "286": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "427",
      "startCol": "34",
      "endLine": "429",
      "endCol": "3"
    },
    "287": {
      "patternID": "pattern10",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "483",
      "startCol": "34",
      "endLine": "489",
      "endCol": "3"
    },
    "288": {
      "patternID": "pattern10",
      "file": "test/lib/types/AbstractUi5Formatter.js",
      "startLine": "35",
      "startCol": "52",
      "endLine": "41",
      "endCol": "1"
    },
    "289": {
      "patternID": "pattern10",
      "file": "test/lib/types/AbstractUi5Formatter.js",
      "startLine": "43",
      "startCol": "55",
      "endLine": "49",
      "endCol": "1"
    },
    "290": {
      "patternID": "pattern10",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "223",
      "startCol": "34",
      "endLine": "230",
      "endCol": "1"
    },
    "291": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1334",
      "startCol": "88",
      "endLine": "1346",
      "endCol": "1"
    },
    "292": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1348",
      "startCol": "89",
      "endLine": "1360",
      "endCol": "1"
    },
    "293": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1362",
      "startCol": "89",
      "endLine": "1374",
      "endCol": "1"
    },
    "294": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1376",
      "startCol": "90",
      "endLine": "1388",
      "endCol": "1"
    },
    "295": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1390",
      "startCol": "101",
      "endLine": "1402",
      "endCol": "1"
    },
    "296": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1404",
      "startCol": "102",
      "endLine": "1416",
      "endCol": "1"
    },
    "297": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1418",
      "startCol": "102",
      "endLine": "1430",
      "endCol": "1"
    },
    "298": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1432",
      "startCol": "103",
      "endLine": "1444",
      "endCol": "1"
    },
    "299": {
      "patternID": "pattern10",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1446",
      "startCol": "66",
      "endLine": "1460",
      "endCol": "1"
    },
    "300": {
      "patternID": "pattern10",
      "file": "test/lib/types/themeLibrary/ThemeLibraryBuilder.js",
      "startLine": "9",
      "startCol": "13",
      "endLine": "11",
      "endCol": "5"
    },
    "301": {
      "patternID": "pattern3",
      "file": "lib/builder/BuildContext.js",
      "startLine": "33",
      "startCol": "3",
      "endLine": "35",
      "endCol": "5"
    },
    "302": {
      "patternID": "pattern3",
      "file": "lib/builder/ProjectBuildContext.js",
      "startLine": "43",
      "startCol": "3",
      "endLine": "45",
      "endCol": "5"
    },
    "303": {
      "patternID": "pattern3",
      "file": "lib/builder/builder.js",
      "startLine": "397",
      "startCol": "5",
      "endLine": "397",
      "endCol": "26"
    },
    "304": {
      "patternID": "pattern3",
      "file": "lib/builder/builder.js",
      "startLine": "399",
      "startCol": "4",
      "endLine": "399",
      "endCol": "27"
    },
    "305": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "55",
      "startCol": "29",
      "endLine": "55",
      "endCol": "89"
    },
    "306": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "57",
      "startCol": "25",
      "endLine": "57",
      "endCol": "55"
    },
    "307": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "99",
      "startCol": "29",
      "endLine": "99",
      "endCol": "89"
    },
    "308": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "101",
      "startCol": "25",
      "endLine": "101",
      "endCol": "55"
    },
    "309": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "149",
      "startCol": "16",
      "endLine": "149",
      "endCol": "38"
    },
    "310": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "58",
      "startCol": "29",
      "endLine": "58",
      "endCol": "89"
    },
    "311": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "60",
      "startCol": "25",
      "endLine": "60",
      "endCol": "55"
    },
    "312": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "111",
      "startCol": "17",
      "endLine": "111",
      "endCol": "39"
    },
    "313": {
      "patternID": "pattern3",
      "file": "lib/lbt/analyzer/analyzeLibraryJS.js",
      "startLine": "65",
      "startCol": "15",
      "endLine": "65",
      "endCol": "40"
    },
    "314": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/AutoSplitter.js",
      "startLine": "50",
      "startCol": "26",
      "endLine": "50",
      "endCol": "63"
    },
    "315": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/AutoSplitter.js",
      "startLine": "85",
      "startCol": "3",
      "endLine": "85",
      "endCol": "29"
    },
    "316": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/AutoSplitter.js",
      "startLine": "199",
      "startCol": "23",
      "endLine": "199",
      "endCol": "45"
    },
    "317": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/AutoSplitter.js",
      "startLine": "202",
      "startCol": "21",
      "endLine": "213",
      "endCol": "7"
    },
    "318": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/AutoSplitter.js",
      "startLine": "236",
      "startCol": "23",
      "endLine": "236",
      "endCol": "45"
    },
    "319": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/AutoSplitter.js",
      "startLine": "250",
      "startCol": "25",
      "endLine": "250",
      "endCol": "47"
    },
    "320": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "117",
      "startCol": "3",
      "endLine": "117",
      "endCol": "23"
    },
    "321": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "142",
      "startCol": "26",
      "endLine": "142",
      "endCol": "60"
    },
    "322": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "169",
      "startCol": "6",
      "endLine": "169",
      "endCol": "45"
    },
    "323": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "176",
      "startCol": "4",
      "endLine": "176",
      "endCol": "43"
    },
    "324": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "182",
      "startCol": "22",
      "endLine": "182",
      "endCol": "69"
    },
    "325": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "285",
      "startCol": "21",
      "endLine": "285",
      "endCol": "43"
    },
    "326": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "336",
      "startCol": "19",
      "endLine": "346",
      "endCol": "5"
    },
    "327": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "370",
      "startCol": "17",
      "endLine": "370",
      "endCol": "39"
    },
    "328": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "412",
      "startCol": "53",
      "endLine": "412",
      "endCol": "75"
    },
    "329": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "421",
      "startCol": "53",
      "endLine": "421",
      "endCol": "75"
    },
    "330": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "424",
      "startCol": "24",
      "endLine": "424",
      "endCol": "46"
    },
    "331": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "427",
      "startCol": "22",
      "endLine": "427",
      "endCol": "44"
    },
    "332": {
      "patternID": "pattern3",
      "file": "lib/lbt/bundle/Builder.js",
      "startLine": "438",
      "startCol": "22",
      "endLine": "438",
      "endCol": "44"
    },
    "333": {
      "patternID": "pattern3",
      "file": "lib/lbt/resources/ResourceCollector.js",
      "startLine": "90",
      "startCol": "24",
      "endLine": "90",
      "endCol": "47"
    },
    "334": {
      "patternID": "pattern3",
      "file": "lib/lbt/resources/ResourceCollector.js",
      "startLine": "137",
      "startCol": "5",
      "endLine": "175",
      "endCol": "7"
    },
    "335": {
      "patternID": "pattern3",
      "file": "lib/lbt/resources/ResourceCollector.js",
      "startLine": "279",
      "startCol": "3",
      "endLine": "279",
      "endCol": "29"
    },
    "336": {
      "patternID": "pattern3",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "65",
      "startCol": "16",
      "endLine": "65",
      "endCol": "38"
    },
    "337": {
      "patternID": "pattern3",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "106",
      "startCol": "3",
      "endLine": "106",
      "endCol": "29"
    },
    "338": {
      "patternID": "pattern3",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "110",
      "startCol": "19",
      "endLine": "110",
      "endCol": "41"
    },
    "339": {
      "patternID": "pattern3",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "114",
      "startCol": "19",
      "endLine": "114",
      "endCol": "41"
    },
    "340": {
      "patternID": "pattern3",
      "file": "lib/lbt/resources/ResourcePool.js",
      "startLine": "118",
      "startCol": "19",
      "endLine": "118",
      "endCol": "41"
    },
    "341": {
      "patternID": "pattern3",
      "file": "lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "37",
      "startCol": "22",
      "endLine": "37",
      "endCol": "44"
    },
    "342": {
      "patternID": "pattern3",
      "file": "lib/processors/bootstrapHtmlTransformer.js",
      "startLine": "16",
      "startCol": "19",
      "endLine": "16",
      "endCol": "44"
    },
    "343": {
      "patternID": "pattern3",
      "file": "lib/processors/jsdoc/apiIndexGenerator.js",
      "startLine": "37",
      "startCol": "22",
      "endLine": "41",
      "endCol": "4"
    },
    "344": {
      "patternID": "pattern3",
      "file": "lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "128",
      "startCol": "2",
      "endLine": "128",
      "endCol": "36"
    },
    "345": {
      "patternID": "pattern3",
      "file": "lib/processors/jsdoc/sdkTransformer.js",
      "startLine": "29",
      "startCol": "25",
      "endLine": "32",
      "endCol": "3"
    },
    "346": {
      "patternID": "pattern3",
      "file": "lib/processors/libraryLessGenerator.js",
      "startLine": "41",
      "startCol": "24",
      "endLine": "56",
      "endCol": "5"
    },
    "347": {
      "patternID": "pattern3",
      "file": "lib/processors/libraryLessGenerator.js",
      "startLine": "180",
      "startCol": "23",
      "endLine": "180",
      "endCol": "65"
    },
    "348": {
      "patternID": "pattern3",
      "file": "lib/processors/manifestCreator.js",
      "startLine": "113",
      "startCol": "19",
      "endLine": "113",
      "endCol": "44"
    },
    "349": {
      "patternID": "pattern3",
      "file": "lib/processors/nonAsciiEscaper.js",
      "startLine": "74",
      "startCol": "27",
      "endLine": "74",
      "endCol": "52"
    },
    "350": {
      "patternID": "pattern3",
      "file": "lib/processors/resourceListCreator.js",
      "startLine": "146",
      "startCol": "2",
      "endLine": "146",
      "endCol": "32"
    },
    "351": {
      "patternID": "pattern3",
      "file": "lib/processors/resourceListCreator.js",
      "startLine": "147",
      "startCol": "2",
      "endLine": "147",
      "endCol": "42"
    },
    "352": {
      "patternID": "pattern3",
      "file": "lib/processors/resourceListCreator.js",
      "startLine": "152",
      "startCol": "2",
      "endLine": "152",
      "endCol": "33"
    },
    "353": {
      "patternID": "pattern3",
      "file": "lib/processors/uglifier.js",
      "startLine": "26",
      "startCol": "16",
      "endLine": "26",
      "endCol": "41"
    },
    "354": {
      "patternID": "pattern3",
      "file": "lib/processors/uglifier.js",
      "startLine": "28",
      "startCol": "19",
      "endLine": "36",
      "endCol": "5"
    },
    "355": {
      "patternID": "pattern3",
      "file": "lib/processors/versionInfoGenerator.js",
      "startLine": "54",
      "startCol": "26",
      "endLine": "54",
      "endCol": "59"
    },
    "356": {
      "patternID": "pattern3",
      "file": "lib/processors/versionInfoGenerator.js",
      "startLine": "330",
      "startCol": "32",
      "endLine": "330",
      "endCol": "74"
    },
    "357": {
      "patternID": "pattern3",
      "file": "lib/processors/versionInfoGenerator.js",
      "startLine": "392",
      "startCol": "22",
      "endLine": "392",
      "endCol": "67"
    },
    "358": {
      "patternID": "pattern3",
      "file": "lib/tasks/buildThemes.js",
      "startLine": "57",
      "startCol": "25",
      "endLine": "57",
      "endCol": "49"
    },
    "359": {
      "patternID": "pattern3",
      "file": "lib/tasks/buildThemes.js",
      "startLine": "63",
      "startCol": "22",
      "endLine": "63",
      "endCol": "43"
    },
    "360": {
      "patternID": "pattern3",
      "file": "lib/tasks/buildThemes.js",
      "startLine": "70",
      "startCol": "21",
      "endLine": "70",
      "endCol": "39"
    },
    "361": {
      "patternID": "pattern3",
      "file": "lib/tasks/buildThemes.js",
      "startLine": "132",
      "startCol": "2",
      "endLine": "134",
      "endCol": "4"
    },
    "362": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "41",
      "startCol": "21",
      "endLine": "50",
      "endCol": "7"
    },
    "363": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "44",
      "startCol": "25",
      "endLine": "44",
      "endCol": "52"
    },
    "364": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateFlexChangesBundle.js",
      "startLine": "48",
      "startCol": "28",
      "endLine": "48",
      "endCol": "80"
    },
    "365": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateFlexChangesBundle.js",
      "startLine": "49",
      "startCol": "38",
      "endLine": "49",
      "endCol": "71"
    },
    "366": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateFlexChangesBundle.js",
      "startLine": "54",
      "startCol": "3",
      "endLine": "54",
      "endCol": "41"
    },
    "367": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateFlexChangesBundle.js",
      "startLine": "58",
      "startCol": "28",
      "endLine": "58",
      "endCol": "80"
    },
    "368": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateFlexChangesBundle.js",
      "startLine": "59",
      "startCol": "38",
      "endLine": "59",
      "endCol": "71"
    },
    "369": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateFlexChangesBundle.js",
      "startLine": "68",
      "startCol": "23",
      "endLine": "69",
      "endCol": "109"
    },
    "370": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateFlexChangesBundle.js",
      "startLine": "76",
      "startCol": "30",
      "endLine": "82",
      "endCol": "4"
    },
    "371": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateFlexChangesBundle.js",
      "startLine": "83",
      "startCol": "3",
      "endLine": "86",
      "endCol": "5"
    },
    "372": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateManifestBundle.js",
      "startLine": "31",
      "startCol": "23",
      "endLine": "31",
      "endCol": "109"
    },
    "373": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateManifestBundle.js",
      "startLine": "38",
      "startCol": "29",
      "endLine": "46",
      "endCol": "3"
    },
    "374": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateManifestBundle.js",
      "startLine": "48",
      "startCol": "2",
      "endLine": "50",
      "endCol": "4"
    },
    "375": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateStandaloneAppBundle.js",
      "startLine": "81",
      "startCol": "18",
      "endLine": "84",
      "endCol": "3"
    },
    "376": {
      "patternID": "pattern3",
      "file": "lib/tasks/bundlers/generateStandaloneAppBundle.js",
      "startLine": "97",
      "startCol": "2",
      "endLine": "130",
      "endCol": "3"
    },
    "377": {
      "patternID": "pattern3",
      "file": "lib/tasks/createDebugFiles.js",
      "startLine": "18",
      "startCol": "18",
      "endLine": "18",
      "endCol": "54"
    },
    "378": {
      "patternID": "pattern3",
      "file": "lib/tasks/createDebugFiles.js",
      "startLine": "20",
      "startCol": "18",
      "endLine": "20",
      "endCol": "48"
    },
    "379": {
      "patternID": "pattern3",
      "file": "lib/tasks/escapeNonAsciiCharacters.js",
      "startLine": "20",
      "startCol": "23",
      "endLine": "20",
      "endCol": "53"
    },
    "380": {
      "patternID": "pattern3",
      "file": "lib/tasks/escapeNonAsciiCharacters.js",
      "startLine": "29",
      "startCol": "2",
      "endLine": "29",
      "endCol": "83"
    },
    "381": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateCachebusterInfo.js",
      "startLine": "10",
      "startCol": "17",
      "endLine": "10",
      "endCol": "42"
    },
    "382": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateCachebusterInfo.js",
      "startLine": "50",
      "startCol": "4",
      "endLine": "53",
      "endCol": "6"
    },
    "383": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateResourcesJson.js",
      "startLine": "117",
      "startCol": "20",
      "endLine": "117",
      "endCol": "89"
    },
    "384": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateResourcesJson.js",
      "startLine": "123",
      "startCol": "4",
      "endLine": "123",
      "endCol": "85"
    },
    "385": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateResourcesJson.js",
      "startLine": "131",
      "startCol": "2",
      "endLine": "133",
      "endCol": "2"
    },
    "386": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "48",
      "startCol": "7",
      "endLine": "48",
      "endCol": "50"
    },
    "387": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "57",
      "startCol": "33",
      "endLine": "57",
      "endCol": "105"
    },
    "388": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "61",
      "startCol": "27",
      "endLine": "61",
      "endCol": "62"
    },
    "389": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "113",
      "startCol": "37",
      "endLine": "113",
      "endCol": "84"
    },
    "390": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "127",
      "startCol": "3",
      "endLine": "127",
      "endCol": "50"
    },
    "391": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "141",
      "startCol": "31",
      "endLine": "149",
      "endCol": "2"
    },
    "392": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "150",
      "startCol": "2",
      "endLine": "156",
      "endCol": "2"
    },
    "393": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "153",
      "startCol": "5",
      "endLine": "153",
      "endCol": "35"
    },
    "394": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateThemeDesignerResources.js",
      "startLine": "163",
      "startCol": "2",
      "endLine": "165",
      "endCol": "2"
    },
    "395": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateVersionInfo.js",
      "startLine": "19",
      "startCol": "20",
      "endLine": "19",
      "endCol": "53"
    },
    "396": {
      "patternID": "pattern3",
      "file": "lib/tasks/generateVersionInfo.js",
      "startLine": "39",
      "startCol": "23",
      "endLine": "39",
      "endCol": "61"
    },
    "397": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/executeJsdocSdkTransformation.js",
      "startLine": "28",
      "startCol": "48",
      "endLine": "32",
      "endCol": "3"
    },
    "398": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/executeJsdocSdkTransformation.js",
      "startLine": "71",
      "startCol": "2",
      "endLine": "73",
      "endCol": "4"
    },
    "399": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateApiIndex.js",
      "startLine": "47",
      "startCol": "2",
      "endLine": "49",
      "endCol": "4"
    },
    "400": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "57",
      "startCol": "34",
      "endLine": "67",
      "endCol": "3"
    },
    "401": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "87",
      "startCol": "2",
      "endLine": "89",
      "endCol": "4"
    },
    "402": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "103",
      "startCol": "2",
      "endLine": "103",
      "endCol": "32"
    },
    "403": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "105",
      "startCol": "2",
      "endLine": "105",
      "endCol": "32"
    },
    "404": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "108",
      "startCol": "2",
      "endLine": "108",
      "endCol": "29"
    },
    "405": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "131",
      "startCol": "2",
      "endLine": "131",
      "endCol": "33"
    },
    "406": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "155",
      "startCol": "18",
      "endLine": "155",
      "endCol": "54"
    },
    "407": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "157",
      "startCol": "18",
      "endLine": "157",
      "endCol": "48"
    },
    "408": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "161",
      "startCol": "2",
      "endLine": "161",
      "endCol": "76"
    },
    "409": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "175",
      "startCol": "18",
      "endLine": "175",
      "endCol": "84"
    },
    "410": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "178",
      "startCol": "15",
      "endLine": "178",
      "endCol": "76"
    },
    "411": {
      "patternID": "pattern3",
      "file": "lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "188",
      "startCol": "2",
      "endLine": "188",
      "endCol": "68"
    },
    "412": {
      "patternID": "pattern3",
      "file": "lib/tasks/transformBootstrapHtml.js",
      "startLine": "22",
      "startCol": "19",
      "endLine": "22",
      "endCol": "51"
    },
    "413": {
      "patternID": "pattern3",
      "file": "lib/tasks/transformBootstrapHtml.js",
      "startLine": "27",
      "startCol": "29",
      "endLine": "32",
      "endCol": "3"
    },
    "414": {
      "patternID": "pattern3",
      "file": "lib/tasks/transformBootstrapHtml.js",
      "startLine": "33",
      "startCol": "2",
      "endLine": "33",
      "endCol": "83"
    },
    "415": {
      "patternID": "pattern3",
      "file": "lib/types/application/ApplicationFormatter.js",
      "startLine": "26",
      "startCol": "3",
      "endLine": "26",
      "endCol": "23"
    },
    "416": {
      "patternID": "pattern3",
      "file": "lib/types/library/LibraryFormatter.js",
      "startLine": "23",
      "startCol": "3",
      "endLine": "23",
      "endCol": "23"
    },
    "417": {
      "patternID": "pattern3",
      "file": "lib/types/library/LibraryFormatter.js",
      "startLine": "115",
      "startCol": "8",
      "endLine": "118",
      "endCol": "4"
    },
    "418": {
      "patternID": "pattern3",
      "file": "lib/types/library/LibraryFormatter.js",
      "startLine": "366",
      "startCol": "21",
      "endLine": "366",
      "endCol": "42"
    },
    "419": {
      "patternID": "pattern3",
      "file": "lib/types/library/LibraryFormatter.js",
      "startLine": "401",
      "startCol": "20",
      "endLine": "401",
      "endCol": "41"
    },
    "420": {
      "patternID": "pattern3",
      "file": "lib/types/library/LibraryFormatter.js",
      "startLine": "408",
      "startCol": "24",
      "endLine": "408",
      "endCol": "45"
    },
    "421": {
      "patternID": "pattern3",
      "file": "lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "14",
      "startCol": "3",
      "endLine": "14",
      "endCol": "23"
    },
    "422": {
      "patternID": "pattern3",
      "file": "test/fixtures/lbt/modules/es6-syntax.js",
      "startLine": "40",
      "startCol": "3",
      "endLine": "40",
      "endCol": "25"
    },
    "423": {
      "patternID": "pattern3",
      "file": "test/lib/builder/builder.js",
      "startLine": "91",
      "startCol": "3",
      "endLine": "91",
      "endCol": "97"
    },
    "424": {
      "patternID": "pattern3",
      "file": "test/lib/builder/builder.js",
      "startLine": "137",
      "startCol": "2",
      "endLine": "140",
      "endCol": "3"
    },
    "425": {
      "patternID": "pattern3",
      "file": "test/lib/builder/builder.js",
      "startLine": "206",
      "startCol": "16",
      "endLine": "209",
      "endCol": "4"
    },
    "426": {
      "patternID": "pattern3",
      "file": "test/lib/builder/builder.js",
      "startLine": "823",
      "startCol": "2",
      "endLine": "823",
      "endCol": "20"
    },
    "427": {
      "patternID": "pattern3",
      "file": "test/lib/builder/builder.js",
      "startLine": "844",
      "startCol": "16",
      "endLine": "844",
      "endCol": "47"
    },
    "428": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "405",
      "startCol": "2",
      "endLine": "405",
      "endCol": "54"
    },
    "429": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "438",
      "startCol": "2",
      "endLine": "438",
      "endCol": "54"
    },
    "430": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "474",
      "startCol": "2",
      "endLine": "474",
      "endCol": "54"
    },
    "431": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "510",
      "startCol": "2",
      "endLine": "510",
      "endCol": "54"
    },
    "432": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "538",
      "startCol": "2",
      "endLine": "538",
      "endCol": "54"
    },
    "433": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "563",
      "startCol": "2",
      "endLine": "563",
      "endCol": "54"
    },
    "434": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "583",
      "startCol": "2",
      "endLine": "583",
      "endCol": "54"
    },
    "435": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "607",
      "startCol": "2",
      "endLine": "607",
      "endCol": "54"
    },
    "436": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "631",
      "startCol": "2",
      "endLine": "631",
      "endCol": "54"
    },
    "437": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "655",
      "startCol": "2",
      "endLine": "655",
      "endCol": "54"
    },
    "438": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "690",
      "startCol": "2",
      "endLine": "690",
      "endCol": "54"
    },
    "439": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "721",
      "startCol": "2",
      "endLine": "721",
      "endCol": "54"
    },
    "440": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "753",
      "startCol": "2",
      "endLine": "753",
      "endCol": "54"
    },
    "441": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "788",
      "startCol": "2",
      "endLine": "788",
      "endCol": "54"
    },
    "442": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "823",
      "startCol": "2",
      "endLine": "823",
      "endCol": "54"
    },
    "443": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "854",
      "startCol": "2",
      "endLine": "854",
      "endCol": "54"
    },
    "444": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "886",
      "startCol": "2",
      "endLine": "886",
      "endCol": "54"
    },
    "445": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "918",
      "startCol": "2",
      "endLine": "918",
      "endCol": "54"
    },
    "446": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "947",
      "startCol": "2",
      "endLine": "947",
      "endCol": "54"
    },
    "447": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "969",
      "startCol": "2",
      "endLine": "969",
      "endCol": "54"
    },
    "448": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/ComponentAnalyzer.js",
      "startLine": "989",
      "startCol": "2",
      "endLine": "989",
      "endCol": "54"
    },
    "449": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "249",
      "startCol": "17",
      "endLine": "249",
      "endCol": "55"
    },
    "450": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "279",
      "startCol": "17",
      "endLine": "279",
      "endCol": "55"
    },
    "451": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "305",
      "startCol": "17",
      "endLine": "305",
      "endCol": "74"
    },
    "452": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/FioriElementsAnalyzer.js",
      "startLine": "327",
      "startCol": "17",
      "endLine": "327",
      "endCol": "74"
    },
    "453": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "321",
      "startCol": "16",
      "endLine": "327",
      "endCol": "16"
    },
    "454": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "395",
      "startCol": "17",
      "endLine": "395",
      "endCol": "55"
    },
    "455": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "426",
      "startCol": "17",
      "endLine": "426",
      "endCol": "55"
    },
    "456": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "497",
      "startCol": "17",
      "endLine": "497",
      "endCol": "74"
    },
    "457": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js",
      "startLine": "519",
      "startCol": "17",
      "endLine": "519",
      "endCol": "74"
    },
    "458": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLCompositeAnalyzer.js",
      "startLine": "21",
      "startCol": "2",
      "endLine": "21",
      "endCol": "46"
    },
    "459": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLCompositeAnalyzer.js",
      "startLine": "44",
      "startCol": "2",
      "endLine": "44",
      "endCol": "46"
    },
    "460": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLCompositeAnalyzer.js",
      "startLine": "68",
      "startCol": "2",
      "endLine": "68",
      "endCol": "46"
    },
    "461": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLCompositeAnalyzer.js",
      "startLine": "98",
      "startCol": "2",
      "endLine": "98",
      "endCol": "46"
    },
    "462": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLTemplateAnalyzer.js",
      "startLine": "99",
      "startCol": "2",
      "endLine": "99",
      "endCol": "44"
    },
    "463": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLTemplateAnalyzer.js",
      "startLine": "155",
      "startCol": "2",
      "endLine": "155",
      "endCol": "44"
    },
    "464": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLTemplateAnalyzer.js",
      "startLine": "203",
      "startCol": "2",
      "endLine": "203",
      "endCol": "44"
    },
    "465": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLTemplateAnalyzer.js",
      "startLine": "336",
      "startCol": "2",
      "endLine": "338",
      "endCol": "48"
    },
    "466": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLTemplateAnalyzer.js",
      "startLine": "373",
      "startCol": "16",
      "endLine": "373",
      "endCol": "55"
    },
    "467": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLTemplateAnalyzer.js",
      "startLine": "456",
      "startCol": "2",
      "endLine": "456",
      "endCol": "42"
    },
    "468": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/analyzer/XMLTemplateAnalyzer.js",
      "startLine": "496",
      "startCol": "2",
      "endLine": "496",
      "endCol": "41"
    },
    "469": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/bundle/Builder.js",
      "startLine": "37",
      "startCol": "17",
      "endLine": "37",
      "endCol": "96"
    },
    "470": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/bundle/Resolver.js",
      "startLine": "51",
      "startCol": "25",
      "endLine": "51",
      "endCol": "64"
    },
    "471": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/bundle/Resolver.js",
      "startLine": "94",
      "startCol": "25",
      "endLine": "94",
      "endCol": "64"
    },
    "472": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/bundle/Resolver.js",
      "startLine": "141",
      "startCol": "25",
      "endLine": "141",
      "endCol": "64"
    },
    "473": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/bundle/Resolver.js",
      "startLine": "184",
      "startCol": "25",
      "endLine": "184",
      "endCol": "64"
    },
    "474": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/bundle/Resolver.js",
      "startLine": "223",
      "startCol": "25",
      "endLine": "223",
      "endCol": "64"
    },
    "475": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/graph/topologicalSort.js",
      "startLine": "29",
      "startCol": "32",
      "endLine": "29",
      "endCol": "65"
    },
    "476": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/graph/topologicalSort.js",
      "startLine": "37",
      "startCol": "16",
      "endLine": "37",
      "endCol": "64"
    },
    "477": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/Resource.js",
      "startLine": "17",
      "startCol": "2",
      "endLine": "17",
      "endCol": "24"
    },
    "478": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourceCollector.js",
      "startLine": "153",
      "startCol": "2",
      "endLine": "161",
      "endCol": "4"
    },
    "479": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "107",
      "startCol": "7",
      "endLine": "107",
      "endCol": "67"
    },
    "480": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "134",
      "startCol": "2",
      "endLine": "134",
      "endCol": "40"
    },
    "481": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "162",
      "startCol": "7",
      "endLine": "162",
      "endCol": "67"
    },
    "482": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "190",
      "startCol": "7",
      "endLine": "190",
      "endCol": "75"
    },
    "483": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "199",
      "startCol": "7",
      "endLine": "199",
      "endCol": "76"
    },
    "484": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "223",
      "startCol": "7",
      "endLine": "223",
      "endCol": "72"
    },
    "485": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "268",
      "startCol": "2",
      "endLine": "268",
      "endCol": "40"
    },
    "486": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "273",
      "startCol": "2",
      "endLine": "273",
      "endCol": "40"
    },
    "487": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/resources/ResourcePool.js",
      "startLine": "278",
      "startCol": "2",
      "endLine": "278",
      "endCol": "40"
    },
    "488": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "36",
      "startCol": "14",
      "endLine": "36",
      "endCol": "62"
    },
    "489": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "67",
      "startCol": "14",
      "endLine": "67",
      "endCol": "62"
    },
    "490": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "96",
      "startCol": "14",
      "endLine": "96",
      "endCol": "62"
    },
    "491": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "122",
      "startCol": "14",
      "endLine": "122",
      "endCol": "62"
    },
    "492": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "148",
      "startCol": "14",
      "endLine": "148",
      "endCol": "62"
    },
    "493": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "174",
      "startCol": "14",
      "endLine": "174",
      "endCol": "62"
    },
    "494": {
      "patternID": "pattern3",
      "file": "test/lib/lbt/utils/escapePropertiesFile.js",
      "startLine": "200",
      "startCol": "14",
      "endLine": "200",
      "endCol": "62"
    },
    "495": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bootstrapHtmlTransformer.js",
      "startLine": "57",
      "startCol": "29",
      "endLine": "62",
      "endCol": "3"
    },
    "496": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bootstrapHtmlTransformer.js",
      "startLine": "100",
      "startCol": "29",
      "endLine": "105",
      "endCol": "3"
    },
    "497": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bootstrapHtmlTransformer.js",
      "startLine": "143",
      "startCol": "29",
      "endLine": "148",
      "endCol": "3"
    },
    "498": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bootstrapHtmlTransformer.js",
      "startLine": "176",
      "startCol": "29",
      "endLine": "181",
      "endCol": "3"
    },
    "499": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bootstrapHtmlTransformer.js",
      "startLine": "213",
      "startCol": "29",
      "endLine": "218",
      "endCol": "3"
    },
    "500": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bootstrapHtmlTransformer.js",
      "startLine": "240",
      "startCol": "29",
      "endLine": "245",
      "endCol": "3"
    },
    "501": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bootstrapHtmlTransformer.js",
      "startLine": "277",
      "startCol": "29",
      "endLine": "282",
      "endCol": "3"
    },
    "502": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "8",
      "startCol": "18",
      "endLine": "8",
      "endCol": "63"
    },
    "503": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "102",
      "startCol": "18",
      "endLine": "102",
      "endCol": "63"
    },
    "504": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "110",
      "startCol": "18",
      "endLine": "110",
      "endCol": "42"
    },
    "505": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "395",
      "startCol": "18",
      "endLine": "395",
      "endCol": "63"
    },
    "506": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "403",
      "startCol": "18",
      "endLine": "403",
      "endCol": "42"
    },
    "507": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/flexChangesBundler.js",
      "startLine": "491",
      "startCol": "16",
      "endLine": "491",
      "endCol": "76"
    },
    "508": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "38",
      "startCol": "2",
      "endLine": "38",
      "endCol": "44"
    },
    "509": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "59",
      "startCol": "2",
      "endLine": "59",
      "endCol": "44"
    },
    "510": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "87",
      "startCol": "2",
      "endLine": "87",
      "endCol": "44"
    },
    "511": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "121",
      "startCol": "2",
      "endLine": "121",
      "endCol": "44"
    },
    "512": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "168",
      "startCol": "2",
      "endLine": "168",
      "endCol": "44"
    },
    "513": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "216",
      "startCol": "2",
      "endLine": "216",
      "endCol": "44"
    },
    "514": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "280",
      "startCol": "2",
      "endLine": "280",
      "endCol": "44"
    },
    "515": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "328",
      "startCol": "2",
      "endLine": "328",
      "endCol": "44"
    },
    "516": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/manifestBundler.js",
      "startLine": "380",
      "startCol": "2",
      "endLine": "380",
      "endCol": "44"
    },
    "517": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/moduleBundler.js",
      "startLine": "65",
      "startCol": "26",
      "endLine": "71",
      "endCol": "3"
    },
    "518": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/moduleBundler.js",
      "startLine": "159",
      "startCol": "26",
      "endLine": "165",
      "endCol": "3"
    },
    "519": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/moduleBundler.js",
      "startLine": "239",
      "startCol": "26",
      "endLine": "244",
      "endCol": "3"
    },
    "520": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/moduleBundler.js",
      "startLine": "313",
      "startCol": "26",
      "endLine": "319",
      "endCol": "3"
    },
    "521": {
      "patternID": "pattern3",
      "file": "test/lib/processors/bundlers/moduleBundler.js",
      "startLine": "390",
      "startCol": "2",
      "endLine": "396",
      "endCol": "3"
    },
    "522": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/apiIndexGenerator.js",
      "startLine": "26",
      "startCol": "14",
      "endLine": "34",
      "endCol": "3"
    },
    "523": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/apiIndexGenerator.js",
      "startLine": "82",
      "startCol": "16",
      "endLine": "82",
      "endCol": "55"
    },
    "524": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "74",
      "startCol": "14",
      "endLine": "74",
      "endCol": "80"
    },
    "525": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "91",
      "startCol": "2",
      "endLine": "94",
      "endCol": "3"
    },
    "526": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "110",
      "startCol": "2",
      "endLine": "113",
      "endCol": "4"
    },
    "527": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "117",
      "startCol": "16",
      "endLine": "120",
      "endCol": "4"
    },
    "528": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "215",
      "startCol": "2",
      "endLine": "217",
      "endCol": "23"
    },
    "529": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/sdkTransformer.js",
      "startLine": "18",
      "startCol": "14",
      "endLine": "27",
      "endCol": "3"
    },
    "530": {
      "patternID": "pattern3",
      "file": "test/lib/processors/jsdoc/sdkTransformer.js",
      "startLine": "60",
      "startCol": "16",
      "endLine": "60",
      "endCol": "52"
    },
    "531": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "73",
      "startCol": "26",
      "endLine": "73",
      "endCol": "57"
    },
    "532": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "79",
      "startCol": "7",
      "endLine": "79",
      "endCol": "42"
    },
    "533": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "97",
      "startCol": "7",
      "endLine": "97",
      "endCol": "42"
    },
    "534": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "120",
      "startCol": "17",
      "endLine": "123",
      "endCol": "3"
    },
    "535": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "152",
      "startCol": "17",
      "endLine": "155",
      "endCol": "3"
    },
    "536": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "183",
      "startCol": "17",
      "endLine": "186",
      "endCol": "3"
    },
    "537": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "233",
      "startCol": "17",
      "endLine": "236",
      "endCol": "3"
    },
    "538": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "275",
      "startCol": "17",
      "endLine": "278",
      "endCol": "3"
    },
    "539": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "299",
      "startCol": "17",
      "endLine": "302",
      "endCol": "3"
    },
    "540": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "331",
      "startCol": "17",
      "endLine": "334",
      "endCol": "3"
    },
    "541": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "359",
      "startCol": "17",
      "endLine": "362",
      "endCol": "3"
    },
    "542": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "388",
      "startCol": "17",
      "endLine": "391",
      "endCol": "3"
    },
    "543": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "413",
      "startCol": "17",
      "endLine": "416",
      "endCol": "3"
    },
    "544": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "438",
      "startCol": "17",
      "endLine": "441",
      "endCol": "3"
    },
    "545": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "470",
      "startCol": "17",
      "endLine": "473",
      "endCol": "3"
    },
    "546": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "502",
      "startCol": "17",
      "endLine": "505",
      "endCol": "3"
    },
    "547": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "532",
      "startCol": "2",
      "endLine": "540",
      "endCol": "3"
    },
    "548": {
      "patternID": "pattern3",
      "file": "test/lib/processors/libraryLessGenerator.js",
      "startLine": "558",
      "startCol": "2",
      "endLine": "564",
      "endCol": "3"
    },
    "549": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "136",
      "startCol": "17",
      "endLine": "136",
      "endCol": "80"
    },
    "550": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "137",
      "startCol": "7",
      "endLine": "137",
      "endCol": "30"
    },
    "551": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "182",
      "startCol": "17",
      "endLine": "182",
      "endCol": "84"
    },
    "552": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "183",
      "startCol": "7",
      "endLine": "183",
      "endCol": "30"
    },
    "553": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "224",
      "startCol": "17",
      "endLine": "224",
      "endCol": "84"
    },
    "554": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "225",
      "startCol": "7",
      "endLine": "225",
      "endCol": "30"
    },
    "555": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "303",
      "startCol": "17",
      "endLine": "303",
      "endCol": "84"
    },
    "556": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "304",
      "startCol": "7",
      "endLine": "304",
      "endCol": "30"
    },
    "557": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "343",
      "startCol": "16",
      "endLine": "346",
      "endCol": "4"
    },
    "558": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "385",
      "startCol": "17",
      "endLine": "385",
      "endCol": "80"
    },
    "559": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "386",
      "startCol": "7",
      "endLine": "386",
      "endCol": "30"
    },
    "560": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "417",
      "startCol": "17",
      "endLine": "417",
      "endCol": "76"
    },
    "561": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "422",
      "startCol": "7",
      "endLine": "422",
      "endCol": "30"
    },
    "562": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "446",
      "startCol": "17",
      "endLine": "446",
      "endCol": "80"
    },
    "563": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "453",
      "startCol": "18",
      "endLine": "453",
      "endCol": "41"
    },
    "564": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "491",
      "startCol": "17",
      "endLine": "491",
      "endCol": "80"
    },
    "565": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "492",
      "startCol": "7",
      "endLine": "492",
      "endCol": "30"
    },
    "566": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "561",
      "startCol": "17",
      "endLine": "561",
      "endCol": "101"
    },
    "567": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "562",
      "startCol": "7",
      "endLine": "562",
      "endCol": "30"
    },
    "568": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "628",
      "startCol": "17",
      "endLine": "628",
      "endCol": "101"
    },
    "569": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "629",
      "startCol": "7",
      "endLine": "629",
      "endCol": "30"
    },
    "570": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "715",
      "startCol": "17",
      "endLine": "721",
      "endCol": "3"
    },
    "571": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "722",
      "startCol": "7",
      "endLine": "722",
      "endCol": "30"
    },
    "572": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "801",
      "startCol": "17",
      "endLine": "807",
      "endCol": "3"
    },
    "573": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "808",
      "startCol": "7",
      "endLine": "808",
      "endCol": "30"
    },
    "574": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "891",
      "startCol": "17",
      "endLine": "897",
      "endCol": "3"
    },
    "575": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "898",
      "startCol": "7",
      "endLine": "898",
      "endCol": "30"
    },
    "576": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "981",
      "startCol": "17",
      "endLine": "987",
      "endCol": "3"
    },
    "577": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "988",
      "startCol": "7",
      "endLine": "988",
      "endCol": "30"
    },
    "578": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1071",
      "startCol": "17",
      "endLine": "1077",
      "endCol": "3"
    },
    "579": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1078",
      "startCol": "7",
      "endLine": "1078",
      "endCol": "30"
    },
    "580": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1155",
      "startCol": "17",
      "endLine": "1161",
      "endCol": "3"
    },
    "581": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1162",
      "startCol": "7",
      "endLine": "1162",
      "endCol": "30"
    },
    "582": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1223",
      "startCol": "17",
      "endLine": "1228",
      "endCol": "3"
    },
    "583": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1229",
      "startCol": "7",
      "endLine": "1229",
      "endCol": "30"
    },
    "584": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1309",
      "startCol": "17",
      "endLine": "1315",
      "endCol": "3"
    },
    "585": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1316",
      "startCol": "7",
      "endLine": "1316",
      "endCol": "30"
    },
    "586": {
      "patternID": "pattern3",
      "file": "test/lib/processors/manifestCreator.js",
      "startLine": "1334",
      "startCol": "16",
      "endLine": "1337",
      "endCol": "4"
    },
    "587": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "30",
      "startCol": "14",
      "endLine": "30",
      "endCol": "39"
    },
    "588": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "41",
      "startCol": "14",
      "endLine": "41",
      "endCol": "39"
    },
    "589": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "51",
      "startCol": "14",
      "endLine": "51",
      "endCol": "39"
    },
    "590": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "60",
      "startCol": "14",
      "endLine": "60",
      "endCol": "39"
    },
    "591": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "69",
      "startCol": "14",
      "endLine": "69",
      "endCol": "39"
    },
    "592": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "78",
      "startCol": "14",
      "endLine": "78",
      "endCol": "39"
    },
    "593": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "87",
      "startCol": "14",
      "endLine": "87",
      "endCol": "39"
    },
    "594": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "97",
      "startCol": "14",
      "endLine": "97",
      "endCol": "39"
    },
    "595": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "106",
      "startCol": "14",
      "endLine": "106",
      "endCol": "39"
    },
    "596": {
      "patternID": "pattern3",
      "file": "test/lib/processors/nonAsciiEscaper.js",
      "startLine": "113",
      "startCol": "16",
      "endLine": "113",
      "endCol": "68"
    },
    "597": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "39",
      "startCol": "17",
      "endLine": "41",
      "endCol": "3"
    },
    "598": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "52",
      "startCol": "17",
      "endLine": "59",
      "endCol": "3"
    },
    "599": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "75",
      "startCol": "2",
      "endLine": "77",
      "endCol": "3"
    },
    "600": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "91",
      "startCol": "22",
      "endLine": "98",
      "endCol": "3"
    },
    "601": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "121",
      "startCol": "20",
      "endLine": "123",
      "endCol": "3"
    },
    "602": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "141",
      "startCol": "34",
      "endLine": "141",
      "endCol": "66"
    },
    "603": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "142",
      "startCol": "36",
      "endLine": "142",
      "endCol": "70"
    },
    "604": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "211",
      "startCol": "24",
      "endLine": "214",
      "endCol": "3"
    },
    "605": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "226",
      "startCol": "36",
      "endLine": "226",
      "endCol": "71"
    },
    "606": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "309",
      "startCol": "24",
      "endLine": "312",
      "endCol": "3"
    },
    "607": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "330",
      "startCol": "36",
      "endLine": "330",
      "endCol": "71"
    },
    "608": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "394",
      "startCol": "24",
      "endLine": "396",
      "endCol": "3"
    },
    "609": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "416",
      "startCol": "36",
      "endLine": "416",
      "endCol": "71"
    },
    "610": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "486",
      "startCol": "24",
      "endLine": "488",
      "endCol": "3"
    },
    "611": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "511",
      "startCol": "36",
      "endLine": "511",
      "endCol": "71"
    },
    "612": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "591",
      "startCol": "24",
      "endLine": "593",
      "endCol": "3"
    },
    "613": {
      "patternID": "pattern3",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "611",
      "startCol": "36",
      "endLine": "611",
      "endCol": "71"
    },
    "614": {
      "patternID": "pattern3",
      "file": "test/lib/processors/stringReplacer.js",
      "startLine": "39",
      "startCol": "29",
      "endLine": "45",
      "endCol": "3"
    },
    "615": {
      "patternID": "pattern3",
      "file": "test/lib/processors/stringReplacer.js",
      "startLine": "79",
      "startCol": "29",
      "endLine": "85",
      "endCol": "3"
    },
    "616": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "128",
      "startCol": "7",
      "endLine": "128",
      "endCol": "35"
    },
    "617": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "129",
      "startCol": "7",
      "endLine": "129",
      "endCol": "38"
    },
    "618": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "130",
      "startCol": "7",
      "endLine": "130",
      "endCol": "36"
    },
    "619": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "151",
      "startCol": "7",
      "endLine": "151",
      "endCol": "35"
    },
    "620": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "152",
      "startCol": "7",
      "endLine": "152",
      "endCol": "38"
    },
    "621": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "153",
      "startCol": "7",
      "endLine": "153",
      "endCol": "36"
    },
    "622": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "168",
      "startCol": "7",
      "endLine": "168",
      "endCol": "35"
    },
    "623": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "169",
      "startCol": "7",
      "endLine": "169",
      "endCol": "38"
    },
    "624": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "170",
      "startCol": "7",
      "endLine": "170",
      "endCol": "36"
    },
    "625": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "185",
      "startCol": "7",
      "endLine": "185",
      "endCol": "35"
    },
    "626": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "186",
      "startCol": "7",
      "endLine": "186",
      "endCol": "38"
    },
    "627": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "187",
      "startCol": "7",
      "endLine": "187",
      "endCol": "36"
    },
    "628": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "195",
      "startCol": "54",
      "endLine": "195",
      "endCol": "89"
    },
    "629": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "198",
      "startCol": "7",
      "endLine": "198",
      "endCol": "35"
    },
    "630": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "199",
      "startCol": "7",
      "endLine": "199",
      "endCol": "38"
    },
    "631": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "200",
      "startCol": "7",
      "endLine": "200",
      "endCol": "36"
    },
    "632": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "208",
      "startCol": "54",
      "endLine": "210",
      "endCol": "3"
    },
    "633": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "213",
      "startCol": "7",
      "endLine": "213",
      "endCol": "35"
    },
    "634": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "214",
      "startCol": "7",
      "endLine": "214",
      "endCol": "38"
    },
    "635": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "215",
      "startCol": "7",
      "endLine": "215",
      "endCol": "36"
    },
    "636": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "223",
      "startCol": "54",
      "endLine": "225",
      "endCol": "3"
    },
    "637": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "228",
      "startCol": "7",
      "endLine": "228",
      "endCol": "35"
    },
    "638": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "229",
      "startCol": "7",
      "endLine": "229",
      "endCol": "38"
    },
    "639": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "230",
      "startCol": "7",
      "endLine": "230",
      "endCol": "36"
    },
    "640": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "238",
      "startCol": "54",
      "endLine": "240",
      "endCol": "3"
    },
    "641": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "243",
      "startCol": "7",
      "endLine": "243",
      "endCol": "35"
    },
    "642": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "244",
      "startCol": "7",
      "endLine": "244",
      "endCol": "38"
    },
    "643": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "245",
      "startCol": "7",
      "endLine": "245",
      "endCol": "36"
    },
    "644": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "268",
      "startCol": "7",
      "endLine": "268",
      "endCol": "35"
    },
    "645": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "269",
      "startCol": "7",
      "endLine": "269",
      "endCol": "38"
    },
    "646": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "270",
      "startCol": "7",
      "endLine": "270",
      "endCol": "36"
    },
    "647": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "271",
      "startCol": "7",
      "endLine": "271",
      "endCol": "50"
    },
    "648": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "273",
      "startCol": "7",
      "endLine": "273",
      "endCol": "44"
    },
    "649": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "275",
      "startCol": "7",
      "endLine": "275",
      "endCol": "43"
    },
    "650": {
      "patternID": "pattern3",
      "file": "test/lib/processors/themeBuilder.js",
      "startLine": "277",
      "startCol": "7",
      "endLine": "277",
      "endCol": "46"
    },
    "651": {
      "patternID": "pattern3",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "11",
      "startCol": "16",
      "endLine": "11",
      "endCol": "71"
    },
    "652": {
      "patternID": "pattern3",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "53",
      "startCol": "17",
      "endLine": "53",
      "endCol": "42"
    },
    "653": {
      "patternID": "pattern3",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "73",
      "startCol": "17",
      "endLine": "73",
      "endCol": "42"
    },
    "654": {
      "patternID": "pattern3",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "121",
      "startCol": "17",
      "endLine": "121",
      "endCol": "42"
    },
    "655": {
      "patternID": "pattern3",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "193",
      "startCol": "17",
      "endLine": "193",
      "endCol": "42"
    },
    "656": {
      "patternID": "pattern3",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "272",
      "startCol": "17",
      "endLine": "272",
      "endCol": "42"
    },
    "657": {
      "patternID": "pattern3",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "348",
      "startCol": "17",
      "endLine": "348",
      "endCol": "42"
    },
    "658": {
      "patternID": "pattern3",
      "file": "test/lib/processors/versionInfoGenerator.js",
      "startLine": "428",
      "startCol": "17",
      "endLine": "428",
      "endCol": "42"
    },
    "659": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "51",
      "startCol": "2",
      "endLine": "58",
      "endCol": "3"
    },
    "660": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "110",
      "startCol": "26",
      "endLine": "110",
      "endCol": "71"
    },
    "661": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "130",
      "startCol": "2",
      "endLine": "141",
      "endCol": "3"
    },
    "662": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "195",
      "startCol": "26",
      "endLine": "195",
      "endCol": "71"
    },
    "663": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "215",
      "startCol": "2",
      "endLine": "226",
      "endCol": "3"
    },
    "664": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "279",
      "startCol": "26",
      "endLine": "279",
      "endCol": "71"
    },
    "665": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "299",
      "startCol": "2",
      "endLine": "315",
      "endCol": "3"
    },
    "666": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "411",
      "startCol": "27",
      "endLine": "411",
      "endCol": "72"
    },
    "667": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "412",
      "startCol": "27",
      "endLine": "412",
      "endCol": "72"
    },
    "668": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "437",
      "startCol": "2",
      "endLine": "447",
      "endCol": "3"
    },
    "669": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateComponentPreload.js",
      "startLine": "475",
      "startCol": "2",
      "endLine": "494",
      "endCol": "3"
    },
    "670": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "142",
      "startCol": "2",
      "endLine": "145",
      "endCol": "4"
    },
    "671": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "155",
      "startCol": "2",
      "endLine": "161",
      "endCol": "3"
    },
    "672": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "163",
      "startCol": "27",
      "endLine": "163",
      "endCol": "56"
    },
    "673": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "168",
      "startCol": "25",
      "endLine": "168",
      "endCol": "88"
    },
    "674": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "170",
      "startCol": "32",
      "endLine": "170",
      "endCol": "63"
    },
    "675": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "181",
      "startCol": "2",
      "endLine": "184",
      "endCol": "4"
    },
    "676": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "187",
      "startCol": "2",
      "endLine": "190",
      "endCol": "4"
    },
    "677": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "191",
      "startCol": "2",
      "endLine": "194",
      "endCol": "4"
    },
    "678": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "197",
      "startCol": "2",
      "endLine": "200",
      "endCol": "4"
    },
    "679": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "201",
      "startCol": "2",
      "endLine": "204",
      "endCol": "4"
    },
    "680": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "214",
      "startCol": "2",
      "endLine": "220",
      "endCol": "3"
    },
    "681": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "222",
      "startCol": "27",
      "endLine": "222",
      "endCol": "56"
    },
    "682": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "229",
      "startCol": "25",
      "endLine": "229",
      "endCol": "88"
    },
    "683": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "231",
      "startCol": "32",
      "endLine": "231",
      "endCol": "63"
    },
    "684": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "237",
      "startCol": "28",
      "endLine": "237",
      "endCol": "113"
    },
    "685": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "239",
      "startCol": "35",
      "endLine": "239",
      "endCol": "69"
    },
    "686": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "247",
      "startCol": "25",
      "endLine": "247",
      "endCol": "96"
    },
    "687": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "249",
      "startCol": "32",
      "endLine": "249",
      "endCol": "63"
    },
    "688": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.js",
      "startLine": "55",
      "startCol": "2",
      "endLine": "61",
      "endCol": "3"
    },
    "689": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.js",
      "startLine": "178",
      "startCol": "2",
      "endLine": "186",
      "endCol": "3"
    },
    "690": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.js",
      "startLine": "439",
      "startCol": "2",
      "endLine": "447",
      "endCol": "3"
    },
    "691": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.js",
      "startLine": "752",
      "startCol": "2",
      "endLine": "762",
      "endCol": "3"
    },
    "692": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.js",
      "startLine": "826",
      "startCol": "2",
      "endLine": "836",
      "endCol": "3"
    },
    "693": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateManifestBundle.js",
      "startLine": "22",
      "startCol": "2",
      "endLine": "28",
      "endCol": "3"
    },
    "694": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateManifestBundle.js",
      "startLine": "64",
      "startCol": "2",
      "endLine": "70",
      "endCol": "3"
    },
    "695": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/bundlers/generateManifestBundle.js",
      "startLine": "81",
      "startCol": "16",
      "endLine": "81",
      "endCol": "62"
    },
    "696": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/escapeNonAsciiCharacters.js",
      "startLine": "116",
      "startCol": "16",
      "endLine": "122",
      "endCol": "4"
    },
    "697": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/escapeNonAsciiCharacters.js",
      "startLine": "135",
      "startCol": "16",
      "endLine": "141",
      "endCol": "4"
    },
    "698": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateLibraryManifest.js",
      "startLine": "38",
      "startCol": "2",
      "endLine": "38",
      "endCol": "74"
    },
    "699": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateLibraryManifest.js",
      "startLine": "40",
      "startCol": "2",
      "endLine": "46",
      "endCol": "3"
    },
    "700": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateLibraryManifest.js",
      "startLine": "48",
      "startCol": "19",
      "endLine": "48",
      "endCol": "77"
    },
    "701": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateLibraryManifest.js",
      "startLine": "54",
      "startCol": "17",
      "endLine": "54",
      "endCol": "42"
    },
    "702": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateResourcesJson.js",
      "startLine": "45",
      "startCol": "17",
      "endLine": "51",
      "endCol": "3"
    },
    "703": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "86",
      "startCol": "2",
      "endLine": "94",
      "endCol": "3"
    },
    "704": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "209",
      "startCol": "2",
      "endLine": "217",
      "endCol": "3"
    },
    "705": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "274",
      "startCol": "2",
      "endLine": "282",
      "endCol": "3"
    },
    "706": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "302",
      "startCol": "2",
      "endLine": "310",
      "endCol": "3"
    },
    "707": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "360",
      "startCol": "2",
      "endLine": "367",
      "endCol": "3"
    },
    "708": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "438",
      "startCol": "2",
      "endLine": "448",
      "endCol": "3"
    },
    "709": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateThemeDesignerResources.js",
      "startLine": "494",
      "startCol": "2",
      "endLine": "503",
      "endCol": "3"
    },
    "710": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateVersionInfo.js",
      "startLine": "48",
      "startCol": "2",
      "endLine": "48",
      "endCol": "74"
    },
    "711": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateVersionInfo.js",
      "startLine": "69",
      "startCol": "19",
      "endLine": "69",
      "endCol": "83"
    },
    "712": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateVersionInfo.js",
      "startLine": "75",
      "startCol": "17",
      "endLine": "75",
      "endCol": "42"
    },
    "713": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateVersionInfo.js",
      "startLine": "189",
      "startCol": "2",
      "endLine": "191",
      "endCol": "3"
    },
    "714": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateVersionInfo.js",
      "startLine": "248",
      "startCol": "2",
      "endLine": "252",
      "endCol": "4"
    },
    "715": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/generateVersionInfo.js",
      "startLine": "262",
      "startCol": "2",
      "endLine": "276",
      "endCol": "4"
    },
    "716": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/executeJsdocSdkTransformation.js",
      "startLine": "56",
      "startCol": "2",
      "endLine": "63",
      "endCol": "3"
    },
    "717": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/executeJsdocSdkTransformation.js",
      "startLine": "96",
      "startCol": "2",
      "endLine": "98",
      "endCol": "23"
    },
    "718": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/executeJsdocSdkTransformation.js",
      "startLine": "128",
      "startCol": "2",
      "endLine": "135",
      "endCol": "3"
    },
    "719": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/executeJsdocSdkTransformation.js",
      "startLine": "166",
      "startCol": "16",
      "endLine": "173",
      "endCol": "4"
    },
    "720": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/executeJsdocSdkTransformation.js",
      "startLine": "198",
      "startCol": "16",
      "endLine": "205",
      "endCol": "4"
    },
    "721": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/executeJsdocSdkTransformation.js",
      "startLine": "234",
      "startCol": "16",
      "endLine": "241",
      "endCol": "4"
    },
    "722": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateApiIndex.js",
      "startLine": "39",
      "startCol": "2",
      "endLine": "45",
      "endCol": "3"
    },
    "723": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateApiIndex.js",
      "startLine": "68",
      "startCol": "2",
      "endLine": "70",
      "endCol": "23"
    },
    "724": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "22",
      "startCol": "14",
      "endLine": "22",
      "endCol": "66"
    },
    "725": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "43",
      "startCol": "14",
      "endLine": "43",
      "endCol": "79"
    },
    "726": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "67",
      "startCol": "14",
      "endLine": "67",
      "endCol": "65"
    },
    "727": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "230",
      "startCol": "2",
      "endLine": "240",
      "endCol": "3"
    },
    "728": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "312",
      "startCol": "2",
      "endLine": "322",
      "endCol": "3"
    },
    "729": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "339",
      "startCol": "2",
      "endLine": "341",
      "endCol": "23"
    },
    "730": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/jsdoc/generateJsdoc.js",
      "startLine": "345",
      "startCol": "16",
      "endLine": "345",
      "endCol": "53"
    },
    "731": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/uglify.js",
      "startLine": "205",
      "startCol": "2",
      "endLine": "205",
      "endCol": "33"
    },
    "732": {
      "patternID": "pattern3",
      "file": "test/lib/tasks/uglify.js",
      "startLine": "207",
      "startCol": "16",
      "endLine": "212",
      "endCol": "4"
    },
    "733": {
      "patternID": "pattern3",
      "file": "test/lib/types/AbstractFormatter.js",
      "startLine": "15",
      "startCol": "16",
      "endLine": "15",
      "endCol": "85"
    },
    "734": {
      "patternID": "pattern3",
      "file": "test/lib/types/AbstractUi5Formatter.js",
      "startLine": "86",
      "startCol": "14",
      "endLine": "86",
      "endCol": "89"
    },
    "735": {
      "patternID": "pattern3",
      "file": "test/lib/types/AbstractUi5Formatter.js",
      "startLine": "97",
      "startCol": "14",
      "endLine": "97",
      "endCol": "92"
    },
    "736": {
      "patternID": "pattern3",
      "file": "test/lib/types/AbstractUi5Formatter.js",
      "startLine": "124",
      "startCol": "16",
      "endLine": "124",
      "endCol": "61"
    },
    "737": {
      "patternID": "pattern3",
      "file": "test/lib/types/AbstractUi5Formatter.js",
      "startLine": "144",
      "startCol": "12",
      "endLine": "144",
      "endCol": "42"
    },
    "738": {
      "patternID": "pattern3",
      "file": "test/lib/types/AbstractUi5Formatter.js",
      "startLine": "146",
      "startCol": "8",
      "endLine": "146",
      "endCol": "38"
    },
    "739": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "46",
      "startCol": "16",
      "endLine": "46",
      "endCol": "67"
    },
    "740": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "55",
      "startCol": "16",
      "endLine": "55",
      "endCol": "67"
    },
    "741": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "65",
      "startCol": "16",
      "endLine": "65",
      "endCol": "67"
    },
    "742": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "75",
      "startCol": "16",
      "endLine": "75",
      "endCol": "67"
    },
    "743": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "85",
      "startCol": "16",
      "endLine": "85",
      "endCol": "67"
    },
    "744": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "96",
      "startCol": "2",
      "endLine": "96",
      "endCol": "38"
    },
    "745": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "105",
      "startCol": "2",
      "endLine": "105",
      "endCol": "47"
    },
    "746": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "116",
      "startCol": "2",
      "endLine": "116",
      "endCol": "47"
    },
    "747": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "127",
      "startCol": "2",
      "endLine": "127",
      "endCol": "47"
    },
    "748": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "138",
      "startCol": "2",
      "endLine": "138",
      "endCol": "47"
    },
    "749": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "148",
      "startCol": "16",
      "endLine": "148",
      "endCol": "76"
    },
    "750": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "250",
      "startCol": "16",
      "endLine": "250",
      "endCol": "87"
    },
    "751": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "260",
      "startCol": "16",
      "endLine": "260",
      "endCol": "87"
    },
    "752": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "278",
      "startCol": "16",
      "endLine": "278",
      "endCol": "97"
    },
    "753": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "314",
      "startCol": "16",
      "endLine": "314",
      "endCol": "71"
    },
    "754": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "330",
      "startCol": "16",
      "endLine": "330",
      "endCol": "71"
    },
    "755": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "348",
      "startCol": "16",
      "endLine": "348",
      "endCol": "71"
    },
    "756": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "375",
      "startCol": "16",
      "endLine": "375",
      "endCol": "77"
    },
    "757": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "393",
      "startCol": "16",
      "endLine": "393",
      "endCol": "77"
    },
    "758": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "414",
      "startCol": "28",
      "endLine": "414",
      "endCol": "74"
    },
    "759": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "418",
      "startCol": "47",
      "endLine": "418",
      "endCol": "94"
    },
    "760": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "436",
      "startCol": "28",
      "endLine": "436",
      "endCol": "86"
    },
    "761": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "440",
      "startCol": "47",
      "endLine": "440",
      "endCol": "89"
    },
    "762": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "459",
      "startCol": "16",
      "endLine": "459",
      "endCol": "77"
    },
    "763": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "465",
      "startCol": "28",
      "endLine": "465",
      "endCol": "86"
    },
    "764": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "469",
      "startCol": "17",
      "endLine": "469",
      "endCol": "78"
    },
    "765": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "475",
      "startCol": "47",
      "endLine": "475",
      "endCol": "105"
    },
    "766": {
      "patternID": "pattern3",
      "file": "test/lib/types/application/ApplicationFormatter.js",
      "startLine": "534",
      "startCol": "16",
      "endLine": "534",
      "endCol": "65"
    },
    "767": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "72",
      "startCol": "16",
      "endLine": "72",
      "endCol": "63"
    },
    "768": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "82",
      "startCol": "16",
      "endLine": "82",
      "endCol": "72"
    },
    "769": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "92",
      "startCol": "16",
      "endLine": "92",
      "endCol": "72"
    },
    "770": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "103",
      "startCol": "16",
      "endLine": "103",
      "endCol": "72"
    },
    "771": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "113",
      "startCol": "2",
      "endLine": "113",
      "endCol": "43"
    },
    "772": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "123",
      "startCol": "2",
      "endLine": "123",
      "endCol": "43"
    },
    "773": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "134",
      "startCol": "2",
      "endLine": "134",
      "endCol": "43"
    },
    "774": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "145",
      "startCol": "2",
      "endLine": "145",
      "endCol": "43"
    },
    "775": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "156",
      "startCol": "2",
      "endLine": "156",
      "endCol": "43"
    },
    "776": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "168",
      "startCol": "16",
      "endLine": "168",
      "endCol": "72"
    },
    "777": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "180",
      "startCol": "2",
      "endLine": "180",
      "endCol": "43"
    },
    "778": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "190",
      "startCol": "16",
      "endLine": "190",
      "endCol": "72"
    },
    "779": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "285",
      "startCol": "2",
      "endLine": "285",
      "endCol": "32"
    },
    "780": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "394",
      "startCol": "16",
      "endLine": "394",
      "endCol": "61"
    },
    "781": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "429",
      "startCol": "2",
      "endLine": "429",
      "endCol": "89"
    },
    "782": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "473",
      "startCol": "2",
      "endLine": "473",
      "endCol": "32"
    },
    "783": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "521",
      "startCol": "2",
      "endLine": "521",
      "endCol": "32"
    },
    "784": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "569",
      "startCol": "2",
      "endLine": "569",
      "endCol": "32"
    },
    "785": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "617",
      "startCol": "2",
      "endLine": "617",
      "endCol": "32"
    },
    "786": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "664",
      "startCol": "2",
      "endLine": "664",
      "endCol": "32"
    },
    "787": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "711",
      "startCol": "16",
      "endLine": "711",
      "endCol": "68"
    },
    "788": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "732",
      "startCol": "16",
      "endLine": "732",
      "endCol": "68"
    },
    "789": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "751",
      "startCol": "28",
      "endLine": "751",
      "endCol": "65"
    },
    "790": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "757",
      "startCol": "65",
      "endLine": "757",
      "endCol": "102"
    },
    "791": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "798",
      "startCol": "16",
      "endLine": "798",
      "endCol": "71"
    },
    "792": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "819",
      "startCol": "16",
      "endLine": "819",
      "endCol": "71"
    },
    "793": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "839",
      "startCol": "17",
      "endLine": "839",
      "endCol": "57"
    },
    "794": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "844",
      "startCol": "27",
      "endLine": "844",
      "endCol": "67"
    },
    "795": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "902",
      "startCol": "14",
      "endLine": "902",
      "endCol": "65"
    },
    "796": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "959",
      "startCol": "14",
      "endLine": "959",
      "endCol": "65"
    },
    "797": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "989",
      "startCol": "14",
      "endLine": "989",
      "endCol": "65"
    },
    "798": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1020",
      "startCol": "14",
      "endLine": "1020",
      "endCol": "65"
    },
    "799": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1095",
      "startCol": "14",
      "endLine": "1095",
      "endCol": "65"
    },
    "800": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1143",
      "startCol": "14",
      "endLine": "1143",
      "endCol": "65"
    },
    "801": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1181",
      "startCol": "14",
      "endLine": "1181",
      "endCol": "65"
    },
    "802": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1204",
      "startCol": "14",
      "endLine": "1204",
      "endCol": "65"
    },
    "803": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1225",
      "startCol": "14",
      "endLine": "1225",
      "endCol": "65"
    },
    "804": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1258",
      "startCol": "16",
      "endLine": "1258",
      "endCol": "66"
    },
    "805": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1279",
      "startCol": "16",
      "endLine": "1279",
      "endCol": "66"
    },
    "806": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1304",
      "startCol": "16",
      "endLine": "1304",
      "endCol": "66"
    },
    "807": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1324",
      "startCol": "28",
      "endLine": "1324",
      "endCol": "63"
    },
    "808": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1329",
      "startCol": "47",
      "endLine": "1329",
      "endCol": "82"
    },
    "809": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1483",
      "startCol": "19",
      "endLine": "1483",
      "endCol": "75"
    },
    "810": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1528",
      "startCol": "19",
      "endLine": "1528",
      "endCol": "75"
    },
    "811": {
      "patternID": "pattern3",
      "file": "test/lib/types/library/LibraryFormatter.js",
      "startLine": "1586",
      "startCol": "19",
      "endLine": "1586",
      "endCol": "75"
    },
    "812": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "44",
      "startCol": "2",
      "endLine": "44",
      "endCol": "51"
    },
    "813": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "50",
      "startCol": "16",
      "endLine": "50",
      "endCol": "62"
    },
    "814": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "59",
      "startCol": "16",
      "endLine": "59",
      "endCol": "67"
    },
    "815": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "68",
      "startCol": "16",
      "endLine": "68",
      "endCol": "67"
    },
    "816": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "78",
      "startCol": "16",
      "endLine": "78",
      "endCol": "67"
    },
    "817": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "89",
      "startCol": "2",
      "endLine": "89",
      "endCol": "33"
    },
    "818": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "102",
      "startCol": "16",
      "endLine": "102",
      "endCol": "62"
    },
    "819": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "114",
      "startCol": "16",
      "endLine": "114",
      "endCol": "62"
    },
    "820": {
      "patternID": "pattern3",
      "file": "test/lib/types/module/ModuleFormatter.js",
      "startLine": "125",
      "startCol": "2",
      "endLine": "125",
      "endCol": "40"
    },
    "821": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryBuilder.js",
      "startLine": "55",
      "startCol": "2",
      "endLine": "55",
      "endCol": "43"
    },
    "822": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "44",
      "startCol": "16",
      "endLine": "44",
      "endCol": "68"
    },
    "823": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "54",
      "startCol": "16",
      "endLine": "54",
      "endCol": "68"
    },
    "824": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "66",
      "startCol": "16",
      "endLine": "66",
      "endCol": "68"
    },
    "825": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "78",
      "startCol": "16",
      "endLine": "78",
      "endCol": "77"
    },
    "826": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "88",
      "startCol": "16",
      "endLine": "88",
      "endCol": "77"
    },
    "827": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "100",
      "startCol": "16",
      "endLine": "100",
      "endCol": "77"
    },
    "828": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "110",
      "startCol": "2",
      "endLine": "110",
      "endCol": "48"
    },
    "829": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "122",
      "startCol": "16",
      "endLine": "122",
      "endCol": "83"
    },
    "830": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "122",
      "startCol": "22",
      "endLine": "122",
      "endCol": "83"
    },
    "831": {
      "patternID": "pattern3",
      "file": "test/lib/types/themeLibrary/ThemeLibraryFormatter.js",
      "startLine": "134",
      "startCol": "2",
      "endLine": "134",
      "endCol": "48"
    },
    "832": {
      "patternID": "pattern5",
      "file": "lib/lbt/analyzer/XMLTemplateAnalyzer.js",
      "startLine": "146",
      "startCol": "10",
      "endLine": "191",
      "endCol": "2"
    },
    "833": {
      "patternID": "pattern5",
      "file": "lib/processors/bundlers/manifestBundler.js",
      "startLine": "151",
      "startCol": "10",
      "endLine": "172",
      "endCol": "3"
    },
    "834": {
      "patternID": "pattern5",
      "file": "lib/processors/jsdoc/jsdocGenerator.js",
      "startLine": "142",
      "startCol": "1",
      "endLine": "162",
      "endCol": "1"
    },
    "835": {
      "patternID": "pattern5",
      "file": "lib/processors/jsdoc/lib/createIndexFiles.js",
      "startLine": "61",
      "startCol": "2",
      "endLine": "76",
      "endCol": "2"
    },
    "836": {
      "patternID": "pattern5",
      "file": "lib/processors/jsdoc/lib/createIndexFiles.js",
      "startLine": "85",
      "startCol": "2",
      "endLine": "97",
      "endCol": "2"
    },
    "837": {
      "patternID": "pattern5",
      "file": "lib/processors/jsdoc/lib/transformApiJson.js",
      "startLine": "732",
      "startCol": "2",
      "endLine": "751",
      "endCol": "2"
    },
    "838": {
      "patternID": "pattern5",
      "file": "lib/processors/jsdoc/lib/transformApiJson.js",
      "startLine": "834",
      "startCol": "2",
      "endLine": "841",
      "endCol": "2"
    },
    "839": {
      "patternID": "pattern5",
      "file": "lib/processors/jsdoc/lib/transformApiJson.js",
      "startLine": "913",
      "startCol": "2",
      "endLine": "939",
      "endCol": "2"
    },
    "840": {
      "patternID": "pattern5",
      "file": "lib/processors/jsdoc/lib/transformApiJson.js",
      "startLine": "946",
      "startCol": "2",
      "endLine": "957",
      "endCol": "2"
    },
    "841": {
      "patternID": "pattern5",
      "file": "lib/processors/manifestCreator.js",
      "startLine": "112",
      "startCol": "19",
      "endLine": "123",
      "endCol": "2"
    },
    "842": {
      "patternID": "pattern5",
      "file": "lib/types/AbstractFormatter.js",
      "startLine": "49",
      "startCol": "11",
      "endLine": "63",
      "endCol": "2"
    },
    "843": {
      "patternID": "pattern5",
      "file": "test/lib/builder/builder.js",
      "startLine": "36",
      "startCol": "19",
      "endLine": "46",
      "endCol": "1"
    },
    "844": {
      "patternID": "pattern5",
      "file": "test/lib/lbt/analyzer/JSModuleAnalyzer.js",
      "startLine": "33",
      "startCol": "1",
      "endLine": "51",
      "endCol": "1"
    },
    "845": {
      "patternID": "pattern5",
      "file": "test/lib/processors/resourceListCreator.js",
      "startLine": "461",
      "startCol": "56",
      "endLine": "467",
      "endCol": "2"
    },
    "846": {
      "patternID": "pattern5",
      "file": "test/lib/processors/stringReplacer.js",
      "startLine": "5",
      "startCol": "29",
      "endLine": "19",
      "endCol": "1"
    },
    "847": {
      "patternID": "pattern5",
      "file": "test/lib/tasks/bundlers/generateLibraryPreload.integration.js",
      "startLine": "19",
      "startCol": "19",
      "endLine": "29",
      "endCol": "1"
    },
    "848": {
      "patternID": "pattern5",
      "file": "test/lib/tasks/bundlers/generateManifestBundle.integration.js",
      "startLine": "18",
      "startCol": "19",
      "endLine": "28",
      "endCol": "1"
    },
    "849": {
      "patternID": "pattern5",
      "file": "test/lib/tasks/bundlers/generateStandaloneAppBundle.integration.js",
      "startLine": "20",
      "startCol": "19",
      "endLine": "30",
      "endCol": "1"
    },
    "850": {
      "patternID": "pattern5",
      "file": "test/lib/tasks/generateCachebusterInfo.js",
      "startLine": "15",
      "startCol": "19",
      "endLine": "25",
      "endCol": "1"
    }
  },
  "files": {
    "lib/lbt/graph/dependencyGraph.js": "\"use strict\";\n\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:graph:dependencyGraph\");\n\nclass Node {\n\tconstructor(name) {\n\t\tthis.name = name;\n\t\tthis.visited = false;\n\t\tthis.succ = new Set();\n\t\tthis.pred = new Set();\n\t\tthis.dominators = null; // TODO not nice to know dominators here\n\t}\n}\n\n/**\n *\n * @param {ResourcePool} pool resource pool\n * @param {Array} roots root elements\n * @param {object} options Options\n * @param {boolean} options.includeConditionalDependencies whether or not to include optional dependencies\n * @returns {Promise<{n0: Node, nodes: Map<any, any>}>}\n */\nasync function createDependencyGraph(pool, roots, options) {\n\tconst includeConditionalDependencies = options && options.includeConditionalDependencies;\n\n\t// create graph representing modules and their dependencies\n\tconst nodes = new Map();\n\n\tfunction visitNode(name) {\n\t\tlet node = nodes.get(name);\n\t\tif ( !node ) {\n\t\t\tnodes.set( name, node = new Node(name) );\n\t\t} else if ( node.visited ) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\n\t\tnode.visited = true;\n\n\t\treturn pool.getModuleInfo( name ).then( (module) => {\n\t\t\tconst p = module.dependencies.map( (dep) => {\n\t\t\t\tif ( includeConditionalDependencies || !module.isConditionalDependency(dep) ) {\n\t\t\t\t\treturn visitNode(dep).then( (child) => child.pred.add( node ) );\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Promise.all(p);\n\t\t}, (err) => {\n\t\t\tlog.error(\"module %s not found in pool:\", name, err);\n\t\t}).then( () => node );\n\t}\n\n\t// create artificial root node and link it with roots\n\tconst n0 = new Node(\"\");\n\tnodes.set(\"\", n0);\n\tconst p = roots.map( (root) => {\n\t\t// console.log(\"  entry point %s\", root.name);\n\t\treturn visitNode(root.name).then( (child) => child.pred.add( n0 ) );\n\t});\n\n\treturn Promise.all(p).then( () => {\n\t\treturn {\n\t\t\tn0: n0,\n\t\t\tnodes: nodes\n\t\t};\n\t});\n}\n\nmodule.exports = createDependencyGraph;\n\n// TODO introduce class Graph\n// TODO remove n0 here, only introduce it in dominator tree (using the Graph API)\n// TODO introduce payload for nodes to get rid of visited or dominator\n",
    "node_modules/ava/lib/runner.js": "'use strict';\nconst Emittery = require('emittery');\nconst matcher = require('matcher');\nconst ContextRef = require('./context-ref');\nconst createChain = require('./create-chain');\nconst parseTestArgs = require('./parse-test-args');\nconst snapshotManager = require('./snapshot-manager');\nconst serializeError = require('./serialize-error');\nconst Runnable = require('./test');\n\nclass Runner extends Emittery {\n\tconstructor(options = {}) {\n\t\tsuper();\n\n\t\tthis.experiments = options.experiments || {};\n\t\tthis.failFast = options.failFast === true;\n\t\tthis.failWithoutAssertions = options.failWithoutAssertions !== false;\n\t\tthis.file = options.file;\n\t\tthis.checkSelectedByLineNumbers = options.checkSelectedByLineNumbers;\n\t\tthis.match = options.match || [];\n\t\tthis.powerAssert = undefined; // Assigned later.\n\t\tthis.projectDir = options.projectDir;\n\t\tthis.recordNewSnapshots = options.recordNewSnapshots === true;\n\t\tthis.runOnlyExclusive = options.runOnlyExclusive === true;\n\t\tthis.serial = options.serial === true;\n\t\tthis.skippingTests = false;\n\t\tthis.snapshotDir = options.snapshotDir;\n\t\tthis.updateSnapshots = options.updateSnapshots;\n\n\t\tthis.activeRunnables = new Set();\n\t\tthis.boundCompareTestSnapshot = this.compareTestSnapshot.bind(this);\n\t\tthis.skippedSnapshots = false;\n\t\tthis.boundSkipSnapshot = this.skipSnapshot.bind(this);\n\t\tthis.interrupted = false;\n\t\tthis.snapshots = null;\n\t\tthis.nextTaskIndex = 0;\n\t\tthis.tasks = {\n\t\t\tafter: [],\n\t\t\tafterAlways: [],\n\t\t\tafterEach: [],\n\t\t\tafterEachAlways: [],\n\t\t\tbefore: [],\n\t\t\tbeforeEach: [],\n\t\t\tconcurrent: [],\n\t\t\tserial: [],\n\t\t\ttodo: []\n\t\t};\n\t\tthis.waitForReady = [];\n\n\t\tconst uniqueTestTitles = new Set();\n\t\tthis.registerUniqueTitle = title => {\n\t\t\tif (uniqueTestTitles.has(title)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tuniqueTestTitles.add(title);\n\t\t\treturn true;\n\t\t};\n\n\t\tlet hasStarted = false;\n\t\tlet scheduledStart = false;\n\t\tconst meta = Object.freeze({\n\t\t\tfile: options.file,\n\t\t\tget snapshotDirectory() {\n\t\t\t\tconst {file, snapshotDir: fixedLocation, projectDir} = options;\n\t\t\t\treturn snapshotManager.determineSnapshotDir({file, fixedLocation, projectDir});\n\t\t\t}\n\t\t});\n\t\tthis.chain = createChain((metadata, testArgs) => { // eslint-disable-line complexity\n\t\t\tif (hasStarted) {\n\t\t\t\tthrow new Error('All tests and hooks must be declared synchronously in your test file, and cannot be nested within other tests or hooks.');\n\t\t\t}\n\n\t\t\tif (!scheduledStart) {\n\t\t\t\tscheduledStart = true;\n\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\thasStarted = true;\n\t\t\t\t\tthis.start();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tmetadata.taskIndex = this.nextTaskIndex++;\n\n\t\t\tconst {args, buildTitle, implementations, rawTitle} = parseTestArgs(testArgs);\n\n\t\t\tif (this.checkSelectedByLineNumbers) {\n\t\t\t\tmetadata.selected = this.checkSelectedByLineNumbers();\n\t\t\t}\n\n\t\t\tif (metadata.todo) {\n\t\t\t\tif (implementations.length > 0) {\n\t\t\t\t\tthrow new TypeError('`todo` tests are not allowed to have an implementation. Use `test.skip()` for tests with an implementation.');\n\t\t\t\t}\n\n\t\t\t\tif (!rawTitle) { // Either undefined or a string.\n\t\t\t\t\tthrow new TypeError('`todo` tests require a title');\n\t\t\t\t}\n\n\t\t\t\tif (!this.registerUniqueTitle(rawTitle)) {\n\t\t\t\t\tthrow new Error(`Duplicate test title: ${rawTitle}`);\n\t\t\t\t}\n\n\t\t\t\tif (this.match.length > 0) {\n\t\t\t\t\t// --match selects TODO tests.\n\t\t\t\t\tif (matcher([rawTitle], this.match).length === 1) {\n\t\t\t\t\t\tmetadata.exclusive = true;\n\t\t\t\t\t\tthis.runOnlyExclusive = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.tasks.todo.push({title: rawTitle, metadata});\n\t\t\t\tthis.emit('stateChange', {\n\t\t\t\t\ttype: 'declared-test',\n\t\t\t\t\ttitle: rawTitle,\n\t\t\t\t\tknownFailing: false,\n\t\t\t\t\ttodo: true\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (implementations.length === 0) {\n\t\t\t\t\tthrow new TypeError('Expected an implementation. Use `test.todo()` for tests without an implementation.');\n\t\t\t\t}\n\n\t\t\t\tfor (const implementation of implementations) {\n\t\t\t\t\tlet {title, isSet, isValid, isEmpty} = buildTitle(implementation);\n\n\t\t\t\t\tif (isSet && !isValid) {\n\t\t\t\t\t\tthrow new TypeError('Test & hook titles must be strings');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isEmpty) {\n\t\t\t\t\t\tif (metadata.type === 'test') {\n\t\t\t\t\t\t\tthrow new TypeError('Tests must have a title');\n\t\t\t\t\t\t} else if (metadata.always) {\n\t\t\t\t\t\t\ttitle = `${metadata.type}.always hook`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttitle = `${metadata.type} hook`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (metadata.type === 'test' && !this.registerUniqueTitle(title)) {\n\t\t\t\t\t\tthrow new Error(`Duplicate test title: ${title}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst task = {\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\timplementation,\n\t\t\t\t\t\targs,\n\t\t\t\t\t\tmetadata: {...metadata}\n\t\t\t\t\t};\n\n\t\t\t\t\tif (metadata.type === 'test') {\n\t\t\t\t\t\tif (this.match.length > 0) {\n\t\t\t\t\t\t\t// --match overrides .only()\n\t\t\t\t\t\t\ttask.metadata.exclusive = matcher([title], this.match).length === 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (task.metadata.skipped) {\n\t\t\t\t\t\t\tthis.skippingTests = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (task.metadata.exclusive) {\n\t\t\t\t\t\t\tthis.runOnlyExclusive = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.tasks[metadata.serial ? 'serial' : 'concurrent'].push(task);\n\t\t\t\t\t\tthis.emit('stateChange', {\n\t\t\t\t\t\t\ttype: 'declared-test',\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\tknownFailing: metadata.failing,\n\t\t\t\t\t\t\ttodo: false\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!metadata.skipped) {\n\t\t\t\t\t\tthis.tasks[metadata.type + (metadata.always ? 'Always' : '')].push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tserial: false,\n\t\t\texclusive: false,\n\t\t\tskipped: false,\n\t\t\ttodo: false,\n\t\t\tfailing: false,\n\t\t\tcallback: false,\n\t\t\tinline: false, // Set for attempt metadata created by `t.try()`\n\t\t\talways: false\n\t\t}, meta);\n\t}\n\n\tcompareTestSnapshot(options) {\n\t\tif (!this.snapshots) {\n\t\t\tthis.snapshots = snapshotManager.load({\n\t\t\t\tfile: this.file,\n\t\t\t\tfixedLocation: this.snapshotDir,\n\t\t\t\tprojectDir: this.projectDir,\n\t\t\t\trecordNewSnapshots: this.recordNewSnapshots,\n\t\t\t\tupdating: this.updateSnapshots && !this.runOnlyExclusive && !this.skippingTests\n\t\t\t});\n\t\t\tthis.emit('dependency', this.snapshots.snapPath);\n\t\t}\n\n\t\treturn this.snapshots.compare(options);\n\t}\n\n\tskipSnapshot() {\n\t\tthis.skippedSnapshots = true;\n\t}\n\n\tsaveSnapshotState() {\n\t\tif (\n\t\t\tthis.updateSnapshots &&\n\t\t\t(\n\t\t\t\tthis.runOnlyExclusive ||\n\t\t\t\tthis.skippingTests ||\n\t\t\t\tthis.skippedSnapshots\n\t\t\t)\n\t\t) {\n\t\t\treturn {cannotSave: true};\n\t\t}\n\n\t\tif (this.snapshots) {\n\t\t\treturn {touchedFiles: this.snapshots.save()};\n\t\t}\n\n\t\tif (this.updateSnapshots) {\n\t\t\treturn {touchedFiles: snapshotManager.cleanSnapshots({\n\t\t\t\tfile: this.file,\n\t\t\t\tfixedLocation: this.snapshotDir,\n\t\t\t\tprojectDir: this.projectDir\n\t\t\t})};\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tonRun(runnable) {\n\t\tthis.activeRunnables.add(runnable);\n\t}\n\n\tonRunComplete(runnable) {\n\t\tthis.activeRunnables.delete(runnable);\n\t}\n\n\tattributeLeakedError(err) {\n\t\tfor (const runnable of this.activeRunnables) {\n\t\t\tif (runnable.attributeLeakedError(err)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tbeforeExitHandler() {\n\t\tfor (const runnable of this.activeRunnables) {\n\t\t\trunnable.finishDueToInactivity();\n\t\t}\n\t}\n\n\tasync runMultiple(runnables) {\n\t\tlet allPassed = true;\n\t\tconst storedResults = [];\n\t\tconst runAndStoreResult = async runnable => {\n\t\t\tconst result = await this.runSingle(runnable);\n\t\t\tif (!result.passed) {\n\t\t\t\tallPassed = false;\n\t\t\t}\n\n\t\t\tstoredResults.push(result);\n\t\t};\n\n\t\tlet waitForSerial = Promise.resolve();\n\t\tawait runnables.reduce((previous, runnable) => { // eslint-disable-line unicorn/no-reduce\n\t\t\tif (runnable.metadata.serial || this.serial) {\n\t\t\t\twaitForSerial = previous.then(() => {\n\t\t\t\t\t// Serial runnables run as long as there was no previous failure, unless\n\t\t\t\t\t// the runnable should always be run.\n\t\t\t\t\treturn (allPassed || runnable.metadata.always) && runAndStoreResult(runnable);\n\t\t\t\t});\n\t\t\t\treturn waitForSerial;\n\t\t\t}\n\n\t\t\treturn Promise.all([\n\t\t\t\tprevious,\n\t\t\t\twaitForSerial.then(() => {\n\t\t\t\t\t// Concurrent runnables are kicked off after the previous serial\n\t\t\t\t\t// runnables have completed, as long as there was no previous failure\n\t\t\t\t\t// (or if the runnable should always be run). One concurrent runnable's\n\t\t\t\t\t// failure does not prevent the next runnable from running.\n\t\t\t\t\treturn (allPassed || runnable.metadata.always) && runAndStoreResult(runnable);\n\t\t\t\t})\n\t\t\t]);\n\t\t}, waitForSerial);\n\n\t\treturn {allPassed, storedResults};\n\t}\n\n\tasync runSingle(runnable) {\n\t\tthis.onRun(runnable);\n\t\tconst result = await runnable.run();\n\t\t// If run() throws or rejects then the entire test run crashes, so\n\t\t// onRunComplete() doesn't *have* to be inside a finally.\n\t\tthis.onRunComplete(runnable);\n\t\treturn result;\n\t}\n\n\tasync runHooks(tasks, contextRef, {titleSuffix, testPassed, associatedTaskIndex} = {}) {\n\t\tconst hooks = tasks.map(task => new Runnable({\n\t\t\tcontextRef,\n\t\t\texperiments: this.experiments,\n\t\t\tfailWithoutAssertions: false,\n\t\t\tfn: task.args.length === 0 ?\n\t\t\t\ttask.implementation :\n\t\t\t\tt => task.implementation.apply(null, [t].concat(task.args)),\n\t\t\tcompareTestSnapshot: this.boundCompareTestSnapshot,\n\t\t\tskipSnapshot: this.boundSkipSnapshot,\n\t\t\tupdateSnapshots: this.updateSnapshots,\n\t\t\tmetadata: {...task.metadata, associatedTaskIndex},\n\t\t\tpowerAssert: this.powerAssert,\n\t\t\ttitle: `${task.title}${titleSuffix || ''}`,\n\t\t\tisHook: true,\n\t\t\ttestPassed\n\t\t}));\n\t\tconst outcome = await this.runMultiple(hooks, this.serial);\n\t\tfor (const result of outcome.storedResults) {\n\t\t\tif (result.passed) {\n\t\t\t\tthis.emit('stateChange', {\n\t\t\t\t\ttype: 'hook-finished',\n\t\t\t\t\ttitle: result.title,\n\t\t\t\t\tduration: result.duration,\n\t\t\t\t\tlogs: result.logs\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.emit('stateChange', {\n\t\t\t\t\ttype: 'hook-failed',\n\t\t\t\t\ttitle: result.title,\n\t\t\t\t\terr: serializeError('Hook failure', true, result.error),\n\t\t\t\t\tduration: result.duration,\n\t\t\t\t\tlogs: result.logs\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn outcome.allPassed;\n\t}\n\n\tasync runTest(task, contextRef) {\n\t\tconst hookSuffix = ` for ${task.title}`;\n\t\tlet hooksOk = await this.runHooks(\n\t\t\tthis.tasks.beforeEach,\n\t\t\tcontextRef,\n\t\t\t{\n\t\t\t\ttitleSuffix: hookSuffix,\n\t\t\t\tassociatedTaskIndex: task.metadata.taskIndex\n\t\t\t}\n\t\t);\n\n\t\tlet testOk = false;\n\t\tif (hooksOk) {\n\t\t\t// Only run the test if all `beforeEach` hooks passed.\n\t\t\tconst test = new Runnable({\n\t\t\t\tcontextRef,\n\t\t\t\texperiments: this.experiments,\n\t\t\t\tfailWithoutAssertions: this.failWithoutAssertions,\n\t\t\t\tfn: task.args.length === 0 ?\n\t\t\t\t\ttask.implementation :\n\t\t\t\t\tt => task.implementation.apply(null, [t].concat(task.args)),\n\t\t\t\tcompareTestSnapshot: this.boundCompareTestSnapshot,\n\t\t\t\tskipSnapshot: this.boundSkipSnapshot,\n\t\t\t\tupdateSnapshots: this.updateSnapshots,\n\t\t\t\tmetadata: task.metadata,\n\t\t\t\tpowerAssert: this.powerAssert,\n\t\t\t\ttitle: task.title,\n\t\t\t\tregisterUniqueTitle: this.registerUniqueTitle\n\t\t\t});\n\n\t\t\tconst result = await this.runSingle(test);\n\t\t\ttestOk = result.passed;\n\n\t\t\tif (testOk) {\n\t\t\t\tthis.emit('stateChange', {\n\t\t\t\t\ttype: 'test-passed',\n\t\t\t\t\ttitle: result.title,\n\t\t\t\t\tduration: result.duration,\n\t\t\t\t\tknownFailing: result.metadata.failing,\n\t\t\t\t\tlogs: result.logs\n\t\t\t\t});\n\n\t\t\t\thooksOk = await this.runHooks(\n\t\t\t\t\tthis.tasks.afterEach,\n\t\t\t\t\tcontextRef,\n\t\t\t\t\t{\n\t\t\t\t\t\ttitleSuffix: hookSuffix,\n\t\t\t\t\t\ttestPassed: testOk,\n\t\t\t\t\t\tassociatedTaskIndex: task.metadata.taskIndex\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.emit('stateChange', {\n\t\t\t\t\ttype: 'test-failed',\n\t\t\t\t\ttitle: result.title,\n\t\t\t\t\terr: serializeError('Test failure', true, result.error, this.file),\n\t\t\t\t\tduration: result.duration,\n\t\t\t\t\tknownFailing: result.metadata.failing,\n\t\t\t\t\tlogs: result.logs\n\t\t\t\t});\n\t\t\t\t// Don't run `afterEach` hooks if the test failed.\n\t\t\t}\n\t\t}\n\n\t\tconst alwaysOk = await this.runHooks(\n\t\t\tthis.tasks.afterEachAlways,\n\t\t\tcontextRef,\n\t\t\t{\n\t\t\t\ttitleSuffix: hookSuffix,\n\t\t\t\ttestPassed: testOk,\n\t\t\t\tassociatedTaskIndex: task.metadata.taskIndex\n\t\t\t});\n\t\treturn alwaysOk && hooksOk && testOk;\n\t}\n\n\tasync start() {\n\t\tconst concurrentTests = [];\n\t\tconst serialTests = [];\n\t\tfor (const task of this.tasks.serial) {\n\t\t\tif (this.runOnlyExclusive && !task.metadata.exclusive) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.checkSelectedByLineNumbers && !task.metadata.selected) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.emit('stateChange', {\n\t\t\t\ttype: 'selected-test',\n\t\t\t\ttitle: task.title,\n\t\t\t\tknownFailing: task.metadata.failing,\n\t\t\t\tskip: task.metadata.skipped,\n\t\t\t\ttodo: false\n\t\t\t});\n\n\t\t\tif (!task.metadata.skipped) {\n\t\t\t\tserialTests.push(task);\n\t\t\t}\n\t\t}\n\n\t\tfor (const task of this.tasks.concurrent) {\n\t\t\tif (this.runOnlyExclusive && !task.metadata.exclusive) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.checkSelectedByLineNumbers && !task.metadata.selected) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.emit('stateChange', {\n\t\t\t\ttype: 'selected-test',\n\t\t\t\ttitle: task.title,\n\t\t\t\tknownFailing: task.metadata.failing,\n\t\t\t\tskip: task.metadata.skipped,\n\t\t\t\ttodo: false\n\t\t\t});\n\n\t\t\tif (!task.metadata.skipped) {\n\t\t\t\tif (this.serial) {\n\t\t\t\t\tserialTests.push(task);\n\t\t\t\t} else {\n\t\t\t\t\tconcurrentTests.push(task);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const task of this.tasks.todo) {\n\t\t\tif (this.runOnlyExclusive && !task.metadata.exclusive) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.checkSelectedByLineNumbers && !task.metadata.selected) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.emit('stateChange', {\n\t\t\t\ttype: 'selected-test',\n\t\t\t\ttitle: task.title,\n\t\t\t\tknownFailing: false,\n\t\t\t\tskip: false,\n\t\t\t\ttodo: true\n\t\t\t});\n\t\t}\n\n\t\tawait Promise.all(this.waitForReady);\n\n\t\tif (concurrentTests.length === 0 && serialTests.length === 0) {\n\t\t\tthis.emit('finish');\n\t\t\t// Don't run any hooks if there are no tests to run.\n\t\t\treturn;\n\t\t}\n\n\t\tconst contextRef = new ContextRef();\n\n\t\t// Note that the hooks and tests always begin running asynchronously.\n\t\tconst beforePromise = this.runHooks(this.tasks.before, contextRef);\n\t\tconst serialPromise = beforePromise.then(beforeHooksOk => { // eslint-disable-line promise/prefer-await-to-then\n\t\t\t// Don't run tests if a `before` hook failed.\n\t\t\tif (!beforeHooksOk) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn serialTests.reduce(async (previous, task) => { // eslint-disable-line unicorn/no-reduce\n\t\t\t\tconst previousOk = await previous;\n\t\t\t\t// Don't start tests after an interrupt.\n\t\t\t\tif (this.interrupted) {\n\t\t\t\t\treturn previousOk;\n\t\t\t\t}\n\n\t\t\t\t// Prevent subsequent tests from running if `failFast` is enabled and\n\t\t\t\t// the previous test failed.\n\t\t\t\tif (!previousOk && this.failFast) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn this.runTest(task, contextRef.copy());\n\t\t\t}, true);\n\t\t});\n\t\tconst concurrentPromise = Promise.all([beforePromise, serialPromise]).then(async ([beforeHooksOk, serialOk]) => { // eslint-disable-line promise/prefer-await-to-then\n\t\t\t// Don't run tests if a `before` hook failed, or if `failFast` is enabled\n\t\t\t// and a previous serial test failed.\n\t\t\tif (!beforeHooksOk || (!serialOk && this.failFast)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Don't start tests after an interrupt.\n\t\t\tif (this.interrupted) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// If a concurrent test fails, even if `failFast` is enabled it won't\n\t\t\t// stop other concurrent tests from running.\n\t\t\tconst allOkays = await Promise.all(concurrentTests.map(task => {\n\t\t\t\treturn this.runTest(task, contextRef.copy());\n\t\t\t}));\n\t\t\treturn allOkays.every(ok => ok);\n\t\t});\n\n\t\tconst beforeExitHandler = this.beforeExitHandler.bind(this);\n\t\tprocess.on('beforeExit', beforeExitHandler);\n\n\t\ttry {\n\t\t\tconst ok = await concurrentPromise;\n\t\t\t// Only run `after` hooks if all hooks and tests passed.\n\t\t\tif (ok) {\n\t\t\t\tawait this.runHooks(this.tasks.after, contextRef);\n\t\t\t}\n\n\t\t\t// Always run `after.always` hooks.\n\t\t\tawait this.runHooks(this.tasks.afterAlways, contextRef);\n\t\t\tprocess.removeListener('beforeExit', beforeExitHandler);\n\t\t\tawait this.emit('finish');\n\t\t} catch (error) {\n\t\t\tawait this.emit('error', error);\n\t\t}\n\t}\n\n\tinterrupt() {\n\t\tthis.interrupted = true;\n\t}\n}\n\nmodule.exports = Runner;\n",
    "test/lib/lbt/graph/dependencyGraph.js": "const test = require(\"ava\");\n\nconst dependencyGraph = require(\"../../../../lib/lbt/graph/dependencyGraph\");\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\n\nfunction createMockPool(dependencyMapping) {\n\treturn {\n\t\tasync getModuleInfo(name) {\n\t\t\tconst info = new ModuleInfo(name);\n\t\t\tlet dependencies = dependencyMapping[name];\n\t\t\tif (!dependencies) {\n\t\t\t\treturn info;\n\t\t\t}\n\t\t\tif (!Array.isArray(dependencies)) {\n\t\t\t\tdependencies = [dependencies];\n\t\t\t}\n\t\t\tdependencies.forEach((dep) => {\n\t\t\t\tinfo.addDependency(dep);\n\t\t\t});\n\t\t\treturn info;\n\t\t}\n\t};\n}\n\nfunction checkNZero(t, oResult) {\n\tt.falsy(oResult.n0.dominators);\n\tt.is(oResult.n0.name, \"\");\n\tt.deepEqual(Array.from(oResult.n0.pred), []);\n\tt.deepEqual(Array.from(oResult.n0.succ), []);\n\tt.false(oResult.n0.visited);\n}\n\nfunction getPredecessors(node) {\n\treturn Array.from(node.pred).map((node) => node.name);\n}\n\n/**\n * Dependencies:\n *           \"\"\n *            |\n *          myroot\n *            |\n *          mydep\n *            |\n *          superb\n *\n */\ntest(\"dependency graph with 1 root\", async (t) => {\n\tconst dependencyMapping = {\n\t\t\"myroot\": \"mydep\",\n\t\t\"mydep\": \"superb\"\n\t};\n\tconst pool = createMockPool(dependencyMapping);\n\tconst roots = [{\n\t\tname: \"myroot\"\n\t}];\n\tconst oResult = await dependencyGraph(pool, roots);\n\tcheckNZero(t, oResult);\n\tt.deepEqual(Array.from(oResult.nodes.keys()), [\"\", \"myroot\", \"mydep\", \"superb\"]);\n\n\tconst empty = oResult.nodes.get(\"\");\n\tt.deepEqual(getPredecessors(empty), []);\n\tt.false(empty.visited, \"just a temp node\");\n\n\tconst myroot = oResult.nodes.get(\"myroot\");\n\tt.deepEqual(getPredecessors(myroot), [\"\"], \"myroot holds a dependency to the temp node\");\n\n\tconst mydep = oResult.nodes.get(\"mydep\");\n\tt.deepEqual(getPredecessors(mydep), [\"myroot\"], \"mydep holds a dependency to myroot\");\n\n\n\tconst superb = oResult.nodes.get(\"superb\");\n\tt.deepEqual(getPredecessors(superb), [\"mydep\"], \"superb holds a dependency to mydep\");\n});\n\n/**\n * Dependencies:\n *           \"\"\n *            |    \\\n *          myroot  >\n *            |   /\n *          mydep\n *            |\n *          superb\n *\n */\ntest(\"dependency with 2 roots\", async (t) => {\n\tconst dependencies = {\n\t\t\"myroot\": \"mydep\",\n\t\t\"mydep\": \"superb\"\n\t};\n\tconst pool = createMockPool(dependencies);\n\tconst roots = [{\n\t\tname: \"myroot\"\n\t}, {\n\t\tname: \"mydep\"\n\t}];\n\tconst oResult = await dependencyGraph(pool, roots);\n\tcheckNZero(t, oResult);\n\tt.deepEqual(Array.from(oResult.nodes.keys()), [\"\", \"myroot\", \"mydep\", \"superb\"]);\n\n\tconst empty = oResult.nodes.get(\"\");\n\tt.deepEqual(getPredecessors(empty), []);\n\tt.false(empty.visited, \"just a temp node\");\n\n\tconst myroot = oResult.nodes.get(\"myroot\");\n\tt.deepEqual(getPredecessors(myroot), [\"\"], \"myroot holds a dependency to the temp node\");\n\n\tconst mydep = oResult.nodes.get(\"mydep\");\n\tt.deepEqual(getPredecessors(mydep), [\"myroot\", \"\"], \"mydep holds a dependency to myroot and temp node\");\n\n\tconst superb = oResult.nodes.get(\"superb\");\n\tt.deepEqual(getPredecessors(superb), [\"mydep\"], \"superb holds a dependency to mydep\");\n});\n\n/**\n * Dependencies:\n *           \"\"\n *            |\n *          myroot\n *\n */\ntest(\"dependency graph with rejecting pool\", async (t) => {\n\tconst pool = {\n\t\tasync getModuleInfo() {\n\t\t\tthrow new Error(\"myerror\");\n\t\t}\n\t};\n\tconst roots = [{\n\t\tname: \"myroot\"\n\t}];\n\n\tconst oResult = await dependencyGraph(pool, roots);\n\tcheckNZero(t, oResult);\n\tt.deepEqual(Array.from(oResult.nodes.keys()), [\"\", \"myroot\"]);\n\n\tconst empty = oResult.nodes.get(\"\");\n\tt.deepEqual(getPredecessors(empty), []);\n\tt.false(empty.visited, \"just a temp node\");\n\n\tconst myroot = oResult.nodes.get(\"myroot\");\n\tt.deepEqual(getPredecessors(myroot), [\"\"], \"the only dependency should be to the temp node\");\n});\n\n/**\n * Dependencies:\n *           \"\"\n *            |\n *          myroot\n *            |\n *          mydep\n *            |   \\\n *          superb \\\n *         /  |   \\ \\\n *       one  two  three\n */\ntest(\"Advanced dependency graph with 1 root\", async (t) => {\n\tconst dependencies = {\n\t\t\"myroot\": \"mydep\",\n\t\t\"mydep\": [\"superb\", \"three\"],\n\t\t\"superb\": [\"one\", \"two\", \"three\"]\n\t};\n\tconst pool = createMockPool(dependencies);\n\tconst roots = [{\n\t\tname: \"myroot\"\n\t}];\n\tconst oResult = await dependencyGraph(pool, roots);\n\tcheckNZero(t, oResult);\n\tt.deepEqual(Array.from(oResult.nodes.keys()), [\n\t\t\"\",\n\t\t\"myroot\",\n\t\t\"mydep\",\n\t\t\"superb\",\n\t\t\"three\",\n\t\t\"one\",\n\t\t\"two\"\n\t]);\n\n\tconst empty = oResult.nodes.get(\"\");\n\tt.deepEqual(getPredecessors(empty), []);\n\tt.false(empty.visited, \"just a temp node\");\n\n\tconst myroot = oResult.nodes.get(\"myroot\");\n\tt.deepEqual(getPredecessors(myroot), [\"\"], \"myroot holds a dependency to the temp node\");\n\n\tconst mydep = oResult.nodes.get(\"mydep\");\n\tt.deepEqual(getPredecessors(mydep), [\"myroot\"], \"mydep holds a dependency to myroot\");\n\n\n\tconst superb = oResult.nodes.get(\"superb\");\n\tt.deepEqual(getPredecessors(superb), [\"mydep\"], \"superb holds a dependency to mydep\");\n\n\tconst one = oResult.nodes.get(\"one\");\n\tt.deepEqual(getPredecessors(one), [\"superb\"], \"one holds a dependency to superb\");\n\n\tconst two = oResult.nodes.get(\"two\");\n\tt.deepEqual(getPredecessors(two), [\"superb\"], \"two holds a dependency to superb\");\n\n\tconst three = oResult.nodes.get(\"three\");\n\tt.deepEqual(getPredecessors(three), [\"superb\", \"mydep\"], \"three holds a dependency to mydep and superb\");\n});\n",
    "node_modules/ava/lib/test.js": "'use strict';\nconst concordance = require('concordance');\nconst isPromise = require('is-promise');\nconst plur = require('plur');\nconst assert = require('./assert');\nconst nowAndTimers = require('./now-and-timers');\nconst parseTestArgs = require('./parse-test-args');\nconst concordanceOptions = require('./concordance-options').default;\n\nfunction formatErrorValue(label, error) {\n\tconst formatted = concordance.format(error, concordanceOptions);\n\treturn {label, formatted};\n}\n\nconst captureSavedError = () => {\n\tconst limitBefore = Error.stackTraceLimit;\n\tError.stackTraceLimit = 1;\n\tconst err = new Error();\n\tError.stackTraceLimit = limitBefore;\n\treturn err;\n};\n\nconst testMap = new WeakMap();\nclass ExecutionContext extends assert.Assertions {\n\tconstructor(test) {\n\t\tsuper({\n\t\t\tpass: () => {\n\t\t\t\ttest.countPassedAssertion();\n\t\t\t},\n\t\t\tpending: promise => {\n\t\t\t\ttest.addPendingAssertion(promise);\n\t\t\t},\n\t\t\tfail: err => {\n\t\t\t\ttest.addFailedAssertion(err);\n\t\t\t},\n\t\t\tskip: () => {\n\t\t\t\ttest.countPassedAssertion();\n\t\t\t},\n\t\t\tcompareWithSnapshot: options => {\n\t\t\t\treturn test.compareWithSnapshot(options);\n\t\t\t},\n\t\t\tpowerAssert: test.powerAssert,\n\t\t\texperiments: test.experiments,\n\t\t\tdisableSnapshots: test.isHook === true\n\t\t});\n\t\ttestMap.set(this, test);\n\n\t\tthis.snapshot.skip = () => {\n\t\t\ttest.skipSnapshot();\n\t\t};\n\n\t\tthis.log = (...inputArgs) => {\n\t\t\tconst args = inputArgs.map(value => {\n\t\t\t\treturn typeof value === 'string' ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tconcordance.format(value, concordanceOptions);\n\t\t\t});\n\t\t\tif (args.length > 0) {\n\t\t\t\ttest.addLog(args.join(' '));\n\t\t\t}\n\t\t};\n\n\t\tthis.plan = count => {\n\t\t\ttest.plan(count, captureSavedError());\n\t\t};\n\n\t\tthis.plan.skip = () => {};\n\n\t\tthis.timeout = (ms, message) => {\n\t\t\ttest.timeout(ms, message);\n\t\t};\n\n\t\tthis.teardown = callback => {\n\t\t\ttest.addTeardown(callback);\n\t\t};\n\n\t\tthis.try = async (...attemptArgs) => {\n\t\t\tif (test.isHook) {\n\t\t\t\tconst error = new Error('`t.try()` can only be used in tests');\n\t\t\t\ttest.saveFirstError(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst {args, buildTitle, implementations, receivedImplementationArray} = parseTestArgs(attemptArgs);\n\n\t\t\tif (implementations.length === 0) {\n\t\t\t\tthrow new TypeError('Expected an implementation.');\n\t\t\t}\n\n\t\t\tconst attemptPromises = implementations.map((implementation, index) => {\n\t\t\t\tlet {title, isSet, isValid, isEmpty} = buildTitle(implementation);\n\n\t\t\t\tif (!isSet || isEmpty) {\n\t\t\t\t\ttitle = `${test.title} ─ attempt ${test.attemptCount + 1 + index}`;\n\t\t\t\t} else if (isValid) {\n\t\t\t\t\ttitle = `${test.title} ─ ${title}`;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError('`t.try()` titles must be strings'); // Throw synchronously!\n\t\t\t\t}\n\n\t\t\t\tif (!test.registerUniqueTitle(title)) {\n\t\t\t\t\tthrow new Error(`Duplicate test title: ${title}`);\n\t\t\t\t}\n\n\t\t\t\treturn {implementation, title};\n\t\t\t}).map(async ({implementation, title}) => {\n\t\t\t\tlet committed = false;\n\t\t\t\tlet discarded = false;\n\n\t\t\t\tconst {assertCount, deferredSnapshotRecordings, errors, logs, passed, snapshotCount, startingSnapshotCount} = await test.runAttempt(title, t => implementation(t, ...args));\n\n\t\t\t\treturn {\n\t\t\t\t\terrors,\n\t\t\t\t\tlogs: [...logs], // Don't allow modification of logs.\n\t\t\t\t\tpassed,\n\t\t\t\t\ttitle,\n\t\t\t\t\tcommit: ({retainLogs = true} = {}) => {\n\t\t\t\t\t\tif (committed) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (discarded) {\n\t\t\t\t\t\t\ttest.saveFirstError(new Error('Can’t commit a result that was previously discarded'));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcommitted = true;\n\t\t\t\t\t\ttest.finishAttempt({\n\t\t\t\t\t\t\tassertCount,\n\t\t\t\t\t\t\tcommit: true,\n\t\t\t\t\t\t\tdeferredSnapshotRecordings,\n\t\t\t\t\t\t\terrors,\n\t\t\t\t\t\t\tlogs,\n\t\t\t\t\t\t\tpassed,\n\t\t\t\t\t\t\tretainLogs,\n\t\t\t\t\t\t\tsnapshotCount,\n\t\t\t\t\t\t\tstartingSnapshotCount\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdiscard: ({retainLogs = false} = {}) => {\n\t\t\t\t\t\tif (committed) {\n\t\t\t\t\t\t\ttest.saveFirstError(new Error('Can’t discard a result that was previously committed'));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (discarded) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdiscarded = true;\n\t\t\t\t\t\ttest.finishAttempt({\n\t\t\t\t\t\t\tassertCount: 0,\n\t\t\t\t\t\t\tcommit: false,\n\t\t\t\t\t\t\tdeferredSnapshotRecordings,\n\t\t\t\t\t\t\terrors,\n\t\t\t\t\t\t\tlogs,\n\t\t\t\t\t\t\tpassed,\n\t\t\t\t\t\t\tretainLogs,\n\t\t\t\t\t\t\tsnapshotCount,\n\t\t\t\t\t\t\tstartingSnapshotCount\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tconst results = await Promise.all(attemptPromises);\n\t\t\treturn receivedImplementationArray ? results : results[0];\n\t\t};\n\t}\n\n\tget end() {\n\t\tconst end = testMap.get(this).bindEndCallback();\n\t\tconst endFn = error => end(error, captureSavedError());\n\t\treturn endFn;\n\t}\n\n\tget title() {\n\t\treturn testMap.get(this).title;\n\t}\n\n\tget context() {\n\t\treturn testMap.get(this).contextRef.get();\n\t}\n\n\tset context(context) {\n\t\ttestMap.get(this).contextRef.set(context);\n\t}\n\n\tget passed() {\n\t\tconst test = testMap.get(this);\n\t\treturn test.isHook ? test.testPassed : !test.assertError;\n\t}\n\n\t_throwsArgStart(assertion, file, line) {\n\t\ttestMap.get(this).trackThrows({assertion, file, line});\n\t}\n\n\t_throwsArgEnd() {\n\t\ttestMap.get(this).trackThrows(null);\n\t}\n}\n\nclass Test {\n\tconstructor(options) {\n\t\tthis.contextRef = options.contextRef;\n\t\tthis.experiments = options.experiments || {};\n\t\tthis.failWithoutAssertions = options.failWithoutAssertions;\n\t\tthis.fn = options.fn;\n\t\tthis.isHook = options.isHook === true;\n\t\tthis.metadata = options.metadata;\n\t\tthis.powerAssert = options.powerAssert;\n\t\tthis.title = options.title;\n\t\tthis.testPassed = options.testPassed;\n\t\tthis.registerUniqueTitle = options.registerUniqueTitle;\n\t\tthis.logs = [];\n\t\tthis.teardowns = [];\n\n\t\tconst {snapshotBelongsTo = this.title, nextSnapshotIndex = 0} = options;\n\t\tthis.snapshotBelongsTo = snapshotBelongsTo;\n\t\tthis.nextSnapshotIndex = nextSnapshotIndex;\n\t\tthis.snapshotCount = 0;\n\n\t\tconst deferRecording = this.metadata.inline;\n\t\tthis.deferredSnapshotRecordings = [];\n\t\tthis.compareWithSnapshot = ({expected, id, message}) => {\n\t\t\tthis.snapshotCount++;\n\n\t\t\t// TODO: In a breaking change, reject non-undefined, falsy IDs and messages.\n\t\t\tconst belongsTo = id || snapshotBelongsTo;\n\t\t\tconst index = id ? 0 : this.nextSnapshotIndex++;\n\t\t\tconst label = id ? '' : message || `Snapshot ${index + 1}`; // Human-readable labels start counting at 1.\n\n\t\t\tconst {taskIndex, associatedTaskIndex} = this.metadata;\n\t\t\tconst {record, ...result} = options.compareTestSnapshot({\n\t\t\t\tbelongsTo,\n\t\t\t\tdeferRecording,\n\t\t\t\texpected,\n\t\t\t\tindex,\n\t\t\t\tlabel,\n\t\t\t\ttaskIndex,\n\t\t\t\tsnapIndex: this.snapshotCount,\n\t\t\t\tassociatedTaskIndex\n\t\t\t});\n\t\t\tif (record) {\n\t\t\t\tthis.deferredSnapshotRecordings.push(record);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\tthis.skipSnapshot = () => {\n\t\t\tif (typeof options.skipSnapshot === 'function') {\n\t\t\t\toptions.skipSnapshot();\n\t\t\t}\n\n\t\t\tif (options.updateSnapshots) {\n\t\t\t\tthis.addFailedAssertion(new Error('Snapshot assertions cannot be skipped when updating snapshots'));\n\t\t\t} else {\n\t\t\t\tthis.nextSnapshotIndex++;\n\t\t\t\tthis.snapshotCount++;\n\t\t\t\tthis.countPassedAssertion();\n\t\t\t}\n\t\t};\n\n\t\tthis.runAttempt = async (title, fn) => {\n\t\t\tif (this.finishing) {\n\t\t\t\tthis.saveFirstError(new Error('Running a `t.try()`, but the test has already finished'));\n\t\t\t}\n\n\t\t\tthis.attemptCount++;\n\t\t\tthis.pendingAttemptCount++;\n\n\t\t\tconst {contextRef, snapshotBelongsTo, nextSnapshotIndex, snapshotCount: startingSnapshotCount} = this;\n\t\t\tconst attempt = new Test({\n\t\t\t\t...options,\n\t\t\t\tfn,\n\t\t\t\tmetadata: {...options.metadata, callback: false, failing: false, inline: true},\n\t\t\t\tcontextRef: contextRef.copy(),\n\t\t\t\tsnapshotBelongsTo,\n\t\t\t\tnextSnapshotIndex,\n\t\t\t\ttitle\n\t\t\t});\n\n\t\t\tconst {deferredSnapshotRecordings, error, logs, passed, assertCount, snapshotCount} = await attempt.run();\n\t\t\tconst errors = error ? [error] : [];\n\t\t\treturn {assertCount, deferredSnapshotRecordings, errors, logs, passed, snapshotCount, startingSnapshotCount};\n\t\t};\n\n\t\tthis.assertCount = 0;\n\t\tthis.assertError = undefined;\n\t\tthis.attemptCount = 0;\n\t\tthis.calledEnd = false;\n\t\tthis.duration = null;\n\t\tthis.endCallbackFinisher = null;\n\t\tthis.finishDueToAttributedError = null;\n\t\tthis.finishDueToInactivity = null;\n\t\tthis.finishDueToTimeout = null;\n\t\tthis.finishing = false;\n\t\tthis.pendingAssertionCount = 0;\n\t\tthis.pendingAttemptCount = 0;\n\t\tthis.pendingThrowsAssertion = null;\n\t\tthis.planCount = null;\n\t\tthis.startedAt = 0;\n\t\tthis.timeoutMs = 0;\n\t\tthis.timeoutTimer = null;\n\t}\n\n\tbindEndCallback() {\n\t\tif (this.metadata.callback) {\n\t\t\treturn (error, savedError) => {\n\t\t\t\tthis.endCallback(error, savedError);\n\t\t\t};\n\t\t}\n\n\t\tconst error_ = this.metadata.inline ? new Error('`t.end()` is not supported inside `t.try()`') : new Error('`t.end()` is not supported in this context. To use `t.end()` as a callback, you must use \"callback mode\" via `test.cb(testName, fn)`');\n\t\tthrow error_;\n\t}\n\n\tendCallback(error, savedError) {\n\t\tif (this.calledEnd) {\n\t\t\tthis.saveFirstError(new Error('`t.end()` called more than once'));\n\t\t\treturn;\n\t\t}\n\n\t\tthis.calledEnd = true;\n\n\t\tif (error) {\n\t\t\tthis.saveFirstError(new assert.AssertionError({\n\t\t\t\tactual: error,\n\t\t\t\tmessage: 'Callback called with an error',\n\t\t\t\tsavedError,\n\t\t\t\tvalues: [formatErrorValue('Callback called with an error:', error)]\n\t\t\t}));\n\t\t}\n\n\t\tif (this.endCallbackFinisher) {\n\t\t\tthis.endCallbackFinisher();\n\t\t}\n\t}\n\n\tcreateExecutionContext() {\n\t\treturn new ExecutionContext(this);\n\t}\n\n\tcountPassedAssertion() {\n\t\tif (this.finishing) {\n\t\t\tthis.saveFirstError(new Error('Assertion passed, but test has already finished'));\n\t\t}\n\n\t\tif (this.pendingAttemptCount > 0) {\n\t\t\tthis.saveFirstError(new Error('Assertion passed, but an attempt is pending. Use the attempt’s assertions instead'));\n\t\t}\n\n\t\tthis.assertCount++;\n\t\tthis.refreshTimeout();\n\t}\n\n\taddLog(text) {\n\t\tthis.logs.push(text);\n\t}\n\n\taddPendingAssertion(promise) {\n\t\tif (this.finishing) {\n\t\t\tthis.saveFirstError(new Error('Assertion started, but test has already finished'));\n\t\t}\n\n\t\tif (this.pendingAttemptCount > 0) {\n\t\t\tthis.saveFirstError(new Error('Assertion started, but an attempt is pending. Use the attempt’s assertions instead'));\n\t\t}\n\n\t\tthis.assertCount++;\n\t\tthis.pendingAssertionCount++;\n\t\tthis.refreshTimeout();\n\n\t\tpromise\n\t\t\t.catch(error => this.saveFirstError(error))\n\t\t\t.then(() => { // eslint-disable-line promise/prefer-await-to-then\n\t\t\t\tthis.pendingAssertionCount--;\n\t\t\t\tthis.refreshTimeout();\n\t\t\t});\n\t}\n\n\taddFailedAssertion(error) {\n\t\tif (this.finishing) {\n\t\t\tthis.saveFirstError(new Error('Assertion failed, but test has already finished'));\n\t\t}\n\n\t\tif (this.pendingAttemptCount > 0) {\n\t\t\tthis.saveFirstError(new Error('Assertion failed, but an attempt is pending. Use the attempt’s assertions instead'));\n\t\t}\n\n\t\tthis.assertCount++;\n\t\tthis.refreshTimeout();\n\t\tthis.saveFirstError(error);\n\t}\n\n\tfinishAttempt({commit, deferredSnapshotRecordings, errors, logs, passed, retainLogs, snapshotCount, startingSnapshotCount}) {\n\t\tif (this.finishing) {\n\t\t\tif (commit) {\n\t\t\t\tthis.saveFirstError(new Error('`t.try()` result was committed, but the test has already finished'));\n\t\t\t} else {\n\t\t\t\tthis.saveFirstError(new Error('`t.try()` result was discarded, but the test has already finished'));\n\t\t\t}\n\t\t}\n\n\t\tif (commit) {\n\t\t\tthis.assertCount++;\n\n\t\t\tif (startingSnapshotCount === this.snapshotCount) {\n\t\t\t\tthis.snapshotCount += snapshotCount;\n\t\t\t\tthis.nextSnapshotIndex += snapshotCount;\n\t\t\t\tfor (const record of deferredSnapshotRecordings) {\n\t\t\t\t\trecord();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.saveFirstError(new Error('Cannot commit `t.try()` result. Do not run concurrent snapshot assertions when using `t.try()`'));\n\t\t\t}\n\t\t}\n\n\t\tthis.pendingAttemptCount--;\n\n\t\tif (commit && !passed) {\n\t\t\tthis.saveFirstError(errors[0]);\n\t\t}\n\n\t\tif (retainLogs) {\n\t\t\tfor (const log of logs) {\n\t\t\t\tthis.addLog(log);\n\t\t\t}\n\t\t}\n\n\t\tthis.refreshTimeout();\n\t}\n\n\tsaveFirstError(error) {\n\t\tif (!this.assertError) {\n\t\t\tthis.assertError = error;\n\t\t}\n\t}\n\n\tplan(count, planError) {\n\t\tif (typeof count !== 'number') {\n\t\t\tthrow new TypeError('Expected a number');\n\t\t}\n\n\t\tthis.planCount = count;\n\n\t\t// In case the `planCount` doesn't match `assertCount, we need the stack of\n\t\t// this function to throw with a useful stack.\n\t\tthis.planError = planError;\n\t}\n\n\ttimeout(ms, message) {\n\t\tconst result = assert.checkAssertionMessage('timeout', message);\n\t\tif (result !== true) {\n\t\t\tthis.saveFirstError(result);\n\t\t\t// Allow the timeout to be set even when the message is invalid.\n\t\t\tmessage = '';\n\t\t}\n\n\t\tif (this.finishing) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.clearTimeout();\n\t\tthis.timeoutMs = ms;\n\t\tthis.timeoutTimer = nowAndTimers.setTimeout(() => {\n\t\t\tthis.saveFirstError(new Error(message || 'Test timeout exceeded'));\n\n\t\t\tif (this.finishDueToTimeout) {\n\t\t\t\tthis.finishDueToTimeout();\n\t\t\t}\n\t\t}, ms);\n\t}\n\n\trefreshTimeout() {\n\t\tif (!this.timeoutTimer) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.timeoutTimer.refresh) {\n\t\t\tthis.timeoutTimer.refresh();\n\t\t} else {\n\t\t\tthis.timeout(this.timeoutMs);\n\t\t}\n\t}\n\n\tclearTimeout() {\n\t\tnowAndTimers.clearTimeout(this.timeoutTimer);\n\t\tthis.timeoutTimer = null;\n\t}\n\n\taddTeardown(callback) {\n\t\tif (this.isHook) {\n\t\t\tthis.saveFirstError(new Error('`t.teardown()` is not allowed in hooks'));\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.finishing) {\n\t\t\tthis.saveFirstError(new Error('`t.teardown()` cannot be used during teardown'));\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow new TypeError('Expected a function');\n\t\t}\n\n\t\tthis.teardowns.push(callback);\n\t}\n\n\tasync runTeardowns() {\n\t\tconst teardowns = [...this.teardowns];\n\n\t\tif (this.experiments.reverseTeardowns) {\n\t\t\tteardowns.reverse();\n\t\t}\n\n\t\tfor (const teardown of teardowns) {\n\t\t\ttry {\n\t\t\t\tawait teardown(); // eslint-disable-line no-await-in-loop\n\t\t\t} catch (error) {\n\t\t\t\tthis.saveFirstError(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tverifyPlan() {\n\t\tif (!this.assertError && this.planCount !== null && this.planCount !== this.assertCount) {\n\t\t\tthis.saveFirstError(new assert.AssertionError({\n\t\t\t\tassertion: 'plan',\n\t\t\t\tmessage: `Planned for ${this.planCount} ${plur('assertion', this.planCount)}, but got ${this.assertCount}.`,\n\t\t\t\toperator: '===',\n\t\t\t\tsavedError: this.planError\n\t\t\t}));\n\t\t}\n\t}\n\n\tverifyAssertions() {\n\t\tif (this.assertError) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.pendingAttemptCount > 0) {\n\t\t\tthis.saveFirstError(new Error('Test finished, but not all attempts were committed or discarded'));\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.pendingAssertionCount > 0) {\n\t\t\tthis.saveFirstError(new Error('Test finished, but an assertion is still pending'));\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.failWithoutAssertions) {\n\t\t\tif (this.planCount !== null) {\n\t\t\t\treturn; // `verifyPlan()` will report an error already.\n\t\t\t}\n\n\t\t\tif (this.assertCount === 0 && !this.calledEnd) {\n\t\t\t\tthis.saveFirstError(new Error('Test finished without running any assertions'));\n\t\t\t}\n\t\t}\n\t}\n\n\ttrackThrows(pending) {\n\t\tthis.pendingThrowsAssertion = pending;\n\t}\n\n\tdetectImproperThrows(error) {\n\t\tif (!this.pendingThrowsAssertion) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pending = this.pendingThrowsAssertion;\n\t\tthis.pendingThrowsAssertion = null;\n\n\t\tconst values = [];\n\t\tif (error) {\n\t\t\tvalues.push(formatErrorValue(`The following error was thrown, possibly before \\`t.${pending.assertion}()\\` could be called:`, error));\n\t\t}\n\n\t\tthis.saveFirstError(new assert.AssertionError({\n\t\t\tassertion: pending.assertion,\n\t\t\tfixedSource: {file: pending.file, line: pending.line},\n\t\t\timproperUsage: true,\n\t\t\tmessage: `Improper usage of \\`t.${pending.assertion}()\\` detected`,\n\t\t\tsavedError: error instanceof Error && error,\n\t\t\tvalues\n\t\t}));\n\t\treturn true;\n\t}\n\n\twaitForPendingThrowsAssertion() {\n\t\treturn new Promise(resolve => {\n\t\t\tthis.finishDueToAttributedError = () => {\n\t\t\t\tresolve(this.finish());\n\t\t\t};\n\n\t\t\tthis.finishDueToInactivity = () => {\n\t\t\t\tthis.detectImproperThrows();\n\t\t\t\tresolve(this.finish());\n\t\t\t};\n\n\t\t\t// Wait up to a second to see if an error can be attributed to the\n\t\t\t// pending assertion.\n\t\t\tnowAndTimers.setTimeout(() => this.finishDueToInactivity(), 1000).unref();\n\t\t});\n\t}\n\n\tattributeLeakedError(error) {\n\t\tif (!this.detectImproperThrows(error)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.finishDueToAttributedError();\n\t\treturn true;\n\t}\n\n\tcallFn() {\n\t\ttry {\n\t\t\treturn {\n\t\t\t\tok: true,\n\t\t\t\tretval: this.fn.call(null, this.createExecutionContext())\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tok: false,\n\t\t\t\terror\n\t\t\t};\n\t\t}\n\t}\n\n\trun() {\n\t\tthis.startedAt = nowAndTimers.now();\n\n\t\tconst result = this.callFn();\n\t\tif (!result.ok) {\n\t\t\tif (!this.detectImproperThrows(result.error)) {\n\t\t\t\tthis.saveFirstError(new assert.AssertionError({\n\t\t\t\t\tmessage: 'Error thrown in test',\n\t\t\t\t\tsavedError: result.error instanceof Error && result.error,\n\t\t\t\t\tvalues: [formatErrorValue('Error thrown in test:', result.error)]\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn this.finish();\n\t\t}\n\n\t\tconst returnedObservable = result.retval !== null && typeof result.retval === 'object' && typeof result.retval.subscribe === 'function';\n\t\tconst returnedPromise = isPromise(result.retval);\n\n\t\tlet promise;\n\t\tif (returnedObservable) {\n\t\t\tpromise = new Promise((resolve, reject) => {\n\t\t\t\tresult.retval.subscribe({\n\t\t\t\t\terror: reject,\n\t\t\t\t\tcomplete: () => resolve()\n\t\t\t\t});\n\t\t\t});\n\t\t} else if (returnedPromise) {\n\t\t\t// `retval` can be any thenable, so convert to a proper promise.\n\t\t\tpromise = Promise.resolve(result.retval);\n\t\t}\n\n\t\tif (this.metadata.callback) {\n\t\t\tif (returnedObservable || returnedPromise) {\n\t\t\t\tconst asyncType = returnedObservable ? 'observables' : 'promises';\n\t\t\t\tthis.saveFirstError(new Error(`Do not return ${asyncType} from tests declared via \\`test.cb(…)\\`. Use \\`test.cb(…)\\` for legacy callback APIs. When using promises, observables or async functions, use \\`test(…)\\`.`));\n\t\t\t\treturn this.finish();\n\t\t\t}\n\n\t\t\tif (this.calledEnd) {\n\t\t\t\treturn this.finish();\n\t\t\t}\n\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tthis.endCallbackFinisher = () => {\n\t\t\t\t\tresolve(this.finish());\n\t\t\t\t};\n\n\t\t\t\tthis.finishDueToAttributedError = () => {\n\t\t\t\t\tresolve(this.finish());\n\t\t\t\t};\n\n\t\t\t\tthis.finishDueToTimeout = () => {\n\t\t\t\t\tresolve(this.finish());\n\t\t\t\t};\n\n\t\t\t\tthis.finishDueToInactivity = () => {\n\t\t\t\t\tthis.saveFirstError(new Error('`t.end()` was never called'));\n\t\t\t\t\tresolve(this.finish());\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tif (promise) {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tthis.finishDueToAttributedError = () => {\n\t\t\t\t\tresolve(this.finish());\n\t\t\t\t};\n\n\t\t\t\tthis.finishDueToTimeout = () => {\n\t\t\t\t\tresolve(this.finish());\n\t\t\t\t};\n\n\t\t\t\tthis.finishDueToInactivity = () => {\n\t\t\t\t\tconst error = returnedObservable ?\n\t\t\t\t\t\tnew Error('Observable returned by test never completed') :\n\t\t\t\t\t\tnew Error('Promise returned by test never resolved');\n\t\t\t\t\tthis.saveFirstError(error);\n\t\t\t\t\tresolve(this.finish());\n\t\t\t\t};\n\n\t\t\t\tpromise\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tif (!this.detectImproperThrows(error)) {\n\t\t\t\t\t\t\tthis.saveFirstError(new assert.AssertionError({\n\t\t\t\t\t\t\t\tmessage: 'Rejected promise returned by test',\n\t\t\t\t\t\t\t\tsavedError: error instanceof Error && error,\n\t\t\t\t\t\t\t\tvalues: [formatErrorValue('Rejected promise returned by test. Reason:', error)]\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => resolve(this.finish())); // eslint-disable-line promise/prefer-await-to-then\n\t\t\t});\n\t\t}\n\n\t\treturn this.finish();\n\t}\n\n\tasync finish() {\n\t\tthis.finishing = true;\n\n\t\tif (!this.assertError && this.pendingThrowsAssertion) {\n\t\t\treturn this.waitForPendingThrowsAssertion();\n\t\t}\n\n\t\tthis.clearTimeout();\n\t\tthis.verifyPlan();\n\t\tthis.verifyAssertions();\n\t\tawait this.runTeardowns();\n\n\t\tthis.duration = nowAndTimers.now() - this.startedAt;\n\n\t\tlet error = this.assertError;\n\t\tlet passed = !error;\n\n\t\tif (this.metadata.failing) {\n\t\t\tpassed = !passed;\n\n\t\t\terror = passed ? null : new Error('Test was expected to fail, but succeeded, you should stop marking the test as failing');\n\t\t}\n\n\t\treturn {\n\t\t\tdeferredSnapshotRecordings: this.deferredSnapshotRecordings,\n\t\t\tduration: this.duration,\n\t\t\terror,\n\t\t\tlogs: this.logs,\n\t\t\tmetadata: this.metadata,\n\t\t\tpassed,\n\t\t\tsnapshotCount: this.snapshotCount,\n\t\t\tassertCount: this.assertCount,\n\t\t\ttitle: this.title\n\t\t};\n\t}\n}\n\nmodule.exports = Test;\n",
    "node_modules/emittery/index.js": "'use strict';\n\nconst anyMap = new WeakMap();\nconst eventsMap = new WeakMap();\nconst producersMap = new WeakMap();\nconst anyProducer = Symbol('anyProducer');\nconst resolvedPromise = Promise.resolve();\n\nconst listenerAdded = Symbol('listenerAdded');\nconst listenerRemoved = Symbol('listenerRemoved');\n\nfunction assertEventName(eventName) {\n\tif (typeof eventName !== 'string' && typeof eventName !== 'symbol') {\n\t\tthrow new TypeError('eventName must be a string or a symbol');\n\t}\n}\n\nfunction assertListener(listener) {\n\tif (typeof listener !== 'function') {\n\t\tthrow new TypeError('listener must be a function');\n\t}\n}\n\nfunction getListeners(instance, eventName) {\n\tconst events = eventsMap.get(instance);\n\tif (!events.has(eventName)) {\n\t\tevents.set(eventName, new Set());\n\t}\n\n\treturn events.get(eventName);\n}\n\nfunction getEventProducers(instance, eventName) {\n\tconst key = typeof eventName === 'string' || typeof eventName === 'symbol' ? eventName : anyProducer;\n\tconst producers = producersMap.get(instance);\n\tif (!producers.has(key)) {\n\t\tproducers.set(key, new Set());\n\t}\n\n\treturn producers.get(key);\n}\n\nfunction enqueueProducers(instance, eventName, eventData) {\n\tconst producers = producersMap.get(instance);\n\tif (producers.has(eventName)) {\n\t\tfor (const producer of producers.get(eventName)) {\n\t\t\tproducer.enqueue(eventData);\n\t\t}\n\t}\n\n\tif (producers.has(anyProducer)) {\n\t\tconst item = Promise.all([eventName, eventData]);\n\t\tfor (const producer of producers.get(anyProducer)) {\n\t\t\tproducer.enqueue(item);\n\t\t}\n\t}\n}\n\nfunction iterator(instance, eventNames) {\n\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n\tlet isFinished = false;\n\tlet flush = () => {};\n\tlet queue = [];\n\n\tconst producer = {\n\t\tenqueue(item) {\n\t\t\tqueue.push(item);\n\t\t\tflush();\n\t\t},\n\t\tfinish() {\n\t\t\tisFinished = true;\n\t\t\tflush();\n\t\t}\n\t};\n\n\tfor (const eventName of eventNames) {\n\t\tgetEventProducers(instance, eventName).add(producer);\n\t}\n\n\treturn {\n\t\tasync next() {\n\t\t\tif (!queue) {\n\t\t\t\treturn {done: true};\n\t\t\t}\n\n\t\t\tif (queue.length === 0) {\n\t\t\t\tif (isFinished) {\n\t\t\t\t\tqueue = undefined;\n\t\t\t\t\treturn this.next();\n\t\t\t\t}\n\n\t\t\t\tawait new Promise(resolve => {\n\t\t\t\t\tflush = resolve;\n\t\t\t\t});\n\n\t\t\t\treturn this.next();\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdone: false,\n\t\t\t\tvalue: await queue.shift()\n\t\t\t};\n\t\t},\n\n\t\tasync return(value) {\n\t\t\tqueue = undefined;\n\n\t\t\tfor (const eventName of eventNames) {\n\t\t\t\tgetEventProducers(instance, eventName).delete(producer);\n\t\t\t}\n\n\t\t\tflush();\n\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\t{done: true, value: await value} :\n\t\t\t\t{done: true};\n\t\t},\n\n\t\t[Symbol.asyncIterator]() {\n\t\t\treturn this;\n\t\t}\n\t};\n}\n\nfunction defaultMethodNamesOrAssert(methodNames) {\n\tif (methodNames === undefined) {\n\t\treturn allEmitteryMethods;\n\t}\n\n\tif (!Array.isArray(methodNames)) {\n\t\tthrow new TypeError('`methodNames` must be an array of strings');\n\t}\n\n\tfor (const methodName of methodNames) {\n\t\tif (!allEmitteryMethods.includes(methodName)) {\n\t\t\tif (typeof methodName !== 'string') {\n\t\t\t\tthrow new TypeError('`methodNames` element must be a string');\n\t\t\t}\n\n\t\t\tthrow new Error(`${methodName} is not Emittery method`);\n\t\t}\n\t}\n\n\treturn methodNames;\n}\n\nconst isListenerSymbol = symbol => symbol === listenerAdded || symbol === listenerRemoved;\n\nclass Emittery {\n\tstatic mixin(emitteryPropertyName, methodNames) {\n\t\tmethodNames = defaultMethodNamesOrAssert(methodNames);\n\t\treturn target => {\n\t\t\tif (typeof target !== 'function') {\n\t\t\t\tthrow new TypeError('`target` must be function');\n\t\t\t}\n\n\t\t\tfor (const methodName of methodNames) {\n\t\t\t\tif (target.prototype[methodName] !== undefined) {\n\t\t\t\t\tthrow new Error(`The property \\`${methodName}\\` already exists on \\`target\\``);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction getEmitteryProperty() {\n\t\t\t\tObject.defineProperty(this, emitteryPropertyName, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: new Emittery()\n\t\t\t\t});\n\t\t\t\treturn this[emitteryPropertyName];\n\t\t\t}\n\n\t\t\tObject.defineProperty(target.prototype, emitteryPropertyName, {\n\t\t\t\tenumerable: false,\n\t\t\t\tget: getEmitteryProperty\n\t\t\t});\n\n\t\t\tconst emitteryMethodCaller = methodName => function (...args) {\n\t\t\t\treturn this[emitteryPropertyName][methodName](...args);\n\t\t\t};\n\n\t\t\tfor (const methodName of methodNames) {\n\t\t\t\tObject.defineProperty(target.prototype, methodName, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: emitteryMethodCaller(methodName)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\t}\n\n\tconstructor() {\n\t\tanyMap.set(this, new Set());\n\t\teventsMap.set(this, new Map());\n\t\tproducersMap.set(this, new Map());\n\t}\n\n\ton(eventNames, listener) {\n\t\tassertListener(listener);\n\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t\tgetListeners(this, eventName).add(listener);\n\n\t\t\tif (!isListenerSymbol(eventName)) {\n\t\t\t\tthis.emit(listenerAdded, {eventName, listener});\n\t\t\t}\n\t\t}\n\n\t\treturn this.off.bind(this, eventNames, listener);\n\t}\n\n\toff(eventNames, listener) {\n\t\tassertListener(listener);\n\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t\tgetListeners(this, eventName).delete(listener);\n\n\t\t\tif (!isListenerSymbol(eventName)) {\n\t\t\t\tthis.emit(listenerRemoved, {eventName, listener});\n\t\t\t}\n\t\t}\n\t}\n\n\tonce(eventNames) {\n\t\treturn new Promise(resolve => {\n\t\t\tconst off = this.on(eventNames, data => {\n\t\t\t\toff();\n\t\t\t\tresolve(data);\n\t\t\t});\n\t\t});\n\t}\n\n\tevents(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t}\n\n\t\treturn iterator(this, eventNames);\n\t}\n\n\tasync emit(eventName, eventData) {\n\t\tassertEventName(eventName);\n\n\t\tenqueueProducers(this, eventName, eventData);\n\n\t\tconst listeners = getListeners(this, eventName);\n\t\tconst anyListeners = anyMap.get(this);\n\t\tconst staticListeners = [...listeners];\n\t\tconst staticAnyListeners = isListenerSymbol(eventName) ? [] : [...anyListeners];\n\n\t\tawait resolvedPromise;\n\t\tawait Promise.all([\n\t\t\t...staticListeners.map(async listener => {\n\t\t\t\tif (listeners.has(listener)) {\n\t\t\t\t\treturn listener(eventData);\n\t\t\t\t}\n\t\t\t}),\n\t\t\t...staticAnyListeners.map(async listener => {\n\t\t\t\tif (anyListeners.has(listener)) {\n\t\t\t\t\treturn listener(eventName, eventData);\n\t\t\t\t}\n\t\t\t})\n\t\t]);\n\t}\n\n\tasync emitSerial(eventName, eventData) {\n\t\tassertEventName(eventName);\n\n\t\tconst listeners = getListeners(this, eventName);\n\t\tconst anyListeners = anyMap.get(this);\n\t\tconst staticListeners = [...listeners];\n\t\tconst staticAnyListeners = [...anyListeners];\n\n\t\tawait resolvedPromise;\n\t\t/* eslint-disable no-await-in-loop */\n\t\tfor (const listener of staticListeners) {\n\t\t\tif (listeners.has(listener)) {\n\t\t\t\tawait listener(eventData);\n\t\t\t}\n\t\t}\n\n\t\tfor (const listener of staticAnyListeners) {\n\t\t\tif (anyListeners.has(listener)) {\n\t\t\t\tawait listener(eventName, eventData);\n\t\t\t}\n\t\t}\n\t\t/* eslint-enable no-await-in-loop */\n\t}\n\n\tonAny(listener) {\n\t\tassertListener(listener);\n\t\tanyMap.get(this).add(listener);\n\t\tthis.emit(listenerAdded, {listener});\n\t\treturn this.offAny.bind(this, listener);\n\t}\n\n\tanyEvent() {\n\t\treturn iterator(this);\n\t}\n\n\toffAny(listener) {\n\t\tassertListener(listener);\n\t\tthis.emit(listenerRemoved, {listener});\n\t\tanyMap.get(this).delete(listener);\n\t}\n\n\tclearListeners(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n\t\tfor (const eventName of eventNames) {\n\t\t\tif (typeof eventName === 'string' || typeof eventName === 'symbol') {\n\t\t\t\tgetListeners(this, eventName).clear();\n\n\t\t\t\tconst producers = getEventProducers(this, eventName);\n\n\t\t\t\tfor (const producer of producers) {\n\t\t\t\t\tproducer.finish();\n\t\t\t\t}\n\n\t\t\t\tproducers.clear();\n\t\t\t} else {\n\t\t\t\tanyMap.get(this).clear();\n\n\t\t\t\tfor (const listeners of eventsMap.get(this).values()) {\n\t\t\t\t\tlisteners.clear();\n\t\t\t\t}\n\n\t\t\t\tfor (const producers of producersMap.get(this).values()) {\n\t\t\t\t\tfor (const producer of producers) {\n\t\t\t\t\t\tproducer.finish();\n\t\t\t\t\t}\n\n\t\t\t\t\tproducers.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlistenerCount(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tlet count = 0;\n\n\t\tfor (const eventName of eventNames) {\n\t\t\tif (typeof eventName === 'string') {\n\t\t\t\tcount += anyMap.get(this).size + getListeners(this, eventName).size +\n\t\t\t\t\tgetEventProducers(this, eventName).size + getEventProducers(this).size;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (typeof eventName !== 'undefined') {\n\t\t\t\tassertEventName(eventName);\n\t\t\t}\n\n\t\t\tcount += anyMap.get(this).size;\n\n\t\t\tfor (const value of eventsMap.get(this).values()) {\n\t\t\t\tcount += value.size;\n\t\t\t}\n\n\t\t\tfor (const value of producersMap.get(this).values()) {\n\t\t\t\tcount += value.size;\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\tbindMethods(target, methodNames) {\n\t\tif (typeof target !== 'object' || target === null) {\n\t\t\tthrow new TypeError('`target` must be an object');\n\t\t}\n\n\t\tmethodNames = defaultMethodNamesOrAssert(methodNames);\n\n\t\tfor (const methodName of methodNames) {\n\t\t\tif (target[methodName] !== undefined) {\n\t\t\t\tthrow new Error(`The property \\`${methodName}\\` already exists on \\`target\\``);\n\t\t\t}\n\n\t\t\tObject.defineProperty(target, methodName, {\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: this[methodName].bind(this)\n\t\t\t});\n\t\t}\n\t}\n}\n\nconst allEmitteryMethods = Object.getOwnPropertyNames(Emittery.prototype).filter(v => v !== 'constructor');\n\nObject.defineProperty(Emittery, 'listenerAdded', {\n\tvalue: listenerAdded,\n\twritable: false,\n\tenumerable: true,\n\tconfigurable: false\n});\nObject.defineProperty(Emittery, 'listenerRemoved', {\n\tvalue: listenerRemoved,\n\twritable: false,\n\tenumerable: true,\n\tconfigurable: false\n});\n\nmodule.exports = Emittery;\n",
    "node_modules/ava/lib/worker/subprocess.js": "'use strict';\nconst {pathToFileURL} = require('url');\nconst currentlyUnhandled = require('currently-unhandled')();\n\nrequire('./ensure-forked'); // eslint-disable-line import/no-unassigned-import\n\nconst ipc = require('./ipc');\n\nconst supportsESM = async () => {\n\ttry {\n\t\tawait import('data:text/javascript,'); // eslint-disable-line node/no-unsupported-features/es-syntax\n\t\treturn true;\n\t} catch {}\n\n\treturn false;\n};\n\nipc.send({type: 'ready-for-options'});\nipc.options.then(async options => {\n\trequire('./options').set(options);\n\trequire('../chalk').set(options.chalkOptions);\n\n\tif (options.chalkOptions.level > 0) {\n\t\tconst {stdout, stderr} = process;\n\t\tglobal.console = Object.assign(global.console, new console.Console({stdout, stderr, colorMode: true}));\n\t}\n\n\tconst nowAndTimers = require('../now-and-timers');\n\tconst providerManager = require('../provider-manager');\n\tconst Runner = require('../runner');\n\tconst serializeError = require('../serialize-error');\n\tconst dependencyTracking = require('./dependency-tracker');\n\tconst lineNumberSelection = require('./line-numbers');\n\n\tconst sharedWorkerTeardowns = [];\n\n\tasync function exit(code) {\n\t\tif (!process.exitCode) {\n\t\t\tprocess.exitCode = code;\n\t\t}\n\n\t\tdependencyTracking.flush();\n\t\tawait ipc.flush();\n\t\tprocess.exit(); // eslint-disable-line unicorn/no-process-exit\n\t}\n\n\t// TODO: Initialize providers here, then pass to lineNumberSelection() so they\n\t// can be used to parse the test file.\n\tlet checkSelectedByLineNumbers;\n\ttry {\n\t\tcheckSelectedByLineNumbers = lineNumberSelection({\n\t\t\tfile: options.file,\n\t\t\tlineNumbers: options.lineNumbers\n\t\t});\n\t} catch (error) {\n\t\tipc.send({type: 'line-number-selection-error', err: serializeError('Line number selection error', false, error, options.file)});\n\t\tcheckSelectedByLineNumbers = () => false;\n\t}\n\n\tconst runner = new Runner({\n\t\tcheckSelectedByLineNumbers,\n\t\texperiments: options.experiments,\n\t\tfailFast: options.failFast,\n\t\tfailWithoutAssertions: options.failWithoutAssertions,\n\t\tfile: options.file,\n\t\tmatch: options.match,\n\t\tprojectDir: options.projectDir,\n\t\trecordNewSnapshots: options.recordNewSnapshots,\n\t\trunOnlyExclusive: options.runOnlyExclusive,\n\t\tserial: options.serial,\n\t\tsnapshotDir: options.snapshotDir,\n\t\tupdateSnapshots: options.updateSnapshots\n\t});\n\n\tipc.peerFailed.then(() => { // eslint-disable-line promise/prefer-await-to-then\n\t\trunner.interrupt();\n\t});\n\n\tconst attributedRejections = new Set();\n\tprocess.on('unhandledRejection', (reason, promise) => {\n\t\tif (runner.attributeLeakedError(reason)) {\n\t\t\tattributedRejections.add(promise);\n\t\t}\n\t});\n\n\trunner.on('dependency', dependencyTracking.track);\n\trunner.on('stateChange', state => ipc.send(state));\n\n\trunner.on('error', error => {\n\t\tipc.send({type: 'internal-error', err: serializeError('Internal runner error', false, error, runner.file)});\n\t\texit(1);\n\t});\n\n\trunner.on('finish', async () => {\n\t\ttry {\n\t\t\tconst {cannotSave, touchedFiles} = runner.saveSnapshotState();\n\t\t\tif (cannotSave) {\n\t\t\t\tipc.send({type: 'snapshot-error'});\n\t\t\t} else if (touchedFiles) {\n\t\t\t\tipc.send({type: 'touched-files', files: touchedFiles});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tipc.send({type: 'internal-error', err: serializeError('Internal runner error', false, error, runner.file)});\n\t\t\texit(1);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait Promise.all(sharedWorkerTeardowns.map(fn => fn()));\n\t\t} catch (error) {\n\t\t\tipc.send({type: 'uncaught-exception', err: serializeError('Shared worker teardown error', false, error, runner.file)});\n\t\t\texit(1);\n\t\t\treturn;\n\t\t}\n\n\t\tnowAndTimers.setImmediate(() => {\n\t\t\tcurrentlyUnhandled()\n\t\t\t\t.filter(rejection => !attributedRejections.has(rejection.promise))\n\t\t\t\t.forEach(rejection => {\n\t\t\t\t\tipc.send({type: 'unhandled-rejection', err: serializeError('Unhandled rejection', true, rejection.reason, runner.file)});\n\t\t\t\t});\n\n\t\t\texit(0);\n\t\t});\n\t});\n\n\tprocess.on('uncaughtException', error => {\n\t\tif (runner.attributeLeakedError(error)) {\n\t\t\treturn;\n\t\t}\n\n\t\tipc.send({type: 'uncaught-exception', err: serializeError('Uncaught exception', true, error, runner.file)});\n\t\texit(1);\n\t});\n\n\tlet accessedRunner = false;\n\texports.getRunner = () => {\n\t\taccessedRunner = true;\n\t\treturn runner;\n\t};\n\n\texports.registerSharedWorker = (filename, initialData, teardown) => {\n\t\tconst {channel, forceUnref, ready} = ipc.registerSharedWorker(filename, initialData);\n\t\trunner.waitForReady.push(ready);\n\t\tsharedWorkerTeardowns.push(async () => {\n\t\t\ttry {\n\t\t\t\tawait teardown();\n\t\t\t} finally {\n\t\t\t\tforceUnref();\n\t\t\t}\n\t\t});\n\t\treturn channel;\n\t};\n\n\t// Store value to prevent required modules from modifying it.\n\tconst testPath = options.file;\n\n\t// Install basic source map support.\n\tconst sourceMapSupport = require('source-map-support');\n\tsourceMapSupport.install({\n\t\tenvironment: 'node',\n\t\thandleUncaughtExceptions: false\n\t});\n\n\tconst extensionsToLoadAsModules = Object.entries(options.moduleTypes)\n\t\t.filter(([, type]) => type === 'module')\n\t\t.map(([extension]) => extension);\n\n\t// Install before processing options.require, so if helpers are added to the\n\t// require configuration the *compiled* helper will be loaded.\n\tconst {projectDir, providerStates = []} = options;\n\tconst providers = providerStates.map(({type, state}) => {\n\t\tif (type === 'babel') {\n\t\t\tconst provider = providerManager.babel(projectDir).worker({extensionsToLoadAsModules, state});\n\t\t\trunner.powerAssert = provider.powerAssert;\n\t\t\treturn provider;\n\t\t}\n\n\t\tif (type === 'typescript') {\n\t\t\treturn providerManager.typescript(projectDir).worker({extensionsToLoadAsModules, state});\n\t\t}\n\n\t\treturn null;\n\t}).filter(provider => provider !== null);\n\n\tlet requireFn = require;\n\tlet isESMSupported;\n\tconst load = async ref => {\n\t\tfor (const extension of extensionsToLoadAsModules) {\n\t\t\tif (ref.endsWith(`.${extension}`)) {\n\t\t\t\tif (typeof isESMSupported !== 'boolean') {\n\t\t\t\t\t// Lazily determine support since this prints an experimental warning.\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tisESMSupported = await supportsESM();\n\t\t\t\t}\n\n\t\t\t\tif (isESMSupported) {\n\t\t\t\t\treturn import(pathToFileURL(ref)); // eslint-disable-line node/no-unsupported-features/es-syntax\n\t\t\t\t}\n\n\t\t\t\tipc.send({type: 'internal-error', err: serializeError('Internal runner error', false, new Error('ECMAScript Modules are not supported in this Node.js version.'))});\n\t\t\t\texit(1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (const provider of providers) {\n\t\t\tif (provider.canLoad(ref)) {\n\t\t\t\treturn provider.load(ref, {requireFn});\n\t\t\t}\n\t\t}\n\n\t\treturn requireFn(ref);\n\t};\n\n\ttry {\n\t\tfor await (const ref of (options.require || [])) {\n\t\t\tconst mod = await load(ref);\n\n\t\t\ttry {\n\t\t\t\tif (Reflect.has(mod, Symbol.for('esm:package'))) {\n\t\t\t\t\trequireFn = mod(module);\n\t\t\t\t}\n\t\t\t} catch {}\n\t\t}\n\n\t\t// Install dependency tracker after the require configuration has been evaluated\n\t\t// to make sure we also track dependencies with custom require hooks\n\t\tdependencyTracking.install(testPath);\n\n\t\tif (options.debug && options.debug.port !== undefined && options.debug.host !== undefined) {\n\t\t\t// If an inspector was active when the main process started, and is\n\t\t\t// already active for the worker process, do not open a new one.\n\t\t\tconst inspector = require('inspector'); // eslint-disable-line node/no-unsupported-features/node-builtins\n\t\t\tif (!options.debug.active || inspector.url() === undefined) {\n\t\t\t\tinspector.open(options.debug.port, options.debug.host, true);\n\t\t\t}\n\n\t\t\tif (options.debug.break) {\n\t\t\t\tdebugger; // eslint-disable-line no-debugger\n\t\t\t}\n\t\t}\n\n\t\tawait load(testPath);\n\n\t\tif (accessedRunner) {\n\t\t\t// Unreference the IPC channel if the test file required AVA. This stops it\n\t\t\t// from keeping the event loop busy, which means the `beforeExit` event can be\n\t\t\t// used to detect when tests stall.\n\t\t\tipc.unref();\n\t\t} else {\n\t\t\tipc.send({type: 'missing-ava-import'});\n\t\t\texit(1);\n\t\t}\n\t} catch (error) {\n\t\tipc.send({type: 'uncaught-exception', err: serializeError('Uncaught exception', true, error, runner.file)});\n\t\texit(1);\n\t}\n}).catch(error => {\n\t// There shouldn't be any errors, but if there are we may not have managed\n\t// to bootstrap enough code to serialize them. Re-throw and let the process\n\t// crash.\n\tsetImmediate(() => {\n\t\tthrow error;\n\t});\n});\n",
    "node_modules/ava/lib/worker/ipc.js": "'use strict';\nconst events = require('events');\nconst pEvent = require('p-event');\nconst {controlFlow} = require('../ipc-flow-control');\nconst {get: getOptions} = require('./options');\n\nconst selectAvaMessage = type => message => message.ava && message.ava.type === type;\n\nexports.options = pEvent(process, 'message', selectAvaMessage('options')).then(message => message.ava.options);\nexports.peerFailed = pEvent(process, 'message', selectAvaMessage('peer-failed'));\n\nconst bufferedSend = controlFlow(process);\nfunction send(evt) {\n\tbufferedSend({ava: evt});\n}\n\nexports.send = send;\n\nlet refs = 1;\nfunction ref() {\n\tif (++refs === 1) {\n\t\tprocess.channel.ref();\n\t}\n}\n\nfunction unref() {\n\tif (refs > 0 && --refs === 0) {\n\t\tprocess.channel.unref();\n\t}\n}\n\nexports.unref = unref;\n\nlet pendingPings = Promise.resolve();\nasync function flush() {\n\tref();\n\tconst promise = pendingPings.then(async () => { // eslint-disable-line promise/prefer-await-to-then\n\t\tsend({type: 'ping'});\n\t\tawait pEvent(process, 'message', selectAvaMessage('pong'));\n\t\tif (promise === pendingPings) {\n\t\t\tunref();\n\t\t}\n\t});\n\tpendingPings = promise;\n\tawait promise;\n}\n\nexports.flush = flush;\n\nlet channelCounter = 0;\nlet messageCounter = 0;\n\nconst channelEmitters = new Map();\nfunction createChannelEmitter(channelId) {\n\tif (channelEmitters.size === 0) {\n\t\tprocess.on('message', message => {\n\t\t\tif (!message.ava) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {channelId, type, ...payload} = message.ava;\n\t\t\tif (\n\t\t\t\ttype === 'shared-worker-error' ||\n\t\t\t\ttype === 'shared-worker-message' ||\n\t\t\t\ttype === 'shared-worker-ready'\n\t\t\t) {\n\t\t\t\tconst emitter = channelEmitters.get(channelId);\n\t\t\t\tif (emitter !== undefined) {\n\t\t\t\t\temitter.emit(type, payload);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tconst emitter = new events.EventEmitter();\n\tchannelEmitters.set(channelId, emitter);\n\treturn [emitter, () => channelEmitters.delete(channelId)];\n}\n\nfunction registerSharedWorker(filename, initialData) {\n\tconst channelId = `${getOptions().forkId}/channel/${++channelCounter}`;\n\tconst [channelEmitter, unsubscribe] = createChannelEmitter(channelId);\n\n\tlet forcedUnref = false;\n\tlet refs = 0;\n\tconst forceUnref = () => {\n\t\tif (forcedUnref) {\n\t\t\treturn;\n\t\t}\n\n\t\tforcedUnref = true;\n\t\tif (refs > 0) {\n\t\t\tunref();\n\t\t}\n\t};\n\n\tconst refChannel = () => {\n\t\tif (!forcedUnref && ++refs === 1) {\n\t\t\tref();\n\t\t}\n\t};\n\n\tconst unrefChannel = () => {\n\t\tif (!forcedUnref && refs > 0 && --refs === 0) {\n\t\t\tunref();\n\t\t}\n\t};\n\n\tsend({\n\t\ttype: 'shared-worker-connect',\n\t\tchannelId,\n\t\tfilename,\n\t\tinitialData\n\t});\n\n\tlet currentlyAvailable = false;\n\tlet error = null;\n\n\trefChannel();\n\tconst ready = pEvent(channelEmitter, 'shared-worker-ready').then(() => { // eslint-disable-line promise/prefer-await-to-then\n\t\tcurrentlyAvailable = error === null;\n\t}).finally(unrefChannel);\n\n\tconst messageEmitters = new Set();\n\tconst handleMessage = message => {\n\t\t// Wait for a turn of the event loop, to allow new subscriptions to be set\n\t\t// up in response to the previous message.\n\t\tsetImmediate(() => {\n\t\t\tfor (const emitter of messageEmitters) {\n\t\t\t\temitter.emit('message', message);\n\t\t\t}\n\t\t});\n\t};\n\n\tchannelEmitter.on('shared-worker-message', handleMessage);\n\n\tpEvent(channelEmitter, 'shared-worker-error').then(() => { // eslint-disable-line promise/prefer-await-to-then\n\t\tunsubscribe();\n\t\tforceUnref();\n\n\t\terror = new Error('The shared worker is no longer available');\n\t\tcurrentlyAvailable = false;\n\t\tfor (const emitter of messageEmitters) {\n\t\t\temitter.emit('error', error);\n\t\t}\n\t});\n\n\treturn {\n\t\tforceUnref,\n\t\tready,\n\t\tchannel: {\n\t\t\tavailable: ready,\n\n\t\t\tget currentlyAvailable() {\n\t\t\t\treturn currentlyAvailable;\n\t\t\t},\n\n\t\t\tasync * receive() {\n\t\t\t\tif (error !== null) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tconst emitter = new events.EventEmitter();\n\t\t\t\tmessageEmitters.add(emitter);\n\t\t\t\ttry {\n\t\t\t\t\trefChannel();\n\t\t\t\t\tfor await (const [message] of events.on(emitter, 'message')) {\n\t\t\t\t\t\tyield message;\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tunrefChannel();\n\t\t\t\t\tmessageEmitters.delete(emitter);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpost(serializedData, replyTo) {\n\t\t\t\tif (error !== null) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tif (!currentlyAvailable) {\n\t\t\t\t\tthrow new Error('Shared worker is not yet available');\n\t\t\t\t}\n\n\t\t\t\tconst messageId = `${channelId}/message/${++messageCounter}`;\n\t\t\t\tsend({\n\t\t\t\t\ttype: 'shared-worker-message',\n\t\t\t\t\tchannelId,\n\t\t\t\t\tmessageId,\n\t\t\t\t\treplyTo,\n\t\t\t\t\tserializedData\n\t\t\t\t});\n\n\t\t\t\treturn messageId;\n\t\t\t}\n\t\t}\n\t};\n}\n\nexports.registerSharedWorker = registerSharedWorker;\n\n",
    "lib/lbt/resources/ResourcePool.js": "\"use strict\";\n\n/*\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n*/\nconst esprima = require(\"esprima\");\nconst ComponentAnalyzer = require(\"../analyzer/ComponentAnalyzer\");\nconst SmartTemplateAnalyzer = require(\"../analyzer/SmartTemplateAnalyzer\");\nconst FioriElementsAnalyzer = require(\"../analyzer/FioriElementsAnalyzer\");\nconst XMLCompositeAnalyzer = require(\"../analyzer/XMLCompositeAnalyzer\");\nconst JSModuleAnalyzer = require(\"../analyzer/JSModuleAnalyzer\");\nconst XMLTemplateAnalyzer = require(\"../analyzer/XMLTemplateAnalyzer\");\n\nconst LibraryFileAnalyzer = require(\"./LibraryFileAnalyzer\");\nconst ModuleInfo = require(\"./ModuleInfo\");\nconst ResourceFilterList = require(\"./ResourceFilterList\");\n/*\nconst Resource = require(\"./Resource\");\n */\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:resources:ResourcePool\");\n\nconst jsAnalyzer = new JSModuleAnalyzer();\n\n/*\nfunction scanFileOrDir(fileOrDir, name, pool) {\n\t// console.log(\"visiting \" + fileOrDir + \" (\" + name + \")\");\n\treturn new Promise( (resolve, reject) => {\n\t\tfs.stat(fileOrDir, (statErr, stat) => {\n\t\t\tif ( statErr ) {\n\t\t\t\tresolve(statErr);\n\t\t\t} else if ( stat.isDirectory() ) {\n\t\t\t\tif ( name && name.slice(-1) !== \"/\" ) {\n\t\t\t\t\tname = name + \"/\";\n\t\t\t\t}\n\t\t\t\tfs.readdir(fileOrDir, (dirErr, files) => {\n\t\t\t\t\tif ( dirErr ) {\n\t\t\t\t\t\treject(dirErr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tPromise.all(\n\t\t\t\t\t\t\t\tfiles.map( (file) => scanFileOrDir(path.join(fileOrDir, file), name + file, pool) )\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if ( /\\.(?:js|json|xml|html|properties|library)$/.test(name) ) {\n\t\t\t\t// TODO think about right place for configuration of such a global filtering\n\t\t\t\tconst resource = new Resource(pool, name, fileOrDir, stat);\n\t\t\t\tresolve( pool.addResource( resource ) );\n\t\t\t} else {\n\t\t\t\t// else: ignore other resource types\n\t\t\t\tresolve(true);\n\t\t\t}\n\t\t});\n\t});\n}\n*/\n\nasync function determineDependencyInfo(resource, rawInfo, pool) {\n\tconst info = new ModuleInfo(resource.name);\n\tinfo.size = resource.fileSize;\n\tif ( /\\.js$/.test(resource.name) ) {\n\t\t// console.log(\"analyzing %s\", resource.file);\n\t\tconst code = await resource.buffer();\n\t\tinfo.size = code.length;\n\t\tconst promises = [];\n\t\tlet ast;\n\t\ttry {\n\t\t\tast = esprima.parseScript(code.toString(), {comment: true});\n\t\t} catch (err) {\n\t\t\tlog.error(\"failed to parse %s: %s\", resource.name, err.message);\n\t\t}\n\t\tif (ast) {\n\t\t\ttry {\n\t\t\t\tjsAnalyzer.analyze(ast, resource.name, info);\n\t\t\t\tnew XMLCompositeAnalyzer(pool).analyze(ast, resource.name, info);\n\t\t\t} catch (error) {\n\t\t\t\tlog.error(\"failed to analyze %s: %s\", resource.name, error.stack);\n\t\t\t}\n\t\t}\n\t\tif ( rawInfo ) {\n\t\t\tinfo.rawModule = true;\n\t\t\t// console.log(\"adding preconfigured dependencies for %s:\", resource.name, rawInfo.dependencies);\n\t\t\tif ( rawInfo.dependencies ) {\n\t\t\t\trawInfo.dependencies.forEach( (dep) => info.addDependency(dep) );\n\t\t\t}\n\n\t\t\tif ( rawInfo.requiresTopLevelScope != null ) {\n\t\t\t\t// an explicitly defined value for requiresTopLevelScope from .library overrides analysis result\n\t\t\t\tinfo.requiresTopLevelScope = rawInfo.requiresTopLevelScope;\n\t\t\t}\n\n\t\t\tif ( rawInfo.ignoredGlobals ) {\n\t\t\t\tinfo.removeIgnoredGlobalNames(rawInfo.ignoredGlobals);\n\t\t\t}\n\t\t}\n\t\tif ( /(?:^|\\/)Component\\.js/.test(resource.name) ) {\n\t\t\tpromises.push(\n\t\t\t\tnew ComponentAnalyzer(pool).analyze(resource, info),\n\t\t\t\tnew SmartTemplateAnalyzer(pool).analyze(resource, info),\n\t\t\t\tnew FioriElementsAnalyzer(pool).analyze(resource, info)\n\t\t\t);\n\t\t}\n\n\t\tawait Promise.all(promises);\n\n\t\t// console.log(info);\n\t} else if ( /\\.view.xml$/.test(resource.name) ) {\n\t\tconst xmlView = await resource.buffer();\n\t\tinfo.size = xmlView.length;\n\t\tnew XMLTemplateAnalyzer(pool).analyzeView(xmlView, info);\n\t} else if ( /\\.control.xml$/.test(resource.name) ) {\n\t\tconst xmlView = await resource.buffer();\n\t\tinfo.size = xmlView.length;\n\t\tnew XMLTemplateAnalyzer(pool).analyzeFragment(xmlView, info);\n\t} else if ( /\\.fragment.xml$/.test(resource.name) ) {\n\t\tconst xmlView = await resource.buffer();\n\t\tinfo.size = xmlView.length;\n\t\tnew XMLTemplateAnalyzer(pool).analyzeFragment(xmlView, info);\n\t}\n\n\treturn info;\n}\n\nclass ResourcePool {\n\tconstructor({ignoreMissingModules} = {}) {\n\t\tthis._ignoreMissingModules = !!ignoreMissingModules;\n\t\t// this._roots = [];\n\t\tthis._resources = [];\n\t\tthis._resourcesByName = new Map();\n\t\tthis._dependencyInfos = new Map();\n\t\tthis._rawModuleInfos = new Map();\n\t\t// this.whenReady = Promise.resolve(true);\n\t}\n\n\t/*\n\tTODO check relevance\n\taddRoot(fileOrFolder, prefix) {\n\t\tthis._roots.push({\n\t\t\troot: fileOrFolder,\n\t\t\tprefix: prefix\n\t\t});\n\t\tlog.verbose(\"  scanning <%s> for resources (prefix='%s')\", fileOrFolder, prefix);\n\t\tconst p = scanFileOrDir(fileOrFolder, prefix, this);\n\t\tthis.whenReady = this.whenReady.then( () => p );\n\t}\n\t*/\n\n\t/**\n\t * Adds a resource to the pool\n  *\n\t * @param {Resource} resource\n\t * @returns {Promise|undefined} for libraries a Promise is returned undefined otherwise\n\t */\n\taddResource( resource ) {\n\t\tif ( this._resourcesByName.has(resource.name) ) {\n\t\t\tlog.warn(\"duplicate resource \" + resource.name);\n\t\t\t// TODO return and let the first one always win?\n\t\t}\n\n\t\tthis._resources.push(resource);\n\t\tthis._resourcesByName.set(resource.name, resource);\n\n\t\tif ( /\\.library$/.test(resource.name) ) {\n\t\t\t// read raw-module info from .library files\n\t\t\treturn resource.buffer().then( (buffer) => {\n\t\t\t\tconst infos = LibraryFileAnalyzer.getDependencyInfos( resource.name, buffer );\n\t\t\t\tfor ( const name of Object.keys(infos) ) {\n\t\t\t\t\tthis._rawModuleInfos.set(name, infos[name]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the module info\n\t *\n\t * @param {string} name module name\n\t * @returns {Promise<ModuleInfo>}\n\t */\n\tasync getModuleInfo(name) {\n\t\tlet info = this._dependencyInfos.get(name);\n\t\tif ( info == null ) {\n\t\t\tinfo = Promise.resolve().then(async () => {\n\t\t\t\tconst resource = await this.findResource(name);\n\t\t\t\treturn determineDependencyInfo( resource, this._rawModuleInfos.get(name), this );\n\t\t\t});\n\t\t\tthis._dependencyInfos.set(name, info);\n\t\t}\n\t\treturn info;\n\t}\n\n\tasync findResource(name) {\n\t\tconst resource = this._resourcesByName.get(name);\n\t\tif ( resource == null ) {\n\t\t\t// TODO: Remove throw and return null to align with ui5-fs\n\t\t\t//\tThis would require changes in most consuming classes\n\t\t\tthrow new Error(\"resource not found in pool: '\" + name + \"'\");\n\t\t}\n\t\treturn resource;\n\t}\n\n\tasync findResourceWithInfo(name) {\n\t\treturn this.findResource(name).then( (resource) => {\n\t\t\treturn this.getModuleInfo(name).then( (info) => {\n\t\t\t\t// HACK: attach info to resource\n\t\t\t\tresource.info = info;\n\t\t\t\treturn resource;\n\t\t\t}, (err) => resource);\n\t\t});\n\t}\n\n\t/**\n\t * Finds the resources based matching the given pattern\n  *\n\t * @param {ResourceFilterList|RegExp} pattern\n\t * @returns {Promise}\n\t */\n\tasync findResources(pattern) {\n\t\tif ( pattern instanceof ResourceFilterList ) {\n\t\t\treturn this._resources.filter( (resource) => pattern.matches(resource.name) );\n\t\t}\n\t\treturn this._resources.filter( (resource) => pattern.test(resource.name) );\n\t}\n\n\tget size() {\n\t\treturn this._resources.length;\n\t}\n\n\tget resources() {\n\t\treturn this._resources.slice();\n\t}\n\n\tgetIgnoreMissingModules() {\n\t\treturn this._ignoreMissingModules;\n\t}\n}\n\nmodule.exports = ResourcePool;\n\n",
    "lib/types/application/ApplicationFormatter.js": "const log = require(\"@ui5/logger\").getLogger(\"types:application:ApplicationFormatter\");\nconst path = require(\"path\");\nconst fs = require(\"graceful-fs\");\nconst {promisify} = require(\"util\");\nconst readFile = promisify(fs.readFile);\nconst AbstractUi5Formatter = require(\"../AbstractUi5Formatter\");\n\nclass ApplicationFormatter extends AbstractUi5Formatter {\n\t/**\n\t * Constructor\n\t *\n\t * @param {object} parameters\n\t * @param {object} parameters.project Project\n\t */\n\tconstructor(parameters) {\n\t\tsuper(parameters);\n\t\tthis._pManifests = {};\n\t}\n\t/**\n\t * Formats and validates the project\n\t *\n\t * @returns {Promise}\n\t */\n\tasync format() {\n\t\tconst project = this._project;\n\t\tawait this.validate();\n\t\tlog.verbose(\"Formatting application project %s...\", project.metadata.name);\n\t\tproject.resources.pathMappings = {\n\t\t\t\"/\": project.resources.configuration.paths.webapp\n\t\t};\n\n\t\tproject.metadata.namespace = await this.getNamespace();\n\t}\n\n\t/**\n\t * Returns the base *source* path of the project. Runtime resources like manifest.json are expected\n\t * to be located inside this path.\n\t *\n\t * @param {boolean} [posix] whether to return a POSIX path\n\t * @returns {string} Base source path of the project\n\t */\n\tgetSourceBasePath(posix) {\n\t\tlet p = path;\n\t\tlet projectPath = this._project.path;\n\t\tif (posix) {\n\t\t\tprojectPath = projectPath.replace(/\\\\/g, \"/\");\n\t\t\tp = path.posix;\n\t\t}\n\t\treturn p.join(projectPath, this._project.resources.pathMappings[\"/\"]);\n\t}\n\n\t/**\n\t * Determine application namespace either based on a project`s\n\t * manifest.json or manifest.appdescr_variant (fallback if present)\n\t *\n\t * @returns {string} Namespace of the project\n\t * @throws {Error} if namespace can not be determined\n\t */\n\tasync getNamespace() {\n\t\ttry {\n\t\t\treturn await this.getNamespaceFromManifestJson();\n\t\t} catch (manifestJsonError) {\n\t\t\tif (manifestJsonError.code !== \"ENOENT\") {\n\t\t\t\tthrow manifestJsonError;\n\t\t\t}\n\t\t\t// No manifest.json present\n\t\t\t// => attempt fallback to manifest.appdescr_variant (typical for App Variants)\n\t\t\ttry {\n\t\t\t\treturn await this.getNamespaceFromManifestAppDescVariant();\n\t\t\t} catch (appDescVarError) {\n\t\t\t\tif (appDescVarError.code === \"ENOENT\") {\n\t\t\t\t\t// Fallback not possible: No manifest.appdescr_variant present\n\t\t\t\t\t// => Throw error indicating missing manifest.json\n\t\t\t\t\t// \t(do not mention manifest.appdescr_variant since it is only\n\t\t\t\t\t// \trelevant for the rather \"uncommon\" App Variants)\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Could not find required manifest.json for project ` +\n\t\t\t\t\t\t`${this._project.metadata.name}: ${manifestJsonError.message}`);\n\t\t\t\t}\n\t\t\t\tthrow appDescVarError;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Determine application namespace by checking manifest.json.\n\t * Any maven placeholders are resolved from the projects pom.xml\n\t *\n\t * @returns {string} Namespace of the project\n\t * @throws {Error} if namespace can not be determined\n\t */\n\tasync getNamespaceFromManifestJson() {\n\t\tconst {content: manifest} = await this.getJson(\"manifest.json\");\n\t\tlet appId;\n\t\t// check for a proper sap.app/id in manifest.json to determine namespace\n\t\tif (manifest[\"sap.app\"] && manifest[\"sap.app\"].id) {\n\t\t\tappId = manifest[\"sap.app\"].id;\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t`No sap.app/id configuration found in manifest.json of project ${this._project.metadata.name}`);\n\t\t}\n\n\t\tif (this.hasMavenPlaceholder(appId)) {\n\t\t\ttry {\n\t\t\t\tappId = await this.resolveMavenPlaceholder(appId);\n\t\t\t} catch (err) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Failed to resolve namespace of project ${this._project.metadata.name}: ${err.message}`);\n\t\t\t}\n\t\t}\n\t\tconst namespace = appId.replace(/\\./g, \"/\");\n\t\tlog.verbose(\n\t\t\t`Namespace of project ${this._project.metadata.name} is ${namespace} (from manifest.json)`);\n\t\treturn namespace;\n\t}\n\n\t/**\n\t * Determine application namespace by checking manifest.appdescr_variant.\n\t *\n\t * @returns {string} Namespace of the project\n\t * @throws {Error} if namespace can not be determined\n\t */\n\tasync getNamespaceFromManifestAppDescVariant() {\n\t\tconst {content: manifest} = await this.getJson(\"manifest.appdescr_variant\");\n\t\tlet appId;\n\t\t// check for the id property in manifest.appdescr_variant to determine namespace\n\t\tif (manifest && manifest.id) {\n\t\t\tappId = manifest.id;\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t`No \"id\" property found in manifest.appdescr_variant of project ${this._project.metadata.name}`);\n\t\t}\n\n\t\tconst namespace = appId.replace(/\\./g, \"/\");\n\t\tlog.verbose(\n\t\t\t`Namespace of project ${this._project.metadata.name} is ${namespace} (from manifest.appdescr_variant)`);\n\t\treturn namespace;\n\t}\n\n\t/**\n\t * Reads and parses a JSON file with the provided name from the projects source directory\n\t *\n\t * @param {string} fileName Name of the JSON file to read. Typically \"manifest.json\" or \"manifest.appdescr_variant\"\n\t * @returns {Promise<object>} resolves with an object containing the <code>content</code> (as JSON) and\n\t * \t\t\t\t\t\t\t<code>fsPath</code> (as string) of the requested file\n\t */\n\tasync getJson(fileName) {\n\t\tif (this._pManifests[fileName]) {\n\t\t\treturn this._pManifests[fileName];\n\t\t}\n\t\tconst fsPath = path.join(this.getSourceBasePath(), fileName);\n\t\treturn this._pManifests[fileName] = readFile(fsPath)\n\t\t\t.then((content) => {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: JSON.parse(content),\n\t\t\t\t\tfsPath\n\t\t\t\t};\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Failed to read ${fileName} for project ` +\n\t\t\t\t\t`${this._project.metadata.name}: ${err.message}`);\n\t\t\t});\n\t}\n\n\t/**\n\t * Validates the project\n\t *\n\t * @returns {Promise} resolves if successfully validated\n\t * @throws {Error} if validation fails\n\t */\n\tvalidate() {\n\t\tconst project = this._project;\n\t\treturn Promise.resolve().then(() => {\n\t\t\tif (!project) {\n\t\t\t\tthrow new Error(\"Project is undefined\");\n\t\t\t} else if (!project.metadata || !project.metadata.name) {\n\t\t\t\tthrow new Error(`\"metadata.name\" configuration is missing for project ${project.id}`);\n\t\t\t} else if (!project.type) {\n\t\t\t\tthrow new Error(`\"type\" configuration is missing for project ${project.id}`);\n\t\t\t} else if (project.version === undefined) {\n\t\t\t\tthrow new Error(`\"version\" is missing for project ${project.id}`);\n\t\t\t}\n\n\t\t\tif (!project.resources) {\n\t\t\t\tproject.resources = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration) {\n\t\t\t\tproject.resources.configuration = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths) {\n\t\t\t\tproject.resources.configuration.paths = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths.webapp) {\n\t\t\t\tproject.resources.configuration.paths.webapp = \"webapp\";\n\t\t\t}\n\n\t\t\tif (!project.resources.configuration.propertiesFileSourceEncoding) {\n\t\t\t\tif ([\"0.1\", \"1.0\", \"1.1\"].includes(project.specVersion)) {\n\t\t\t\t\t// default encoding to \"ISO-8859-1\" for old specVersions\n\t\t\t\t\tproject.resources.configuration.propertiesFileSourceEncoding = \"ISO-8859-1\";\n\t\t\t\t} else {\n\t\t\t\t\t// default encoding to \"UTF-8\" for all projects starting with specVersion 2.0\n\t\t\t\t\tproject.resources.configuration.propertiesFileSourceEncoding = \"UTF-8\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (![\"ISO-8859-1\", \"UTF-8\"].includes(project.resources.configuration.propertiesFileSourceEncoding)) {\n\t\t\t\tthrow new Error(`Invalid properties file encoding specified for project ${project.id}. ` +\n\t\t\t\t\t`Encoding provided: ${project.resources.configuration.propertiesFileSourceEncoding}. ` +\n\t\t\t\t\t`Must be either \"ISO-8859-1\" or \"UTF-8\".`);\n\t\t\t}\n\n\t\t\tconst absolutePath = path.join(project.path, project.resources.configuration.paths.webapp);\n\t\t\treturn this.dirExists(absolutePath).then((bExists) => {\n\t\t\t\tif (!bExists) {\n\t\t\t\t\tthrow new Error(`Could not find application directory of project ${project.id}: ` +\n\t\t\t\t\t\t`${absolutePath}`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = ApplicationFormatter;\n",
    "lib/types/library/LibraryFormatter.js": "const log = require(\"@ui5/logger\").getLogger(\"types:library:LibraryFormatter\");\nconst path = require(\"path\");\nconst fs = require(\"graceful-fs\");\nconst {promisify} = require(\"util\");\nconst readFile = promisify(fs.readFile);\nconst glob = require(\"globby\");\nconst AbstractUi5Formatter = require(\"../AbstractUi5Formatter\");\n\nconst SAP_THEMES_NS_EXEMPTIONS = [\"themelib_sap_fiori_3\", \"themelib_sap_bluecrystal\", \"themelib_sap_belize\"];\n\nfunction isFrameworkProject(project) {\n\treturn project.id.startsWith(\"@openui5/\") || project.id.startsWith(\"@sapui5/\");\n}\n\nclass LibraryFormatter extends AbstractUi5Formatter {\n\t/**\n\t * Formats and validates the project\n\t *\n\t * @returns {Promise}\n\t */\n\tasync format() {\n\t\tconst project = this._project;\n\t\tawait this.validate();\n\n\t\tlog.verbose(\"Formatting library project %s...\", project.metadata.name);\n\t\tproject.resources.pathMappings = {\n\t\t\t\"/resources/\": project.resources.configuration.paths.src\n\t\t};\n\n\t\tif (project.resources.configuration.paths.test) {\n\t\t\t// Directory 'test' is somewhat optional for libraries\n\t\t\tproject.resources.pathMappings[\"/test-resources/\"] = project.resources.configuration.paths.test;\n\t\t} else {\n\t\t\tlog.verbose(`Ignoring 'test' directory for project ${project.metadata.name}. ` +\n\t\t\t\t\"Either no setting was provided or the path not found.\");\n\t\t}\n\n\t\ttry {\n\t\t\tproject.metadata.namespace = await this.getNamespace();\n\t\t} catch (err) {\n\t\t\tif (SAP_THEMES_NS_EXEMPTIONS.includes(this._project.metadata.name)) {\n\t\t\t\t// Exceptional handling for SAP theme libraries which used to be of type \"library\"\n\t\t\t\t//\t(today they use \"theme-library\").\n\t\t\t\t// To allow use of OpenUI5 theme libraries in versions lower than 1.75 we must ignore\n\t\t\t\t//\tnamespace detection errors.\n\t\t\t\tlog.verbose(`Ignoring failed namespace detection for exempted SAP theme library ` +\n\t\t\t\t\t`${this._project.metadata.name}: ${err.message}`);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tproject.metadata.copyright = await this.getCopyright();\n\t\t} catch (err) {\n\t\t\t// Catch error because copyright is optional\n\t\t\t// TODO 2.0: Make copyright mandatory and just let the error throw\n\t\t\tlog.verbose(err.message);\n\t\t}\n\n\t\tif (isFrameworkProject(project) && !SAP_THEMES_NS_EXEMPTIONS.includes(this._project.metadata.name)) {\n\t\t\tif (project.builder && project.builder.libraryPreload && project.builder.libraryPreload.excludes) {\n\t\t\t\tlog.verbose(\n\t\t\t\t\t`Using preload excludes for framework library ${project.metadata.name} from project configuration`);\n\t\t\t} else {\n\t\t\t\tlog.verbose(\n\t\t\t\t\t`No preload excludes defined in project configuration of framework library ` +\n\t\t\t\t\t`${project.metadata.name}. Falling back to .library...`);\n\t\t\t\tconst excludes = await this.getPreloadExcludesFromDotLibrary();\n\t\t\t\tif (excludes) {\n\t\t\t\t\tif (!project.builder) {\n\t\t\t\t\t\tproject.builder = {};\n\t\t\t\t\t}\n\t\t\t\t\tif (!project.builder.libraryPreload) {\n\t\t\t\t\t\tproject.builder.libraryPreload = {};\n\t\t\t\t\t}\n\t\t\t\t\tproject.builder.libraryPreload.excludes = excludes;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the base *source* path of the project. Runtime resources like manifest.json are expected\n\t * to be located inside this path.\n\t *\n\t * @param {boolean} [posix] whether to return a POSIX path\n\t * @returns {string} Base source path of the project\n\t */\n\tgetSourceBasePath(posix) {\n\t\tlet p = path;\n\t\tlet projectPath = this._project.path;\n\t\tif (posix) {\n\t\t\tprojectPath = projectPath.replace(/\\\\/g, \"/\");\n\t\t\tp = path.posix;\n\t\t}\n\t\treturn p.join(projectPath, this._project.resources.pathMappings[\"/resources/\"]);\n\t}\n\n\t/**\n\t * Determine library namespace by checking manifest.json with fallback to .library.\n\t * Any maven placeholders are resolved from the projects pom.xml\n\t *\n\t * @returns {string} Namespace of the project\n\t * @throws {Error} if namespace can not be determined\n\t */\n\tasync getNamespace() {\n\t\t// Trigger both reads asynchronously\n\t\tconst [{\n\t\t\tnamespace: manifestNs,\n\t\t\tfsPath: manifestPath\n\t\t}, {\n\t\t\tnamespace: dotLibraryNs,\n\t\t\tfsPath: dotLibraryPath\n\t\t}] = await Promise.all([\n\t\t\tthis.getNamespaceFromManifest(),\n\t\t\tthis.getNamespaceFromDotLibrary()\n\t\t]);\n\n\t\tlet libraryNs;\n\t\tlet fsNamespacePath;\n\t\tif (manifestNs && dotLibraryNs) {\n\t\t\t// Both files present\n\t\t\t// => check whether they are on the same level\n\t\t\tconst manifestDepth = manifestPath.split(path.sep).length;\n\t\t\tconst dotLibraryDepth = dotLibraryPath.split(path.sep).length;\n\n\t\t\tif (manifestDepth < dotLibraryDepth) {\n\t\t\t\t// We see the .library file as the \"leading\" file of a library\n\t\t\t\t// Therefore, a manifest.json on a higher level is something we do not except\n\t\t\t\tthrow new Error(`Failed to detect namespace for project ${this._project.metadata.name}: ` +\n\t\t\t\t\t`Found a manifest.json on a higher directory level than the .library file. ` +\n\t\t\t\t\t`It should be on the same or a lower level. ` +\n\t\t\t\t\t`Note that a manifest.json on a lower level will be ignored.\\n` +\n\t\t\t\t\t`  manifest.json path: ${manifestPath}\\n` +\n\t\t\t\t\t`  is higher than\\n` +\n\t\t\t\t\t`  .library path: ${dotLibraryPath}`);\n\t\t\t}\n\t\t\tif (manifestDepth === dotLibraryDepth) {\n\t\t\t\tif (path.dirname(manifestPath) !== path.dirname(dotLibraryPath)) {\n\t\t\t\t\t// This just should not happen in your project\n\t\t\t\t\tthrow new Error(`Failed to detect namespace for project ${this._project.metadata.name}: ` +\n\t\t\t\t\t`Found a manifest.json on the same directory level but in a different directory ` +\n\t\t\t\t\t`than the .library file. They should be in the same directory.\\n` +\n\t\t\t\t\t`  manifest.json path: ${manifestPath}\\n` +\n\t\t\t\t\t`  is different to\\n` +\n\t\t\t\t\t`  .library path: ${dotLibraryPath}`);\n\t\t\t\t}\n\t\t\t\t// Typical scenario if both files are present\n\t\t\t\tlog.verbose(`Found a manifest.json and a .library file on the same level for ` +\n\t\t\t\t\t`project ${this._project.metadata.name}.`);\n\t\t\t\tlog.verbose(`Resolving namespace of project ${this._project.metadata.name} from manifest.json...`);\n\t\t\t\tlibraryNs = manifestNs;\n\t\t\t\tfsNamespacePath = path.dirname(manifestPath);\n\t\t\t} else {\n\t\t\t\t// Typical scenario: Some nested component has a manifest.json but the library itself only\n\t\t\t\t// features a .library.  => Ignore the manifest.json\n\t\t\t\tlog.verbose(`Ignoring manifest.json found on a lower level than the .library file of ` +\n\t\t\t\t\t`project ${this._project.metadata.name}.`);\n\t\t\t\tlog.verbose(`Resolving namespace of project ${this._project.metadata.name} from .library...`);\n\t\t\t\tlibraryNs = dotLibraryNs;\n\t\t\t\tfsNamespacePath = path.dirname(dotLibraryPath);\n\t\t\t}\n\t\t} else if (manifestNs) {\n\t\t\t// Only manifest available\n\t\t\tlog.verbose(`Resolving namespace of project ${this._project.metadata.name} from manifest.json...`);\n\t\t\tlibraryNs = manifestNs;\n\t\t\tfsNamespacePath = path.dirname(manifestPath);\n\t\t} else if (dotLibraryNs) {\n\t\t\t// Only .library available\n\t\t\tlog.verbose(`Resolving namespace of project ${this._project.metadata.name} from .library...`);\n\t\t\tlibraryNs = dotLibraryNs;\n\t\t\tfsNamespacePath = path.dirname(dotLibraryPath);\n\t\t} else {\n\t\t\tlog.verbose(`Failed to resolve namespace of project ${this._project.metadata.name} from manifest.json ` +\n\t\t\t\t`or .library file. Falling back to library.js file path...`);\n\t\t}\n\n\t\tlet namespace;\n\t\tif (libraryNs) {\n\t\t\t// Maven placeholders can only exist in manifest.json or .library configuration\n\t\t\tif (this.hasMavenPlaceholder(libraryNs)) {\n\t\t\t\ttry {\n\t\t\t\t\tlibraryNs = await this.resolveMavenPlaceholder(libraryNs);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Failed to resolve namespace maven placeholder of project ` +\n\t\t\t\t\t\t`${this._project.metadata.name}: ${err.message}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnamespace = libraryNs.replace(/\\./g, \"/\");\n\n\t\t\tconst namespacePath = this.getNamespaceFromFsPath(fsNamespacePath);\n\t\t\tif (namespacePath !== namespace) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Detected namespace \"${namespace}\" does not match detected directory ` +\n\t\t\t\t\t`structure \"${namespacePath}\" for project ${this._project.metadata.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst fsPath = await this.getLibraryJsPath();\n\t\t\t\tnamespace = this.getNamespaceFromFsPath(path.dirname(fsPath));\n\t\t\t\tif (!namespace || namespace === \"/\") {\n\t\t\t\t\tthrow new Error(`Found library.js file in root directory. ` +\n\t\t\t\t\t\t`Expected it to be in namespace directory.`);\n\t\t\t\t}\n\t\t\t\tlog.verbose(`Deriving namespace for project ${this._project.metadata.name} from ` +\n\t\t\t\t\t`path of library.js file`);\n\t\t\t} catch (err) {\n\t\t\t\tlog.verbose(`Namespace resolution from library.js file path failed for project ` +\n\t\t\t\t\t`${this._project.metadata.name}: ${err.message}`);\n\t\t\t}\n\t\t}\n\n\t\tif (!namespace) {\n\t\t\tthrow new Error(`Failed to detect namespace or namespace is empty for ` +\n\t\t\t\t`project ${this._project.metadata.name}. Check verbose log for details.`);\n\t\t}\n\n\t\tlog.verbose(`Namespace of project ${this._project.metadata.name} is ${namespace}`);\n\t\treturn namespace;\n\t}\n\n\tasync getNamespaceFromManifest() {\n\t\ttry {\n\t\t\tconst {content: manifest, fsPath} = await this.getManifest();\n\t\t\t// check for a proper sap.app/id in manifest.json to determine namespace\n\t\t\tif (manifest[\"sap.app\"] && manifest[\"sap.app\"].id) {\n\t\t\t\tconst namespace = manifest[\"sap.app\"].id;\n\t\t\t\tlog.verbose(`Found namespace ${namespace} in manifest.json of project ${this._project.metadata.name} ` +\n\t\t\t\t\t`at ${fsPath}`);\n\t\t\t\treturn {\n\t\t\t\t\tnamespace,\n\t\t\t\t\tfsPath\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tlog.verbose(\n\t\t\t\t\t`No sap.app/id configuration found in manifest.json of project ${this._project.metadata.name} ` +\n\t\t\t\t\t`at ${fsPath}`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlog.verbose(`Namespace resolution from manifest.json failed for project ` +\n\t\t\t\t`${this._project.metadata.name}: ${err.message}`);\n\t\t}\n\t\treturn {};\n\t}\n\n\tasync getNamespaceFromDotLibrary() {\n\t\ttry {\n\t\t\tconst {content: dotLibrary, fsPath} = await this.getDotLibrary();\n\t\t\tif (dotLibrary && dotLibrary.library && dotLibrary.library.name) {\n\t\t\t\tconst namespace = dotLibrary.library.name._;\n\t\t\t\tlog.verbose(`Found namespace ${namespace} in .library file of project ${this._project.metadata.name} ` +\n\t\t\t\t\t`at ${fsPath}`);\n\t\t\t\treturn {\n\t\t\t\t\tnamespace,\n\t\t\t\t\tfsPath\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`No library name found in .library of project ${this._project.metadata.name} ` +\n\t\t\t\t\t`at ${fsPath}`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlog.verbose(`Namespace resolution from .library failed for project ` +\n\t\t\t\t`${this._project.metadata.name}: ${err.message}`);\n\t\t}\n\t\treturn {};\n\t}\n\n\tgetNamespaceFromFsPath(fsPath) {\n\t\t// Transform path to POSIX and remove any trailing slashes\n\t\tconst posixFsPath = fsPath.replace(/\\\\/g, \"/\").replace(/\\/$/, \"\");\n\n\t\t// Remove base path from fsPath\n\t\tconst posixBasePath = this.getSourceBasePath(true);\n\n\t\t// Can match /library/src as well as /library/src/some/namespace\n\t\tconst basePathPrefixRegExp = new RegExp(`^${posixBasePath}/?`);\n\n\t\tif (!basePathPrefixRegExp.test(posixFsPath)) {\n\t\t\tif (posixBasePath === posixFsPath + \"/\") {\n\t\t\t\t// The given file system path does not contain a namespace path\n\t\t\t\t// It is equal to the source base path\n\t\t\t\t// Therefore return an empty namespace\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tthrow new Error(`Given file system path ${posixFsPath} is not based on source base ` +\n\t\t\t\t`path ${posixBasePath}.`);\n\t\t}\n\t\tconst namespacePath = posixFsPath.replace(basePathPrefixRegExp, \"\");\n\t\treturn namespacePath;\n\t}\n\n\t/**\n\t * Determines library copyright from given project configuration with fallback to .library.\n\t *\n\t * @returns {string} Copyright of the project\n\t * @throws {Error} if copyright can not be determined\n\t */\n\tasync getCopyright() {\n\t\tif (this._project.metadata.copyright) {\n\t\t\treturn this._project.metadata.copyright;\n\t\t}\n\t\t// If no copyright replacement was provided by ui5.yaml,\n\t\t// check if the .library file has a valid copyright replacement\n\t\tconst {content: dotLibrary} = await this.getDotLibrary();\n\t\tif (dotLibrary && dotLibrary.library && dotLibrary.library.copyright) {\n\t\t\tlog.verbose(`Using copyright from .library for project ${this._project.metadata.name}...`);\n\t\t\treturn dotLibrary.library.copyright._;\n\t\t} else {\n\t\t\tthrow new Error(`No copyright configuration found in .library ` +\n\t\t\t\t`of project ${this._project.metadata.name}`);\n\t\t}\n\t}\n\n\tasync getPreloadExcludesFromDotLibrary() {\n\t\tconst {content: dotLibrary, fsPath} = await this.getDotLibrary();\n\t\tif (dotLibrary && dotLibrary.library && dotLibrary.library.appData &&\n\t\t\tdotLibrary.library.appData.packaging &&\n\t\t\tdotLibrary.library.appData.packaging[\"all-in-one\"] &&\n\t\t\tdotLibrary.library.appData.packaging[\"all-in-one\"].exclude\n\t\t) {\n\t\t\tlet excludes = dotLibrary.library.appData.packaging[\"all-in-one\"].exclude;\n\t\t\tif (!Array.isArray(excludes)) {\n\t\t\t\texcludes = [excludes];\n\t\t\t}\n\t\t\tlog.verbose(`Found ${excludes.length} preload excludes in .library file of ` +\n\t\t\t\t`project ${this._project.metadata.name} at ${fsPath}`);\n\t\t\treturn excludes.map((exclude) => {\n\t\t\t\treturn exclude.$.name;\n\t\t\t});\n\t\t} else {\n\t\t\tlog.verbose(\n\t\t\t\t`No preload excludes found in .library of project ${this._project.metadata.name} ` +\n\t\t\t\t`at ${fsPath}`);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Reads the projects manifest.json\n\t *\n\t * @returns {Promise<object>} resolves with an object containing the <code>content</code> (as JSON) and\n\t * \t\t\t\t\t\t\t<code>fsPath</code> (as string) of the manifest.json file\n\t */\n\tasync getManifest() {\n\t\tif (this._pManifest) {\n\t\t\treturn this._pManifest;\n\t\t}\n\t\tconst basePath = this.getSourceBasePath();\n\t\treturn this._pManifest = glob(\"**/manifest.json\", {\n\t\t\tcwd: basePath,\n\t\t\tfollowSymbolicLinks: false\n\t\t}).then(async (manifestResources) => {\n\t\t\tif (!manifestResources.length) {\n\t\t\t\tthrow new Error(`Could not find manifest.json file for project ${this._project.metadata.name}`);\n\t\t\t}\n\t\t\tif (manifestResources.length > 1) {\n\t\t\t\tthrow new Error(`Found multiple (${manifestResources.length}) manifest.json files ` +\n\t\t\t\t\t`for project ${this._project.metadata.name}`);\n\t\t\t}\n\t\t\tconst fsPath = path.join(basePath, manifestResources[0]);\n\t\t\ttry {\n\t\t\t\tconst content = await readFile(fsPath);\n\t\t\t\treturn {\n\t\t\t\t\tcontent: JSON.parse(content),\n\t\t\t\t\tfsPath\n\t\t\t\t};\n\t\t\t} catch (err) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Failed to read manifest.json for project ${this._project.metadata.name}: ${err.message}`);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Reads the .library file\n\t *\n\t * @returns {Promise<object>} resolves with an object containing the <code>content</code> (as JSON) and\n\t * \t\t\t\t\t\t\t<code>fsPath</code> (as string) of the .library file\n\t */\n\tasync getDotLibrary() {\n\t\tif (this._pDotLibrary) {\n\t\t\treturn this._pDotLibrary;\n\t\t}\n\t\tconst basePath = this.getSourceBasePath();\n\t\treturn this._pDotLibrary = glob(\"**/.library\", {\n\t\t\tcwd: basePath,\n\t\t\tfollowSymbolicLinks: false\n\t\t}).then(async (dotLibraryResources) => {\n\t\t\tif (!dotLibraryResources.length) {\n\t\t\t\tthrow new Error(`Could not find .library file for project ${this._project.metadata.name}`);\n\t\t\t}\n\t\t\tif (dotLibraryResources.length > 1) {\n\t\t\t\tthrow new Error(`Found multiple (${dotLibraryResources.length}) .library files ` +\n\t\t\t\t\t`for project ${this._project.metadata.name}`);\n\t\t\t}\n\t\t\tconst fsPath = path.join(basePath, dotLibraryResources[0]);\n\t\t\tconst content = await readFile(fsPath);\n\t\t\tconst xml2js = require(\"xml2js\");\n\t\t\tconst parser = new xml2js.Parser({\n\t\t\t\texplicitArray: false,\n\t\t\t\texplicitCharkey: true\n\t\t\t});\n\t\t\tconst readXML = promisify(parser.parseString);\n\t\t\tconst contentJson = await readXML(content);\n\t\t\treturn {\n\t\t\t\tcontent: contentJson,\n\t\t\t\tfsPath\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Determines the path of the library.js file\n\t *\n\t * @returns {Promise<string>} resolves with an a string containing the file system path\n\t *\t\t\t\t\t\t\t\tof the library.js file\n\t */\n\tasync getLibraryJsPath() {\n\t\tif (this._pLibraryJs) {\n\t\t\treturn this._pLibraryJs;\n\t\t}\n\t\tconst basePath = this.getSourceBasePath();\n\t\treturn this._pLibraryJs = glob(\"**/library.js\", {\n\t\t\tcwd: basePath,\n\t\t\tfollowSymbolicLinks: false\n\t\t}).then(async (libraryJsResources) => {\n\t\t\tif (!libraryJsResources.length) {\n\t\t\t\tthrow new Error(`Could not find library.js file for project ${this._project.metadata.name}`);\n\t\t\t}\n\t\t\tif (libraryJsResources.length > 1) {\n\t\t\t\tthrow new Error(`Found multiple (${libraryJsResources.length}) library.js files ` +\n\t\t\t\t\t`for project ${this._project.metadata.name}`);\n\t\t\t}\n\t\t\tconst fsPath = path.join(basePath, libraryJsResources[0]);\n\n\t\t\t// Content is not yet relevant, so don't read it\n\t\t\treturn fsPath;\n\t\t});\n\t}\n\n\t/**\n\t * Validates the project\n\t *\n\t * @returns {Promise} resolves if successfully validated\n\t * @throws {Error} if validation fails\n\t */\n\tvalidate() {\n\t\tconst project = this._project;\n\t\treturn Promise.resolve().then(() => {\n\t\t\tif (!project) {\n\t\t\t\tthrow new Error(\"Project is undefined\");\n\t\t\t} else if (!project.metadata || !project.metadata.name) {\n\t\t\t\tthrow new Error(`\"metadata.name\" configuration is missing for project ${project.id}`);\n\t\t\t} else if (!project.type) {\n\t\t\t\tthrow new Error(`\"type\" configuration is missing for project ${project.id}`);\n\t\t\t} else if (project.version === undefined) {\n\t\t\t\tthrow new Error(`\"version\" is missing for project ${project.id}`);\n\t\t\t}\n\t\t\tif (!project.resources) {\n\t\t\t\tproject.resources = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration) {\n\t\t\t\tproject.resources.configuration = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths) {\n\t\t\t\tproject.resources.configuration.paths = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths.src) {\n\t\t\t\tproject.resources.configuration.paths.src = \"src\";\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths.test) {\n\t\t\t\tproject.resources.configuration.paths.test = \"test\";\n\t\t\t}\n\n\t\t\tif (!project.resources.configuration.propertiesFileSourceEncoding) {\n\t\t\t\tif ([\"0.1\", \"1.0\", \"1.1\"].includes(project.specVersion)) {\n\t\t\t\t\t// default encoding to \"ISO-8859-1\" for old specVersions\n\t\t\t\t\tproject.resources.configuration.propertiesFileSourceEncoding = \"ISO-8859-1\";\n\t\t\t\t} else {\n\t\t\t\t\t// default encoding to \"UTF-8\" for all projects starting with specVersion 2.0\n\t\t\t\t\tproject.resources.configuration.propertiesFileSourceEncoding = \"UTF-8\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (![\"ISO-8859-1\", \"UTF-8\"].includes(project.resources.configuration.propertiesFileSourceEncoding)) {\n\t\t\t\tthrow new Error(`Invalid properties file encoding specified for project ${project.id}. ` +\n\t\t\t\t\t`Encoding provided: ${project.resources.configuration.propertiesFileSourceEncoding}. ` +\n\t\t\t\t\t`Must be either \"ISO-8859-1\" or \"UTF-8\".`);\n\t\t\t}\n\n\t\t\tconst absoluteSrcPath = path.join(project.path, project.resources.configuration.paths.src);\n\t\t\tconst absoluteTestPath = path.join(project.path, project.resources.configuration.paths.test);\n\t\t\treturn Promise.all([\n\t\t\t\tthis.dirExists(absoluteSrcPath).then(function(bExists) {\n\t\t\t\t\tif (!bExists) {\n\t\t\t\t\t\tthrow new Error(`Could not find source directory of project ${project.id}: ` +\n\t\t\t\t\t\t\t`${absoluteSrcPath}`);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tthis.dirExists(absoluteTestPath).then(function(bExists) {\n\t\t\t\t\tif (!bExists) {\n\t\t\t\t\t\tlog.verbose(`Could not find (optional) test directory of project ${project.id}: ` +\n\t\t\t\t\t\t\t`${absoluteTestPath}`);\n\t\t\t\t\t\t// Current signal to following consumers that \"test\" is not available is null\n\t\t\t\t\t\tproject.resources.configuration.paths.test = null;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t]);\n\t\t});\n\t}\n}\n\nmodule.exports = LibraryFormatter;\n",
    "lib/types/module/ModuleFormatter.js": "const log = require(\"@ui5/logger\").getLogger(\"types:module:ModuleFormatter\");\nconst path = require(\"path\");\nconst AbstractFormatter = require(\"../AbstractFormatter\");\n\nclass ModuleFormatter extends AbstractFormatter {\n\tformat() {\n\t\treturn this.validate().then(() => {\n\t\t\tconst project = this._project;\n\t\t\tlog.verbose(\"Formatting project %s...\", project.metadata.name);\n\t\t\tproject.resources.pathMappings = project.resources.configuration.paths;\n\t\t});\n\t}\n\n\tvalidate() {\n\t\tconst project = this._project;\n\t\treturn Promise.resolve().then(() => {\n\t\t\tif (!project) {\n\t\t\t\tthrow new Error(\"Project is undefined\");\n\t\t\t} else if (!project.metadata || !project.metadata.name) {\n\t\t\t\tthrow new Error(`\"metadata.name\" configuration is missing for project ${project.id}`);\n\t\t\t} else if (!project.type) {\n\t\t\t\tthrow new Error(`\"type\" configuration is missing for project ${project.id}`);\n\t\t\t} else if (project.version === undefined) {\n\t\t\t\tthrow new Error(`\"version\" is missing for project ${project.id}`);\n\t\t\t}\n\n\t\t\tif (!project.resources) {\n\t\t\t\tproject.resources = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration) {\n\t\t\t\tproject.resources.configuration = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths) {\n\t\t\t\tproject.resources.configuration.paths = {\n\t\t\t\t\t\"/\": \"\"\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst paths = project.resources.configuration.paths;\n\t\t\tconst dirChecks =[];\n\t\t\tfor (const virPath of Object.keys(paths)) {\n\t\t\t\tconst absolutePath = path.join(project.path, paths[virPath]);\n\t\t\t\tdirChecks.push(this.dirExists(absolutePath).then((bExists) => {\n\t\t\t\t\tif (!bExists) {\n\t\t\t\t\t\tthrow new Error(`Could not find \"${virPath}\" directory of project ${project.id} at ` +\n\t\t\t\t\t\t\t\t`${absolutePath}`);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t\treturn Promise.all(dirChecks);\n\t\t});\n\t}\n}\n\nmodule.exports = ModuleFormatter;\n",
    "lib/types/themeLibrary/ThemeLibraryFormatter.js": "const log = require(\"@ui5/logger\").getLogger(\"types:themeLibrary:ThemeLibraryFormatter\");\nconst path = require(\"path\");\nconst AbstractUi5Formatter = require(\"../AbstractUi5Formatter\");\n\n\nclass ThemeLibraryFormatter extends AbstractUi5Formatter {\n\t/**\n\t * Formats and validates the project\n  \t *\n\t * @returns {Promise}\n\t */\n\tasync format() {\n\t\tconst project = this._project;\n\t\tawait this.validate();\n\n\t\tlog.verbose(\"Formatting theme-library project %s...\", project.metadata.name);\n\t\tproject.resources.pathMappings = {\n\t\t\t\"/resources/\": project.resources.configuration.paths.src\n\t\t};\n\n\t\tif (project.resources.configuration.paths.test) {\n\t\t\t// Directory 'test' is somewhat optional for theme-libraries\n\t\t\tproject.resources.pathMappings[\"/test-resources/\"] = project.resources.configuration.paths.test;\n\t\t} else {\n\t\t\tlog.verbose(`Ignoring 'test' directory for project ${project.metadata.name}. ` +\n\t\t\t\t\"Either no setting was provided or the path not found.\");\n\t\t}\n\t}\n\n\t/**\n\t * Validates the project\n\t *\n\t * @returns {Promise} resolves if successfully validated\n\t * @throws {Error} if validation fails\n\t */\n\tvalidate() {\n\t\tconst project = this._project;\n\t\treturn Promise.resolve().then(() => {\n\t\t\tif (!project) {\n\t\t\t\tthrow new Error(\"Project is undefined\");\n\t\t\t} else if (project.specVersion === \"0.1\" || project.specVersion === \"1.0\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`theme-library type requires \"specVersion\" 1.1 or higher. ` +\n\t\t\t\t\t`Project \"specVersion\" is: ${project.specVersion}`);\n\t\t\t} else if (!project.metadata || !project.metadata.name) {\n\t\t\t\tthrow new Error(`\"metadata.name\" configuration is missing for project ${project.id}`);\n\t\t\t} else if (!project.type) {\n\t\t\t\tthrow new Error(`\"type\" configuration is missing for project ${project.id}`);\n\t\t\t} else if (project.version === undefined) {\n\t\t\t\tthrow new Error(`\"version\" is missing for project ${project.id}`);\n\t\t\t}\n\t\t\tif (!project.resources) {\n\t\t\t\tproject.resources = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration) {\n\t\t\t\tproject.resources.configuration = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths) {\n\t\t\t\tproject.resources.configuration.paths = {};\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths.src) {\n\t\t\t\tproject.resources.configuration.paths.src = \"src\";\n\t\t\t}\n\t\t\tif (!project.resources.configuration.paths.test) {\n\t\t\t\tproject.resources.configuration.paths.test = \"test\";\n\t\t\t}\n\n\t\t\tconst absoluteSrcPath = path.join(project.path, project.resources.configuration.paths.src);\n\t\t\tconst absoluteTestPath = path.join(project.path, project.resources.configuration.paths.test);\n\t\t\treturn Promise.all([\n\t\t\t\tthis.dirExists(absoluteSrcPath).then(function(bExists) {\n\t\t\t\t\tif (!bExists) {\n\t\t\t\t\t\tthrow new Error(`Could not find source directory of project ${project.id}: ` +\n\t\t\t\t\t\t\t`${absoluteSrcPath}`);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tthis.dirExists(absoluteTestPath).then(function(bExists) {\n\t\t\t\t\tif (!bExists) {\n\t\t\t\t\t\tlog.verbose(`Could not find (optional) test directory of project ${project.id}: ` +\n\t\t\t\t\t\t\t`${absoluteTestPath}`);\n\t\t\t\t\t\t// Current signal to following consumers that \"test\" is not available is null\n\t\t\t\t\t\tproject.resources.configuration.paths.test = null;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t]);\n\t\t});\n\t}\n}\n\nmodule.exports = ThemeLibraryFormatter;\n",
    "lib/lbt/resources/ResourceCollector.js": "const ResourceInfoList = require(\"./ResourceInfoList\");\nconst ResourceFilterList = require(\"./ResourceFilterList\");\nconst ResourceInfo = require(\"./ResourceInfo\");\n\n\nconst LOCALE = /^((?:[^/]+\\/)*[^/]+?)_([A-Z]{2}(?:_[A-Z]{2}(?:_[A-Z0-9_]+)?)?)(\\.properties|\\.hdbtextbundle)$/i;\nconst THEME = /^((?:[^/]+\\/)*)themes\\/([^/]+)\\//;\n\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:resources:ResourceCollector\");\n\n/**\n * Collects all resources in a set of resource folders or from an archive\n * and writes a 'resources.json' file for each component or library\n * that can be found in the resources.\n *\n * @since 1.29.0\n */\nclass ResourceCollector {\n\t/**\n\t * Collects a set of ResourceInfo objects and groups them by components, libraries and themes.\n\t *\n\t * @param {ResourcePool} pool\n\t * @param {ResourceFilterList} [filter] used to filter the resources based on their name\n\t */\n\tconstructor(pool, filter) {\n\t\tthis._pool = pool;\n\t\t/**\n\t\t * Global filters that should be taken into account when collecting resources.\n\t\t *\n\t\t * @type {ResourceFilterList}\n\t\t * @private\n\t\t */\n\t\tthis._filter = filter != null ? filter : new ResourceFilterList();\n\t\t/**\n\t\t * name to resource info\n\t\t *\n\t\t * @type {Map<string,ResourceInfo>}\n\t\t */\n\t\tthis._resources = new Map();\n\n\t\t/**\n\t\t * prefix to ResourceInfoList\n\t\t *\n\t\t * @type {Map<string, ResourceInfoList>}\n\t\t * @private\n\t\t */\n\t\tthis._components = new Map();\n\n\t\t/**\n\t\t * prefix to ResourceInfoList\n\t\t *\n\t\t * @type {Map<string, ResourceInfoList>}\n\t\t * @private\n\t\t */\n\t\tthis._themePackages = new Map();\n\t}\n\n\t/**\n\t * Comma separated list of components to which orphaned resources should be added.\n\t *\n\t * A component and a separated list of resource patterns of orphans that should be added\n\t * to the preceding component.\n\t * If no such list is given, any orphaned resource will be added to the component.\n\t * The evaluation logic for the filter list is the same as for the <code>filters</code>\n\t * parameters: excludes can be denoted with a leading '-' or '!' and order is significant.\n\t * Later filters can override the result of earlier ones.\n\t *\n\t * If no component is given, orphans will only be reported but not added to any component (default).\n\t *\n\t * @param {object<string, string[]>} list component to list of components\n\t */\n\tsetExternalResources(list) {\n\t\tthis._externalResources = list;\n\t}\n\n\t/**\n\t * Processes a resource\n\t *\n\t * @param {module:@ui5/fs.Resource} resource\n\t */\n\tasync visitResource(resource) {\n\t\tconst virPath = resource.getPath();\n\t\tif ( !virPath.startsWith(\"/resources/\") ) {\n\t\t\tlog.warn(`non-runtime resource ${virPath} ignored`);\n\t\t\treturn;\n\t\t}\n\t\tconst name = virPath.slice(\"/resources/\".length);\n\t\tif ( this._filter.matches(name) ) {\n\t\t\tconst resourceInfo = new ResourceInfo(name);\n\t\t\tresourceInfo.size = await resource.getSize();\n\t\t\tthis._resources.set(name, resourceInfo);\n\n\t\t\tconst p = name.lastIndexOf(\"/\");\n\t\t\tconst prefix = name.substring(0, p + 1);\n\t\t\tconst basename = name.substring(p + 1);\n\t\t\tif ( basename.match(\"[^/]*\\\\.library|Component\\\\.js|manifest\\\\.json\") && !this._components.has(prefix) ) {\n\t\t\t\tthis._components.set(prefix, new ResourceInfoList(prefix));\n\t\t\t}\n\t\t\t// a .theme file within a theme folder indicates a library/theme package\n\t\t\t// Note: ignores .theme files in library folders\n\n\t\t\t// .theming files are not always present therefore this check is relevant for the library.source.less\n\t\t\tif ( name.match(\"(?:[^/]+/)*themes/[^/]+/(?:\\\\.theming|library\\\\.source\\\\.less)\") &&\n\t\t\t\t\t!this._themePackages.has(prefix) ) {\n\t\t\t\t// log.info(\"found new theme package %s\", prefix);\n\t\t\t\tthis._themePackages.set(prefix, new ResourceInfoList(prefix));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync enrichWithDependencyInfo(resourceInfo) {\n\t\treturn this._pool.getModuleInfo(resourceInfo.name).then(async (moduleInfo) => {\n\t\t\tif ( moduleInfo.name ) {\n\t\t\t\tresourceInfo.module = moduleInfo.name;\n\t\t\t}\n\t\t\tif ( moduleInfo.dynamicDependencies ) {\n\t\t\t\tresourceInfo.dynRequired = true;\n\t\t\t}\n\n\t\t\tif ( moduleInfo.dependencies.length > 0 ) {\n\t\t\t\tresourceInfo.required = resourceInfo.required || new Set();\n\t\t\t\tresourceInfo.condRequired = resourceInfo.condRequired || new Set();\n\t\t\t\tmoduleInfo.dependencies.forEach((dep) => {\n\t\t\t\t\tif ( moduleInfo.isConditionalDependency(dep) ) {\n\t\t\t\t\t\tresourceInfo.condRequired.add(dep);\n\t\t\t\t\t} else if ( !moduleInfo.isImplicitDependency(dep) ) {\n\t\t\t\t\t\tresourceInfo.required.add(dep);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ( moduleInfo.subModules.length > 0 ) {\n\t\t\t\tresourceInfo.included = resourceInfo.included || new Set();\n\t\t\t\tmoduleInfo.subModules.forEach((mod) => {\n\t\t\t\t\tresourceInfo.included.add(mod);\n\t\t\t\t});\n\t\t\t\tawait Promise.all(moduleInfo.subModules.map(async (subModule) => {\n\t\t\t\t\t// Try to inherit dependency info\n\t\t\t\t\tlet subModuleInfo;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsubModuleInfo = await this._pool.getModuleInfo(subModule);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tlog.verbose(`\tmissing submodule ${subModule} included by ${moduleInfo.name}`);\n\t\t\t\t\t}\n\t\t\t\t\tif (subModuleInfo) {\n\t\t\t\t\t\t// Inherit subModule dependencies\n\t\t\t\t\t\tif ( subModuleInfo.dependencies.length > 0 ) {\n\t\t\t\t\t\t\tresourceInfo.required = resourceInfo.required || new Set();\n\t\t\t\t\t\t\tresourceInfo.condRequired = resourceInfo.condRequired || new Set();\n\t\t\t\t\t\t\tsubModuleInfo.dependencies.forEach((dep) => {\n\t\t\t\t\t\t\t\tif (resourceInfo.included.has(dep)) {\n\t\t\t\t\t\t\t\t\t// Don't add dependency if module is already listed as \"included\"\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( subModuleInfo.isConditionalDependency(dep) ) {\n\t\t\t\t\t\t\t\t\t// Avoid having module listed in both required and condRequired\n\t\t\t\t\t\t\t\t\tif (!resourceInfo.required.has(dep)) {\n\t\t\t\t\t\t\t\t\t\tresourceInfo.condRequired.add(dep);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if ( !subModuleInfo.isImplicitDependency(dep) ) {\n\t\t\t\t\t\t\t\t\t// Move module from condRequired to required\n\t\t\t\t\t\t\t\t\tif (resourceInfo.condRequired.has(dep)) {\n\t\t\t\t\t\t\t\t\t\tresourceInfo.condRequired.delete(dep);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tresourceInfo.required.add(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Inherit dynamicDependencies flag\n\t\t\t\t\t\tif ( moduleInfo.dynamicDependencies ) {\n\t\t\t\t\t\t\tresourceInfo.dynRequired = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tif (moduleInfo.requiresTopLevelScope) {\n\t\t\t\tresourceInfo.requiresTopLevelScope = true;\n\t\t\t}\n\t\t\tif (moduleInfo.exposedGlobals != null && moduleInfo.exposedGlobals.length) {\n\t\t\t\tresourceInfo.exposedGlobalNames = resourceInfo.exposedGlobalNames || new Set();\n\t\t\t\tmoduleInfo.exposedGlobals.forEach((exposedGlobalName) => {\n\t\t\t\t\tresourceInfo.exposedGlobalNames.add(exposedGlobalName);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (moduleInfo.rawModule) {\n\t\t\t\tresourceInfo.format = \"raw\";\n\t\t\t}\n\t\t});\n\t}\n\n\tasync determineResourceDetails({\n\t\tdebugResources, mergedResources, designtimeResources, supportResources, debugBundles\n\t}) {\n\t\tconst baseNames = new Set();\n\t\tconst debugFilter = new ResourceFilterList(debugResources);\n\t\tconst mergeFilter = new ResourceFilterList(mergedResources);\n\t\tconst designtimeFilter = new ResourceFilterList(designtimeResources);\n\t\tconst supportFilter = new ResourceFilterList(supportResources);\n\t\tconst debugBundleFilter = new ResourceFilterList(debugBundles);\n\n\t\tconst promises = [];\n\t\tconst nonBundledDebugResources = [];\n\n\t\tfor (const [name, info] of this._resources.entries()) {\n\t\t\tif ( debugFilter.matches(name) ) {\n\t\t\t\tinfo.isDebug = true;\n\t\t\t\tlog.verbose(`  found potential debug resource '${name}'`);\n\t\t\t}\n\n\t\t\t// log.verbose(`  checking ${name}`);\n\t\t\tlet m;\n\t\t\tif ( m = LOCALE.exec(name) ) {\n\t\t\t\tconst baseName = m[1] + m[3];\n\t\t\t\tlog.verbose(`  found potential i18n resource '${name}', base name is '${baseName}', locale is ${m[2]}`);\n\t\t\t\tinfo.i18nName = baseName; // e.g. \"i18n.properties\"\n\t\t\t\tinfo.i18nLocale = m[2]; // e.g. \"de\"\n\t\t\t\tbaseNames.add(baseName);\n\t\t\t}\n\n\t\t\tif ( m = THEME.exec(name) ) {\n\t\t\t\t// log.verbose(\"found theme candidate %s with prefix %s\", name, m[1]);\n\t\t\t\tif ( this._themePackages.has(m[0]) ) {\n\t\t\t\t\tconst theme = m[2];\n\t\t\t\t\tinfo.theme = theme;\n\t\t\t\t\tlog.verbose(`  found potential theme resource '${name}', theme ${theme}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( /(?:\\.js|\\.view\\.xml|\\.control\\.xml|\\.fragment\\.xml)$/.test(name) ) {\n\t\t\t\tif ( (!info.isDebug || debugBundleFilter.matches(name)) ) {\n\t\t\t\t\t// Only analyze non-debug files and special debug bundles (like sap-ui-core-dbg.js)\n\t\t\t\t\tpromises.push(\n\t\t\t\t\t\tthis.enrichWithDependencyInfo(info)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tnonBundledDebugResources.push(info);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set the module name for .properties and .json\n\t\t\tif ( /(?:\\.properties|\\.json)$/.test(name) ) {\n\t\t\t\tconsole.log(\"[Dr. Async] Code Executed\");\n\t\t\t\tpromises.push(new Promise((resolve) => {\n\t\t\t\t\treturn this._pool.getModuleInfo(info.name).then((moduleInfo) => {\n\t\t\t\t\t\tif (moduleInfo.name) {\n\t\t\t\t\t\t\tinfo.module = moduleInfo.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tif ( mergeFilter.matches(name) ) {\n\t\t\t\tinfo.merged = true;\n\t\t\t\tlog.verbose(`  found potential merged resource '${name}'`);\n\t\t\t}\n\n\t\t\tif ( designtimeFilter.matches(name) ) {\n\t\t\t\tinfo.designtime = true;\n\t\t\t\tlog.verbose(`  found potential designtime resource '${name}'`);\n\t\t\t}\n\n\t\t\tif ( supportFilter.matches(name) ) {\n\t\t\t\tinfo.support = true;\n\t\t\t\tlog.verbose(`  found potential support resource '${name}'`);\n\t\t\t}\n\t\t}\n\n\t\tfor (const baseName of baseNames) {\n\t\t\tif ( this._resources.has(baseName) ) {\n\t\t\t\tconst info = this._resources.get(baseName);\n\t\t\t\tinfo.i18nName = baseName;\n\t\t\t\tinfo.i18nLocale = \"\";\n\t\t\t}\n\t\t}\n\n\t\tawait Promise.all(promises);\n\n\t\tfor (let i = nonBundledDebugResources.length - 1; i >= 0; i--) {\n\t\t\tconst dbgInfo = nonBundledDebugResources[i];\n\t\t\tconst nonDebugName = ResourceInfoList.getNonDebugName(dbgInfo.name);\n\t\t\tconst nonDbgInfo = this._resources.get(nonDebugName);\n\t\t\tconst newDbgInfo = new ResourceInfo(dbgInfo.name);\n\n\t\t\t// First copy info of analysis from non-dbg file (included, required, condRequired, ...)\n\t\t\tnewDbgInfo.copyFrom(null, nonDbgInfo);\n\t\t\t// Then copy over info from dbg file to properly set name, isDebug, etc.\n\t\t\tnewDbgInfo.copyFrom(null, dbgInfo);\n\n\t\t\tthis._resources.set(dbgInfo.name, newDbgInfo);\n\t\t}\n\t}\n\n\tcreateOrphanFilters() {\n\t\tlog.verbose(\n\t\t\t`  configured external resources filters (resources outside the namespace): ` +\n\t\t\t`${this._externalResources == null ? \"(none)\" : this._externalResources}`);\n\n\t\tconst filtersByComponent = new Map();\n\n\t\tif ( this._externalResources != null ) {\n\t\t\tfor ( let [component, filters] of Object.entries(this._externalResources) ) {\n\t\t\t\tconst packageFilters = new ResourceFilterList(filters);\n\t\t\t\tif ( component === \"/\" || component === \"\" ) {\n\t\t\t\t\tcomponent = \"\";\n\t\t\t\t} else if ( !component.endsWith(\"/\") ) {\n\t\t\t\t\tcomponent += \"/\";\n\t\t\t\t}\n\t\t\t\tlog.verbose(`\tresulting filter list for '${component}': '${packageFilters}'`);\n\t\t\t\tfiltersByComponent.set(component, packageFilters);\n\t\t\t}\n\t\t}\n\t\treturn filtersByComponent;\n\t}\n\n\tgroupResourcesByComponents() {\n\t\tconst orphanFilters = this.createOrphanFilters();\n\t\tfor (const resource of this._resources.values()) {\n\t\t\tlet contained = false;\n\t\t\tfor (const [prefix, list] of this._components.entries()) {\n\t\t\t\tif ( resource.name.startsWith(prefix) ) {\n\t\t\t\t\tlist.add(resource);\n\t\t\t\t\tcontained = true;\n\t\t\t\t} else if ( orphanFilters.has(prefix) ) {\n\t\t\t\t\t// log.verbose(`  checking '${resource.name}' against orphan filter ` +\n\t\t\t\t\t// \t`'${orphanFilters.get(prefix)}' (${prefix})`);\n\t\t\t\t\tif ( orphanFilters.get(prefix).matches(resource.name) ) {\n\t\t\t\t\t\tlist.add(resource);\n\t\t\t\t\t\tcontained = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( resource.theme != null ) {\n\t\t\t\t// assign theme resources additionally to theme packages\n\t\t\t\tfor (const [prefix, list] of this._themePackages.entries()) {\n\t\t\t\t\tif ( resource.name.startsWith(prefix) ) {\n\t\t\t\t\t\tlist.add(resource);\n\t\t\t\t\t\tcontained = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( contained ) {\n\t\t\t\tthis._resources.delete(resource.name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @returns {Set<string>} resource names\n\t */\n\tget resources() {\n\t\treturn new Set(this._resources.keys());\n\t}\n\n\t/**\n\t * Components\n\t *\n\t * @returns {Map<string, ResourceInfoList>}\n\t */\n\tget components() {\n\t\treturn this._components;\n\t}\n\n\t/**\n\t * @returns {Map<string, ResourceInfoList>}\n\t */\n\tget themePackages() {\n\t\treturn this._themePackages;\n\t}\n}\n\nmodule.exports = ResourceCollector;\n",
    "lib/lbt/bundle/Builder.js": "/* eslint quotes: [\"error\", \"double\", { \"allowTemplateLiterals\": true }] */\n// for consistency of write calls, we generally allow template literals\n\"use strict\";\n\nconst terser = require(\"terser\");\nconst {pd} = require(\"pretty-data\");\nconst esprima = require(\"esprima\");\nconst {Syntax} = esprima;\n// const MOZ_SourceMap = require(\"source-map\");\n\nconst {isMethodCall} = require(\"../utils/ASTUtils\");\nconst ModuleName = require(\"../utils/ModuleName\");\nconst UI5ClientConstants = require(\"../UI5ClientConstants\");\nconst escapePropertiesFile = require(\"../utils/escapePropertiesFile\");\n\nconst BundleResolver = require(\"./Resolver\");\nconst BundleSplitter = require(\"./AutoSplitter\");\nconst {SectionType} = require(\"./BundleDefinition\");\nconst BundleWriter = require(\"./BundleWriter\");\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:bundle:Builder\");\n\nconst copyrightCommentsPattern = /copyright|\\(c\\)(?:[0-9]+|\\s+[0-9A-za-z])|released under|license|\\u00a9|^@ui5-bundle-raw-include |^@ui5-bundle /i;\nconst xmlHtmlPrePattern = /<(?:\\w+:)?pre\\b/;\n\nconst strReplacements = {\n\t\"\\r\": \"\\\\r\",\n\t\"\\t\": \"\\\\t\",\n\t\"\\n\": \"\\\\n\",\n\t\"'\": \"\\\\'\",\n\t\"\\\\\": \"\\\\\\\\\"\n};\n\nfunction makeStringLiteral(str) {\n\treturn \"'\" + String(str).replace(/['\\r\\n\\t\\\\]/g, function(char) {\n\t\treturn strReplacements[char];\n\t}) + \"'\";\n}\n\nfunction isEmptyBundle(resolvedBundle) {\n\treturn resolvedBundle.sections.every((section) => section.modules.length === 0);\n}\n\nconst UI5BundleFormat = {\n\tbeforePreloads(outW, section) {\n\t\toutW.write(`jQuery.sap.registerPreloadedModules(`);\n\t\toutW.writeln(`{`);\n\t\tif ( section.name ) {\n\t\t\toutW.writeln(`\"name\":\"${section.name}\",`);\n\t\t}\n\t\toutW.writeln(`\"version\":\"2.0\",`);\n\t\toutW.writeln(`\"modules\":{`);\n\t},\n\n\tafterPreloads(outW, section) {\n\t\toutW.writeln(`}});`);\n\t},\n\n\tbeforeBundleInfo(outW) {\n\t\toutW.writeln(\"\\\"unsupported\\\"; /* 'bundleInfo' section mode not supported (requires ui5loader)\");\n\t},\n\n\tafterBundleInfo(outW) {\n\t\toutW.writeln(\"*/\");\n\t},\n\n\trequireSync(outW, moduleName) {\n\t\toutW.writeln(`sap.ui.requireSync(\"${ModuleName.toRequireJSName(moduleName)}\");`);\n\t},\n\n\tshouldDecorate(resolvedModule) {\n\t\treturn resolvedModule.executes(UI5ClientConstants.MODULE__JQUERY_SAP_GLOBAL);\n\t}\n};\n\nconst EVOBundleFormat = {\n\tbeforePreloads(outW, section) {\n\t\toutW.writeln(`sap.ui.require.preload({`);\n\t},\n\n\tafterPreloads(outW, section) {\n\t\toutW.write(`}`);\n\t\tif ( section.name ) {\n\t\t\toutW.write(`,\"${section.name}\"`);\n\t\t}\n\t\toutW.writeln(`);`);\n\t},\n\n\tbeforeBundleInfo(outW) {\n\t\toutW.writeln(\"sap.ui.loader.config({bundlesUI5:{\");\n\t},\n\n\tafterBundleInfo(outW) {\n\t\toutW.writeln(\"}});\");\n\t},\n\n\trequireSync(outW, moduleName) {\n\t\toutW.writeln(`sap.ui.requireSync(\"${ModuleName.toRequireJSName(moduleName)}\");`);\n\t},\n\n\tshouldDecorate(resolvedModule) {\n\t\treturn resolvedModule.executes(UI5ClientConstants.MODULE__UI5LOADER) ||\n\t\t\tresolvedModule.executes(UI5ClientConstants.MODULE__UI5LOADER_AUTOCONFIG) ||\n\t\t\tresolvedModule.executes(UI5ClientConstants.MODULE__JQUERY_SAP_GLOBAL) ||\n\t\t\tresolvedModule.executes(UI5ClientConstants.MODULE__SAP_UI_CORE_CORE);\n\t}\n};\n\nclass BundleBuilder {\n\tconstructor(pool) {\n\t\tthis.pool = pool;\n\t\tthis.resolver = new BundleResolver(pool);\n\t\tthis.splitter = new BundleSplitter(pool, this.resolver);\n\t\tthis.targetBundleFormat = null;\n\t}\n\n\tasync createBundle(module, options) {\n\t\tawait this._prepare();\n\t\tif ( options.numberOfParts > 1 ) {\n\t\t\tconst bundleInfos = [];\n\t\t\tconst submodules = await this.splitter.run( module, options );\n\t\t\tfor ( const submodule of submodules ) {\n\t\t\t\tbundleInfos.push( await this._createBundle(submodule, options) );\n\t\t\t}\n\t\t\treturn bundleInfos;\n\t\t} else {\n\t\t\treturn this._createBundle(module, options);\n\t\t}\n\t}\n\n\t_prepare() {\n\t\treturn Promise.all([\n\t\t\t// check whether the resource pool contains debug and optimized sources\n\t\t\tthis.pool.findResource( ModuleName.getDebugName(UI5ClientConstants.MODULE__JQUERY_SAP_GLOBAL) ).\n\t\t\t\tthen( () => this.optimizedSources = true, () => this.optimizedSources = false ),\n\t\t\t// check whether EVO modules are available. If so, use EVO APIs, else use old UI5 APIs.\n\t\t\tthis.pool.findResource(UI5ClientConstants.EVO_MARKER_RESOURCE).\n\t\t\t\tthen( () => this.targetBundleFormat = EVOBundleFormat, () => this.targetBundleFormat = UI5BundleFormat )\n\t\t]);\n\t}\n\n\tasync _createBundle(module, options) {\n\t\tconst resolvedModule = await this.resolver.resolve(module);\n\t\tif ( options.skipIfEmpty && isEmptyBundle(resolvedModule) ) {\n\t\t\tlog.verbose(\"  skipping empty bundle \" + module.name);\n\t\t\treturn undefined;\n\t\t}\n\t\tlog.verbose(\"  create '%s'\", resolvedModule.name);\n\n\t\tthis.options = options || {};\n\t\tthis.optimize = !!this.options.optimize;\n\n\t\t// when decorateBootstrapModule is set to false, we don't write the optimized flag\n\t\t// and don't write the try catch wrapper\n\t\tthis.shouldDecorate = this.options.decorateBootstrapModule &&\n\t\t\t(((this.optimizedSources && !this.options.debugMode) || this.optimize) &&\n\t\t\t\tthis.targetBundleFormat.shouldDecorate(resolvedModule));\n\t\t// TODO is the following condition ok or should the availability of jquery.sap.global.js be configurable?\n\t\tthis.jqglobalAvailable = !resolvedModule.containsGlobal;\n\t\tthis.openModule(resolvedModule.name);\n\t\tlet bundleInfos = [];\n\t\t// create all sections in sequence\n\t\tfor ( const section of resolvedModule.sections ) {\n\t\t\tlog.verbose(\"    adding section%s of type %s\",\n\t\t\t\tsection.name ? \" '\" + section.name + \"'\" : \"\", section.mode);\n\t\t\tif ( section.mode === SectionType.BundleInfo ) {\n\t\t\t\tbundleInfos.push(section);\n\t\t\t} else {\n\t\t\t\tif ( bundleInfos.length > 0 ) {\n\t\t\t\t\tawait this.writeBundleInfos(bundleInfos);\n\t\t\t\t\tbundleInfos = [];\n\t\t\t\t}\n\t\t\t\tawait this.addSection(section);\n\t\t\t}\n\t\t}\n\t\tif ( bundleInfos.length > 0 ) {\n\t\t\tawait this.writeBundleInfos(bundleInfos);\n\t\t\tbundleInfos = [];\n\t\t}\n\n\t\tthis.closeModule(resolvedModule);\n\n\t\tconst bundleInfo = await resolvedModule.createModuleInfo(this.pool);\n\t\tbundleInfo.size = this.outW.length;\n\n\t\treturn {\n\t\t\tname: module.name,\n\t\t\tcontent: this.outW.toString(),\n\t\t\tbundleInfo: bundleInfo\n\t\t};\n\t}\n\n\topenModule(module) {\n\t\tthis.outW = new BundleWriter();\n\t\tthis.missingRawDeclarations = [];\n\n\t\tthis.outW.writeln(\"//@ui5-bundle \" + module);\n\t\tif ( this.shouldDecorate ) {\n\t\t\tthis.outW.writeln(`window[\"sap-ui-optimized\"] = true;`);\n\t\t\tif ( this.options.addTryCatchRestartWrapper ) {\n\t\t\t\tthis.outW.writeln(`try {`);\n\t\t\t}\n\t\t}\n\t}\n\n\tcloseModule(resolvedModule) {\n\t\tif ( resolvedModule.containsCore ) {\n\t\t\tthis.outW.ensureNewLine(); // for clarity and to avoid issues with single line comments\n\t\t\tthis.outW.writeln(`// as this module contains the Core, we ensure that the Core has been booted`);\n\t\t\tthis.outW.writeln(`sap.ui.getCore().boot && sap.ui.getCore().boot();`);\n\t\t}\n\t\tif ( this.shouldDecorate && this.options.addTryCatchRestartWrapper ) {\n\t\t\tthis.outW.ensureNewLine(); // for clarity and to avoid issues with single line comments\n\t\t\tthis.outW.writeln(`} catch(oError) {`);\n\t\t\tthis.outW.writeln(`if (oError.name != \"Restart\") { throw oError; }`);\n\t\t\tthis.outW.writeln(`}`);\n\t\t}\n\t\t/* NODE-TODO\n\t\tif ( writeSourceMap && writeSourceMapAnnotation ) {\n\t\t\toutW.ensureNewLine();\n\t\t\toutW.write(\"//# sourceMappingURL=\" + moduleName.getBaseName().replaceFirst(\"\\\\.js$\", \".js.map\"));\n\t\t}*/\n\t}\n\n\taddSection(section) {\n\t\tthis.ensureRawDeclarations();\n\n\t\tswitch (section.mode) {\n\t\tcase SectionType.Provided:\n\t\t\t// do nothing\n\t\t\treturn undefined; // nothing to wait for\n\t\tcase SectionType.Raw:\n\t\t\treturn this.writeRaw(section);\n\t\tcase SectionType.Preload:\n\t\t\treturn this.writePreloadFunction(section);\n\t\tcase SectionType.BundleInfo:\n\t\t\treturn this.writeBundleInfos([section]);\n\t\tcase SectionType.Require:\n\t\t\treturn this.writeRequires(section);\n\t\tdefault:\n\t\t\tthrow new Error(\"unknown section mode \" + section.mode);\n\t\t}\n\t}\n\n\tensureRawDeclarations() {\n\t\tif ( this.missingRawDeclarations.length && this.jqglobalAvailable ) {\n\t\t\tthis.outW.ensureNewLine(); // for clarity and to avoid issues with single line comments\n\t\t\t/* NODE-TODO, moduleName is not defined\n\t\t\t\tIt should contain the name of the module which is currently build (1st parameter of _createBundle).\n\t\t\t\tBut when the ui5loader is present, declareRawModules should be forced to false anyhow.\n\t\t\tthis.outW.writeln(\"jQuery.sap.declare('\", ModuleName.toUI5LegacyName(moduleName), \"');\");\n\t\t\t*/\n\t\t\tthis.missingRawDeclarations.forEach( (module) => {\n\t\t\t\t// 2nd parameter set to 'false': do not create namespaces - they nevertheless would come too late\n\t\t\t\tthis.outW.writeln(`jQuery.sap.declare('${ModuleName.toUI5LegacyName(module)}', false);`);\n\t\t\t});\n\t\t\tthis.missingRawDeclarations = [];\n\t\t}\n\t}\n\n\t// TODO check that there are only JS modules contained\n\tasync writeRaw(section) {\n\t\t// write all modules in sequence\n\t\tfor ( const module of section.modules ) {\n\t\t\tconst resource = await this.pool.findResourceWithInfo(module);\n\t\t\tif ( resource != null ) {\n\t\t\t\tthis.outW.startSegment(module);\n\t\t\t\tthis.outW.ensureNewLine();\n\t\t\t\tthis.outW.writeln(\"//@ui5-bundle-raw-include \" + module);\n\t\t\t\tawait this.writeRawModule(module, resource);\n\t\t\t\tconst compressedSize = this.outW.endSegment();\n\t\t\t\tlog.verbose(\"    %s (%d,%d)\", module, resource.info != null ? resource.info.size : -1, compressedSize);\n\t\t\t\tif ( section.declareRawModules ) {\n\t\t\t\t\tthis.missingRawDeclarations.push(module);\n\t\t\t\t}\n\t\t\t\tif ( module === UI5ClientConstants.MODULE__JQUERY_SAP_GLOBAL ) {\n\t\t\t\t\tthis.jqglobalAvailable = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.error(\"    couldn't find %s\", module);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync writeRawModule(module, resource) {\n\t\tlet fileContent = await resource.buffer();\n\t\tif ( /\\.js$/.test(module) ) {\n\t\t\tfileContent = await this.compressJS( fileContent, resource );\n\t\t}\n\t\tthis.outW.ensureNewLine();\n\t\tthis.outW.write( fileContent );\n\t}\n\n\tasync writePreloadFunction(section) {\n\t\tconst outW = this.outW;\n\n\t\toutW.ensureNewLine();\n\n\t\tconst sequence = section.modules.slice();\n\n\t\tthis.beforeWriteFunctionPreloadSection(sequence);\n\n\t\tawait this.rewriteAMDModules(sequence);\n\t\tif ( sequence.length > 0 ) {\n\t\t\tthis.targetBundleFormat.beforePreloads(outW, section);\n\t\t\tlet i = 0;\n\t\t\tfor ( const module of sequence ) {\n\t\t\t\tconst resource = await this.pool.findResourceWithInfo(module);\n\t\t\t\tif ( resource != null ) {\n\t\t\t\t\tif ( i>0 ) {\n\t\t\t\t\t\toutW.writeln(\",\");\n\t\t\t\t\t}\n\t\t\t\t\tthis.beforeWritePreloadModule(module, resource.info, resource);\n\t\t\t\t\toutW.write(`\\t\"${module.toString()}\":`);\n\t\t\t\t\toutW.startSegment(module);\n\t\t\t\t\tawait this.writePreloadModule(module, resource.info, resource);\n\t\t\t\t\tconst compressedSize = outW.endSegment();\n\t\t\t\t\tlog.verbose(\"    %s (%d,%d)\", module,\n\t\t\t\t\t\tresource.info != null ? resource.info.size : -1, compressedSize);\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tlog.error(\"    couldn't find %s\", module);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( i > 0 ) {\n\t\t\t\toutW.writeln();\n\t\t\t}\n\t\t\tthis.targetBundleFormat.afterPreloads(outW, section);\n\t\t}\n\n\t\t// this.afterWriteFunctionPreloadSection();\n\t}\n\n\tasync compressJS(fileContent, resource) {\n\t\tif ( this.optimize ) {\n\t\t\tconst result = await terser.minify({\n\t\t\t\t[resource.name]: String(fileContent)\n\t\t\t}, {\n\t\t\t\tcompress: false, // TODO configure?\n\t\t\t\toutput: {\n\t\t\t\t\tcomments: copyrightCommentsPattern,\n\t\t\t\t\twrap_func_args: false\n\t\t\t\t}\n\t\t\t\t// , outFileName: resource.name\n\t\t\t\t// , outSourceMap: true\n\t\t\t});\n\t\t\t// console.log(result.map);\n\t\t\t// const map = new MOZ_SourceMap.SourceMapConsumer(result.map);\n\t\t\t// map.eachMapping(function (m) { console.log(m); }); // console.log(map);\n\t\t\tfileContent = result.code;\n\t\t\t// throw new Error();\n\t\t}\n\t\treturn fileContent;\n\t}\n\n\tbeforeWriteFunctionPreloadSection(sequence) {\n\t\t// simple version: just sort alphabetically\n\t\tsequence.sort();\n\t}\n\n\tasync rewriteAMDModules(sequence) {\n\t\tif ( this.options.usePredefineCalls ) {\n\t\t\tconst outW = this.outW;\n\n\t\t\tconst remaining = [];\n\t\t\tfor ( const module of sequence ) {\n\t\t\t\tif ( /\\.js$/.test(module) ) {\n\t\t\t\t\t// console.log(\"Processing \" + module);\n\t\t\t\t\tconst resource = await this.pool.findResourceWithInfo(module);\n\t\t\t\t\tlet code = await resource.buffer();\n\t\t\t\t\tcode = rewriteDefine(this.targetBundleFormat, code, module);\n\t\t\t\t\tif ( code ) {\n\t\t\t\t\t\toutW.startSegment(module);\n\t\t\t\t\t\toutW.ensureNewLine();\n\t\t\t\t\t\tconst fileContent = await this.compressJS(code, resource);\n\t\t\t\t\t\toutW.write( fileContent );\n\t\t\t\t\t\toutW.ensureNewLine();\n\t\t\t\t\t\tconst compressedSize = outW.endSegment();\n\t\t\t\t\t\tlog.verbose(\"    %s (%d,%d)\", module,\n\t\t\t\t\t\t\tresource.info != null ? resource.info.size : -1, compressedSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep unprocessed modules\n\t\t\t\t\t\tremaining.push(module);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// keep unprocessed modules\n\t\t\t\t\tremaining.push(module);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tArray.prototype.splice.apply(sequence, [0, sequence.length].concat(remaining));\n\t\t}\n\t}\n\n\tafterWriteFunctionPreloadSection() {\n\t}\n\n\tbeforeWritePreloadModule(module, info, resource) {\n\t}\n\n\t/**\n\t *\n\t * @param {string} module module name\n\t * @param {ModuleInfo} info\n\t * @param {module:@ui5/fs.Resource} resource\n\t * @returns {Promise<boolean>}\n\t */\n\tasync writePreloadModule(module, info, resource) {\n\t\tconst outW = this.outW;\n\n\t\tif ( /\\.js$/.test(module) && (info == null || !info.requiresTopLevelScope) ) {\n\t\t\tconst compressedContent = await this.compressJS( await resource.buffer(), resource );\n\t\t\toutW.write(`function(){`);\n\t\t\toutW.write( compressedContent );\n\t\t\tthis.exportGlobalNames(info);\n\t\t\toutW.ensureNewLine();\n\t\t\toutW.write(`}`);\n\t\t} else if ( /\\.js$/.test(module) /* implicitly: && info != null && info.requiresTopLevelScope */ ) {\n\t\t\tlog.warn(\"**** warning: module %s requires top level scope\" +\n\t\t\t\t\t\" and can only be embedded as a string (requires 'eval')\", module);\n\t\t\tconst compressedContent = await this.compressJS( await resource.buffer(), resource );\n\t\t\toutW.write( makeStringLiteral( compressedContent ) );\n\t\t} else if ( /\\.html$/.test(module) ) {\n\t\t\tconst fileContent = await resource.buffer();\n\t\t\toutW.write( makeStringLiteral( fileContent ) );\n\t\t} else if ( /\\.json$/.test(module) ) {\n\t\t\tlet fileContent = await resource.buffer();\n\t\t\tif ( this.optimize ) {\n\t\t\t\ttry {\n\t\t\t\t\tfileContent = JSON.stringify( JSON.parse( fileContent) );\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlog.verbose(\"Failed to parse JSON file %s. Ignoring error, skipping compression.\", module);\n\t\t\t\t\tlog.verbose(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\toutW.write(makeStringLiteral(fileContent));\n\t\t} else if ( /\\.xml$/.test(module) ) {\n\t\t\tlet fileContent = await resource.buffer();\n\t\t\tif ( this.optimize ) {\n\t\t\t\t// For XML we use the pretty data\n\t\t\t\t// Do not minify if XML(View) contains an <*:pre> tag,\n\t\t\t\t// because whitespace of HTML <pre> should be preserved (should only happen rarely)\n\t\t\t\tif (!xmlHtmlPrePattern.test(fileContent.toString())) {\n\t\t\t\t\tfileContent = pd.xmlmin(fileContent.toString(), false);\n\t\t\t\t}\n\t\t\t}\n\t\t\toutW.write( makeStringLiteral( fileContent ) );\n\t\t} else if ( /\\.properties$/.test(module) ) {\n\t\t\t// Since the Builder is also used when building non-project resources (e.g. dependencies)\n\t\t\t// *.properties files should be escaped if encoding option is specified\n\t\t\tconst fileContent = await escapePropertiesFile(resource);\n\n\t\t\toutW.write( makeStringLiteral( fileContent ) );\n\t\t} else {\n\t\t\tlog.error(\"don't know how to embed module \" + module); // TODO throw?\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Create exports for globals\n\t *\n\t * @param {ModuleInfo} info\n\t */\n\texportGlobalNames(info) {\n\t\tif ( !info || !info.exposedGlobals || !info.exposedGlobals.length ) {\n\t\t\treturn;\n\t\t}\n\t\tthis.outW.ensureNewLine();\n\t\tinfo.exposedGlobals.forEach( (globalName) => {\n\t\t\t// Note: globalName can be assumed to be a valid identifier as it is used as variable name anyhow\n\t\t\tthis.outW.writeln(`this.${globalName}=${globalName};`);\n\t\t});\n\t}\n\n\twriteBundleInfos(sections) {\n\t\tthis.outW.ensureNewLine();\n\n\t\tif ( sections.length > 0 ) {\n\t\t\tthis.targetBundleFormat.beforeBundleInfo(this.outW);\n\t\t\tsections.forEach((section, idx) => {\n\t\t\t\tif ( idx > 0 ) {\n\t\t\t\t\tthis.outW.writeln(\",\");\n\t\t\t\t}\n\n\t\t\t\tif (!section.name) {\n\t\t\t\t\tthrow new Error(`A 'bundleInfo' section is missing the mandatory 'name' property.` );\n\t\t\t\t}\n\t\t\t\tthis.outW.write(`\"${section.name}\":[${section.modules.map(makeStringLiteral).join(\",\")}]`);\n\t\t\t});\n\t\t\tthis.outW.writeln();\n\t\t\tthis.targetBundleFormat.afterBundleInfo(this.outW);\n\t\t}\n\t}\n\n\twriteRequires(section) {\n\t\tthis.outW.ensureNewLine();\n\t\tsection.modules.forEach( (module) => {\n\t\t\tthis.targetBundleFormat.requireSync(this.outW, module);\n\t\t});\n\t}\n}\n\nconst CALL_SAP_UI_DEFINE = [\"sap\", \"ui\", \"define\"];\n\nfunction rewriteDefine(targetBundleFormat, code, moduleName) {\n\tlet ast;\n\tconst codeStr = code.toString();\n\ttry {\n\t\tast = esprima.parseScript(codeStr, {range: true});\n\t} catch (e) {\n\t\tlog.error(\"error while parsing %s: %s\", moduleName, e.message);\n\t\treturn;\n\t}\n\n\tif ( ast.type === Syntax.Program &&\n\t\t\tast.body.length === 1 && ast.body[0].type === Syntax.ExpressionStatement &&\n\t\t\tisMethodCall(ast.body[0].expression, CALL_SAP_UI_DEFINE) ) {\n\t\tconst changes = [];\n\t\tconst defineCall = ast.body[0].expression;\n\n\n\t\t// Inject module name if missing\n\t\tif ( defineCall.arguments.length == 0 ||\n\t\t\tdefineCall.arguments[0].type !== Syntax.Literal ) {\n\t\t\tlet value = `\"${ModuleName.toRequireJSName(moduleName)}\"`;\n\t\t\tlet index;\n\n\t\t\tif (defineCall.arguments.length == 0) {\n\t\t\t\t// asterisk marks the index: sap.ui.define(*)\n\t\t\t\tindex = defineCall.range[1] - 1;\n\t\t\t} else {\n\t\t\t\t// asterisk marks the index: sap.ui.define(*argument1)\n\t\t\t\tindex = defineCall.arguments[0].range[0];\n\t\t\t\tvalue += \", \";\n\t\t\t}\n\n\t\t\tchanges.push({\n\t\t\t\tindex,\n\t\t\t\tcount: 0,\n\t\t\t\tvalue\n\t\t\t});\n\t\t}\n\n\t\t// rewrite sap.ui.define to sap.ui.predefine\n\t\tif ( defineCall.callee.type === Syntax.MemberExpression &&\n\t\t\t\tdefineCall.callee.property.type === Syntax.Identifier &&\n\t\t\t\tdefineCall.callee.property.name === \"define\" ) {\n\t\t\tchanges.push({\n\t\t\t\t// asterisk marks the index: sap.ui.*define()\n\t\t\t\tindex: defineCall.callee.property.range[0],\n\t\t\t\tcount: 0,\n\t\t\t\tvalue: \"pre\"\n\t\t\t});\n\t\t}\n\n\t\treturn applyChanges(codeStr, changes);\n\t}\n\n\treturn false;\n}\n\nfunction applyChanges(string, changes) {\n\t// No sorting needed as changes are added in correct order\n\n\tconst array = Array.from(string);\n\tchanges.forEach((change) => {\n\t\tarray.splice(\n\t\t\tchange.index,\n\t\t\tchange.count,\n\t\t\tchange.value\n\t\t);\n\t});\n\treturn array.join(\"\");\n}\n\nmodule.exports = BundleBuilder;\n",
    "test/lib/builder/builder.js": "const test = require(\"ava\");\nconst path = require(\"path\");\nconst chai = require(\"chai\");\nchai.use(require(\"chai-fs\"));\nconst fs = require(\"graceful-fs\");\nconst {promisify} = require(\"util\");\nconst readFile = promisify(fs.readFile);\nconst assert = chai.assert;\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst resourceFactory = require(\"@ui5/fs\").resourceFactory;\n\nconst ui5Builder = require(\"../../../\");\nconst builder = ui5Builder.builder;\nconst applicationAPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.a\");\nconst applicationGPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.g\");\nconst applicationHPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.h\");\nconst applicationIPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.i\");\nconst applicationJPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.j\");\nconst applicationKPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.k\");\nconst applicationØPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.ø\");\nconst collectionPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"collection\");\nconst libraryDPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"library.d\");\nconst libraryEPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"library.e\");\nconst libraryHPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"library.h\");\nconst libraryIPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"library.i\");\nconst libraryJPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"library.j\");\nconst libraryØPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"library.ø\");\nconst libraryCore = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"sap.ui.core-evo\");\nconst themeJPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"theme.j\");\n\nconst recursive = require(\"recursive-readdir\");\n\nconst newLineRegexp = /\\r?\\n|\\r/g;\n\nconst findFiles = (folder) => {\n\treturn new Promise((resolve, reject) => {\n\t\trecursive(folder, (err, files) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(files);\n\t\t\t}\n\t\t});\n\t});\n};\n\nfunction clone(obj) {\n\treturn JSON.parse(JSON.stringify(obj));\n}\n\nfunction cloneProjectTree(tree) {\n\ttree = clone(tree);\n\n\tfunction increaseDepth(node) {\n\t\tnode._level++;\n\t\tif (Array.isArray(node.dependencies)) {\n\t\t\tnode.dependencies.forEach(increaseDepth);\n\t\t}\n\t}\n\n\tincreaseDepth(tree);\n\treturn tree;\n}\n\nasync function checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath) {\n\tfor (let i = 0; i < expectedFiles.length; i++) {\n\t\tconst expectedFile = expectedFiles[i];\n\t\tconst relativeFile = path.relative(expectedPath, expectedFile);\n\t\tconst destFile = path.join(destPath, relativeFile);\n\t\tconst currentFileContentPromise = readFile(destFile, \"utf8\");\n\t\tconst expectedFileContentPromise = readFile(expectedFile, \"utf8\");\n\t\tconst assertContents = ([currentContent, expectedContent]) => {\n\t\t\tif (expectedFile.endsWith(\"sap-ui-cachebuster-info.json\")) {\n\t\t\t\tcurrentContent = JSON.parse(currentContent.replace(/(:\\s+)(\\d+)/g, \": 0\"));\n\t\t\t\texpectedContent = JSON.parse(expectedContent.replace(/(:\\s+)(\\d+)/g, \": 0\"));\n\t\t\t\tt.deepEqual(currentContent, expectedContent);\n\t\t\t} else {\n\t\t\t\tif (expectedFile.endsWith(\".json\")) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tt.deepEqual(JSON.parse(currentContent), JSON.parse(expectedContent), expectedFile);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tt.falsy(e, expectedFile);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tt.is(currentContent.replace(newLineRegexp, \"\\n\"),\n\t\t\t\t\texpectedContent.replace(newLineRegexp, \"\\n\"),\n\t\t\t\t\trelativeFile);\n\t\t\t}\n\t\t};\n\t\tawait Promise.all([currentFileContentPromise, expectedFileContentPromise]).then(assertContents);\n\t}\n}\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"Build\", async (t) => {\n\tclass DummyBuildContext {\n\t\tconstructor({rootProject}) {\n\t\t\tt.deepEqual(rootProject, applicationATree, \"Correct rootProject parameter\");\n\t\t}\n\t}\n\tconst getTagStub = sinon.stub().returns();\n\tconst getResourceTagCollectionStub = sinon.stub().returns({\n\t\tgetTag: getTagStub\n\t});\n\tconst isRootProjectStub = sinon.stub().returns(true);\n\tconst dummyProjectContext = {\n\t\tgetResourceTagCollection: getResourceTagCollectionStub,\n\t\tisRootProject: isRootProjectStub,\n\t\tSTANDARD_TAGS: {\n\t\t\tOmitFromBuildResult: \"👻\"\n\t\t}\n\t};\n\tconst createProjectContextStub = sinon.stub().returns(dummyProjectContext);\n\tconst executeCleanupTasksStub = sinon.stub().resolves();\n\tDummyBuildContext.prototype.createProjectContext = createProjectContextStub;\n\tDummyBuildContext.prototype.executeCleanupTasks = executeCleanupTasksStub;\n\tmock(\"../../../lib/builder/BuildContext\", DummyBuildContext);\n\n\tclass DummyTaskUtil {\n\t\tconstructor({projectBuildContext}) {\n\t\t\tt.is(projectBuildContext, dummyProjectContext, \"Correct projectBuildContext parameter\");\n\t\t}\n\t}\n\tmock(\"../../../lib/tasks/TaskUtil\", DummyTaskUtil);\n\n\tconst applicationType = require(\"../../../lib/types/application/applicationType\");\n\tconst appBuildStub = sinon.stub(applicationType, \"build\").resolves();\n\n\tconst builder = mock.reRequire(\"../../../lib/builder/builder\");\n\n\tconst destPath = \"./test/tmp/build/build\";\n\tawait builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath\n\t});\n\n\tt.is(createProjectContextStub.callCount, 1, \"One project context got created\");\n\tconst createProjectContextParams = createProjectContextStub.getCall(0).args[0];\n\tt.is(createProjectContextParams.project, applicationATree, \"Correct project provided to projectContext\");\n\tt.truthy(createProjectContextParams.resources.workspace, \"resources.workspace object provided to projectContext\");\n\tt.truthy(createProjectContextParams.resources.dependencies,\n\t\t\"resources.dependencies object provided to projectContext\");\n\tt.deepEqual(Object.keys(createProjectContextParams), [\"project\", \"resources\"],\n\t\t\"resource and project parameters provided\");\n\n\tt.is(appBuildStub.callCount, 1, \"Build called once\");\n\tconst appBuildParams = appBuildStub.getCall(0).args[0];\n\tt.is(Object.keys(appBuildParams).length, 5, \"Five parameters provided to types build function\");\n\tt.is(appBuildParams.project, applicationATree, \"Correct project provided to type\");\n\tt.truthy(appBuildParams.resourceCollections, \"resourceCollections object provided to type\");\n\tt.truthy(appBuildParams.resourceCollections.workspace, \"resources.workspace object provided to type\");\n\tt.truthy(appBuildParams.resourceCollections.dependencies, \"resources.dependencies object provided to type\");\n\tt.deepEqual(appBuildParams.tasks, [\n\t\t\"replaceCopyright\",\n\t\t\"replaceVersion\",\n\t\t\"createDebugFiles\",\n\t\t\"escapeNonAsciiCharacters\",\n\t\t\"uglify\",\n\t\t\"buildThemes\",\n\t\t\"generateLibraryManifest\",\n\t\t\"generateVersionInfo\",\n\t\t\"generateFlexChangesBundle\",\n\t\t\"generateComponentPreload\",\n\t\t\"generateBundle\",\n\t\t\"generateLibraryPreload\"\n\t], \"Correct tasks provided to type\");\n\tt.truthy(appBuildParams.parentLogger, \"parentLogger object provided to type\");\n\tt.true(appBuildParams.taskUtil instanceof DummyTaskUtil, \"Correct taskUtil instance provided to type\");\n\n\tt.is(getResourceTagCollectionStub.callCount, 1, \"getResourceTagCollection called once\");\n\tt.is(getTagStub.callCount, 2, \"getTag called once\");\n\tt.deepEqual(getTagStub.getCall(0).args[1], \"👻\", \"First getTag call with expected tag name\");\n\tt.deepEqual(getTagStub.getCall(1).args[1], \"👻\", \"Second getTag call with expected tag name\");\n\tt.is(isRootProjectStub.callCount, 2, \"isRootProject called once\");\n\tt.is(executeCleanupTasksStub.callCount, 1, \"Cleanup called once\");\n});\n\ntest.serial(\"Build application.a\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.a\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath,\n\t\texcludedTasks: [\"generateComponentPreload\", \"generateStandaloneAppBundle\", \"generateVersionInfo\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.a with error\", async (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest\";\n\n\tconst error = await t.throwsAsync(builder.build({\n\t\ttree: applicationATreeBadType,\n\t\tdestPath\n\t}));\n\tt.deepEqual(error.message, `Unknown type 'non existent'`);\n});\n\ntest.serial(\"Build application.a with dependencies\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest-deps\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.a\", \"dest-deps\");\n\n\treturn builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath,\n\t\texcludedTasks: [\n\t\t\t\"generateComponentPreload\", \"generateStandaloneAppBundle\", \"generateVersionInfo\",\n\t\t\t\"generateLibraryPreload\", \"escapeNonAsciiCharacters\", \"generateLibraryManifest\"\n\t\t],\n\t\tbuildDependencies: true\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.a with dependencies include\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest-deps-incl\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.a\", \"dest-deps\");\n\n\treturn builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath,\n\t\texcludedTasks: [\n\t\t\t\"generateComponentPreload\", \"generateStandaloneAppBundle\", \"generateVersionInfo\",\n\t\t\t\"generateLibraryPreload\", \"escapeNonAsciiCharacters\", \"generateLibraryManifest\"\n\t\t],\n\t\tbuildDependencies: true, includedDependencies: [\"*\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.a with dependencies exclude\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest-deps-excl\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.a\", \"dest-deps-excl\");\n\n\treturn builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath,\n\t\texcludedTasks: [\n\t\t\t\"generateComponentPreload\", \"generateStandaloneAppBundle\", \"generateVersionInfo\",\n\t\t\t\"generateLibraryPreload\", \"escapeNonAsciiCharacters\", \"generateLibraryManifest\"\n\t\t],\n\t\tbuildDependencies: true, excludedDependencies: [\"library.d\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.a self-contained\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest-self\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.a\", \"dest-self\");\n\n\treturn builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath,\n\t\texcludedTasks: [\"generateComponentPreload\", \"generateVersionInfo\"],\n\t\tselfContained: true\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.a with dependencies self-contained\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest-depself\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.a\", \"dest-depself\");\n\n\treturn builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath,\n\t\texcludedTasks: [\n\t\t\t\"generateComponentPreload\", \"generateVersionInfo\", \"escapeNonAsciiCharacters\",\n\t\t\t\"generateLibraryManifest\"\n\t\t],\n\t\tbuildDependencies: true,\n\t\tselfContained: true\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.a [dev mode]\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest-dev\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.a\", \"dest-dev\");\n\n\treturn builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath,\n\t\tdev: true\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.a and clean target path [dev mode]\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.a/dest-clean\";\n\tconst destPathRubbishSubFolder = destPath + \"/rubbish-should-be-deleted\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.a\", \"dest-dev\");\n\n\treturn builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath: destPathRubbishSubFolder,\n\t\tdev: true\n\t}).then(() => {\n\t\treturn builder.build({\n\t\t\ttree: applicationATree,\n\t\t\tdestPath,\n\t\t\tcleanDest: true,\n\t\t\tdev: true\n\t\t});\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.g\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.g/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.g\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: applicationGTree,\n\t\tdestPath,\n\t\texcludedTasks: [\"generateStandaloneAppBundle\", \"generateVersionInfo\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.g with component preload paths\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.g/dest2\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.g\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: applicationGTreeComponentPreloadPaths,\n\t\tdestPath,\n\t\texcludedTasks: [\"generateStandaloneAppBundle\", \"generateVersionInfo\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.g with excludes\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.g/excludes\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.g\", \"excludes\");\n\n\treturn builder.build({\n\t\ttree: applicationGTreeWithExcludes,\n\t\tdestPath,\n\t\texcludedTasks: [\"*\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.h\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.h/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.h\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: applicationHTree,\n\t\tdestPath,\n\t\texcludedTasks: [\"createDebugFiles\", \"generateComponentPreload\",\n\t\t\t\"generateStandaloneAppBundle\", \"generateVersionInfo\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.i\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.i/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.i\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: applicationITree,\n\t\tdestPath,\n\t\texcludedTasks: [\"createDebugFiles\", \"generateStandaloneAppBundle\", \"generateVersionInfo\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.j\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.j/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.j\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: applicationJTree,\n\t\tdestPath,\n\t\texcludedTasks: [\"createDebugFiles\", \"generateStandaloneAppBundle\", \"generateVersionInfo\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.j with resources.json and version info\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.j/dest-resources-json\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.j\", \"dest-resources-json\");\n\n\n\tconst dummyVersionInfoGenerator = () => {\n\t\tconst versionJson = {\n\t\t\t\"name\": \"application.j\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"buildTimestamp\": \"202008120917\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"libraries\": []\n\t\t};\n\n\t\treturn [resourceFactory.createResource({\n\t\t\tpath: \"/resources/sap-ui-version.json\",\n\t\t\tstring: JSON.stringify(versionJson, null, \"\\t\")\n\t\t})];\n\t};\n\n\tmock(\"../../../lib/processors/versionInfoGenerator\", dummyVersionInfoGenerator);\n\tmock.reRequire(\"../../../lib/tasks/generateVersionInfo\");\n\n\tconst builder = mock.reRequire(\"../../../lib/builder/builder\");\n\n\n\treturn builder.build({\n\t\tincludedTasks: [\n\t\t\t\"generateResourcesJson\"\n\t\t],\n\t\ttree: applicationJTree,\n\t\tdestPath,\n\t\texcludedTasks: [\"createDebugFiles\", \"generateStandaloneAppBundle\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.k (componentPreload excludes)\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.k/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.k\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: applicationKTree,\n\t\tdestPath,\n\t\tincludedTasks: [\"generateComponentPreload\"],\n\t\texcludedTasks: [\"*\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.k (package sub-components / componentPreload excludes)\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.k/dest-package-subcomponents\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.k\", \"dest-package-subcomponents\");\n\n\treturn builder.build({\n\t\ttree: applicationKPackageSubcomponentsTree,\n\t\tdestPath,\n\t\tincludedTasks: [\"generateComponentPreload\"],\n\t\texcludedTasks: [\"*\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build application.ø\", (t) => {\n\tconst destPath = \"./test/tmp/build/application.ø/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.ø\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: applicationØTree,\n\t\tdestPath,\n\t\texcludedTasks: [\"generateVersionInfo\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build library.d with copyright from .library file\", (t) => {\n\tconst destPath = \"./test/tmp/build/library.d/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"library.d\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: libraryDTree,\n\t\tdestPath,\n\t\texcludedTasks: [\"generateLibraryPreload\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build library.e with copyright from settings of ui5.yaml\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"library.e\", \"dest\");\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"library.e\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: libraryETree,\n\t\tdestPath,\n\t\texcludedTasks: [\"generateLibraryPreload\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build library.h with custom bundles and component-preloads\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"library.h\", \"dest\");\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"library.h\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: libraryHTree,\n\t\tdestPath,\n\t\texcludedTasks: [\"createDebugFiles\", \"generateLibraryPreload\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build library.h with custom bundles and component-preloads with resources.json\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"library.h\", \"dest-resources-json\");\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"library.h\", \"dest-resources-json\");\n\n\treturn builder.build({\n\t\tincludedTasks: [\n\t\t\t\"generateResourcesJson\"\n\t\t],\n\t\ttree: libraryHTree,\n\t\tdestPath,\n\t\texcludedTasks: [\"createDebugFiles\", \"generateLibraryPreload\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build library.i with manifest info taken from .library and library.js\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"library.i\", \"dest\");\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"library.i\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: libraryITree,\n\t\tdestPath,\n\t\texcludedTasks: [\"createDebugFiles\", \"generateLibraryPreload\", \"uglify\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build library.j with JSDoc build only\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"library.j\", \"dest\");\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"library.j\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: libraryJTree,\n\t\tdestPath,\n\t\tincludedTasks: [\"generateJsdoc\"],\n\t\texcludedTasks: [\"*\"]\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build theme.j even without an library\", (t) => {\n\tconst destPath = \"./test/tmp/build/theme.j/dest\";\n\tconst expectedPath = \"./test/expected/build/theme.j/dest\";\n\treturn builder.build({\n\t\ttree: themeJTree,\n\t\tdestPath\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build theme.j even without an library with resources.json\", (t) => {\n\tconst destPath = \"./test/tmp/build/theme.j/dest-resources-json\";\n\tconst expectedPath = \"./test/expected/build/theme.j/dest-resources-json\";\n\treturn builder.build({\n\t\tincludedTasks: [\n\t\t\t\"generateResourcesJson\"\n\t\t],\n\t\ttree: themeJTree,\n\t\tdestPath\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Build library.ø\", (t) => {\n\tconst destPath = \"./test/tmp/build/library.ø/dest\";\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"library.ø\", \"dest\");\n\n\treturn builder.build({\n\t\ttree: libraryØTree,\n\t\tdestPath\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\treturn checkFileContentsIgnoreLineFeeds(t, expectedFiles, expectedPath, destPath);\n\t}).then(() => {\n\t\tt.pass();\n\t});\n});\n\ntest.serial(\"Cleanup\", async (t) => {\n\tconst BuildContext = require(\"../../../lib/builder/BuildContext\");\n\tconst createProjectContextStub = sinon.spy(BuildContext.prototype, \"createProjectContext\");\n\tconst executeCleanupTasksStub = sinon.stub(BuildContext.prototype, \"executeCleanupTasks\").resolves();\n\tconst applicationType = require(\"../../../lib/types/application/applicationType\");\n\tconst appBuildStub = sinon.stub(applicationType, \"build\").resolves();\n\n\tconst builder = mock.reRequire(\"../../../lib/builder/builder\");\n\n\tfunction getProcessListenerCount() {\n\t\treturn [\"SIGHUP\", \"SIGINT\", \"SIGTERM\", \"SIGBREAK\"].map((eventName) => {\n\t\t\treturn process.listenerCount(eventName);\n\t\t});\n\t}\n\n\tconst listenersBefore = getProcessListenerCount();\n\n\tconst destPath = \"./test/tmp/build/cleanup\";\n\t// Success case\n\tconst pBuildSuccess = builder.build({\n\t\ttree: applicationATree,\n\t\tdestPath\n\t});\n\tt.deepEqual(getProcessListenerCount(), listenersBefore.map((x) => x+1),\n\t\t\"Per signal, one new listener registered\");\n\n\tawait pBuildSuccess;\n\tt.deepEqual(getProcessListenerCount(), listenersBefore, \"All signal listeners got deregistered\");\n\n\tt.deepEqual(appBuildStub.callCount, 1, \"Build called once\");\n\tt.deepEqual(createProjectContextStub.callCount, 1, \"One project context got created\");\n\tconst createProjectContextParams = createProjectContextStub.getCall(0).args[0];\n\tt.truthy(createProjectContextParams.project, \"project object provided\");\n\tt.truthy(createProjectContextParams.resources.workspace, \"resources.workspace object provided\");\n\tt.truthy(createProjectContextParams.resources.dependencies, \"resources.dependencies object provided\");\n\tt.deepEqual(Object.keys(createProjectContextParams), [\"project\", \"resources\"],\n\t\t\"resource and project parameters provided\");\n\tt.deepEqual(executeCleanupTasksStub.callCount, 1, \"Cleanup called once\");\n\n\t// Error case\n\tconst pBuildError = builder.build({\n\t\ttree: applicationATreeBadType,\n\t\tdestPath\n\t});\n\tt.deepEqual(getProcessListenerCount(), listenersBefore.map((x) => x+1),\n\t\t\"Per signal, one new listener registered\");\n\n\tconst error = await t.throwsAsync(pBuildError);\n\tt.deepEqual(error.message, `Unknown type 'non existent'`);\n\tt.deepEqual(getProcessListenerCount(), listenersBefore, \"All signal listeners got deregistered\");\n\n\tt.deepEqual(executeCleanupTasksStub.callCount, 2, \"Cleanup called twice\");\n});\n\n\nconst libraryDTree = {\n\t\"id\": \"library.d\",\n\t\"version\": \"1.0.0\",\n\t\"path\": libraryDPath,\n\t\"dependencies\": [\n\t\t{\n\t\t\t\"id\": \"sap.ui.core-evo\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": libraryCore,\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"sap.ui.core\",\n\t\t\t\t\"namespace\": \"sap/ui/core\",\n\t\t\t\t\"copyright\": \"Some fancy copyright\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"library.d\",\n\t\t\"namespace\": \"library/d\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"main/src\",\n\t\t\t\t\"test\": \"main/test\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"main/src\",\n\t\t\t\"/test-resources/\": \"main/test\"\n\t\t}\n\t}\n};\n\nconst applicationATree = {\n\t\"id\": \"application.a\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationAPath,\n\t\"dependencies\": [\n\t\tlibraryDTree,\n\t\t{\n\t\t\t\"id\": \"library.a\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": path.join(collectionPath, \"library.a\"),\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"library.a\",\n\t\t\t\t\"namespace\": \"library/a\",\n\t\t\t\t\"copyright\": \"${copyright}\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"src\",\n\t\t\t\t\t\t\"test\": \"test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"library.b\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": path.join(collectionPath, \"library.b\"),\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"library.b\",\n\t\t\t\t\"namespace\": \"library/b\",\n\t\t\t\t\"copyright\": \"${copyright}\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"src\",\n\t\t\t\t\t\t\"test\": \"test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"library.c\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": path.join(collectionPath, \"library.c\"),\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"library.c\",\n\t\t\t\t\"namespace\": \"library/c\",\n\t\t\t\t\"copyright\": \"${copyright}\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"src\",\n\t\t\t\t\t\t\"test\": \"test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.a\",\n\t\t\"namespace\": \"application/a\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t}\n};\n\nconst applicationATreeBadType = {\n\t\"id\": \"application.a\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationAPath,\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"non existent\",\n\t\"metadata\": {\n\t\t\"name\": \"application.a\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t}\n};\n\nconst applicationGTree = {\n\t\"id\": \"application.g\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationGPath,\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.g\",\n\t\t\"namespace\": \"application/g\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"dependencies\": [],\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t},\n\t\"builder\": {\n\t\t\"componentPreload\": {\n\t\t\t\"namespaces\": [\n\t\t\t\t\"application/g\",\n\t\t\t\t\"application/g/subcomponentA\",\n\t\t\t\t\"application/g/subcomponentB\"\n\t\t\t]\n\t\t}\n\t}\n};\n\nconst applicationGTreeWithExcludes = {\n\t\"id\": \"application.g\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationGPath,\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.g\",\n\t\t\"namespace\": \"application/g\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"dependencies\": [],\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t},\n\t\"builder\": {\n\t\t\"resources\": {\n\t\t\t\"excludes\": [\n\t\t\t\t\"/subcomponentA/**\",\n\t\t\t\t\"!**/manifest.json\",\n\t\t\t\t\"/subcomponentB/**\",\n\t\t\t\t\"/Component.js\",\n\t\t\t]\n\t\t}\n\t}\n};\n\nconst applicationGTreeComponentPreloadPaths = {\n\t\"id\": \"application.g\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationGPath,\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.g\",\n\t\t\"namespace\": \"application/g\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"dependencies\": [],\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t},\n\t\"builder\": {\n\t\t\"componentPreload\": {\n\t\t\t\"paths\": [\n\t\t\t\t\"application/g/**/Component.js\"\n\t\t\t]\n\t\t}\n\t}\n};\n\nconst applicationHTree = {\n\t\"id\": \"application.h\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationHPath,\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.h\",\n\t\t\"namespace\": \"application/h\"\n\t},\n\t\"dependencies\": [],\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t},\n\t\"builder\": {\n\t\t\"bundles\": [{\n\t\t\t\"bundleDefinition\": {\n\t\t\t\t\"name\": \"application/h/sectionsA/customBundle.js\",\n\t\t\t\t\"defaultFileTypes\": [\".js\"],\n\t\t\t\t\"sections\": [{\n\t\t\t\t\t\"mode\": \"preload\",\n\t\t\t\t\t\"filters\": [\n\t\t\t\t\t\t\"application/h/sectionsA/\",\n\t\t\t\t\t\t\"!application/h/sectionsA/section2**\",\n\t\t\t\t\t]\n\t\t\t\t}],\n\t\t\t\t\"sort\": true\n\t\t\t},\n\t\t\t\"bundleOptions\": {\n\t\t\t\t\"optimize\": true,\n\t\t\t\t\"usePredefinedCalls\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"bundleDefinition\": {\n\t\t\t\t\"name\": \"application/h/sectionsB/customBundle.js\",\n\t\t\t\t\"defaultFileTypes\": [\".js\"],\n\t\t\t\t\"sections\": [{\n\t\t\t\t\t\"mode\": \"preload\",\n\t\t\t\t\t\"filters\": [\n\t\t\t\t\t\t\"application/h/sectionsB/\"\n\t\t\t\t\t]\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\"bundleOptions\": {\n\t\t\t\t\"optimize\": true,\n\t\t\t\t\"usePredefinedCalls\": true\n\t\t\t}\n\t\t}]\n\t}\n};\n\nconst applicationITree = {\n\t\"id\": \"application.i\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationIPath,\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.i\",\n\t\t\"namespace\": \"application/i\"\n\t},\n\t\"dependencies\": [],\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t},\n\t\"builder\": {\n\t\t\"bundles\": []\n\t}\n};\n\nconst applicationJTree = {\n\t\"id\": \"application.j\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationJPath,\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.j\",\n\t\t\"namespace\": \"application/j\"\n\t},\n\t\"dependencies\": [],\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t},\n\t\"builder\": {\n\t\t\"bundles\": []\n\t}\n};\n\nconst applicationKTree = {\n\t\"id\": \"application.k\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationKPath,\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.k\",\n\t\t\"namespace\": \"application/k\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"dependencies\": [],\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t},\n\t\"builder\": {\n\t\t\"componentPreload\": {\n\t\t\t\"namespaces\": [\n\t\t\t\t\"application/k\",\n\t\t\t\t\"application/k/subcomponentA\",\n\t\t\t\t\"application/k/subcomponentB\"\n\t\t\t],\n\t\t\t\"excludes\": [\n\t\t\t\t\"application/k/**/thirdparty/\",\n\t\t\t\t\"!application/k/subcomponentB/thirdparty/\"\n\t\t\t]\n\t\t}\n\t}\n};\n\nconst applicationKPackageSubcomponentsTree = clone(applicationKTree);\napplicationKPackageSubcomponentsTree.builder = {\n\t\"componentPreload\": {\n\t\t\"excludes\": [\n\t\t\t\"application/k/**/thirdparty/\",\n\t\t\t\"!application/k/subcomponentB/thirdparty/\"\n\t\t]\n\t}\n};\n\nconst applicationØTree = {\n\t\"id\": \"application.ø\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationØPath,\n\t\"dependencies\": [\n\t\t{\n\t\t\t\"id\": \"sap.ui.core-evo\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": libraryCore,\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"sap.ui.core\",\n\t\t\t\t\"namespace\": \"sap/ui/core\",\n\t\t\t\t\"copyright\": \"Some fancy copyright\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"2.0\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.ø\",\n\t\t\"namespace\": \"application/ø\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\twebapp: \"wêbäpp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"UTF-8\",\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"wêbäpp\"\n\t\t}\n\t}\n};\n\nconst libraryETree = {\n\t\"id\": \"library.e\",\n\t\"version\": \"1.0.0\",\n\t\"path\": libraryEPath,\n\t\"dependencies\": [\n\t\t{\n\t\t\t\"id\": \"sap.ui.core-evo\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": libraryCore,\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"sap.ui.core\",\n\t\t\t\t\"namespace\": \"sap/ui/core\",\n\t\t\t\t\"copyright\": \"Some fancy copyright\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"library.e\",\n\t\t\"namespace\": \"library/e\",\n\t\t\"copyright\": \"UI development toolkit for HTML5 (OpenUI5)\\n * (c) Copyright 2009-xxx SAP SE or an \" +\n\t\t\t\"SAP affiliate company.\\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"src\",\n\t\t\t\t\"test\": \"test\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"src\",\n\t\t\t\"/test-resources/\": \"test\"\n\t\t}\n\t}\n};\n\nconst libraryHTree = {\n\t\"id\": \"library.h\",\n\t\"version\": \"1.0.0\",\n\t\"path\": libraryHPath,\n\t\"dependencies\": [\n\t\t{\n\t\t\t\"id\": \"sap.ui.core-evo\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": libraryCore,\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"sap.ui.core\",\n\t\t\t\t\"namespace\": \"sap/ui/core\",\n\t\t\t\t\"copyright\": \"Some fancy copyright\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"library.h\",\n\t\t\"namespace\": \"library/h\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"main/src\",\n\t\t\t\t\"test\": \"main/test\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"main/src\",\n\t\t\t\"/test-resources/\": \"main/test\"\n\t\t}\n\t},\n\t\"builder\": {\n\t\t\"bundles\": [{\n\t\t\t\"bundleDefinition\": {\n\t\t\t\t\"name\": \"library/h/customBundle.js\",\n\t\t\t\t\"defaultFileTypes\": [\".js\"],\n\t\t\t\t\"sections\": [{\n\t\t\t\t\t\"mode\": \"preload\",\n\t\t\t\t\t\"filters\": [\n\t\t\t\t\t\t\"library/h/some.js\",\n\t\t\t\t\t\t\"library/h/library.js\",\n\t\t\t\t\t\t\"library/h/file.js\",\n\t\t\t\t\t\t\"!library/h/components/\"\n\t\t\t\t\t],\n\t\t\t\t\t\"resolve\": false,\n\t\t\t\t\t\"renderer\": false\n\t\t\t\t}, {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"filters\": [\n\t\t\t\t\t\t\"library/h/not.js\"\n\t\t\t\t\t],\n\t\t\t\t\t\"resolve\": true,\n\t\t\t\t\t\"declareModules\": false,\n\t\t\t\t\t\"sort\": true,\n\t\t\t\t\t\"renderer\": false\n\t\t\t\t}]\n\t\t\t},\n\t\t\t\"bundleOptions\": {\n\t\t\t\t\"optimize\": true,\n\t\t\t\t\"usePredefinedCalls\": true\n\t\t\t}\n\t\t}],\n\t\t\"componentPreload\": {\n\t\t\t\"namespaces\": [\n\t\t\t\t\"library/h/components\",\n\t\t\t\t\"library/h/components/subcomponent1\",\n\t\t\t\t\"library/h/components/subcomponent2\",\n\t\t\t\t\"library/h/components/subcomponent3\"\n\t\t\t]\n\t\t}\n\t}\n};\n\nconst libraryITree = {\n\t\"id\": \"library.i\",\n\t\"version\": \"1.0.0\",\n\t\"path\": libraryIPath,\n\t\"dependencies\": [\n\t\t{\n\t\t\t\"id\": \"sap.ui.core-evo\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": libraryCore,\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"sap.ui.core\",\n\t\t\t\t\"namespace\": \"sap/ui/core\",\n\t\t\t\t\"copyright\": \"Some fancy copyright\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcloneProjectTree(libraryDTree)\n\t],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"library.i\",\n\t\t\"namespace\": \"library/i\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"main/src\",\n\t\t\t\t\"test\": \"main/test\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"main/src\"\n\t\t}\n\t}\n};\n\nconst libraryJTree = {\n\t\"id\": \"library.j\",\n\t\"version\": \"1.0.0\",\n\t\"path\": libraryJPath,\n\t\"dependencies\": [],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"library.j\",\n\t\t\"namespace\": \"library/j\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"main/src\"\n\t\t\t}\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"main/src\"\n\t\t}\n\t}\n};\n\nconst libraryØTree = {\n\t\"id\": \"library.ø\",\n\t\"version\": \"1.0.0\",\n\t\"path\": libraryØPath,\n\t\"dependencies\": [\n\t\t{\n\t\t\t\"id\": \"sap.ui.core-evo\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": libraryCore,\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"sap.ui.core\",\n\t\t\t\t\"namespace\": \"sap/ui/core\",\n\t\t\t\t\"copyright\": \"Some fancy copyright\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"2.0\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"library.ø\",\n\t\t\"namespace\": \"library/ø\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"máin/ßrc\",\n\t\t\t\t\"test\": \"máin/吉\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"UTF-8\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"máin/ßrc\",\n\t\t\t\"/test-resources/\": \"máin/吉\"\n\t\t}\n\t}\n};\n\nconst themeJTree = {\n\t\"id\": \"library.i\",\n\t\"version\": \"1.0.0\",\n\t\"path\": themeJPath,\n\t\"dependencies\": [],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"theme.j\",\n\t\t\"namespace\": \"theme/j\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"main/src\",\n\t\t\t\t\"test\": \"main/test\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"main/src\"\n\t\t}\n\t}\n};\n",
    "lib/processors/bundlers/manifestBundler.js": "const posixPath = require(\"path\").posix;\nconst yazl = require(\"yazl\");\nconst resourceFactory = require(\"@ui5/fs\").resourceFactory;\nconst log = require(\"@ui5/logger\").getLogger(\"builder:processors:bundlers:manifestBundler\");\n\n/**\n * Repository to handle i18n resource files\n *\n * @private\n */\nclass I18nResourceList {\n\t/**\n\t * Constructor\n\t */\n\tconstructor() {\n\t\tthis.propertyFiles = new Map();\n\t}\n\n\t/**\n\t * Adds a i18n resource to the repository\n\t *\n\t * @param {string} directory Path to the i18n resource\n\t * @param {module:@ui5/fs.Resource} resource i18n resource\n\t */\n\tadd(directory, resource) {\n\t\tconst normalizedDirectory = posixPath.normalize(directory);\n\t\tif (!this.propertyFiles.has(normalizedDirectory)) {\n\t\t\tthis.propertyFiles.set(normalizedDirectory, [resource]);\n\t\t} else {\n\t\t\tthis.propertyFiles.get(normalizedDirectory).push(resource);\n\t\t}\n\t}\n\n\t/**\n\t * Gets all registered i18n files within the provided path\n\t *\n\t * @param {string} directory Path to search for\n\t * @returns {Array} Array of resources files\n\t */\n\tget(directory) {\n\t\treturn this.propertyFiles.get(posixPath.normalize(directory)) || [];\n\t}\n}\n\n/**\n * Creates a manifest bundle from the provided resources.\n *\n * @alias module:@ui5/builder.processors.manifestBundler\n * @public\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.Resource[]} parameters.resources List of resources to be processed\n * @param {object} parameters.options Options\n * @param {string} parameters.options.namespace Namespace of the project\n * @param {string} parameters.options.bundleName Name of the bundled zip file\n * @param {string} parameters.options.propertiesExtension Extension name of the properties files, e.g. \".properties\"\n * @param {string} parameters.options.descriptor Descriptor name\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with manifest bundle resources\n */\nmodule.exports = ({resources, options: {namespace, bundleName, propertiesExtension, descriptor}}) => {\n\tfunction bundleNameToUrl(bundleName, appId) {\n\t\tif (!bundleName.startsWith(appId)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst relativeBundleName = bundleName.substring(appId.length + 1);\n\t\treturn relativeBundleName.replace(/\\./g, \"/\") + propertiesExtension;\n\t}\n\n\tfunction addDescriptorI18nInfos(descriptorI18nInfos, manifest) {\n\t\tfunction addI18nInfo(i18nPath) {\n\t\t\tif (i18nPath.startsWith(\"ui5:\")) {\n\t\t\t\tlog.warn(`Using the ui5:// protocol for i18n bundles is currently not supported ('${i18nPath}' in ${manifest.path})`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdescriptorI18nInfos.set(\n\t\t\t\tposixPath.join(posixPath.dirname(manifest.path), posixPath.dirname(i18nPath)),\n\t\t\t\tposixPath.basename(i18nPath, propertiesExtension)\n\t\t\t);\n\t\t}\n\n\t\tconst content = JSON.parse(manifest.content);\n\t\tconst appI18n = content[\"sap.app\"][\"i18n\"];\n\t\tlet bundleUrl;\n\t\t// i18n section in sap.app can be either a string or an object with bundleUrl\n\t\tif (typeof appI18n === \"object\") {\n\t\t\tif (appI18n.bundleUrl) {\n\t\t\t\tbundleUrl = appI18n.bundleUrl;\n\t\t\t} else if (appI18n.bundleName) {\n\t\t\t\tbundleUrl = bundleNameToUrl(appI18n.bundleName, content[\"sap.app\"][\"id\"]);\n\t\t\t}\n\t\t} else if (typeof appI18n === \"string\") {\n\t\t\tbundleUrl = appI18n;\n\t\t} else {\n\t\t\tbundleUrl = \"i18n/i18n.properties\";\n\t\t}\n\t\tif (bundleUrl) {\n\t\t\taddI18nInfo(bundleUrl);\n\t\t}\n\n\t\tif (typeof appI18n === \"object\" && Array.isArray(appI18n.enhanceWith)) {\n\t\t\tappI18n.enhanceWith.forEach((enhanceWithEntry) => {\n\t\t\t\tlet bundleUrl;\n\t\t\t\tif (enhanceWithEntry.bundleUrl) {\n\t\t\t\t\tbundleUrl = enhanceWithEntry.bundleUrl;\n\t\t\t\t} else if (enhanceWithEntry.bundleName) {\n\t\t\t\t\tbundleUrl = bundleNameToUrl(enhanceWithEntry.bundleName, content[\"sap.app\"][\"id\"]);\n\t\t\t\t}\n\t\t\t\tif (bundleUrl) {\n\t\t\t\t\taddI18nInfo(bundleUrl);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\treturn Promise.all(resources.map((resource) =>\n\t\tresource.getBuffer().then((content) => {\n\t\t\tconst basename = posixPath.basename(resource.getPath());\n\t\t\treturn {\n\t\t\t\tname: basename,\n\t\t\t\tisManifest: basename === descriptor,\n\t\t\t\tpath: resource.getPath(),\n\t\t\t\tcontent: content\n\t\t\t};\n\t\t})\n\t)).then((resources) => {\n\t\tconst archiveContent = new Map();\n\t\tconst descriptorI18nInfos = new Map();\n\t\tconst i18nResourceList = new I18nResourceList();\n\n\t\tresources.forEach((resource) => {\n\t\t\tif (resource.isManifest) {\n\t\t\t\taddDescriptorI18nInfos(descriptorI18nInfos, resource);\n\t\t\t\tarchiveContent.set(resource.path, resource.content);\n\t\t\t} else {\n\t\t\t\tconst directory = posixPath.dirname(resource.path);\n\t\t\t\ti18nResourceList.add(directory, resource);\n\t\t\t}\n\t\t});\n\n\t\tdescriptorI18nInfos.forEach((rootName, directory) => {\n\t\t\tconst i18nResources = i18nResourceList.get(directory)\n\t\t\t\t.filter((resource) => resource.name.startsWith(rootName));\n\n\t\t\tif (i18nResources.length) {\n\t\t\t\ti18nResources.forEach((resource) => archiveContent.set(resource.path, resource.content));\n\t\t\t} else {\n\t\t\t\tlog.warn(`Could not find any resources for i18n bundle '${directory}'`);\n\t\t\t}\n\t\t});\n\n\t\treturn archiveContent;\n\t}).then((archiveContent) => new Promise((resolve) => {\n\t\tconst zip = new yazl.ZipFile();\n\t\tconst rBasePath = new RegExp(`^/resources/${namespace}/`);\n\t\tarchiveContent.forEach((content, path) => {\n\t\t\tif (!rBasePath.test(path)) {\n\t\t\t\tlog.verbose(`Not bundling resource with path ${path} since it is not based on path ` +\n\t\t\t\t\t`/resources/${namespace}/`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Remove base path. Absolute paths are not allowed in ZIP files\n\t\t\tconst normalizedPath = path.replace(rBasePath, \"\");\n\t\t\tzip.addBuffer(content, normalizedPath);\n\t\t});\n\t\tzip.end();\n\n\t\tconst pathPrefix = \"/resources/\" + namespace + \"/\";\n\t\tconst res = resourceFactory.createResource({\n\t\t\tpath: pathPrefix + bundleName,\n\t\t\tstream: zip.outputStream\n\t\t});\n\t\tresolve([res]);\n\t}));\n};\n",
    "lib/processors/jsdoc/lib/transformApiJson.js": "/*\n * Node script to preprocess api.json files for use in the UI5 SDKs.\n *\n * (c) Copyright 2009-2021 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n\n\"use strict\";\nconst cheerio = require(\"cheerio\");\nconst path = require('path');\nconst log = (function() {\n\ttry {\n\t\treturn require(\"@ui5/logger\").getLogger(\"builder:processors:jsdoc:transformApiJson\");\n\t} catch (error) {\n\t\t/* eslint-disable no-console */\n\t\treturn {\n\t\t\tinfo: function info(...msg) {\n\t\t\t\tconsole.log(\"[INFO]\", ...msg);\n\t\t\t},\n\t\t\terror: function error(...msg) {\n\t\t\t\tconsole.error(...msg);\n\t\t\t}\n\t\t};\n\t\t/* eslint-enable no-console */\n\t}\n}());\n\n/*\n * Transforms the api.json as created by the JSDoc build into a pre-processed api.json file suitable for the SDK.\n *\n * The pre-processing includes formatting of type references, rewriting of links and other time consuming calculations.\n *\n * @param {string} sInputFile Path of the original api.json file that should be transformed\n * @param {string} sOutputFile Path that the transformed api.json file should should be written to\n * @param {string} sLibraryFile Path to the .library file of the library, used to extract further documentation information\n * @param {string|string[]} vDependencyAPIFiles Path of folder that contains api.json files of predecessor libs or\n *                 an array of paths of those files\n * @param {string} sFAQDir Path to the directory containing the sources for the FAQ section in APiRef\n * @returns {Promise} A Promise that resolves after the transformation has been completed\n */\nfunction transformer(sInputFile, sOutputFile, sLibraryFile, vDependencyAPIFiles, sFAQDir, options) {\n\tconst fs = options && options.fs || require(\"fs\");\n\tconst returnOutputFiles = options && !!options.returnOutputFiles;\n\n\tlog.info(\"Transform API index files for sap.ui.documentation\");\n\tlog.info(\"  original file: \" + sInputFile);\n\tlog.info(\"  output file: \" + sOutputFile);\n\tlog.info(\"  library file: \" + sLibraryFile);\n\tlog.info(\"  dependency dir: \" + vDependencyAPIFiles);\n\tlog.info(\"  FAQ src dir: \" + sFAQDir);\n\tif (options && options.fs) {\n\t\tlog.info(\"Using custom fs.\");\n\t}\n\tif (returnOutputFiles) {\n\t\tlog.info(\"Returning output files instead of writing to fs.\")\n\t}\n\tlog.info(\"\");\n\n\t/**\n\t * Transforms api.json file\n\t * @param {object} oChainObject chain object\n\t */\n\tlet transformApiJson = function (oChainObject) {\n\t\tfunction isBuiltInType(type) {\n\t\t\treturn formatters._baseTypes.indexOf(type) >= 0;\n\t\t}\n\n\t\t/**\n\t\t * Heuristically determining if there is a possibility the given input string\n\t\t * to be a UI5 symbol\n\t\t * @param {string} sName\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction possibleUI5Symbol(sName) {\n\t\t\treturn /^[a-zA-Z][a-zA-Z.]*[a-zA-Z]$/.test(sName);\n\t\t}\n\n\t\t// Function is a copy from: LibraryInfo.js => LibraryInfo.prototype._getActualComponent => \"match\" inline method\n\t\tfunction matchComponent(sModuleName, sPattern) {\n\t\t\tsModuleName = sModuleName.toLowerCase();\n\t\t\tsPattern = sPattern.toLowerCase();\n\t\t\treturn (\n\t\t\t\tsModuleName === sPattern\n\t\t\t\t|| sPattern.match(/\\*$/) && sModuleName.indexOf(sPattern.slice(0,-1)) === 0 // simple prefix match\n\t\t\t\t|| sPattern.match(/\\.\\*$/) && sModuleName === sPattern.slice(0,-2) // directory pattern also matches directory itself\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Pre-processes the symbols list - creating virtual namespace records and attaching children list to namespace\n\t\t * records.\n\t\t * @param {object} symbols list\n\t\t */\n\t\tfunction preProcessSymbols(symbols) {\n\t\t\t// Create treeName and modify module names\n\t\t\tsymbols.forEach(oSymbol => {\n\t\t\t\tlet sModuleClearName = oSymbol.name.replace(/^module:/, \"\");\n\t\t\t\toSymbol.displayName = sModuleClearName;\n\t\t\t\toSymbol.treeName = sModuleClearName.replace(/\\//g, \".\");\n\t\t\t});\n\n\t\t\t// Create missing - virtual namespaces\n\t\t\tsymbols.forEach(oSymbol => {\n\t\t\t\toSymbol.treeName.split(\".\").forEach((sPart, i, a) => {\n\t\t\t\t\tlet sName = a.slice(0, (i + 1)).join(\".\");\n\n\t\t\t\t\tif (!symbols.find(o => o.treeName === sName)) {\n\t\t\t\t\t\tsymbols.push({\n\t\t\t\t\t\t\tname: sName,\n\t\t\t\t\t\t\tdisplayName: sName,\n\t\t\t\t\t\t\ttreeName: sName,\n\t\t\t\t\t\t\tlib: oSymbol.lib,\n\t\t\t\t\t\t\tkind: \"namespace\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Discover parents\n\t\t\tsymbols.forEach(oSymbol => {\n\t\t\t\tlet aParent = oSymbol.treeName.split(\".\"),\n\t\t\t\t\tsParent;\n\n\t\t\t\t// Extract parent name\n\t\t\t\taParent.pop();\n\t\t\t\tsParent = aParent.join(\".\");\n\n\t\t\t\t// Mark parent\n\t\t\t\tif (symbols.find(({treeName}) => treeName === sParent)) {\n\t\t\t\t\toSymbol.parent = sParent;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Attach children info\n\t\t\tsymbols.forEach(oSymbol => {\n\t\t\t\tif (oSymbol.parent) {\n\t\t\t\t\tlet oParent = symbols.find(({treeName}) => treeName === oSymbol.parent),\n\t\t\t\t\t\toNode;\n\n\t\t\t\t\tif (!oParent.nodes) oParent.nodes = [];\n\n\t\t\t\t\toNode = {\n\t\t\t\t\t\tname: oSymbol.displayName,\n\t\t\t\t\t\tdescription: formatters._preProcessLinksInTextBlock(\n\t\t\t\t\t\t\textractFirstSentence(oSymbol.description)\n\t\t\t\t\t\t),\n\t\t\t\t\t\thref: \"api/\" + encodeURIComponent(oSymbol.name)\n\t\t\t\t\t};\n\n\t\t\t\t\tif (oSymbol.deprecated) {\n\t\t\t\t\t\toNode.deprecated = true;\n\t\t\t\t\t}\n\n\t\t\t\t\toParent.nodes.push(oNode);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Clean list - keep file size down\n\t\t\tsymbols.forEach(o => {\n\t\t\t\tdelete o.treeName;\n\t\t\t\tdelete o.parent;\n\t\t\t});\n\t\t}\n\n\t\t// Transform to object\n\t\tlet oData = oChainObject.fileData;\n\n\t\t// Attach default component for the library if available\n\t\tif (oChainObject.defaultComponent) {\n\t\t\toData.defaultComponent = oChainObject.defaultComponent;\n\t\t}\n\n\t\tformatters._oOwnLibrary = oData;\n\n\t\t// Pre process symbols\n\t\tpreProcessSymbols(oData.symbols);\n\n\t\t// Apply formatter's and modify data as needed\n\t\toData.symbols.forEach((oSymbol) => {\n\n\t\t\t// when the module name starts with the library name, then we apply the default component\n\t\t\tif (oSymbol.name.indexOf(oData.library) === 0) {\n\t\t\t\toSymbol.component = oChainObject.defaultComponent;\n\t\t\t}\n\n\t\t\t// Attach symbol specific component if available (special cases)\n\t\t\t// Note: Last hit wins as there may be a more specific component pattern\n\t\t\tif (oChainObject.customSymbolComponents) {\n\t\t\t\tObject.keys(oChainObject.customSymbolComponents).forEach(sComponent => {\n\t\t\t\t\tif (matchComponent(oSymbol.name, sComponent)) {\n\t\t\t\t\t\toSymbol.component = oChainObject.customSymbolComponents[sComponent];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Attach symbol sample flag if available\n\t\t\tif (oChainObject.entitiesWithSamples) {\n\t\t\t\toSymbol.hasSample = oChainObject.entitiesWithSamples.indexOf(oSymbol.name) >= 0;\n\t\t\t}\n\n\t\t\t// Apply settings to formatter object - needed until formatter's are rewritten\n\t\t\tformatters._sTopicId = oSymbol.name;\n\t\t\tformatters._oTopicData = oSymbol;\n\n\t\t\t// Format Page Title\n\t\t\toSymbol.title = (oSymbol.abstract ? \"abstract \" : \"\") + oSymbol.kind + \" \" + oSymbol.displayName;\n\t\t\toSymbol.subTitle = formatters.formatSubtitle(oSymbol.deprecated);\n\n\t\t\t// Constructor\n\t\t\tif (oSymbol.constructor) {\n\t\t\t\tlet oConstructor = oSymbol.constructor;\n\n\t\t\t\t// Description\n\t\t\t\tif (oConstructor.description) {\n\t\t\t\t\toConstructor.description = formatters.formatDescription(oConstructor.description);\n\t\t\t\t}\n\n\t\t\t\t// References\n\t\t\t\tformatters.modifyReferences(oSymbol, true);\n\n\t\t\t\t// Examples\n\t\t\t\tif (oConstructor.examples) {\n\t\t\t\t\toConstructor.examples.forEach((oExample) => {\n\t\t\t\t\t\toExample.data = formatters.formatExample(oExample.caption, oExample.text);\n\n\t\t\t\t\t\t// Keep file size in check\n\t\t\t\t\t\tif (oExample.caption) {\n\t\t\t\t\t\t\tdelete oExample.caption;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (oExample.text) {\n\t\t\t\t\t\t\tdelete oExample.text;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Code Example string\n\t\t\t\toConstructor.codeExample = formatters.formatConstructor(oSymbol.name, oConstructor.parameters);\n\n\t\t\t\t// Parameters\n\t\t\t\tif (oConstructor.parameters) {\n\t\t\t\t\toConstructor.parameters = methods.buildConstructorParameters(oConstructor.parameters);\n\n\t\t\t\t\tlet aParameters = oConstructor.parameters;\n\t\t\t\t\taParameters.forEach(oParameter => {\n\n\t\t\t\t\t\t// Types\n\t\t\t\t\t\toParameter.types = [];\n\t\t\t\t\t\tif (oParameter.type) {\n\t\t\t\t\t\t\tlet aTypes = oParameter.type.split(\"|\");\n\n\t\t\t\t\t\t\tfor (let i = 0; i < aTypes.length; i++) {\n\t\t\t\t\t\t\t\toParameter.types.push({\n\t\t\t\t\t\t\t\t\tname: aTypes[i],\n\t\t\t\t\t\t\t\t\tlinkEnabled: !isBuiltInType(aTypes[i])\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Keep file size in check\n\t\t\t\t\t\t\tdelete oParameter.type;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Default value\n\t\t\t\t\t\toParameter.defaultValue = formatters.formatDefaultValue(oParameter.defaultValue);\n\n\t\t\t\t\t\t// Description\n\t\t\t\t\t\tif (oParameter.description) {\n\t\t\t\t\t\t\toParameter.description = formatters.formatDescription(oParameter.description);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\t// Throws\n\t\t\t\tif (oConstructor.throws) {\n\t\t\t\t\toConstructor.throws.forEach(oThrows => {\n\n\t\t\t\t\t\t// Description\n\t\t\t\t\t\tif (oThrows.description) {\n\t\t\t\t\t\t\toThrows.description = formatters.formatDescription(oThrows.description);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Exception link enabled\n\t\t\t\t\t\tif (oThrows.type) {\n\t\t\t\t\t\t\toThrows.linkEnabled = formatters.formatExceptionLink(oThrows.type);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Description\n\t\t\tif (oSymbol.description) {\n\t\t\t\toSymbol.description = formatters.formatOverviewDescription(oSymbol.description, oSymbol.constructor.references);\n\t\t\t}\n\n\t\t\t// Deprecated\n\t\t\tif (oSymbol.deprecated) {\n\t\t\t\toSymbol.deprecatedText = formatters.formatDeprecated(oSymbol.deprecated.since, oSymbol.deprecated.text);\n\t\t\t\t// Keep file size in check\n\t\t\t\tdelete oSymbol.deprecated;\n\t\t\t}\n\n\t\t\t// Properties\n\t\t\tif (oSymbol.properties) {\n\t\t\t\toSymbol.properties.forEach((oProperty) => {\n\n\t\t\t\t\t// Name\n\t\t\t\t\toProperty.name = formatters.formatEntityName(oProperty.name, oSymbol.name, oProperty.static);\n\n\t\t\t\t\t// Description\n\t\t\t\t\tif (oProperty.deprecated) {\n\t\t\t\t\t\toProperty.description = formatters.formatDescription(oProperty.description,\n\t\t\t\t\t\t\toProperty.deprecated.text, oProperty.deprecated.since);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toProperty.description = formatters.formatDescription(oProperty.description);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Link Enabled\n\t\t\t\t\tif (oSymbol.kind !== \"enum\" && !isBuiltInType(oProperty.type) && possibleUI5Symbol(oProperty.type)) {\n\t\t\t\t\t\toProperty.linkEnabled = true;\n\t\t\t\t\t\toProperty.href = \"api/\" + oProperty.type.replace(\"[]\", \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Keep file size in check\n\t\t\t\t\tif (oProperty.static) {\n\t\t\t\t\t\tdelete oProperty.static;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (oSymbol.kind === \"enum\" || oProperty.type === \"undefined\") {\n\t\t\t\t\t\tdelete oProperty.type;\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// UI5 Metadata\n\t\t\tif (oSymbol[\"ui5-metadata\"]) {\n\t\t\t\tlet oMeta = oSymbol[\"ui5-metadata\"];\n\n\t\t\t\t// Properties\n\t\t\t\tif (oMeta.properties) {\n\t\t\t\t\t// Sort\n\t\t\t\t\toMeta.properties.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t} else if (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Pre-process\n\t\t\t\t\toMeta.properties.forEach((oProperty) => {\n\t\t\t\t\t\t// Name\n\t\t\t\t\t\toProperty.name = formatters.formatEntityName(oProperty.name, oSymbol.name, oProperty.static);\n\n\t\t\t\t\t\t// Description\n\t\t\t\t\t\toProperty.description = formatters.formatDescriptionSince(oProperty.description, oProperty.since);\n\n\t\t\t\t\t\t// Link Enabled\n\t\t\t\t\t\tif (!isBuiltInType(oProperty.type)) {\n\t\t\t\t\t\t\toProperty.linkEnabled = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Default value\n\t\t\t\t\t\toProperty.defaultValue = formatters.formatDefaultValue(oProperty.defaultValue);\n\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tif (oProperty.deprecated) {\n\t\t\t\t\t\t\toProperty.deprecatedText = formatters.formatDeprecated(oProperty.deprecated.since,\n\t\t\t\t\t\t\t\toProperty.deprecated.text);\n\n\t\t\t\t\t\t\t// Keep file size in check\n\t\t\t\t\t\t\tdelete oProperty.deprecated;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Aggregations\n\t\t\t\tif (oMeta.aggregations) {\n\t\t\t\t\t// Sort\n\t\t\t\t\toMeta.aggregations.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t} else if (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Pre-process\n\t\t\t\t\toMeta.aggregations.forEach((oAggregation) => {\n\t\t\t\t\t\t// Link Enabled\n\t\t\t\t\t\tif (!isBuiltInType(oAggregation.type)) {\n\t\t\t\t\t\t\toAggregation.linkEnabled = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Description\n\t\t\t\t\t\tif (oAggregation.deprecated) {\n\t\t\t\t\t\t\toAggregation.description = formatters.formatDescription(oAggregation.description,\n\t\t\t\t\t\t\t\toAggregation.deprecated.text, oAggregation.deprecated.since);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toAggregation.description = formatters.formatDescriptionSince(oAggregation.description, oAggregation.since);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Link enabled\n\t\t\t\t\t\toAggregation.linkEnabled = !isBuiltInType(oAggregation.type);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Associations\n\n\t\t\t\tif (oMeta.associations) {\n\t\t\t\t\t// Sort\n\t\t\t\t\toMeta.associations.sort(function (a, b) {\n\t\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t} else if (a.name > b.name) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Pre-process\n\t\t\t\t\toMeta.associations.forEach((oAssociation) => {\n\t\t\t\t\t\t// Link Enabled\n\t\t\t\t\t\tif (!isBuiltInType(oAssociation.type)) {\n\t\t\t\t\t\t\toAssociation.linkEnabled = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Description\n\t\t\t\t\t\tif (oAssociation.deprecated) {\n\t\t\t\t\t\t\toAssociation.description = formatters.formatDescription(oAssociation.description,\n\t\t\t\t\t\t\t\toAssociation.deprecated.text, oAssociation.deprecated.since);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toAssociation.description = formatters.formatDescriptionSince(oAssociation.description, oAssociation.since);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Events\n\t\t\t\tif (oMeta.events) {\n\n\t\t\t\t\toMeta.events.forEach(oEvent => {\n\t\t\t\t\t\tlet aParams = oEvent.parameters;\n\n\t\t\t\t\t\taParams && Object.keys(aParams).forEach(sParam => {\n\t\t\t\t\t\t\tlet sSince = aParams[sParam].since;\n\t\t\t\t\t\t\tlet oDeprecated = aParams[sParam].deprecated;\n\t\t\t\t\t\t\tlet oEvtInSymbol = oSymbol.events.find(e => e.name === oEvent.name);\n\t\t\t\t\t\t\tlet oParamInSymbol = oEvtInSymbol && oEvtInSymbol.parameters[0] &&\n\t\t\t\t\t\t\t\t\t\t\t\t\toEvtInSymbol.parameters[0].parameterProperties &&\n\t\t\t\t\t\t\t\t\t\t\t\t\toEvtInSymbol.parameters[0].parameterProperties.getParameters &&\n\t\t\t\t\t\t\t\t\t\t\t\t\toEvtInSymbol.parameters[0].parameterProperties.getParameters.parameterProperties &&\n\t\t\t\t\t\t\t\t\t\t\t\t\toEvtInSymbol.parameters[0].parameterProperties.getParameters.parameterProperties[sParam];\n\n\t\t\t\t\t\t\tif (typeof oParamInSymbol === 'object' && oParamInSymbol !== null) {\n\t\t\t\t\t\t\t\tif (sSince) {\n\t\t\t\t\t\t\t\t\toParamInSymbol.since = sSince;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (oDeprecated) {\n\t\t\t\t\t\t\t\t\toParamInSymbol.deprecated = oDeprecated;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\n\t\t\t\t\t// We don't need event's data from the UI5-metadata for now. Keep file size in check\n\t\t\t\t\tdelete oMeta.events;\n\t\t\t\t}\n\n\t\t\t\t// Special Settings\n\t\t\t\tif (oMeta.specialSettings) {\n\t\t\t\t\toMeta.specialSettings.forEach(oSetting => {\n\n\t\t\t\t\t\t// Link Enabled\n\t\t\t\t\t\tif (!isBuiltInType(oSetting.type)) {\n\t\t\t\t\t\t\toSetting.linkEnabled = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Description\n\t\t\t\t\t\tif (oSetting.deprecated) {\n\t\t\t\t\t\t\toSetting.description = formatters.formatDescription(oSetting.description,\n\t\t\t\t\t\t\t\toSetting.deprecated.text, oSetting.deprecated.since);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toSetting.description = formatters.formatDescription(oSetting.description);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Annotations\n\t\t\t\tif (oMeta.annotations) {\n\t\t\t\t\toMeta.annotations.forEach(oAnnotation => {\n\n\t\t\t\t\t\t// Description\n\t\t\t\t\t\toAnnotation.description = formatters.formatAnnotationDescription(oAnnotation.description,\n\t\t\t\t\t\t\toAnnotation.since);\n\n\t\t\t\t\t\t// Namespace\n\t\t\t\t\t\toAnnotation.namespaceText = oAnnotation.namespace;\n\t\t\t\t\t\toAnnotation.namespace = formatters.formatAnnotationNamespace(oAnnotation.namespace);\n\n\t\t\t\t\t\t// Target\n\t\t\t\t\t\toAnnotation.target = formatters.formatAnnotationTarget(oAnnotation.target);\n\n\t\t\t\t\t\t// Applies to\n\t\t\t\t\t\toAnnotation.appliesTo = formatters.formatAnnotationTarget(oAnnotation.appliesTo);\n\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (oSymbol.events) {\n\n\t\t\t\t// Pre-process events\n\t\t\t\tmethods.buildEventsModel(oSymbol.events);\n\n\t\t\t\toSymbol.events.forEach(oEvent => {\n\n\t\t\t\t\t// Description\n\t\t\t\t\tif (oEvent.description) {\n\t\t\t\t\t\toEvent.description = formatters.formatDescriptionSince(oEvent.description, oEvent.since);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Deprecated\n\t\t\t\t\tif (oEvent.deprecated) {\n\t\t\t\t\t\toEvent.deprecatedText = formatters.formatEventDeprecated(oEvent.deprecated.since,\n\t\t\t\t\t\t\toEvent.deprecated.text);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Parameters\n\t\t\t\t\tif (oEvent.parameters && Array.isArray(oEvent.parameters)) {\n\t\t\t\t\t\toEvent.parameters.forEach(oParameter => {\n\n\t\t\t\t\t\t\t// Link Enabled\n\t\t\t\t\t\t\tif (!isBuiltInType(oParameter.type)) {\n\t\t\t\t\t\t\t\toParameter.linkEnabled = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Description\n\t\t\t\t\t\t\tif (oParameter.description) {\n\t\t\t\t\t\t\t\toParameter.description = formatters.formatDescriptionSince(oParameter.description, oParameter.since);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\t\tif (oParameter.deprecated) {\n\t\t\t\t\t\t\t\toParameter.deprecatedText = formatters.formatDeprecated(oParameter.deprecated.since,\n\t\t\t\t\t\t\t\t\toParameter.deprecated.text);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t\t// Methods\n\t\t\tif (oSymbol.methods) {\n\n\t\t\t\t// Pre-process methods\n\t\t\t\tmethods.buildMethodsModel(oSymbol.methods);\n\n\t\t\t\toSymbol.methods.forEach(oMethod => {\n\n\t\t\t\t\t// Name and link\n\t\t\t\t\tif (oMethod.name) {\n\t\t\t\t\t\toMethod.name = formatters.formatEntityName(oMethod.name, oSymbol.name, oMethod.static);\n\n\t\t\t\t\t\t// Link\n\t\t\t\t\t\toMethod.href = \"api/\" + oSymbol.name +\n\t\t\t\t\t\t\t\"#methods/\" + oMethod.name;\n\t\t\t\t\t}\n\n\t\t\t\t\tformatters.formatReferencesInDescription(oMethod);\n\n\t\t\t\t\t// Description\n\t\t\t\t\tif (oMethod.description) {\n\t\t\t\t\t\toMethod.description = formatters.formatDescription(oMethod.description);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Examples\n\t\t\t\t\toMethod.examples && oMethod.examples.forEach(oExample => {\n\t\t\t\t\t\toExample = formatters.formatExample(oExample.caption, oExample.text);\n\t\t\t\t\t});\n\n\t\t\t\t\t// Deprecated\n\t\t\t\t\tif (oMethod.deprecated) {\n\t\t\t\t\t\toMethod.deprecatedText = formatters.formatEventDeprecated(oMethod.deprecated.since,\n\t\t\t\t\t\t\toMethod.deprecated.text);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Code example\n\t\t\t\t\toMethod.code = formatters.formatMethodCode(oMethod.name, oMethod.parameters, oMethod.returnValue);\n\n\t\t\t\t\t// Parameters\n\t\t\t\t\tif (oMethod.parameters) {\n\t\t\t\t\t\toMethod.parameters.forEach(oParameter => {\n\n\t\t\t\t\t\t\t// Types\n\t\t\t\t\t\t\tif (oParameter.types) {\n\t\t\t\t\t\t\t\toParameter.types.forEach(oType => {\n\n\t\t\t\t\t\t\t\t\t// Link Enabled\n\t\t\t\t\t\t\t\t\tif (!isBuiltInType(oType.value) && possibleUI5Symbol(oType.value)) {\n\t\t\t\t\t\t\t\t\t\toType.linkEnabled = true;\n\t\t\t\t\t\t\t\t\t\toType.href = \"api/\" + oType.value.replace(\"[]\", \"\");\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Default value\n\t\t\t\t\t\t\toParameter.defaultValue = formatters.formatDefaultValue(oParameter.defaultValue);\n\n\t\t\t\t\t\t\t// Description\n\t\t\t\t\t\t\tif (oParameter.deprecated) {\n\t\t\t\t\t\t\t\toParameter.description = formatters.formatDescription(oParameter.description,\n\t\t\t\t\t\t\t\t\toParameter.deprecated.text, oParameter.deprecated.since);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\toParameter.description = formatters.formatDescription(oParameter.description);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return value\n\t\t\t\t\tif (oMethod.returnValue) {\n\n\t\t\t\t\t\t// Description\n\t\t\t\t\t\toMethod.returnValue.description = formatters.formatDescription(oMethod.returnValue.description);\n\n\t\t\t\t\t\t// Types\n\t\t\t\t\t\tif (oMethod.returnValue.types) {\n\t\t\t\t\t\t\toMethod.returnValue.types.forEach(oType => {\n\n\t\t\t\t\t\t\t\t// Link Enabled\n\t\t\t\t\t\t\t\tif (!isBuiltInType(oType.value)) {\n\t\t\t\t\t\t\t\t\toType.href = \"api/\" + oType.value.replace(\"[]\", \"\");\n\t\t\t\t\t\t\t\t\toType.linkEnabled = true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Throws\n\t\t\t\t\tif (oMethod.throws) {\n\t\t\t\t\t\toMethod.throws.forEach(oThrows => {\n\n\t\t\t\t\t\t\t// Description\n\t\t\t\t\t\t\tif (oThrows.description) {\n\t\t\t\t\t\t\t\toThrows.description = formatters.formatDescription(oThrows.description);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Exception link enabled\n\t\t\t\t\t\t\tif (oThrows.type) {\n\t\t\t\t\t\t\t\toThrows.linkEnabled = formatters.formatExceptionLink(oThrows.type);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Examples\n\t\t\t\t\tif (oMethod.examples) {\n\t\t\t\t\t\toMethod.examples.forEach((oExample) => {\n\t\t\t\t\t\t\toExample.data = formatters.formatExample(oExample.caption, oExample.text);\n\n\t\t\t\t\t\t\t// Keep file size in check\n\t\t\t\t\t\t\tif (oExample.caption) {\n\t\t\t\t\t\t\t\tdelete oExample.caption;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (oExample.text) {\n\t\t\t\t\t\t\t\tdelete oExample.text;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Formatting namespaces, functions and enums, which may contain examples\n\t\t\t// or references with links to process them similar to methods and constructors of classes\n\n\t\t\tif (oSymbol.kind !== \"class\") {\n\n\t\t\t\tif (oSymbol.examples) {\n\t\t\t\t\toSymbol.examples.forEach((oExample) => {\n\t\t\t\t\t\toExample.data = formatters.formatExample(oExample.caption, oExample.text);\n\t\t\t\t\t\t// Keep file size in check\n\t\t\t\t\t\tif (oExample.caption) {\n\t\t\t\t\t\t\tdelete oExample.caption;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (oExample.text) {\n\t\t\t\t\t\t\tdelete oExample.text;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (oSymbol.references) {\n\t\t\t\t\tformatters.modifyReferences(oSymbol);\n\t\t\t\t\tformatters.formatReferencesInDescription(oSymbol);\n\t\t\t\t}\n\n\t\t\t\t// Description\n\t\t\t\tif (oSymbol.description) {\n\t\t\t\t\toSymbol.description = formatters.formatDescription(oSymbol.description);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\toChainObject.parsedData = oData;\n\n\t\treturn oChainObject;\n\t};\n\n\tfunction extractFirstSentence(sHTML) {\n\t\tconst rRegExp = /^.*?[\\.!\\?](?:\\s|$)/;\n\t\tconst aMatch = rRegExp.exec(sHTML);\n\n\t\treturn aMatch !== null ? aMatch[0] : sHTML;\n\t}\n\n\tfunction getDependencyLibraryFilesList(oChainObject) {\n\t\t// if vDependencyAPIFiles is an array, it contains the file paths of api.json files\n\t\tif ( Array.isArray(vDependencyAPIFiles) ) {\n\t\t\treturn oChainObject;\n\t\t}\n\n\t\t// otherwise, it names a directory that has to be scanned for the files\n\t\treturn new Promise(oResolve => {\n\t\t\tfs.readdir(vDependencyAPIFiles, function (oError, aItems) {\n\t\t\t\tif (!oError && aItems && aItems.length) {\n\t\t\t\t\tlet aFiles = [];\n\t\t\t\t\taItems.forEach(sItem => {\n\t\t\t\t\t\taFiles.push(path.join(vDependencyAPIFiles, sItem));\n\t\t\t\t\t});\n\t\t\t\t\toChainObject.aDependentLibraryFiles = aFiles;\n\t\t\t\t}\n\t\t\t\toResolve(oChainObject); // We don't fail if no dependency library files are available\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction loadDependencyLibraryFiles (oChainObject) {\n\t\tif (!oChainObject.aDependentLibraryFiles) {\n\t\t\treturn oChainObject;\n\t\t}\n\t\tlet aPromises = [];\n\t\toChainObject.aDependentLibraryFiles.forEach(sFile => {\n\t\t\taPromises.push(new Promise(oResolve => {\n\t\t\t\tfs.readFile(sFile, 'utf8', (oError, oData) => {\n\t\t\t\t\toResolve(oError ? false : oData);\n\t\t\t\t});\n\t\t\t}));\n\t\t});\n\t\treturn Promise.all(aPromises).then(aValues => {\n\t\t\tlet oDependentAPIs = {};\n\n\t\t\taValues.forEach(sData => {\n\t\t\t\tlet oData;\n\n\t\t\t\ttry {\n\t\t\t\t\toData = JSON.parse(sData);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Silence possible dependency library invalid json errors as they are not critical\n\t\t\t\t\t// and we should not fail BCP: 1870560058\n\t\t\t\t}\n\n\t\t\t\t// OpenUI5 build specific - own library can be listed as dependency library also.\n\t\t\t\t// In this case we don't add it to the dependency list to skip double iteration.\n\t\t\t\tif (oData && oChainObject.fileData.library !== oData.library) {\n\t\t\t\t\toDependentAPIs[oData.library] = oData.symbols;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\toChainObject.oDependentAPIs = oDependentAPIs;\n\t\t\treturn oChainObject;\n\t\t})\n\t}\n\n\t/**\n\t * Check for existence of FAQ data\n\t * (FAQ data must be defined as *.md files in the <code>sFAQDir</code>)\n\t * and add a boolean flag in case it exists\n\t *\n\t * @param oChainObject chain object\n\t */\n\tfunction addFlagsForFAQData(oChainObject) {\n\t\tif (!sFAQDir) {\n\t\t\treturn oChainObject;\n\t\t}\n\t\toChainObject.fileData.symbols.forEach(function(symbol) {\n\t\t\tif (fs.existsSync(path.join(sFAQDir, symbol.basename + \".md\"))) {\n\t\t\t\tsymbol.hasFAQ = true;\n\t\t\t}\n\t\t});\n\t\treturn oChainObject;\n\t}\n\n\t/**\n\t * Create api.json from parsed data\n\t * @param oChainObject chain object\n\t */\n\tfunction createApiRefApiJson(oChainObject) {\n\t\tif (returnOutputFiles) {\n\t\t\t// If requested, return data instead of writing to FS (required by UI5 Tooling/UI5 Builder)\n\t\t\treturn JSON.stringify(oChainObject.parsedData);\n\t\t}\n\t\tlet sOutputDir = path.dirname(oChainObject.outputFile);\n\n\t\t// Create dir if it does not exist\n\t\tif (!fs.existsSync(sOutputDir)) {\n\t\t\tfs.mkdirSync(sOutputDir);\n\t\t}\n\n\t\t// Write result to file\n\t\tfs.writeFileSync(oChainObject.outputFile, JSON.stringify(oChainObject.parsedData) /* Transform back to string */, 'utf8');\n\t}\n\n\t/**\n\t * Load .library file\n\t * @param oChainObject chain return object\n\t * @returns {Promise} library file promise\n\t */\n\tfunction getLibraryPromise(oChainObject) {\n\t\treturn new Promise(function(oResolve) {\n\t\t\tfs.readFile(oChainObject.libraryFile, 'utf8', (oError, oData) => {\n\t\t\t\toChainObject.libraryFileData = oData;\n\t\t\t\toResolve(oChainObject);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Extracts components list and docuindex.json relative path from .library file data\n\t * @param {object} oChainObject chain object\n\t * @returns {object} chain object\n\t */\n\tfunction extractComponentAndDocuindexUrl(oChainObject) {\n\t\toChainObject.modules = [];\n\n\t\tif (oChainObject.libraryFileData) {\n\t\t\tlet $ = cheerio.load(oChainObject.libraryFileData, {\n\t\t\t\tignoreWhitespace: true,\n\t\t\t\txmlMode: true,\n\t\t\t\tlowerCaseTags: false\n\t\t\t});\n\n\t\t\t// Extract documentation URL\n\t\t\toChainObject.docuPath = $(\"appData documentation\").attr(\"indexUrl\");\n\n\t\t\t// Extract components\n\t\t\t$(\"ownership > component\").each((i, oComponent) => {\n\n\t\t\t\tif (oComponent.children) {\n\t\t\t\t\tif (oComponent.children.length === 1) {\n\t\t\t\t\t\toChainObject.defaultComponent = $(oComponent).text();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet sCurrentComponentName = $(oComponent).find(\"name\").text();\n\t\t\t\t\t\tlet aCurrentModules = [];\n\t\t\t\t\t\t$(oComponent).find(\"module\").each((a, oC) => {\n\t\t\t\t\t\t\taCurrentModules.push($(oC).text().replace(/\\//g, \".\"));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\toChainObject.modules.push({\n\t\t\t\t\t\t\tcomponentName: sCurrentComponentName,\n\t\t\t\t\t\t\tmodules: aCurrentModules\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t}\n\n\t\treturn oChainObject;\n\t}\n\n\t/**\n\t * Adds to the passed object custom symbol component map generated from the extracted components list\n\t * to be easily searchable later\n\t * @param {object} oChainObject chain object\n\t * @returns {object} chain object\n\t */\n\tfunction flattenComponents(oChainObject) {\n\t\tif (oChainObject.modules && oChainObject.modules.length > 0) {\n\t\t\toChainObject.customSymbolComponents = {};\n\t\t\toChainObject.modules.forEach(oComponent => {\n\t\t\t\tlet sCurrentComponent = oComponent.componentName;\n\t\t\t\toComponent.modules.forEach(sModule => {\n\t\t\t\t\toChainObject.customSymbolComponents[sModule] = sCurrentComponent;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn oChainObject;\n\t}\n\n\t/**\n\t * Adds to the passed object array with entities which have explored samples\n\t * @param {object} oChainObject chain object\n\t * @returns {object} chain object\n\t */\n\tfunction extractSamplesFromDocuIndex(oChainObject) {\n\t\t// If we have not extracted docuPath we return early\n\t\tif (!oChainObject.docuPath) {\n\t\t\treturn oChainObject;\n\t\t}\n\t\treturn new Promise(function(oResolve) {\n\t\t\t// Join .library path with relative docuindex.json path\n\t\t\tlet sPath = path.join(path.dirname(oChainObject.libraryFile), oChainObject.docuPath);\n\t\t\t// Normalize path to resolve relative path\n\t\t\tsPath = path.normalize(sPath);\n\n\t\t\tfs.readFile(sPath, 'utf8', (oError, oFileData) => {\n\t\t\t\tif (!oError) {\n\t\t\t\t\toFileData = JSON.parse(oFileData);\n\t\t\t\t\tif (oFileData.explored && oFileData.explored.entities && oFileData.explored.entities.length > 0) {\n\t\t\t\t\t\toChainObject.entitiesWithSamples = [];\n\t\t\t\t\t\toFileData.explored.entities.forEach(oEntity => {\n\t\t\t\t\t\t\toChainObject.entitiesWithSamples.push(oEntity.id);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// We aways resolve as this data is not mandatory\n\t\t\t\toResolve(oChainObject);\n\t\t\t});\n\n\t\t});\n\t}\n\n\t/**\n\t * Load api.json file\n\t * @param {object} oChainObject chain object\n\t * @returns {object} chain object\n\t */\n\tfunction getAPIJSONPromise(oChainObject) {\n\t\treturn new Promise(function(oResolve, oReject) {\n\t\t\tfs.readFile(sInputFile, 'utf8', (oError, sFileData) => {\n\t\t\t\tif (oError) {\n\t\t\t\t\toReject(oError);\n\t\t\t\t} else {\n\t\t\t\t\toChainObject.fileData = JSON.parse(sFileData);\n\t\t\t\t\toResolve(oChainObject);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/*\n\t * =====================================================================================================================\n\t * IMPORTANT NOTE: Formatter code is a copy from APIDetail.controller.js with a very little modification and mocking and\n\t * code can be significantly improved\n\t * =====================================================================================================================\n\t */\n\tlet formatters = {\n\n\t\t_sTopicId: \"\",\n\t\t_oTopicData: {},\n\t\t_baseTypes: [\n\t\t\t// TODO this list URGENTLY needs to be replaced by the Type parser and a much smaller list\n\t\t\t\"sap.ui.core.any\",\n\t\t\t\"sap.ui.core.object\",\n\t\t\t\"sap.ui.core.function\",\n\t\t\t\"sap.ui.core.number\", // TODO discuss with Thomas, type does not exist\n\t\t\t\"sap.ui.core.float\",\n\t\t\t\"sap.ui.core.int\",\n\t\t\t\"sap.ui.core.boolean\",\n\t\t\t\"sap.ui.core.string\",\n\t\t\t\"sap.ui.core.void\",\n\t\t\t\"null\",\n\t\t\t\"any\",\n\t\t\t\"any[]\",\n\t\t\t\"Error\",\n\t\t\t\"Error[]\",\n\t\t\t\"array\",\n\t\t\t\"element\",\n\t\t\t\"Element\",\n\t\t\t\"DomRef\",\n\t\t\t\"object\",\n\t\t\t\"Object\",\n\t\t\t\"object[]\",\n\t\t\t\"object|object[]\",\n\t\t\t\"[object Object][]\",\n\t\t\t\"Array<[object Object]>\",\n\t\t\t\"Array.<[object Object]>\",\n\t\t\t\"Object<string,string>\",\n\t\t\t\"Object.<string,string>\",\n\t\t\t\"function\",\n\t\t\t\"float\",\n\t\t\t\"int\",\n\t\t\t\"boolean\",\n\t\t\t\"string\",\n\t\t\t\"string[]\",\n\t\t\t\"number\",\n\t\t\t\"map\",\n\t\t\t\"promise\",\n\t\t\t\"Promise\",\n\t\t\t\"document\",\n\t\t\t\"Document\",\n\t\t\t\"Touch\",\n\t\t\t\"TouchList\",\n\t\t\t\"undefined\"\n\t\t],\n\t\tANNOTATIONS_LINK: 'http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html',\n\t\tANNOTATIONS_NAMESPACE_LINK: 'http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/vocabularies/',\n\n\t\t/**\n\t\t * Adds \"deprecated\" information if such exists to the header area\n\t\t * @param deprecated - object containing information about deprecation\n\t\t * @returns {string} - the deprecated text to display\n\t\t */\n\t\tformatSubtitle: function (deprecated) {\n\t\t\tvar result = \"\";\n\n\t\t\tif (deprecated) {\n\t\t\t\tresult += \"Deprecated in version: \" + deprecated.since;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Formats the target and applies to texts of annotations\n\t\t * @param target - the array of texts to be formatted\n\t\t * @returns string - the formatted text\n\t\t */\n\t\tformatAnnotationTarget: function (target) {\n\t\t\tvar result = \"\";\n\n\t\t\tif (target) {\n\t\t\t\ttarget.forEach(function (element) {\n\t\t\t\t\tresult += element + '<br>';\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresult = this._preProcessLinksInTextBlock(result);\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Formats the namespace of annotations\n\t\t * @param namespace - the namespace to be formatted\n\t\t * @returns string - the formatted text\n\t\t */\n\t\tformatAnnotationNamespace: function (namespace) {\n\t\t\tvar aNamespaceParts = namespace.split(\".\"),\n\t\t\t\tresult, target, text;\n\n\t\t\tif (aNamespaceParts[0] === \"Org\" && aNamespaceParts[1] === \"OData\") {\n\t\t\t\ttarget = this.ANNOTATIONS_NAMESPACE_LINK + namespace + \".xml\";\n\t\t\t\ttext = namespace;\n\t\t\t\tresult = this.handleExternalUrl(target, text);\n\t\t\t} else {\n\t\t\t\tresult = namespace;\n\t\t\t}\n\n\t\t\tresult = this._preProcessLinksInTextBlock(result);\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Formats the description of annotations\n\t\t * @param description - the description of the annotation\n\t\t * @param since - the since version information of the annotation\n\t\t * @returns string - the formatted description\n\t\t */\n\t\tformatAnnotationDescription: function (description, since) {\n\t\t\tvar result = description || \"\";\n\n\t\t\tresult += '<br>For more information, see ' + this.handleExternalUrl(this.ANNOTATIONS_LINK, \"OData v4 Annotations\");\n\n\t\t\tif (since) {\n\t\t\t\tresult += '<br><br><i>Since: ' + since + '.</i>';\n\t\t\t}\n\n\t\t\tresult = this._preProcessLinksInTextBlock(result);\n\t\t\treturn result;\n\t\t},\n\n\t\tformatExceptionLink: function (linkText) {\n\t\t\tlinkText = linkText || '';\n\t\t\treturn linkText.indexOf('sap.ui.') !== -1;\n\t\t},\n\n\t\tformatMethodCode: function (sName, aParams, aReturnValue) {\n\t\t\tvar result = '<pre class=\"prettyprint\">' + sName + '(';\n\n\t\t\tif (aParams && aParams.length > 0) {\n\t\t\t\t/* We consider only root level parameters so we get rid of all that are not on the root level */\n\t\t\t\taParams = aParams.filter(oElem => {\n\t\t\t\t\treturn oElem.depth === undefined;\n\t\t\t\t});\n\t\t\t\taParams.forEach(function (element, index, array) {\n\t\t\t\t\tresult += element.name;\n\n\t\t\t\t\tif (element.optional) {\n\t\t\t\t\t\tresult += '?';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index < array.length - 1) {\n\t\t\t\t\t\tresult += ', ';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresult += ') : ';\n\n\t\t\tif (aReturnValue) {\n\t\t\t\tresult += aReturnValue.type;\n\t\t\t} else {\n\t\t\t\tresult += 'void';\n\t\t\t}\n\n\t\t\tresult += \"</pre>\";\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Formats method deprecation message and pre-process jsDoc link and code blocks\n\t\t * @param {string} sSince since text\n\t\t * @param {string} sDescription deprecation description text\n\t\t * @returns {string} formatted deprecation message\n\t\t */\n\t\tformatMethodDeprecated: function (sSince, sDescription) {\n\t\t\treturn this.formatDeprecated(sSince, sDescription, \"methods\");\n\t\t},\n\n\t\t/**\n\t\t * Formats event deprecation message and pre-process jsDoc link and code blocks\n\t\t * @param {string} sSince since text\n\t\t * @param {string} sDescription deprecation description text\n\t\t * @returns {string} formatted deprecation message\n\t\t */\n\t\tformatEventDeprecated: function (sSince, sDescription) {\n\t\t\treturn this.formatDeprecated(sSince, sDescription, \"events\");\n\t\t},\n\n\t\t/**\n\t\t * Formats the description of control properties\n\t\t * @param description - the description of the property\n\t\t * @param since - the since version information of the property\n\t\t * @returns string - the formatted description\n\t\t */\n\t\tformatDescriptionSince: function (description, since) {\n\t\t\tvar result = description || \"\";\n\n\t\t\tif (since) {\n\t\t\t\tresult += '<br><br><i>Since: ' + since + '.</i>';\n\t\t\t}\n\n\t\t\tresult = this._preProcessLinksInTextBlock(result);\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Formats the default value of the property as a string.\n\t\t * @param defaultValue - the default value of the property\n\t\t * @returns string - The default value of the property formatted as a string.\n\t\t */\n\t\tformatDefaultValue: function (defaultValue) {\n\t\t\tvar sReturn;\n\n\t\t\tswitch (defaultValue) {\n\t\t\t\tcase null:\n\t\t\t\tcase undefined:\n\t\t\t\t\tsReturn = '';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\t\tsReturn = 'empty string';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tsReturn = defaultValue;\n\t\t\t}\n\n\t\t\treturn Array.isArray(sReturn) ? sReturn.join(', ') : sReturn;\n\t\t},\n\n\t\t/**\n\t\t * Formats the constructor of the class\n\t\t * @param name\n\t\t * @param params\n\t\t * @returns string - The code needed to create an object of that class\n\t\t */\n\t\tformatConstructor: function (name, params) {\n\t\t\tvar result = '<pre class=\"prettyprint\">new ';\n\n\t\t\tif (name) {\n\t\t\t\tresult += name + '(';\n\t\t\t}\n\n\t\t\tif (params) {\n\t\t\t\tparams.forEach(function (element, index, array) {\n\t\t\t\t\tresult += element.name;\n\n\t\t\t\t\tif (element.optional) {\n\t\t\t\t\t\tresult += '?';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index < array.length - 1) {\n\t\t\t\t\t\tresult += ', ';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (name) {\n\t\t\t\tresult += ')</pre>';\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\tformatExample: function (sCaption, sText) {\n\t\t\treturn this.formatDescription(\n\t\t\t\t[\"<span><strong>Example: </strong>\",\n\t\t\t\t\tsCaption,\n\t\t\t\t\t\"<pre class='sapUiSmallMarginTop'>\",\n\t\t\t\t\tsText,\n\t\t\t\t\t\"</pre></span>\"].join(\"\")\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Formats the name of a property or a method depending on if it's static or not\n\t\t * @param sName {string} - Name\n\t\t * @param sClassName {string} - Name of the class\n\t\t * @param bStatic {boolean} - If it's static\n\t\t * @returns {string} - Formatted name\n\t\t */\n\t\tformatEntityName: function (sName, sClassName, bStatic) {\n\t\t\treturn (bStatic === true) ? sClassName + \".\" + sName : sName;\n\t\t},\n\n\t\tJSDocUtil: function () {\n\n\t\t\tvar rEscapeRegExp = /[[\\]{}()*+?.\\\\^$|]/g;\n\n\t\t\t// Local mocked methods\n\t\t\tvar escapeRegExp = function escapeRegExp(sString) {\n\t\t\t\treturn sString.replace(rEscapeRegExp, \"\\\\$&\");\n\t\t\t};\n\n\t\t\tfunction defaultLinkFormatter(target, text) {\n\t\t\t\treturn \"<code>\" + (text || target) + \"</code>\";\n\t\t\t}\n\n\t\t\tfunction format(src, options) {\n\n\t\t\t\toptions = options || {};\n\t\t\t\tvar beforeParagraph = options.beforeParagraph === undefined ? '<p>' : options.beforeParagraph;\n\t\t\t\tvar afterParagraph = options.afterParagraph === undefined ? '</p>' : options.afterParagraph;\n\t\t\t\tvar beforeFirstParagraph = options.beforeFirstParagraph === undefined ? beforeParagraph : options.beforeFirstParagraph;\n\t\t\t\tvar afterLastParagraph = options.afterLastParagraph === undefined ? afterParagraph : options.afterLastParagraph;\n\t\t\t\tvar linkFormatter = typeof options.linkFormatter === 'function' ? options.linkFormatter : defaultLinkFormatter;\n\n\t\t\t\t/*\n\t\t\t\t * regexp to recognize important places in the text\n\t\t\t\t *\n\t\t\t\t * Capturing groups of the RegExp:\n\t\t\t\t *   group 1: begin of a pre block\n\t\t\t\t *   group 2: end of a pre block\n\t\t\t\t *   group 3: begin of a header, implicitly ends a paragraph\n\t\t\t\t *   group 4: end of a header, implicitly starts a new paragraph\n\t\t\t\t *   group 5: target portion of an inline @link tag\n\t\t\t\t *   group 6: (optional) text portion of an inline link tag\n\t\t\t\t *   group 7: an empty line which implicitly starts a new paragraph\n\t\t\t\t *\n\t\t\t\t *      [-- <pre> block -] [---- some header ----] [---- an inline [@link ...} tag ----] [---------- an empty line ---------]  */\n\t\t\t\tvar r = /(<pre>)|(<\\/pre>)|(<h[\\d+]>)|(<\\/h[\\d+]>)|\\{@link\\s+([^}\\s]+)(?:\\s+([^\\}]*))?\\}|((?:\\r\\n|\\r|\\n)[ \\t]*(?:\\r\\n|\\r|\\n))/gi;\n\t\t\t\tvar inpre = false;\n\n\t\t\t\tsrc = src || '';\n\t\t\t\tlinkFormatter = linkFormatter || defaultLinkFormatter;\n\n\t\t\t\tsrc = beforeFirstParagraph + src.replace(r, function(match, pre, endpre, header, endheader, linkTarget, linkText, emptyline) {\n\t\t\t\t\tif ( pre ) {\n\t\t\t\t\t\tinpre = true;\n\t\t\t\t\t} else if ( endpre ) {\n\t\t\t\t\t\tinpre = false;\n\t\t\t\t\t} else if ( header ) {\n\t\t\t\t\t\tif ( !inpre ) {\n\t\t\t\t\t\t\treturn afterParagraph + match;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ( endheader ) {\n\t\t\t\t\t\tif ( !inpre ) {\n\t\t\t\t\t\t\treturn match + beforeParagraph;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ( emptyline ) {\n\t\t\t\t\t\tif ( !inpre ) {\n\t\t\t\t\t\t\treturn afterParagraph + beforeParagraph;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ( linkTarget ) {\n\t\t\t\t\t\tif ( !inpre ) {\n\t\t\t\t\t\t\treturn linkFormatter(linkTarget, linkText);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn match;\n\t\t\t\t}) + afterLastParagraph;\n\n\t\t\t\t// remove empty paragraphs\n\t\t\t\tif (beforeParagraph !== \"\" && afterParagraph !== \"\") {\n\t\t\t\t\tsrc = src.replace(new RegExp(escapeRegExp(beforeParagraph) + \"\\\\s*\" + escapeRegExp(afterParagraph), \"g\"), \"\");\n\t\t\t\t}\n\n\t\t\t\treturn src;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tformatTextBlock: format\n\t\t\t};\n\n\t\t},\n\n\t\thandleExternalUrl: function (sTarget, sText) {\n\t\t\t// Check if the external domain is SAP hosted\n\t\t\tlet bSAPHosted = /^https?:\\/\\/([\\w.]*\\.)?(?:sap|hana\\.ondemand|sapfioritrial)\\.com/.test(sTarget);\n\n\t\t\treturn `<a target=\"_blank\" rel=\"noopener\" href=\"${sTarget}\">${sText}</a>\n<img src=\"./resources/sap/ui/documentation/sdk/images/${bSAPHosted ? 'link-sap' : 'link-external'}.png\"\ntitle=\"Information published on ${bSAPHosted ? '' : 'non '}SAP site\" class=\"sapUISDKExternalLink\"/>`;\n\t\t},\n\n\t\t/**\n\t\t * Discover possible target type by looking at symbols from own and depending libraries\n\t\t * @param {string} target\n\t\t * @param {object} self\n\t\t * @param {object} ownLibrary\n\t\t * @param {object} dependencyLibs\n\t\t * @param {boolean} module\n\t\t * @returns {string}\n\t\t */\n\t\tcreateLinkFromTargetType: function ({className, methodName, target, self, ownLibrary, dependencyLibs, text}) {\n\t\t\tlet sResult;\n\n\t\t\tfunction searchInSymbol(oSymbol) {\n\t\t\t\tfunction findProperty(oEntity, sName, sTarget) {\n\t\t\t\t\tif (!oEntity || !oEntity.properties) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn oEntity.properties.find(({name}) => name === sName || name === sTarget);\n\t\t\t\t}\n\n\t\t\t\tfunction findMethod(oEntity, sName, sTarget) {\n\t\t\t\t\tif (!oEntity || !oEntity.methods) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn oEntity.methods.find(({name}) => name === sName || name === sTarget);\n\t\t\t\t}\n\n\t\t\t\tfunction findEvent(oEntity, sName) {\n\t\t\t\t\tif (!oEntity || !oEntity.events) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn oEntity.events.find(({name}) => name === sName);\n\t\t\t\t}\n\n\t\t\t\tif (oSymbol.name === target) {\n\t\t\t\t\tsResult = this.createLink({\n\t\t\t\t\t\tname: oSymbol.name,\n\t\t\t\t\t\ttext: text\n\t\t\t\t\t});\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (oSymbol.name === className) {\n\t\t\t\t\tlet oProperty = findProperty(oSymbol, methodName, target);\n\t\t\t\t\tif (oProperty) {\n\t\t\t\t\t\tsResult = this.createLink({\n\t\t\t\t\t\t\tname: className,\n\t\t\t\t\t\t\ttext: text\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tlet oMethod = findMethod(oSymbol, methodName, target);\n\t\t\t\t\tif (oMethod) {\n\t\t\t\t\t\tsResult = this.createLink({\n\t\t\t\t\t\t\tname: oMethod.static ? target : oMethod.name,\n\t\t\t\t\t\t\ttype: \"methods\",\n\t\t\t\t\t\t\ttext: text,\n\t\t\t\t\t\t\tclassName: className\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oEvent = findEvent(oSymbol, methodName);\n\t\t\t\t\tif (oEvent) {\n\t\t\t\t\t\tsResult = this.createLink({\n\t\t\t\t\t\t\tname: oEvent.name,\n\t\t\t\t\t\t\ttype: \"events\",\n\t\t\t\t\t\t\ttext: text,\n\t\t\t\t\t\t\tclassName: className\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Self link\n\t\t\tif (self.name === target) {\n\t\t\t\treturn this.createLink({\n\t\t\t\t\tname: target,\n\t\t\t\t\ttext: text\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Own methods search\n\t\t\tif (self.name === className && self.methods) {\n\t\t\t\tlet oResult = self.methods.find(({name}) => name === methodName);\n\t\t\t\tif (oResult) {\n\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\tname: oResult.static ? [self.name, oResult.name].join(\".\") : oResult.name,\n\t\t\t\t\t\ttype: \"methods\",\n\t\t\t\t\t\tclassName: className,\n\t\t\t\t\t\ttext: text,\n\t\t\t\t\t\tlocal: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Local library symbols\n\t\t\townLibrary.symbols.find(oSymbol => {\n\t\t\t\treturn searchInSymbol.call(this, oSymbol);\n\t\t\t});\n\n\t\t\tif (sResult) return sResult;\n\n\t\t\t// Dependent library symbols\n\t\t\tdependencyLibs && Object.keys(dependencyLibs).find(sLib => {\n\t\t\t\tif (sLib === target) {\n\t\t\t\t\tsResult = this.createLink({\n\t\t\t\t\t\tname: sLib,\n\t\t\t\t\t\ttext: text\n\t\t\t\t\t});\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tlet oLib = dependencyLibs[sLib];\n\t\t\t\treturn oLib && oLib.find(oSymbol => {\n\t\t\t\t\treturn searchInSymbol.call(this, oSymbol);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn sResult;\n\t\t},\n\n\t\t/**\n\t\t * Creates a html link\n\t\t * @param {string} name\n\t\t * @param {string} type\n\t\t * @param {string} className\n\t\t * @param {string} [text=name] by default if no text is provided the name will be used\n\t\t * @param {boolean} [local=false]\n\t\t * @param {string} [hrefAppend=\"\"]\n\t\t * @returns {string} link\n\t\t */\n\t\tcreateLink: function ({name, type, className, text=name, local=false, hrefAppend=\"\"}) {\n\t\t\tlet sLink;\n\n\t\t\t// handling module's\n\t\t\tif (className !== undefined && (/^module:/.test(name) || /^module:/.test(className))) {\n\t\t\t\tname = name.replace(/^module:/, \"\");\n\t\t\t}\n\n\t\t\t// Build the link\n\t\t\tsLink = type ? `${className}#${type}/${name}` : name;\n\n\t\t\tif (hrefAppend) {\n\t\t\t\tsLink += hrefAppend;\n\t\t\t}\n\n\t\t\tif (local) {\n\t\t\t\treturn `<a target=\"_self\" class=\"jsdoclink scrollTo${type === `events` ? `Event` : `Method`}\" data-target=\"${name}\" href=\"api/${sLink}\">${text}</a>`;\n\t\t\t}\n\n\t\t\treturn `<a target=\"_self\" class=\"jsdoclink\" href=\"api/${sLink}\">${text}</a>`;\n\t\t},\n\n\t\t/**\n\t\t * Pre-process links in text block\n\t\t * @param {string} sText text block\n\t\t * @param {boolean} bSkipParagraphs skip paragraphs\n\t\t * @returns {string} processed text block\n\t\t * @private\n\t\t */\n\t\t_preProcessLinksInTextBlock: function (sText, bSkipParagraphs) {\n\t\t\tlet oSelf = this._oTopicData,\n\t\t\t\toOwnLibrary = this._oOwnLibrary,\n\t\t\t\toDependencyLibs = oChainObject.oDependentAPIs,\n\t\t\t\toOptions = {\n\t\t\t\t\tlinkFormatter: function (sTarget, sText) {\n\t\t\t\t\t\tlet aMatch,\n\t\t\t\t\t\t\taTarget;\n\n\t\t\t\t\t\t// keep the full target in the fallback text\n\t\t\t\t\t\tsText = sText || sTarget;\n\n\t\t\t\t\t\t// If the link has a protocol, do not modify, but open in a new window\n\t\t\t\t\t\tif (/:\\/\\//.test(sTarget)) {\n\t\t\t\t\t\t\treturn this.handleExternalUrl(sTarget, sText);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// topic:xxx Topic\n\t\t\t\t\t\taMatch = sTarget.match(/^topic:(\\w{32})$/);\n\t\t\t\t\t\tif (aMatch) {\n\t\t\t\t\t\t\treturn '<a target=\"_self\" href=\"topic/' + aMatch[1] + '\">' + sText + '</a>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sap.x.Xxx.prototype.xxx - In case of prototype we have a link to method\n\t\t\t\t\t\taMatch = sTarget.match(/([a-zA-Z0-9.$_]+?)\\.prototype\\.([a-zA-Z0-9.$_]+)$/);\n\t\t\t\t\t\tif (aMatch) {\n\t\t\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\t\t\tname: aMatch[2],\n\t\t\t\t\t\t\t\ttype: \"methods\",\n\t\t\t\t\t\t\t\tclassName: aMatch[1],\n\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Heuristics: Extend is always a static method\n\t\t\t\t\t\t// sap.x.Xxx.extend\n\t\t\t\t\t\t// module:sap/x/Xxx.extend\n\t\t\t\t\t\taMatch = sTarget.match(/^(module:)?([a-zA-Z0-9.$_\\/]+?)\\.extend$/);\n\t\t\t\t\t\tif (aMatch) {\n\t\t\t\t\t\t\tlet [, sModule, sClass] = aMatch;\n\t\t\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\t\t\tname: sTarget.replace(/^module:/, \"\"),\n\t\t\t\t\t\t\t\ttype: \"methods\",\n\t\t\t\t\t\t\t\tclassName: (sModule ? sModule : \"\") + sClass,\n\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Constructor links are handled in special manner by the SDK\n\t\t\t\t\t\t// sap.x.Xxx.constructor\n\t\t\t\t\t\t// sap.x.Xxx#constructor\n\t\t\t\t\t\t// module:sap/x/Xxx.constructor\n\t\t\t\t\t\t// #constructor\n\t\t\t\t\t\taMatch = sTarget.match(/^(module:)?([a-zA-Z0-9.$_\\/]+?)?[\\.#]constructor$/i);\n\t\t\t\t\t\tif (aMatch) {\n\t\t\t\t\t\t\tlet [, sModule, sClass] = aMatch,\n\t\t\t\t\t\t\t\tsName;\n\n\t\t\t\t\t\t\tif (sClass) {\n\t\t\t\t\t\t\t\tsName = (sModule ? sModule : \"\") + sClass;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsName = oSelf.name\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\t\t\tname: sName,\n\t\t\t\t\t\t\t\threfAppend: \"#constructor\",\n\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// #.setText - local static method\n\t\t\t\t\t\t// #setText - local instance method\n\t\t\t\t\t\t// #.setText.from - local nested method\n\t\t\t\t\t\taMatch = sTarget.match(/^#(\\.)?([a-zA-Z0-9.$_]+)$/);\n\t\t\t\t\t\tif (aMatch) {\n\t\t\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\t\t\tname: aMatch[1] ? `${oSelf.name}.${aMatch[2]}` : aMatch[2],\n\t\t\t\t\t\t\t\ttype: \"methods\",\n\t\t\t\t\t\t\t\tclassName: oSelf.name,\n\t\t\t\t\t\t\t\tlocal: true,\n\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// #event:press - local event\n\t\t\t\t\t\taMatch = sTarget.match(/^#event:([a-zA-Z0-9$_]+)$/);\n\t\t\t\t\t\tif (aMatch) {\n\t\t\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\t\t\tname: aMatch[1],\n\t\t\t\t\t\t\t\ttype: \"events\",\n\t\t\t\t\t\t\t\tclassName: oSelf.name,\n\t\t\t\t\t\t\t\tlocal: true,\n\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Event links\n\t\t\t\t\t\t// sap.m.Button#event:press\n\t\t\t\t\t\t// sap.m.Button.event:press\n\t\t\t\t\t\t// module:sap/m/Button.event:press\n\t\t\t\t\t\t// module:sap/m/Button#event:press\n\t\t\t\t\t\taMatch = sTarget.match(/^(module:)?([a-zA-Z0-9.$_\\/]+?)[.#]event:([a-zA-Z0-9$_]+)$/);\n\t\t\t\t\t\tif (aMatch) {\n\t\t\t\t\t\t\tlet [, sModule, sClass, sEvent] = aMatch;\n\t\t\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\t\t\tname: sEvent,\n\t\t\t\t\t\t\t\ttype: \"events\",\n\t\t\t\t\t\t\t\tclassName: (sModule ? sModule : \"\") + sClass,\n\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sap.m.Button#setText - instance method\n\t\t\t\t\t\t// module:sap/m/Button#setText\n\t\t\t\t\t\taMatch = sTarget.match(/^(module:)?([a-zA-Z0-9.$_\\/]+)#([a-zA-Z0-9.$_]+)$/);\n\t\t\t\t\t\tif (aMatch) {\n\t\t\t\t\t\t\tlet [, sModule, sClass, sMethod] = aMatch;\n\t\t\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\t\t\tname: sMethod,\n\t\t\t\t\t\t\t\ttype: \"methods\",\n\t\t\t\t\t\t\t\tclassName: (sModule ? sModule : \"\") + sClass,\n\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Unresolved type - try to discover target type\n\t\t\t\t\t\t// sap.x.Xxx.xxx\n\t\t\t\t\t\t// module:sap/x/Xxx.xxx\n\t\t\t\t\t\tif (/^(?:module:)?([a-zA-Z0-9.$_\\/]+?)\\.([a-zA-Z0-9$_]+)$/.test(sTarget)) {\n\t\t\t\t\t\t\tlet [,sClass, sName] = sTarget.match(/^((?:module:)?[a-zA-Z0-9.$_\\/]+?)\\.([a-zA-Z0-9$_]+)$/),\n\t\t\t\t\t\t\t\tsResult = this.createLinkFromTargetType({\n\t\t\t\t\t\t\t\t\tclassName: sClass,\n\t\t\t\t\t\t\t\t\tmethodName: sName,\n\t\t\t\t\t\t\t\t\ttarget: sTarget,\n\t\t\t\t\t\t\t\t\tself: oSelf,\n\t\t\t\t\t\t\t\t\townLibrary: oOwnLibrary,\n\t\t\t\t\t\t\t\t\tdependencyLibs: oDependencyLibs,\n\t\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (sResult) {\n\t\t\t\t\t\t\t\treturn sResult;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Possible nested functions discovery - currently we do this only for regular symbols\n\t\t\t\t\t\taTarget = sTarget.split(\".\");\n\t\t\t\t\t\tif (aTarget.length >= 3) {\n\t\t\t\t\t\t\tlet sResult = this.createLinkFromTargetType({\n\t\t\t\t\t\t\t\tmethodName: aTarget.splice(-2).join(\".\"),\n\t\t\t\t\t\t\t\tclassName: aTarget.join(\".\"),\n\t\t\t\t\t\t\t\ttarget: sTarget,\n\t\t\t\t\t\t\t\tself: oSelf,\n\t\t\t\t\t\t\t\townLibrary: oOwnLibrary,\n\t\t\t\t\t\t\t\tdependencyLibs: oDependencyLibs,\n\t\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (sResult) {\n\t\t\t\t\t\t\t\treturn sResult;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Possible forward reference - we will treat them as symbol link\n\t\t\t\t\t\treturn this.createLink({\n\t\t\t\t\t\t\tname: sTarget,\n\t\t\t\t\t\t\ttext: sText\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}.bind(this)\n\t\t\t\t};\n\n\t\t\tif (bSkipParagraphs) {\n\t\t\t\toOptions.beforeParagraph = \"\";\n\t\t\t\toOptions.afterParagraph = \"\";\n\t\t\t}\n\n\t\t\treturn this.JSDocUtil().formatTextBlock(sText, oOptions);\n\t\t},\n\n\t\t/**\n\t\t * Formatter for Overview section\n\t\t * @param {string} sDescription - Class about description\n\t\t * @param {array} aReferences - References\n\t\t * @returns {string} - formatted text block\n\t\t */\n\t\tformatOverviewDescription: function (sDescription, aReferences) {\n\t\t\tvar iLen,\n\t\t\t\ti;\n\n\t\t\t// format references\n\t\t\tif (aReferences && aReferences.length > 0) {\n\t\t\t\tsDescription += \"<br><br><span>Documentation links:</span><ul>\";\n\n\t\t\t\tiLen = aReferences.length;\n\t\t\t\tfor (i = 0; i < iLen; i++) {\n\t\t\t\t\t// We treat references as links but as they may not be defined as such we enforce it if needed\n\t\t\t\t\tif (/{@link.*}/.test(aReferences[i])) {\n\t\t\t\t\t\tsDescription += \"<li>\" + aReferences[i] + \"</li>\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsDescription += \"<li>{@link \" + aReferences[i] + \"}</li>\";\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsDescription += \"</ul>\";\n\t\t\t}\n\n\t\t\t// Calling formatDescription so it could handle further formatting\n\t\t\treturn this.formatDescription(sDescription);\n\t\t},\n\n\t\t/**\n\t\t * Formats the description of the property\n\t\t * @param description - the description of the property\n\t\t * @param deprecatedText - the text explaining this property is deprecated\n\t\t * @param deprecatedSince - the version when this property was deprecated\n\t\t * @returns string - the formatted description\n\t\t */\n\t\tformatDescription: function (description, deprecatedText, deprecatedSince) {\n\t\t\tif (!description && !deprecatedText && !deprecatedSince) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\tvar result = description || \"\";\n\n\t\t\tif (deprecatedSince || deprecatedText) {\n\t\t\t\t// Note: sapUiDocumentationDeprecated - transformed to sapUiDeprecated to keep json file size low\n\t\t\t\tresult += \"<span class=\\\"sapUiDeprecated\\\"><br>\";\n\n\t\t\t\tresult += this.formatDeprecated(deprecatedSince, deprecatedText);\n\n\t\t\t\tresult += \"</span>\";\n\t\t\t}\n\n\t\t\tresult = this._preProcessLinksInTextBlock(result);\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Formats the entity deprecation message and pre-process jsDoc link and code blocks\n\t\t * @param {string} sSince since text\n\t\t * @param {string} sDescription deprecation description text\n\t\t * @param {string} sEntityType string representation of entity type\n\t\t * @returns {string} formatted deprecation message\n\t\t */\n\t\tformatDeprecated: function (sSince, sDescription, sEntityType) {\n\t\t\tvar aResult;\n\n\t\t\t// Build deprecation message\n\t\t\t// Note: there may be no since or no description text available\n\t\t\taResult = [\"Deprecated\"];\n\t\t\tif (sSince) {\n\t\t\t\taResult.push(\" as of version \" + sSince);\n\t\t\t}\n\t\t\tif (sDescription) {\n\t\t\t\t// Evaluate code blocks - Handle <code>...</code> pattern\n\t\t\t\tsDescription = sDescription.replace(/<code>(\\S+)<\\/code>/gi, function (sMatch, sCodeEntity) {\n\t\t\t\t\t\treturn ['<em>', sCodeEntity, '</em>'].join(\"\");\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Evaluate links in the deprecation description\n\t\t\t\taResult.push(\". \" + this._preProcessLinksInTextBlock(sDescription, true));\n\t\t\t}\n\n\t\t\treturn aResult.join(\"\");\n\t\t},\n\n\t\t/**\n\t\t * Pre-process and modify references\n\t\t * @param {object} oSymbol control data object which will be modified\n\t\t * @private\n\t\t */\n\t\tmodifyReferences: function (oSymbol, bCalledOnConstructor) {\n\t\t\tvar bHeaderDocuLinkFound = false,\n\t\t\t\tbUXGuidelinesLinkFound = false,\n\t\t\t\taReferences = [],\n\t\t\t\tentity = bCalledOnConstructor? oSymbol.constructor.references : oSymbol.references;\n\n\t\t\tconst UX_GUIDELINES_BASE_URL = \"https://experience.sap.com/fiori-design-web/\";\n\n\t\t\tif (entity && entity.length > 0) {\n\t\t\t\tentity.forEach(function (sReference) {\n\t\t\t\t\tvar aParts;\n\n\t\t\t\t\t// Docu link - For the header we take into account only the first link that matches one of the patterns\n\t\t\t\t\tif (!bHeaderDocuLinkFound) {\n\n\t\t\t\t\t\t// Handled patterns:\n\t\t\t\t\t\t// * topic:59a0e11712e84a648bb990a1dba76bc7\n\t\t\t\t\t\t// * {@link topic:59a0e11712e84a648bb990a1dba76bc7}\n\t\t\t\t\t\t// * {@link topic:59a0e11712e84a648bb990a1dba76bc7 Link text}\n\t\t\t\t\t\taParts = sReference.match(/^{@link\\s+topic:(\\w{32})(\\s.+)?}$|^topic:(\\w{32})$/);\n\n\t\t\t\t\t\tif (aParts) {\n\t\t\t\t\t\t\tif (aParts[3]) {\n\t\t\t\t\t\t\t\t// Link is of type topic:GUID\n\t\t\t\t\t\t\t\toSymbol.docuLink = aParts[3];\n\t\t\t\t\t\t\t\toSymbol.docuLinkText = oSymbol.basename;\n\t\t\t\t\t\t\t} else if (aParts[1]) {\n\t\t\t\t\t\t\t\t// Link of type {@link topic:GUID} or {@link topic:GUID Link text}\n\t\t\t\t\t\t\t\toSymbol.docuLink = aParts[1];\n\t\t\t\t\t\t\t\toSymbol.docuLinkText = aParts[2] ? aParts[2] : oSymbol.basename;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbHeaderDocuLinkFound = true;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fiori link - Handled patterns:\n\t\t\t\t\t// * fiori:flexible-column-layout\n\t\t\t\t\t// * fiori:/flexible-column-layout/\n\t\t\t\t\t// * fiori:https://experience.sap.com/fiori-design-web/flexible-column-layout/\n\t\t\t\t\t// * {@link fiori:flexible-column-layout}\n\t\t\t\t\t// * {@link fiori:/flexible-column-layout/}\n\t\t\t\t\t// * {@link fiori:/flexible-column-layout/ Flexible Column Layout}\n\t\t\t\t\t// * {@link fiori:https://experience.sap.com/fiori-design-web/flexible-column-layout/}\n\t\t\t\t\t// * {@link fiori:https://experience.sap.com/fiori-design-web/flexible-column-layout/ Flexible Column Layout}\n\t\t\t\t\taParts = sReference.match(/^(?:{@link\\s)?fiori:(?:https:\\/\\/experience\\.sap\\.com\\/fiori-design-web\\/)?\\/?(\\S+\\b)\\/?\\s?(.*[^\\s}])?}?$/);\n\n\t\t\t\t\tif (aParts) {\n\t\t\t\t\t\tlet [, sTarget, sTargetName] = aParts;\n\n\t\t\t\t\t\tif (bCalledOnConstructor && !bUXGuidelinesLinkFound) {\n\t\t\t\t\t\t\t// Extract first found UX Guidelines link as primary\n\t\t\t\t\t\t\toSymbol.uxGuidelinesLink = UX_GUIDELINES_BASE_URL + sTarget;\n\t\t\t\t\t\t\toSymbol.uxGuidelinesLinkText = sTargetName ? sTargetName : oSymbol.basename;\n\t\t\t\t\t\t\tbUXGuidelinesLinkFound = true;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// BCP: 1870155880 - Every consecutive \"fiori:\" link should be handled as a normal link\n\t\t\t\t\t\t\tsReference = \"{@link \" + UX_GUIDELINES_BASE_URL + sTarget + (sTargetName ? \" \" + sTargetName : \"\") + \"}\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\taReferences.push(sReference);\n\t\t\t\t});\n\t\t\t\tbCalledOnConstructor? oSymbol.constructor.references = aReferences : oSymbol.references = aReferences;\n\t\t\t} else {\n\t\t\t\tbCalledOnConstructor? oSymbol.constructor.references = [] : oSymbol.references = [];\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Manage References, to apply as an unordered list in the description\n\t\t * @param {object} oEntity control data object which will be modified\n\t\t * @private\n\t\t */\n\t\tformatReferencesInDescription: function(oEntity) {\n\t\t\tif (oEntity.references && Array.isArray(oEntity.references)) {\n\t\t\t\toEntity.references = oEntity.references.map(sReference => {\n\t\t\t\t\treturn `<li>${sReference}</li>`;\n\t\t\t\t});\n\t\t\t\tif (!oEntity.description) {\n\t\t\t\t\t// If there is no method description - references should be the first line of it\n\t\t\t\t\toEntity.description = '';\n\t\t\t\t} else {\n\t\t\t\t\toEntity.description += '<br><br>';\n\t\t\t\t}\n\t\t\t\toEntity.description += `References: <ul>${oEntity.references.join(\"\")}</ul>`;\n\t\t\t}\n\t\t}\n\t};\n\n\t/* Methods direct copy from API Detail */\n\tlet methods = {\n\n\t\t/**\n\t\t * Adjusts methods info so that it can be easily displayed in a table\n\t\t * @param aMethods - the methods array initially coming from the server\n\t\t */\n\t\tbuildMethodsModel: function (aMethods) {\n\t\t\tvar fnCreateTypesArr = function (sTypes) {\n\t\t\t\treturn sTypes.split(\"|\").map(function (sType) {\n\t\t\t\t\treturn {value: sType}\n\t\t\t\t});\n\t\t\t};\n\t\t\tvar fnExtractParameterProperties = function (oParameter, aParameters, iDepth, aPhoneName) {\n\t\t\t\tif (oParameter.parameterProperties) {\n\t\t\t\t\tObject.keys(oParameter.parameterProperties).forEach(function (sProperty) {\n\t\t\t\t\t\tvar oProperty = oParameter.parameterProperties[sProperty];\n\n\t\t\t\t\t\toProperty.depth = iDepth;\n\n\t\t\t\t\t\t// Handle types\n\t\t\t\t\t\tif (oProperty.type) {\n\t\t\t\t\t\t\toProperty.types = fnCreateTypesArr(oProperty.type);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Phone name - available only for parameters\n\t\t\t\t\t\toProperty.phoneName = [aPhoneName.join(\".\"), oProperty.name].join(\".\");\n\n\t\t\t\t\t\t// Add property to parameter array as we need a simple structure\n\t\t\t\t\t\taParameters.push(oProperty);\n\n\t\t\t\t\t\t// Handle child parameterProperties\n\t\t\t\t\t\tfnExtractParameterProperties(oProperty, aParameters, (iDepth + 1), aPhoneName.concat([oProperty.name]));\n\n\t\t\t\t\t\t// Keep file size in check\n\t\t\t\t\t\tdelete oProperty.type;\n\t\t\t\t\t});\n\n\t\t\t\t\t// Keep file size in check\n\t\t\t\t\tdelete oParameter.parameterProperties;\n\t\t\t\t}\n\t\t\t};\n\t\t\taMethods.forEach(function (oMethod) {\n\t\t\t\t// New array to hold modified parameters\n\t\t\t\tvar aParameters = [];\n\n\t\t\t\t// Handle parameters\n\t\t\t\tif (oMethod.parameters) {\n\t\t\t\t\toMethod.parameters.forEach(function (oParameter) {\n\t\t\t\t\t\tif (oParameter.type) {\n\t\t\t\t\t\t\toParameter.types = fnCreateTypesArr(oParameter.type);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Keep file size in check\n\t\t\t\t\t\tdelete oParameter.type;\n\n\t\t\t\t\t\t// Add the parameter before the properties\n\t\t\t\t\t\taParameters.push(oParameter);\n\n\t\t\t\t\t\t// Handle Parameter Properties\n\t\t\t\t\t\t// Note: We flatten the structure\n\t\t\t\t\t\tfnExtractParameterProperties(oParameter, aParameters, 1, [oParameter.name]);\n\n\t\t\t\t\t});\n\n\t\t\t\t\t// Override the old data\n\t\t\t\t\toMethod.parameters = aParameters;\n\t\t\t\t}\n\n\t\t\t\t// Handle return values\n\t\t\t\tif (oMethod.returnValue && oMethod.returnValue.type) {\n\t\t\t\t\t// Handle types\n\t\t\t\t\toMethod.returnValue.types = fnCreateTypesArr(oMethod.returnValue.type);\n\t\t\t\t}\n\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Adjusts events info so that it can be easily displayed in a table\n\t\t * @param {Array} aEvents - the events array initially coming from the server\n\t\t */\n\t\tbuildEventsModel: function (aEvents) {\n\t\t\tvar fnExtractParameterProperties = function (oParameter, aParameters, iDepth, aPhoneName) {\n\t\t\t\tif (oParameter.parameterProperties) {\n\t\t\t\t\tObject.keys(oParameter.parameterProperties).forEach(function (sProperty) {\n\t\t\t\t\t\tvar oProperty = oParameter.parameterProperties[sProperty],\n\t\t\t\t\t\t\tsPhoneTypeSuffix;\n\n\t\t\t\t\t\toProperty.depth = iDepth;\n\n\t\t\t\t\t\t// Phone name - available only for parameters\n\t\t\t\t\t\tsPhoneTypeSuffix = oProperty.type === \"array\" ? \"[]\" : \"\";\n\t\t\t\t\t\toProperty.phoneName = [aPhoneName.join(\".\"), (oProperty.name + sPhoneTypeSuffix)].join(\".\");\n\n\t\t\t\t\t\t// Add property to parameter array as we need a simple structure\n\t\t\t\t\t\taParameters.push(oProperty);\n\n\t\t\t\t\t\t// Handle child parameterProperties\n\t\t\t\t\t\tfnExtractParameterProperties(oProperty, aParameters, (iDepth + 1),\n\t\t\t\t\t\t\taPhoneName.concat([oProperty.name + sPhoneTypeSuffix]));\n\t\t\t\t\t});\n\n\t\t\t\t\t// Keep file size in check\n\t\t\t\t\tdelete oParameter.parameterProperties;\n\t\t\t\t}\n\t\t\t};\n\t\t\taEvents.forEach(function (aEvents) {\n\t\t\t\t// New array to hold modified parameters\n\t\t\t\tvar aParameters = [];\n\n\t\t\t\t// Handle parameters\n\t\t\t\tif (aEvents.parameters) {\n\t\t\t\t\taEvents.parameters.forEach(function (oParameter) {\n\t\t\t\t\t\t// Add the parameter before the properties\n\t\t\t\t\t\taParameters.push(oParameter);\n\n\t\t\t\t\t\t// Handle Parameter Properties\n\t\t\t\t\t\t// Note: We flatten the structure\n\t\t\t\t\t\tfnExtractParameterProperties(oParameter, aParameters, 1, [oParameter.name]);\n\t\t\t\t\t});\n\n\t\t\t\t\t// Override the old data\n\t\t\t\t\taEvents.parameters = aParameters;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Adjusts constructor parameters info so that it can be easily displayed in a table\n\t\t * @param {Array} aParameters - the events array initially coming from the server\n\t\t */\n\t\tbuildConstructorParameters: function (aParameters) {\n\t\t\t// New array to hold modified parameters\n\t\t\tvar aNodes = [],\n\t\t\t\tprocessNode = function (oNode, sPhoneName, iDepth, aNodes) {\n\t\t\t\t\t// Handle phone name\n\t\t\t\t\toNode.phoneName = sPhoneName ? [sPhoneName, oNode.name].join(\".\") : oNode.name;\n\n\t\t\t\t\t// Depth\n\t\t\t\t\toNode.depth = iDepth;\n\n\t\t\t\t\t// Add to array\n\t\t\t\t\taNodes.push(oNode);\n\n\t\t\t\t\t// Handle nesting\n\t\t\t\t\tif (oNode.parameterProperties) {\n\t\t\t\t\t\tObject.keys(oNode.parameterProperties).forEach(function (sNode) {\n\t\t\t\t\t\t\tprocessNode(oNode.parameterProperties[sNode], oNode.phoneName, (iDepth + 1), aNodes);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete oNode.parameterProperties;\n\t\t\t\t};\n\n\t\t\taParameters.forEach(function (oParameter) {\n\t\t\t\t// Handle Parameter Properties\n\t\t\t\t// Note: We flatten the structure\n\t\t\t\tprocessNode(oParameter, undefined, 0, aNodes);\n\t\t\t});\n\n\t\t\treturn aNodes;\n\t\t},\n\n\t\toLibsData: {},\n\n\t};\n\n\t// Create the chain object\n\tlet oChainObject = {\n\t\tinputFile: sInputFile,\n\t\toutputFile: sOutputFile,\n\t\tlibraryFile: sLibraryFile,\n\t\taDependentLibraryFiles: Array.isArray(vDependencyAPIFiles) ? vDependencyAPIFiles : null\n\t};\n\n\t// Start the work here\n\tlet p = getLibraryPromise(oChainObject)\n\t\t.then(extractComponentAndDocuindexUrl)\n\t\t.then(flattenComponents)\n\t\t.then(extractSamplesFromDocuIndex)\n\t\t.then(getDependencyLibraryFilesList)\n\t\t.then(getAPIJSONPromise)\n\t\t.then(loadDependencyLibraryFiles)\n\t\t.then(transformApiJson)\n\t\t.then(addFlagsForFAQData)\n\t\t.then(createApiRefApiJson);\n\treturn p;\n\n};\n\nmodule.exports = transformer;\n\n",
    "test/lib/processors/resourceListCreator.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nconst resourceFactory = require(\"@ui5/fs\").resourceFactory;\n\ntest.beforeEach((t) => {\n\tt.context.resourceListCreatorLog = {\n\t\terror: sinon.stub(),\n\t\tverbose: sinon.stub()\n\t};\n\tt.context.ResourceCollectorLog = {\n\t\terror: sinon.stub(),\n\t\twarn: sinon.stub(),\n\t\tverbose: sinon.stub()\n\t};\n\tconst logger = require(\"@ui5/logger\");\n\tsinon.stub(logger, \"getLogger\")\n\t\t.callThrough() // Ensures that other loggers are not affected\n\t\t.withArgs(\"builder:processors:resourceListCreator\").returns(t.context.resourceListCreatorLog)\n\t\t.withArgs(\"lbt:resources:ResourceCollector\").returns(t.context.ResourceCollectorLog);\n\n\tconst XMLTemplateAnalyzer = require(\"../../../lib/lbt/analyzer/XMLTemplateAnalyzer\");\n\tt.context.XMLTemplateAnalyzerAnalyzeViewSpy = sinon.spy(XMLTemplateAnalyzer.prototype, \"analyzeView\");\n\n\t// Re-require tested modules\n\tmock.reRequire(\"../../../lib/lbt/resources/ResourceCollector\");\n\tt.context.resourceListCreator = mock.reRequire(\"../../../lib/processors/resourceListCreator\");\n});\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.serial(\"Empty resources\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog} = t.context;\n\n\tconst result = await resourceListCreator({\n\t\tresources: []\n\t});\n\tt.deepEqual(result, []);\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 1);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 0 resources\"]);\n});\n\ntest.serial(\"Empty resources but options\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog} = t.context;\n\n\tconst result = await resourceListCreator({\n\t\tresources: [],\n\t\toptions: {\n\t\t\texternalResources: {\n\t\t\t\t\"mycomp\": [\".*dbg.js\"]\n\t\t\t}\n\t\t}\n\t});\n\tt.deepEqual(result, []);\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 1);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 0 resources\"]);\n});\n\ntest.serial(\"Orphaned resources\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog} = t.context;\n\n\t// Does not fail by default\n\tconst resource = resourceFactory.createResource({\n\t\tpath: \"/resources/nomodule.foo\",\n\t\tstring: \"bar content\"\n\t});\n\tawait resourceListCreator({\n\t\tresources: [resource]\n\t});\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 1);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 1 resources\"]);\n});\n\ntest.serial(\"Orphaned resources (failOnOrphans: true)\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog} = t.context;\n\n\tconst resource = resourceFactory.createResource({\n\t\tpath: \"/resources/nomodule.foo\",\n\t\tstring: \"bar content\"\n\t});\n\tconst errorObject = await t.throwsAsync(() => {\n\t\treturn resourceListCreator({\n\t\t\tresources: [resource],\n\t\t\toptions: {\n\t\t\t\tfailOnOrphans: true\n\t\t\t}\n\t\t});\n\t});\n\tt.is(errorObject.message,\n\t\t\"resources.json generation failed with error: \" +\n\t\t\"There are 1 resources which could not be assigned to components.\");\n\tt.is(resourceListCreatorLog.error.callCount, 1);\n\tt.is(resourceListCreatorLog.error.getCall(0).args[0],\n\t\t\"resources.json generation failed because of unassigned resources: nomodule.foo\");\n\tt.is(resourceListCreatorLog.verbose.callCount, 1);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 1 resources\"]);\n});\n\ntest.serial(\"Components and themes\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog} = t.context;\n\n\tconst componentResource = resourceFactory.createResource({\n\t\tpath: \"/resources/mylib/manifest.json\",\n\t\tstring: \"bar content\"\n\t});\n\tconst themeResource = resourceFactory.createResource({\n\t\tpath: \"/resources/themes/a/.theming\",\n\t\tstring: \"base less content\"\n\t});\n\tconst resources = await resourceListCreator({\n\t\tresources: [componentResource, themeResource]\n\t});\n\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 3);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 2 resources\"]);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(1).args,\n\t\t[\"\\twriting 'mylib/resources.json'\"]);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(2).args,\n\t\t[\"\\twriting 'themes/a/resources.json'\"]);\n\n\n\tt.is(resources.length, 2);\n\tconst libResourceJson = resources[0];\n\tconst themeResourceJson = resources[1];\n\tt.is(libResourceJson.getPath(), \"/resources/mylib/resources.json\");\n\tt.is(themeResourceJson.getPath(), \"/resources/themes/a/resources.json\");\n\n\tconst libResourcesJsonContent = await libResourceJson.getString();\n\tconst themeResourcesJsonContent = await themeResourceJson.getString();\n\tt.is(libResourcesJsonContent, `{\n\t\"_version\": \"1.1.0\",\n\t\"resources\": [\n\t\t{\n\t\t\t\"name\": \"manifest.json\",\n\t\t\t\"module\": \"mylib/manifest.json\",\n\t\t\t\"size\": 11\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resources.json\",\n\t\t\t\"size\": 183\n\t\t}\n\t]\n}`);\n\tt.is(themeResourcesJsonContent, `{\n\t\"_version\": \"1.1.0\",\n\t\"resources\": [\n\t\t{\n\t\t\t\"name\": \".theming\",\n\t\t\t\"size\": 17,\n\t\t\t\"theme\": \"a\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resources.json\",\n\t\t\t\"size\": 159\n\t\t}\n\t]\n}`);\n});\n\ntest.serial(\"XML View with control resource as dependency\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog} = t.context;\n\n\tconst myAppManifestJsonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/manifest.json\",\n\t\tstring: JSON.stringify({\"sap.app\": {\"id\": \"my.app\"}})\n\t});\n\tconst myAppXmlViewResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/view/Main.view.xml\",\n\t\tstring: `<mvc:View\n\t\t\tcontrollerName=\"my.app.controller.Main\"\n\t\t\txmlns=\"my.lib\"\n\t\t\txmlns:myapp=\"my.app.controls\"\n\t\t\txmlns:mvc=\"sap.ui.core.mvc\">\n\n\t\t\t<!-- Existing control, should be listed as \"required\" -->\n\t\t\t<Button></Button>\n\n\t\t\t<!-- Nonexistent control, should not be listed -->\n\t\t\t<NonexistentControl></NonexistentControl>\n\n\t\t\t<!-- Existing control within same project (app), should be listed as \"required\" -->\n\t\t\t<myapp:Button></myapp:Button>\n\n\t\t\t<!-- Nonexistent control within same project (app), should not be listed -->\n\t\t\t<myapp:NonexistentControl></myapp:NonexistentControl>\n\n\t\t</mvc:View>`\n\t});\n\tconst myAppButtonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/controls/Button.js\",\n\t\tstring: \"\"\n\t});\n\tconst myLibButtonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/lib/Button.js\",\n\t\tstring: \"\"\n\t});\n\n\tconst resourcesJson = await resourceListCreator({\n\t\tresources: [myAppManifestJsonResource, myAppXmlViewResource, myAppButtonResource],\n\t\tdependencyResources: [myLibButtonResource]\n\t});\n\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 2);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 3 resources\"]);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(1).args,\n\t\t[\"\\twriting 'my/app/resources.json'\"]);\n\n\tt.is(resourcesJson.length, 1, \"One resources.json should be returned\");\n\tconst myAppResourcesJson = resourcesJson[0];\n\tt.is(myAppResourcesJson.getPath(), \"/resources/my/app/resources.json\");\n\tconst myAppResourcesJsonContent = await myAppResourcesJson.getString();\n\tt.is(myAppResourcesJsonContent, `{\n\t\"_version\": \"1.1.0\",\n\t\"resources\": [\n\t\t{\n\t\t\t\"name\": \"controls/Button.js\",\n\t\t\t\"module\": \"my/app/controls/Button.js\",\n\t\t\t\"size\": 0,\n\t\t\t\"format\": \"raw\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"manifest.json\",\n\t\t\t\"module\": \"my/app/manifest.json\",\n\t\t\t\"size\": 27\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resources.json\",\n\t\t\t\"size\": 523\n\t\t},\n\t\t{\n\t\t\t\"name\": \"view/Main.view.xml\",\n\t\t\t\"module\": \"my/app/view/Main.view.xml\",\n\t\t\t\"size\": 592,\n\t\t\t\"required\": [\n\t\t\t\t\"my/app/controller/Main.controller.js\",\n\t\t\t\t\"my/app/controls/Button.js\",\n\t\t\t\t\"my/lib/Button.js\"\n\t\t\t]\n\t\t}\n\t]\n}`);\n});\n\ntest.serial(\"Bundle containing an XML View with control resource as dependency\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog, ResourceCollectorLog} = t.context;\n\n\tconst myAppManifestJsonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/manifest.json\",\n\t\tstring: JSON.stringify({\"sap.app\": {\"id\": \"my.app\"}})\n\t});\n\tconst myAppXmlViewResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/view/Main.view.xml\",\n\t\tstring: `<mvc:View\n\t\t\tcontrollerName=\"my.app.controller.Main\"\n\t\t\txmlns=\"my.lib\"\n\t\t\txmlns:myapp=\"my.app.controls\"\n\t\t\txmlns:mvc=\"sap.ui.core.mvc\">\n\n\t\t\t<!-- Existing control, should be listed as \"required\" -->\n\t\t\t<Button></Button>\n\n\t\t\t<!-- Nonexistent control, should not be listed -->\n\t\t\t<NonexistentControl></NonexistentControl>\n\n\t\t\t<!-- Existing control within same project (app), should be listed as \"required\" -->\n\t\t\t<myapp:Button></myapp:Button>\n\n\t\t\t<!-- Nonexistent control within same project (app), should not be listed -->\n\t\t\t<myapp:NonexistentControl></myapp:NonexistentControl>\n\n\t\t</mvc:View>`\n\t});\n\t// eslint-disable-next-line max-len\n\tconst bundledXmlView = `<mvc:View controllerName=\"my.app.controller.Main\" xmlns=\"my.lib\" xmlns:myapp=\"my.app.controls\" xmlns:mvc=\"sap.ui.core.mvc\"><Button></Button><NonexistentControl></NonexistentControl><myapp:Button></myapp:Button><myapp:NonexistentControl></myapp:NonexistentControl></mvc:View>`;\n\tconst myAppBundleResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/bundle.js\",\n\t\tstring: `//@ui5-bundle my/app/bundle.js\nsap.ui.require.preload({\n\t\"my/app/view/Main.view.xml\": '${bundledXmlView}',\n\t\"my/app/controls/Button.js\": ''\n});\n`\n\t});\n\n\tconst myAppButtonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/controls/Button.js\",\n\t\tstring: \"\"\n\t});\n\tconst myLibButtonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/lib/Button.js\",\n\t\tstring: \"\"\n\t});\n\n\tconst resourcesJson = await resourceListCreator({\n\t\tresources: [myAppManifestJsonResource, myAppXmlViewResource, myAppButtonResource, myAppBundleResource],\n\t\tdependencyResources: [myLibButtonResource]\n\t});\n\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 2);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 4 resources\"]);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(1).args,\n\t\t[\"\\twriting 'my/app/resources.json'\"]);\n\n\tt.is(ResourceCollectorLog.error.callCount, 0);\n\tt.is(ResourceCollectorLog.warn.callCount, 0);\n\tt.is(ResourceCollectorLog.verbose.callCount, 1);\n\tt.deepEqual(ResourceCollectorLog.verbose.getCall(0).args,\n\t\t[\"  configured external resources filters (resources outside the namespace): (none)\"]);\n\n\tt.is(resourcesJson.length, 1, \"One resources.json should be returned\");\n\tconst myAppResourcesJson = resourcesJson[0];\n\tt.is(myAppResourcesJson.getPath(), \"/resources/my/app/resources.json\");\n\tconst myAppResourcesJsonContent = await myAppResourcesJson.getString();\n\tt.is(myAppResourcesJsonContent, `{\n\t\"_version\": \"1.1.0\",\n\t\"resources\": [\n\t\t{\n\t\t\t\"name\": \"bundle.js\",\n\t\t\t\"module\": \"my/app/bundle.js\",\n\t\t\t\"size\": 401,\n\t\t\t\"merged\": true,\n\t\t\t\"required\": [\n\t\t\t\t\"my/app/controller/Main.controller.js\",\n\t\t\t\t\"my/lib/Button.js\"\n\t\t\t],\n\t\t\t\"included\": [\n\t\t\t\t\"my/app/view/Main.view.xml\",\n\t\t\t\t\"my/app/controls/Button.js\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"controls/Button.js\",\n\t\t\t\"module\": \"my/app/controls/Button.js\",\n\t\t\t\"size\": 0,\n\t\t\t\"format\": \"raw\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"manifest.json\",\n\t\t\t\"module\": \"my/app/manifest.json\",\n\t\t\t\"size\": 27\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resources.json\",\n\t\t\t\"size\": 801\n\t\t},\n\t\t{\n\t\t\t\"name\": \"view/Main.view.xml\",\n\t\t\t\"module\": \"my/app/view/Main.view.xml\",\n\t\t\t\"size\": 592,\n\t\t\t\"required\": [\n\t\t\t\t\"my/app/controller/Main.controller.js\",\n\t\t\t\t\"my/app/controls/Button.js\",\n\t\t\t\t\"my/lib/Button.js\"\n\t\t\t]\n\t\t}\n\t]\n}`);\n});\n\ntest.serial(\"Bundle containing subModule which is not available within provided resources\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog, ResourceCollectorLog} = t.context;\n\n\tconst myAppManifestJsonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/manifest.json\",\n\t\tstring: JSON.stringify({\"sap.app\": {\"id\": \"my.app\"}})\n\t});\n\n\tconst myAppBundleResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/bundle.js\",\n\t\tstring: `//@ui5-bundle my/app/bundle.js\nsap.ui.require.preload({\n\t\"my/app/view/Main.view.xml\": ''\n});\n`\n\t});\n\n\tconst resourcesJson = await resourceListCreator({\n\t\tresources: [myAppManifestJsonResource, myAppBundleResource]\n\t});\n\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 2);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 2 resources\"]);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(1).args,\n\t\t[\"\\twriting 'my/app/resources.json'\"]);\n\n\tt.is(ResourceCollectorLog.error.callCount, 0);\n\tt.is(ResourceCollectorLog.warn.callCount, 0);\n\tt.is(ResourceCollectorLog.verbose.callCount, 2);\n\tt.deepEqual(ResourceCollectorLog.verbose.getCall(0).args,\n\t\t[\"\\tmissing submodule my/app/view/Main.view.xml included by my/app/bundle.js\"]);\n\tt.deepEqual(ResourceCollectorLog.verbose.getCall(1).args,\n\t\t[\"  configured external resources filters (resources outside the namespace): (none)\"]);\n\n\tt.is(resourcesJson.length, 1, \"One resources.json should be returned\");\n\tconst myAppResourcesJson = resourcesJson[0];\n\tt.is(myAppResourcesJson.getPath(), \"/resources/my/app/resources.json\");\n\tconst myAppResourcesJsonContent = await myAppResourcesJson.getString();\n\tt.is(myAppResourcesJsonContent, `{\n\t\"_version\": \"1.1.0\",\n\t\"resources\": [\n\t\t{\n\t\t\t\"name\": \"bundle.js\",\n\t\t\t\"module\": \"my/app/bundle.js\",\n\t\t\t\"size\": 93,\n\t\t\t\"merged\": true,\n\t\t\t\"included\": [\n\t\t\t\t\"my/app/view/Main.view.xml\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"manifest.json\",\n\t\t\t\"module\": \"my/app/manifest.json\",\n\t\t\t\"size\": 27\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resources.json\",\n\t\t\t\"size\": 338\n\t\t}\n\t]\n}`);\n});\n\ntest.serial(\"Bundles with subModules should not cause analyzing the same module multiple times\", async (t) => {\n\tconst {\n\t\tresourceListCreator, resourceListCreatorLog, ResourceCollectorLog, XMLTemplateAnalyzerAnalyzeViewSpy\n\t} = t.context;\n\n\tconst myAppManifestJsonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/manifest.json\",\n\t\tstring: JSON.stringify({\"sap.app\": {\"id\": \"my.app\"}})\n\t});\n\n\tconst xmlView1content = \"<mvc:View xmlns:mvc=\\\"sap.ui.core.mvc\\\"></mvc:View>\";\n\tconst myAppViewResource1 = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/View1.view.xml\",\n\t\tstring: xmlView1content\n\t});\n\t// Delay getBuffer to cause situation where the xml resource hasn't been analyzed\n\t// when processing the bundle subModules.\n\t// This should not lead to multiple analysis of the same resource. Instead it should\n\t// wait for the pending analysis to be finished\n\tsinon.stub(myAppViewResource1, \"getBuffer\").callsFake(() => {\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve(Buffer.from(xmlView1content));\n\t\t\t}, 10);\n\t\t});\n\t});\n\n\tconst myAppBundleResource1 = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/bundle1.js\",\n\t\tstring: `//@ui5-bundle my/app/bundle1.js\nsap.ui.require.preload({\n\t\"my/app/View1.view.xml\": '${xmlView1content}'\n});\n`\n\t});\n\tconst myAppBundleResource2 = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/bundle2.js\",\n\t\tstring: `//@ui5-bundle my/app/bundle2.js\nsap.ui.require.preload({\n\t\"my/app/View1.view.xml\": '${xmlView1content}'\n});\n`\n\t});\n\n\tconst resourcesJson = await resourceListCreator({\n\t\tresources: [myAppManifestJsonResource, myAppBundleResource1, myAppBundleResource2, myAppViewResource1]\n\t});\n\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 2);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 4 resources\"]);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(1).args,\n\t\t[\"\\twriting 'my/app/resources.json'\"]);\n\n\tt.is(ResourceCollectorLog.error.callCount, 0);\n\tt.is(ResourceCollectorLog.warn.callCount, 0);\n\tt.is(ResourceCollectorLog.verbose.callCount, 1);\n\tt.deepEqual(ResourceCollectorLog.verbose.getCall(0).args,\n\t\t[\"  configured external resources filters (resources outside the namespace): (none)\"]);\n\n\t// XMLTemplateAnalyzer should only be called once, which means that the view was only analyzed once\n\tt.is(XMLTemplateAnalyzerAnalyzeViewSpy.callCount, 1);\n\tt.deepEqual(XMLTemplateAnalyzerAnalyzeViewSpy.getCall(0).args[1]._name,\n\t\t\"my/app/View1.view.xml\");\n\n\tt.is(resourcesJson.length, 1, \"One resources.json should be returned\");\n\tconst myAppResourcesJson = resourcesJson[0];\n\tt.is(myAppResourcesJson.getPath(), \"/resources/my/app/resources.json\");\n\tconst myAppResourcesJsonContent = await myAppResourcesJson.getString();\n\tt.is(myAppResourcesJsonContent, `{\n\t\"_version\": \"1.1.0\",\n\t\"resources\": [\n\t\t{\n\t\t\t\"name\": \"View1.view.xml\",\n\t\t\t\"module\": \"my/app/View1.view.xml\",\n\t\t\t\"size\": 49\n\t\t},\n\t\t{\n\t\t\t\"name\": \"bundle1.js\",\n\t\t\t\"module\": \"my/app/bundle1.js\",\n\t\t\t\"size\": 139,\n\t\t\t\"merged\": true,\n\t\t\t\"included\": [\n\t\t\t\t\"my/app/View1.view.xml\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"bundle2.js\",\n\t\t\t\"module\": \"my/app/bundle2.js\",\n\t\t\t\"size\": 139,\n\t\t\t\"merged\": true,\n\t\t\t\"included\": [\n\t\t\t\t\"my/app/View1.view.xml\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"manifest.json\",\n\t\t\t\"module\": \"my/app/manifest.json\",\n\t\t\t\"size\": 27\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resources.json\",\n\t\t\t\"size\": 580\n\t\t}\n\t]\n}`);\n});\n\ntest.serial(\"Bundle\", async (t) => {\n\tconst {resourceListCreator, resourceListCreatorLog, ResourceCollectorLog} = t.context;\n\n\tconst myAppManifestJsonResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/manifest.json\",\n\t\tstring: JSON.stringify({\"sap.app\": {\"id\": \"my.app\"}})\n\t});\n\n\tconst myAppBundleResource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/bundle.js\",\n\t\tstring: `//@ui5-bundle my/app/bundle.js\nsap.ui.require.preload({\n\t\"my/app/module1.js\": '',\n\t\"my/app/module2.js\": ''\n});\n`\n\t});\n\n\tconst module1Resource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/module1.js\",\n\t\tstring: `sap.ui.define(['dep1'], function() {\n\t\t\treturn function(x) {\n\t\t\t\tif (x === true) {\n\t\t\t\t\tsap.ui.require([\"dep2\"]);\n\t\t\t\t}\n\t\t\t}\n\t\t})`\n\t});\n\n\tconst module2Resource = resourceFactory.createResource({\n\t\tpath: \"/resources/my/app/module2.js\",\n\t\tstring: `sap.ui.define(['dep2'], function() {\n\t\t\treturn function(x) {\n\t\t\t\tif (x === true) {\n\t\t\t\t\tsap.ui.require([\"dep1\", \"dep3\"]);\n\t\t\t\t}\n\t\t\t}\n\t\t})`\n\t});\n\n\tconst resourcesJson = await resourceListCreator({\n\t\tresources: [myAppManifestJsonResource, myAppBundleResource, module1Resource, module2Resource],\n\t});\n\n\tt.is(resourceListCreatorLog.error.callCount, 0);\n\tt.is(resourceListCreatorLog.verbose.callCount, 2);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(0).args,\n\t\t[\"\\tfound 4 resources\"]);\n\tt.deepEqual(resourceListCreatorLog.verbose.getCall(1).args,\n\t\t[\"\\twriting 'my/app/resources.json'\"]);\n\n\tt.is(ResourceCollectorLog.error.callCount, 0);\n\tt.is(ResourceCollectorLog.warn.callCount, 0);\n\tt.is(ResourceCollectorLog.verbose.callCount, 1);\n\tt.deepEqual(ResourceCollectorLog.verbose.getCall(0).args,\n\t\t[\"  configured external resources filters (resources outside the namespace): (none)\"]);\n\n\tt.is(resourcesJson.length, 1, \"One resources.json should be returned\");\n\tconst myAppResourcesJson = resourcesJson[0];\n\tt.is(myAppResourcesJson.getPath(), \"/resources/my/app/resources.json\");\n\tconst myAppResourcesJsonContent = await myAppResourcesJson.getString();\n\tt.is(myAppResourcesJsonContent, `{\n\t\"_version\": \"1.1.0\",\n\t\"resources\": [\n\t\t{\n\t\t\t\"name\": \"bundle.js\",\n\t\t\t\"module\": \"my/app/bundle.js\",\n\t\t\t\"size\": 111,\n\t\t\t\"merged\": true,\n\t\t\t\"required\": [\n\t\t\t\t\"dep1.js\",\n\t\t\t\t\"dep2.js\"\n\t\t\t],\n\t\t\t\"condRequired\": [\n\t\t\t\t\"dep3.js\"\n\t\t\t],\n\t\t\t\"included\": [\n\t\t\t\t\"my/app/module1.js\",\n\t\t\t\t\"my/app/module2.js\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"manifest.json\",\n\t\t\t\"module\": \"my/app/manifest.json\",\n\t\t\t\"size\": 27\n\t\t},\n\t\t{\n\t\t\t\"name\": \"module1.js\",\n\t\t\t\"module\": \"my/app/module1.js\",\n\t\t\t\"size\": 129,\n\t\t\t\"required\": [\n\t\t\t\t\"dep1.js\"\n\t\t\t],\n\t\t\t\"condRequired\": [\n\t\t\t\t\"dep2.js\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"module2.js\",\n\t\t\t\"module\": \"my/app/module2.js\",\n\t\t\t\"size\": 137,\n\t\t\t\"required\": [\n\t\t\t\t\"dep2.js\"\n\t\t\t],\n\t\t\t\"condRequired\": [\n\t\t\t\t\"dep1.js\",\n\t\t\t\t\"dep3.js\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resources.json\",\n\t\t\t\"size\": 786\n\t\t}\n\t]\n}`);\n});\n",
    "lib/lbt/analyzer/FioriElementsAnalyzer.js": "/**\n * Analyzes a FioriElements app and its underlying template components to collect dependency information.\n *\n * Tries to find a manifest.json in the same package. If it is found and if\n * it is a valid JSON, an \"sap.fe\" section is searched and evaluated in the following way\n * - for each entity set in the \"entitySets\" object, each sub-entry is checked for a \"default\".\"template\" property\n * - when found, that string is interpreted as the short name of a template component in package sap.fe.templates\n * - a dependency to that template component is added to the analyzed app\n *\n * For a full analysis, \"routing\" also should be taken into account. Only when a sub-entry of the entity set\n * is referenced by a route, then the template for that entry will be used. Routes thereby could form entry points.\n *\n * <pre>\n *  {\n *      ...\n *\n *      \"sap.fe\" : {\n *          \"entitySets\" : {\n *              \"C_AIVS_MDBU_ArtistTP\" : {\n *                  \"feed\": {\n *                      \"default\": {\n *                          \"template\": \"ListReport\"\n *                      }\n *                  },\n *                  \"entry\" : {\n *                      \"default\" : {\n *                          \"outbound\" : \"musicV2Display\"\n *                      }\n *                  }\n *              }\n *          },\n *          \"routing\" : {\n *              \"routes\" :{\n *                  \"ArtistList\": {\n *                      \"target\": \"C_AIVS_MDBU_ArtistTP/feed\"\n *                  }\n *              }\n *          }\n *      }\n *\n *      ...\n * </pre>\n *\n * The template component is analyzed in the following way:\n * - precondition: template component class is defined in an AMD-style module, using define or sap.ui.define\n * - precondition: the module 'sap/fe/core/TemplateAssembler' is imported\n * - precondition: a call to TemplateAssembler.getTemplateComponent is used to define the component class\n * - precondition: that call is used in a top level return statement of the factory function\n * - precondition: necessary parameters to that call are given as an object literal (no further coding)\n * - precondition: the settings define a managed property property 'metadata.properties.templateName' with a\n *                 defaultValue of type string\n * The default value of the property represents the template view of the template component.\n * The manifest of the template app in theory could specify an alternative template as setting.templateName,\n * but as of June 2017, this possibility is currently not used.\n *\n * This class can handle multiple concurrent analysis calls, it has no instance state other than the pool\n * (which is readonly).\n */\n\"use strict\";\n\nconst ModuleName = require(\"../utils/ModuleName\");\nconst SapUiDefine = require(\"../calls/SapUiDefine\");\nconst esprima = require(\"esprima\");\nconst {Syntax} = esprima;\nconst {getValue, isMethodCall, isString} = require(\"../utils/ASTUtils\");\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:analyzer:FioriElementAnalyzer\");\n\n// ---------------------------------------------------------------------------------------------------------\n\nfunction each(obj, fn) {\n\tif ( obj ) {\n\t\tObject.keys(obj).forEach(\n\t\t\t(key) => fn(obj[key], key, obj)\n\t\t);\n\t}\n}\n\nconst CALL_DEFINE = [\"define\"];\nconst CALL_SAP_UI_DEFINE = [\"sap\", \"ui\", \"define\"];\n\n/**\n * Analyzes the manifest for a Fiori Elements application (next to its Component.js) to find more dependencies.\n *\n * @private\n */\nclass FioriElementsAnalyzer {\n\tconstructor(pool) {\n\t\tthis._pool = pool;\n\t}\n\n\tasync analyze(resource, info) {\n\t\t// ignore base class for components\n\t\tif ( resource.name === \"sap/ui/core/Component.js\" ) {\n\t\t\treturn info;\n\t\t}\n\n\t\tconst manifestName = resource.name.replace(/Component\\.js$/, \"manifest.json\");\n\t\ttry {\n\t\t\tconst manifestResource = await this._pool.findResource(manifestName).catch(() => null);\n\t\t\tif ( manifestResource ) {\n\t\t\t\tconst fileContent = await manifestResource.buffer();\n\t\t\t\tawait this._analyzeManifest( JSON.parse(fileContent.toString()), info );\n\t\t\t} else {\n\t\t\t\tlog.verbose(\"No manifest found for '%s', skipping analysis\", resource.name);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlog.error(\"an error occurred while analyzing template app %s (ignored)\", resource.name, err);\n\t\t}\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Evaluates a manifest after it has been read and parsed\n\t * and adds any newly found dependencies to the given info object.\n\t *\n\t * @param {object} manifest JSON with app descriptor structure\n\t * @param {ModuleInfo} info ModuleInfo object that should be enriched\n\t * @returns {ModuleInfo} ModuleInfo object that should be enriched\n\t * @private\n\t */\n\tasync _analyzeManifest( manifest, info ) {\n\t\tconst promises = [];\n\t\tconst st = (manifest && manifest[\"sap.fe\"]) || {};\n\n\t\teach(st.entitySets, (entitySetCfg) => {\n\t\t\teach(entitySetCfg, (activityCfg, activity) => {\n\t\t\t\tif ( activity === \"entitySet\" ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\teach(activityCfg, (actionCfg) => {\n\t\t\t\t\tif ( actionCfg.template ) {\n\t\t\t\t\t\tconst module = ModuleName.fromUI5LegacyName( \"sap.fe.templates.\" +\n\t\t\t\t\t\t\t\t\t\tactionCfg.template + \".Component\" );\n\t\t\t\t\t\tlog.verbose(\"template app: add dependency to template component %s\", module);\n\t\t\t\t\t\tinfo.addDependency(module);\n\t\t\t\t\t\tpromises.push( this._analyzeTemplateComponent(module, actionCfg, info) );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\treturn Promise.all(promises);\n\t}\n\n\tasync _analyzeTemplateComponent(moduleName, pageConfig, appInfo) {\n\t\t// console.log(\"analyzing template component %s\", moduleName);\n\t\tconst resource = await this._pool.findResource(moduleName);\n\t\tconst code = await resource.buffer();\n\t\tconst ast = esprima.parseScript(code.toString());\n\t\tconst defaultTemplateName = this._analyzeAST(moduleName, ast);\n\t\tconst templateName = (pageConfig.component && pageConfig.component.settings &&\n\t\t\t\t\t\t\t\tpageConfig.component.settings.templateName) || defaultTemplateName;\n\t\tif ( templateName ) {\n\t\t\tconst templateModuleName = ModuleName.fromUI5LegacyName( templateName, \".view.xml\" );\n\t\t\tlog.verbose(\"template app: add dependency to template view %s\", templateModuleName);\n\t\t\tappInfo.addDependency(templateModuleName);\n\t\t}\n\t}\n\n\t_analyzeAST(moduleName, ast) {\n\t\tlet templateName = \"\";\n\t\tif ( ast.body.length > 0 && (isMethodCall(ast.body[0].expression, CALL_SAP_UI_DEFINE) ||\n\t\t\t\tisMethodCall(ast.body[0].expression, CALL_DEFINE)) ) {\n\t\t\tconst defineCall = new SapUiDefine(ast.body[0].expression, moduleName);\n\t\t\tconst TA = defineCall.findImportName(\"sap/fe/core/TemplateAssembler.js\");\n\t\t\t// console.log(\"local name for TemplateAssembler: %s\", TA);\n\t\t\tif ( TA && defineCall.factory ) {\n\t\t\t\tdefineCall.factory.body.body.forEach( (stmt) => {\n\t\t\t\t\tif ( stmt.type === Syntax.ReturnStatement &&\n\t\t\t\t\t\t\tisMethodCall(stmt.argument, [TA, \"getTemplateComponent\"]) &&\n\t\t\t\t\t\t\tstmt.argument.arguments.length > 2 &&\n\t\t\t\t\t\t\tstmt.argument.arguments[2].type === \"ObjectExpression\" ) {\n\t\t\t\t\t\ttemplateName = this._analyzeTemplateClassDefinition(stmt.argument.arguments[2]) || templateName;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn templateName;\n\t}\n\n\t_analyzeTemplateClassDefinition(clazz) {\n\t\tconst defaultValue = getValue(clazz, [\"metadata\", \"properties\", \"templateName\", \"defaultValue\"]);\n\t\tif ( isString(defaultValue) ) {\n\t\t\treturn defaultValue.value;\n\t\t}\n\t}\n}\n\nmodule.exports = FioriElementsAnalyzer;\n",
    "lib/lbt/analyzer/SmartTemplateAnalyzer.js": "/**\n * Analyzes a SmartTemplate app and its underlying template components to collect dependency information.\n *\n * Tries to find a manifest.json in the same package. If it is found and if\n * it is a valid JSON, an \"sap.ui.generic.app\" section is searched and evaluated in the following way\n *  - for each page configuration, the configured component is added as a dependency to the template app module\n *  - If the page configuration contains a templateName, a dependency to that template view is added to the app\n *  - Otherwise, the class definition of the component is analyzed to find a default template view name\n *    If found, a dependency to that view is added to the app module\n *\n * The template component is analyzed in the following way:\n * - precondition: template component class is defined in an AMD-style module, using define or sap.ui.define\n * - precondition: the module 'sap/suite/ui/generic/template/lib/TemplateAssembler' is imported\n * - precondition: a call to TemplateAssembler.getTemplateComponent is used to define the component class\n * - precondition: that call is used in a top level return statement of the factory function\n * - precondition: necessary parameters to that call are given as an object literal (no further coding)\n * - precondition: the settings define a managed property property 'metadata.properties.templateName'\n *                 with a defaultValue of type string\n * The default value of the property represents the template view of the template component.\n * The manifest of the template app in theory could specify an alternative template in\n * component.settings.templateName,\n *\n * This class can handle multiple concurrent analysis calls, it has no instance state other than the pool\n * (which is readonly).\n */\n\"use strict\";\n\nconst ModuleName = require(\"../utils/ModuleName\");\nconst SapUiDefine = require(\"../calls/SapUiDefine\");\nconst esprima = require(\"esprima\");\nconst {Syntax} = esprima;\nconst {getValue, isMethodCall, isString} = require(\"../utils/ASTUtils\");\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:analyzer:SmartTemplateAnalyzer\");\n\n// ---------------------------------------------------------------------------------------------------------\n\nconst CALL_DEFINE = [\"define\"];\nconst CALL_SAP_UI_DEFINE = [\"sap\", \"ui\", \"define\"];\n\n/**\n * Analyzes the manifest for a Smart Template App (next to its Component.js) to find more dependencies.\n *\n * @private\n */\nclass TemplateComponentAnalyzer {\n\tconstructor(pool) {\n\t\tthis._pool = pool;\n\t}\n\n\tasync analyze(resource, info) {\n\t\t// ignore base class for components\n\t\tif ( resource.name === \"sap/ui/core/Component.js\" ) {\n\t\t\treturn info;\n\t\t}\n\n\t\tconst manifestName = resource.name.replace(/Component\\.js$/, \"manifest.json\");\n\t\ttry {\n\t\t\tconst manifestResource = await this._pool.findResource(manifestName).catch(() => null);\n\t\t\tif ( manifestResource ) {\n\t\t\t\tconst fileContent = await manifestResource.buffer();\n\t\t\t\tawait this._analyzeManifest( JSON.parse(fileContent.toString()), info );\n\t\t\t} else {\n\t\t\t\tlog.verbose(\"No manifest found for '%s', skipping analysis\", resource.name);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlog.error(\"an error occurred while analyzing template app %s (ignored):\", resource.name);\n\t\t\tlog.error(err.stack);\n\t\t}\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Evaluates a manifest after it has been read and parsed\n\t * and adds any newly found dependencies to the given info object.\n\t *\n\t * @param {object} manifest JSON with app descriptor structure\n\t * @param {ModuleInfo} info ModuleInfo object that should be enriched\n\t * @returns {ModuleInfo} ModuleInfo object that should be enriched\n\t * @private\n\t */\n\tasync _analyzeManifest( manifest, info ) {\n\t\tconst promises = [];\n\t\tconst that = this;\n\t\tconst st = (manifest && manifest[\"sap.ui.generic.app\"]) || {};\n\t\tfunction recursePage(page) {\n\t\t\tif ( page.component && page.component.name ) {\n\t\t\t\tconst module = ModuleName.fromUI5LegacyName( page.component.name + \".Component\" );\n\t\t\t\tlog.verbose(\"template app: add dependency to template component %s\", module);\n\t\t\t\tinfo.addDependency(module);\n\t\t\t\tpromises.push( that._analyzeTemplateComponent(module, page, info) );\n\t\t\t}\n\t\t\trecurse(page);\n\t\t}\n\t\tfunction recurse(ctx) {\n\t\t\tif ( Array.isArray(ctx.pages) ) {\n\t\t\t\tctx.pages.forEach(recursePage);\n\t\t\t} else if (typeof ctx.pages === \"object\") {\n\t\t\t\tObject.values(ctx.pages).forEach(recursePage);\n\t\t\t}\n\t\t}\n\t\trecurse(st);\n\n\t\treturn Promise.all(promises);\n\t}\n\n\tasync _analyzeTemplateComponent(moduleName, pageConfig, appInfo) {\n\t\t// console.log(\"analyzing template component %s\", moduleName);\n\t\ttry {\n\t\t\tconst resource = await this._pool.findResource(moduleName);\n\t\t\tconst code = await resource.buffer();\n\t\t\tconst ast = esprima.parseScript(code.toString());\n\t\t\tconst defaultTemplateName = this._analyzeAST(moduleName, ast);\n\t\t\tconst templateName = (pageConfig.component && pageConfig.component.settings &&\n\t\t\t\t\t\t\t\t\tpageConfig.component.settings.templateName) || defaultTemplateName;\n\t\t\tif ( templateName ) {\n\t\t\t\tconst templateModuleName = ModuleName.fromUI5LegacyName( templateName, \".view.xml\" );\n\t\t\t\tlog.verbose(\"template app: add dependency to template view %s\", templateModuleName);\n\t\t\t\tappInfo.addDependency(templateModuleName);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (this._pool.getIgnoreMissingModules() && err.message.startsWith(\"resource not found in pool\")) {\n\t\t\t\tlog.verbose(\"Ignoring missing module as per ResourcePool configuration: \" + err.message);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\t_analyzeAST(moduleName, ast) {\n\t\tlet templateName = \"\";\n\t\tif ( ast.body.length > 0 && (isMethodCall(ast.body[0].expression, CALL_SAP_UI_DEFINE) ||\n\t\t\t\tisMethodCall(ast.body[0].expression, CALL_DEFINE)) ) {\n\t\t\tconst defineCall = new SapUiDefine(ast.body[0].expression, moduleName);\n\t\t\tconst TA = defineCall.findImportName(\"sap/suite/ui/generic/template/lib/TemplateAssembler.js\");\n\t\t\t// console.log(\"local name for TemplateAssembler: %s\", TA);\n\t\t\tif ( TA && defineCall.factory ) {\n\t\t\t\tdefineCall.factory.body.body.forEach( (stmt) => {\n\t\t\t\t\tif ( stmt.type === Syntax.ReturnStatement &&\n\t\t\t\t\t\t\tisMethodCall(stmt.argument, [TA, \"getTemplateComponent\"]) &&\n\t\t\t\t\t\t\tstmt.argument.arguments.length > 2 &&\n\t\t\t\t\t\t\tstmt.argument.arguments[2].type === \"ObjectExpression\" ) {\n\t\t\t\t\t\ttemplateName = this._analyzeTemplateClassDefinition(stmt.argument.arguments[2]) || templateName;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn templateName;\n\t}\n\n\t_analyzeTemplateClassDefinition(clazz) {\n\t\tconst defaultValue = getValue(clazz, [\"metadata\", \"properties\", \"templateName\", \"defaultValue\"]);\n\t\tif ( isString(defaultValue) ) {\n\t\t\treturn defaultValue.value;\n\t\t}\n\t}\n}\n\nmodule.exports = TemplateComponentAnalyzer;\n",
    "lib/lbt/resources/Resource.js": "\"use strict\";\n\nconst {promisify} = require(\"util\");\nconst fs = require(\"graceful-fs\");\nconst readFile = promisify(fs.readFile);\n\nclass Resource {\n\tconstructor(pool, name, file, stat) {\n\t\tthis.pool = pool;\n\t\tthis.name = name;\n\t\tthis.file = file;\n\t\tthis.fileSize = stat ? stat.size : -1;\n\t}\n\n\t/**\n\t * @returns {Promise<Buffer>} Buffer of file\n\t */\n\tasync buffer() {\n\t\treturn readFile(this.file);\n\t}\n}\n\nmodule.exports = Resource;\n",
    "lib/processors/jsdoc/jsdocGenerator.js": "const spawn = require(\"child_process\").spawn;\nconst fs = require(\"graceful-fs\");\nconst path = require(\"path\");\nconst {promisify} = require(\"util\");\nconst writeFile = promisify(fs.writeFile);\nconst {resourceFactory} = require(\"@ui5/fs\");\n\n/**\n * JSDoc generator\n *\n * @public\n * @alias module:@ui5/builder.processors.jsdocGenerator\n * @param {object} parameters Parameters\n * @param {string} parameters.sourcePath Path of the source files to be processed\n * @param {string} parameters.targetPath Path to write any output files\n * @param {string} parameters.tmpPath Path to write temporary and debug files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.projectName Project name\n * @param {string} parameters.options.namespace Namespace to build (e.g. <code>some/project/name</code>)\n * @param {string} parameters.options.version Project version\n * @param {Array} [parameters.options.variants=[\"apijson\"]] JSDoc variants to be built\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with newly created resources\n */\nconst jsdocGenerator = async function(\n\t{sourcePath, targetPath, tmpPath, options: {projectName, namespace, version, variants}} = {}\n) {\n\tif (!sourcePath || !targetPath || !tmpPath || !projectName || !namespace || !version) {\n\t\tthrow new Error(\"[jsdocGenerator]: One or more mandatory parameters not provided\");\n\t}\n\n\tif (!variants || variants.length === 0) {\n\t\tvariants = [\"apijson\"];\n\t}\n\n\tconst config = await jsdocGenerator._generateJsdocConfig({\n\t\ttargetPath,\n\t\ttmpPath,\n\t\tnamespace,\n\t\tprojectName,\n\t\tversion,\n\t\tvariants\n\t});\n\n\tconst configPath = await jsdocGenerator._writeJsdocConfig(tmpPath, config);\n\n\tawait jsdocGenerator._buildJsdoc({\n\t\tsourcePath,\n\t\tconfigPath\n\t});\n\n\tconst fsTarget = resourceFactory.createAdapter({\n\t\tfsBasePath: targetPath,\n\t\tvirBasePath: \"/\"\n\t});\n\n\t// create resources from the output files\n\treturn Promise.all([\n\t\tfsTarget.byPath(`/test-resources/${namespace}/designtime/api.json`)\n\t\t// fsTarget.byPath(`/libraries/${options.projectName}.js`)\n\t]).then((res) => res.filter(($)=>$));\n};\n\n\n/**\n * Generate jsdoc-config.json content\n *\n * @private\n * @param {object} parameters Parameters\n * @param {string} parameters.targetPath Path to write any output files\n * @param {string} parameters.tmpPath Path to write temporary and debug files\n * @param {string} parameters.projectName Project name\n * @param {string} parameters.version Project version\n * @param {string} parameters.namespace Namespace to use (e.g. <code>some/project/name</code>)\n * @param {Array} parameters.variants JSDoc variants to be built\n * @returns {string} jsdoc-config.json content string\n */\nasync function generateJsdocConfig({targetPath, tmpPath, namespace, projectName, version, variants}) {\n\t// Backlash needs to be escaped as double-backslash\n\t// This is not only relevant for win32 paths but also for\n\t//\tUnix directory names that contain a backslash in their name\n\tconst backslashRegex = /\\\\/g;\n\n\t// Resolve path to this script to get the path to the JSDoc extensions folder\n\tconst jsdocPath = path.normalize(__dirname);\n\tconst pluginPath = path.join(jsdocPath, \"lib\", \"ui5\", \"plugin.js\").replace(backslashRegex, \"\\\\\\\\\");\n\tconst templatePath = path.join(jsdocPath, \"lib\", \"ui5\", \"template\").replace(backslashRegex, \"\\\\\\\\\");\n\tconst destinationPath = path.normalize(tmpPath).replace(backslashRegex, \"\\\\\\\\\");\n\tconst jsapiFilePath = path.join(targetPath, \"libraries\", projectName + \".js\").replace(backslashRegex, \"\\\\\\\\\");\n\tconst apiJsonFolderPath = path.join(tmpPath, \"dependency-apis\").replace(backslashRegex, \"\\\\\\\\\");\n\tconst apiJsonFilePath =\n\t\tpath.join(targetPath, \"test-resources\", path.normalize(namespace), \"designtime\", \"api.json\")\n\t\t\t.replace(backslashRegex, \"\\\\\\\\\");\n\n\tconst config = `{\n\t\t\"plugins\": [\"${pluginPath}\"],\n\t\t\"opts\": {\n\t\t\t\"recurse\": true,\n\t\t\t\"lenient\": true,\n\t\t\t\"template\": \"${templatePath}\",\n\t\t\t\"ui5\": {\n\t\t\t\t\"saveSymbols\": true\n\t\t\t},\n\t\t\t\"destination\": \"${destinationPath}\"\n\t\t},\n\t\t\"templates\": {\n\t\t\t\"ui5\": {\n\t\t\t\t\"variants\": ${JSON.stringify(variants)},\n\t\t\t\t\"version\": \"${version}\",\n\t\t\t\t\"jsapiFile\": \"${jsapiFilePath}\",\n\t\t\t\t\"apiJsonFolder\": \"${apiJsonFolderPath}\",\n\t\t\t\t\"apiJsonFile\": \"${apiJsonFilePath}\"\n\t\t\t}\n\t\t}\n\t}`;\n\treturn config;\n}\n\n/**\n * Write jsdoc-config.json to file system\n *\n * @private\n * @param {string} targetDirPath Directory Path to write the jsdoc-config.json file to\n * @param {string} config jsdoc-config.json content\n * @returns {string} Full path to the written jsdoc-config.json file\n */\nasync function writeJsdocConfig(targetDirPath, config) {\n\tconst configPath = path.join(targetDirPath, \"jsdoc-config.json\");\n\tawait writeFile(configPath, config);\n\treturn configPath;\n}\n\n\n/**\n * Execute JSDoc build by spawning JSDoc as an external process\n *\n * @private\n * @param {object} parameters Parameters\n * @param {string} parameters.sourcePath Project resources (input for JSDoc generation)\n * @param {string} parameters.configPath Full path to jsdoc-config.json file\n * @returns {Promise<undefined>}\n */\nasync function buildJsdoc({sourcePath, configPath}) {\n\tconst args = [\n\t\trequire.resolve(\"jsdoc/jsdoc\"),\n\t\t\"-c\",\n\t\tconfigPath,\n\t\t\"--verbose\",\n\t\tsourcePath\n\t];\n\treturn new Promise((resolve, reject) => {\n\t\tconst child = spawn(\"node\", args, {\n\t\t\tstdio: [\"ignore\", \"ignore\", process.stderr]\n\t\t});\n\t\tchild.on(\"close\", function(code) {\n\t\t\tif (code === 0 || code === 1) {\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\treject(new Error(`JSDoc child process closed with code ${code}`));\n\t\t\t}\n\t\t});\n\t});\n}\n\nmodule.exports = jsdocGenerator;\nmodule.exports._generateJsdocConfig = generateJsdocConfig;\nmodule.exports._writeJsdocConfig = writeJsdocConfig;\nmodule.exports._buildJsdoc = buildJsdoc;\n",
    "lib/processors/libraryLessGenerator.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:processors:libraryLessGenerator\");\n\nconst {promisify} = require(\"util\");\nconst posixPath = require(\"path\").posix;\nconst Resource = require(\"@ui5/fs\").Resource;\n\nconst IMPORT_PATTERN = /@import .*\"(.*)\";/g;\nconst BASE_LESS_PATTERN = /^\\/resources\\/sap\\/ui\\/core\\/themes\\/([^/]+)\\/base\\.less$/;\nconst GLOBAL_LESS_PATTERN = /^\\/resources\\/sap\\/ui\\/core\\/themes\\/([^/]+)\\/global\\.less$/;\n\nclass ImportError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\t\tthis.name = \"ImportError\";\n\t\tthis.message = message;\n\t}\n}\n\nclass LibraryLessGenerator {\n\tconstructor({fs}) {\n\t\tconst readFile = promisify(fs.readFile);\n\t\tthis.readFile = async (filePath) => readFile(filePath, {encoding: \"utf8\"});\n\t}\n\tasync generate({filePath, fileContent}) {\n\t\treturn `/* NOTE: This file was generated as an optimized version of ` +\n\t\t\t`\"library.source.less\" for the Theme Designer. */\\n\\n` +\n\t\t\tawait this.resolveLessImports({\n\t\t\t\tfilePath,\n\t\t\t\tfileContent\n\t\t\t});\n\t}\n\tstatic getPathToRoot(baseDir) {\n\t\treturn posixPath.relative(baseDir, \"/\") + \"/\";\n\t}\n\tasync resolveLessImports({filePath, fileContent}) {\n\t\tconst imports = this.findLessImports(fileContent);\n\t\tif (!imports.length) {\n\t\t\t// Skip processing when no imports are found\n\t\t\treturn fileContent;\n\t\t}\n\t\tconst replacements = await Promise.all(imports.map(async (importMatch) => {\n\t\t\tconst baseDir = posixPath.dirname(filePath);\n\t\t\tconst resolvedFilePath = posixPath.resolve(baseDir, importMatch.path);\n\t\t\ttry {\n\t\t\t\timportMatch.content = await this.resolveLessImport(importMatch.path, resolvedFilePath, baseDir);\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof ImportError) {\n\t\t\t\t\t// Add message of import errors after the import statements\n\t\t\t\t\t// Currently those errors should not break the build (see comments in resolveLessImport)\n\t\t\t\t\timportMatch.content = importMatch.fullMatch + ` /* ${error} */`;\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn importMatch;\n\t\t}));\n\n\t\t// Apply replacements in reverse order to not modify the relevant indices\n\t\tconst array = Array.from(fileContent);\n\t\tfor (let i = replacements.length - 1; i >= 0; i--) {\n\t\t\tconst replacement = replacements[i];\n\t\t\tif (!replacement.content) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tarray.splice(\n\t\t\t\t/* index   */ replacement.matchStart,\n\t\t\t\t/* count   */ replacement.matchLength,\n\t\t\t\t/* insert  */ replacement.content\n\t\t\t);\n\t\t}\n\t\treturn array.join(\"\");\n\t}\n\tasync resolveLessImport(originalFilePath, resolvedFilePath, baseDir) {\n\t\t// Rewrite base.less imports\n\t\tconst baseLessMatch = BASE_LESS_PATTERN.exec(resolvedFilePath);\n\t\tif (baseLessMatch) {\n\t\t\tlet baseLessThemeName = baseLessMatch[1];\n\t\t\tif (baseLessThemeName === \"base\") {\n\t\t\t\tbaseLessThemeName = \"baseTheme\";\n\t\t\t}\n\n\t\t\tconst baseLessPath = LibraryLessGenerator.getPathToRoot(baseDir) +\n\t\t\t\t\"Base/baseLib/\" + baseLessThemeName + \"/base.less\";\n\t\t\treturn \"@import \\\"\" + baseLessPath + \"\\\"; /* ORIGINAL IMPORT PATH: \\\"\" + originalFilePath + \"\\\" */\\n\";\n\t\t}\n\n\t\t// Rewrite library imports to correct file name\n\t\tif (posixPath.basename(resolvedFilePath) === \"library.source.less\") {\n\t\t\treturn `@import \"${originalFilePath.replace(/library\\.source\\.less$/, \"library.less\")}\";`;\n\t\t}\n\n\t\t// Excluding global.less within sap.ui.core\n\t\t// It must be imported by the Theme Designer (also see declaration in sap/ui/core/.theming)\n\t\tif (GLOBAL_LESS_PATTERN.test(resolvedFilePath)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t/*\n\t\t * Log error in case of files which are not in the same directory as the current file because\n\t\t * inlining them would break relative URLs.\n\t\t * A possible solution would be to rewrite relative URLs when inlining the content.\n\t\t *\n\t\t * Keeping the import will cause errors since only \"library.less\" and \"global.less\" are\n\t\t * configured to be available to the Theme Designer (.theming generated in generateThemeDesignerResources).\n\t\t * However, the previous implementation did not break the build.\n\t\t * In many cases the library.less file is currently not relevant so breaking the build would cause\n\t\t * unnecessary issues.\n\t\t *\n\t\t */\n\t\tconst relativeFilePath = posixPath.relative(baseDir, resolvedFilePath);\n\t\tif (relativeFilePath.includes(posixPath.sep)) {\n\t\t\tlog.error(\n\t\t\t\t`Could not inline import '${resolvedFilePath}' outside of theme directory '${baseDir}'. ` +\n\t\t\t\t`Stylesheets must be located in the theme directory (no sub-directories). ` +\n\t\t\t\t`The generated '${baseDir}/library.less' will cause errors when compiled with the Theme Designer.`\n\t\t\t);\n\t\t\t// Throw error to be added as comment to the import statement\n\t\t\tthrow new ImportError(\"Could not inline import outside of theme directory\");\n\t\t}\n\n\t\tlet importedFileContent;\n\t\ttry {\n\t\t\timportedFileContent = await this.readFile(resolvedFilePath);\n\t\t} catch (err) {\n\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`libraryLessGenerator: Unable to resolve import '${originalFilePath}' from '${baseDir}'\\n` +\n\t\t\t\t\terr.message\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn `/* START \"${originalFilePath}\" */\\n` +\n\t\t\tawait this.resolveLessImports({\n\t\t\t\tfilePath: resolvedFilePath,\n\t\t\t\tfileContent: importedFileContent\n\t\t\t}) +\n\t\t\t`\\n/* END \"${originalFilePath}\" */\\n`;\n\t}\n\tfindLessImports(fileContent) {\n\t\tconst imports = [];\n\t\tlet match;\n\t\twhile ((match = IMPORT_PATTERN.exec(fileContent)) !== null) {\n\t\t\timports.push({\n\t\t\t\tpath: match[1],\n\t\t\t\tfullMatch: match[0],\n\t\t\t\tmatchStart: match.index,\n\t\t\t\tmatchLength: match[0].length\n\t\t\t});\n\t\t}\n\t\treturn imports;\n\t}\n}\n\n/**\n * Creates a \"library.less\" file for the SAP Theme Designer based on a \"library.source.less\" file.\n *\n * <ul>\n * <li>Bundles all *.less file of the theme by replacing the import with the corresponding file content</li>\n * <li>Imports to \"base.less\" are adopted so that they point to the \"BaseLib\" that is available within\n * the Theme Designer infrastructure</li>\n * <li>Imports to \"global.less\" are kept as they should not be bundled</li>\n * <li>Imports to \"library.source.less\" are adopted to \"library.less\"</li>\n * </ul>\n *\n * @public\n * @alias module:@ui5/builder.processors.libraryLessGenerator\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.Resource[]} parameters.resources List of <code>library.source.less</code>\n * resources\n * @param {fs|module:@ui5/fs.fsInterface} parameters.fs Node fs or custom\n * [fs interface]{@link module:resources/module:@ui5/fs.fsInterface}\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with library.less resources\n */\nmodule.exports = async function({resources, fs}) {\n\tconst generator = new LibraryLessGenerator({fs});\n\treturn Promise.all(resources.map(async (librarySourceLessResource) => {\n\t\tconst filePath = librarySourceLessResource.getPath();\n\t\tconst fileContent = await librarySourceLessResource.getString();\n\n\t\tlog.verbose(`Generating library.less file based on ${filePath}`);\n\n\t\tconst libraryLessFileContent = await generator.generate({filePath, fileContent});\n\t\tconst libraryLessFilePath = posixPath.join(posixPath.dirname(filePath), \"library.less\");\n\n\t\treturn new Resource({\n\t\t\tpath: libraryLessFilePath,\n\t\t\tstring: libraryLessFileContent\n\t\t});\n\t}));\n};\n\n// Export class for testing only\n/* istanbul ignore else */\nif (process.env.NODE_ENV === \"test\") {\n\tmodule.exports._LibraryLessGenerator = LibraryLessGenerator;\n}\n",
    "lib/processors/themeBuilder.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:processors:themeBuilder\");\nconst path = require(\"path\");\nconst less = require(\"less-openui5\");\nconst Resource = require(\"@ui5/fs\").Resource;\n\nconst libraryMatchPattern = /^\\/resources\\/(.*)\\/themes\\/[^/]*\\/library\\.source\\.less$/i;\n\n/**\n * Builds a library theme\n *\n * @public\n * @memberof module:@ui5/builder.processors\n */\nclass ThemeBuilder {\n\t/**\n\t * Constructor\n\t *\n\t * @public\n\t * @param {fs|module:@ui5/fs.fsInterface} fs Node fs or custom\n\t * \t\t[fs interface]{@link module:resources/module:@ui5/fs.fsInterface}\n\t */\n\tconstructor({fs}) {\n\t\tthis.builder = new less.Builder({fs});\n\t}\n\n\t/**\n\t * Starts the theme build\n\t *\n\t * @public\n\t * @param {module:@ui5/fs.Resource[]} resources Library files\n\t * @param {object} [options] Build options\n\t * @param {boolean} [options.compress=false] Compress build output (CSS / JSON)\n\t * @param {boolean} [options.cssVariables=false] Generates the CSS variables\n\t *   (css-variables.css, css-variables.source.less) and the skeleton for a theme\n\t *   (library-skeleton.css, [library-skeleton-RTL.css])\n\t * @returns {Promise<module:@ui5/fs.Resource[]>} Resolving with array of created files\n\t */\n\tbuild(resources, {compress = false, cssVariables = false} = {}) {\n\t\tconst files = [];\n\n\t\tconst compile = (resource) => {\n\t\t\tlog.verbose(\"Compiling %s\", resource.getPath());\n\n\t\t\tlet libraryName;\n\t\t\tconst libraryMatch = libraryMatchPattern.exec(resource.getPath());\n\t\t\tif (libraryMatch) {\n\t\t\t\tlibraryName = libraryMatch[1].replace(/\\//g, \".\");\n\t\t\t}\n\n\t\t\treturn this.builder.build({\n\t\t\t\tlessInputPath: resource.getPath(),\n\t\t\t\tlibrary: {\n\t\t\t\t\tname: libraryName\n\t\t\t\t},\n\t\t\t\tcompiler: {\n\t\t\t\t\tcompress\n\t\t\t\t},\n\t\t\t\tcssVariables\n\t\t\t}).then((result) => {\n\t\t\t\tconst themeDir = path.dirname(resource.getPath());\n\n\t\t\t\tconst libCss = new Resource({\n\t\t\t\t\tpath: themeDir + \"/library.css\",\n\t\t\t\t\tstring: result.css\n\t\t\t\t});\n\n\t\t\t\tconst libCssRtl = new Resource({\n\t\t\t\t\tpath: themeDir + \"/library-RTL.css\",\n\t\t\t\t\tstring: result.cssRtl\n\t\t\t\t});\n\n\t\t\t\tconst libParams = new Resource({\n\t\t\t\t\tpath: themeDir + \"/library-parameters.json\",\n\t\t\t\t\tstring: JSON.stringify(result.variables, null, compress ? null : \"\\t\")\n\t\t\t\t});\n\n\t\t\t\tfiles.push(libCss, libCssRtl, libParams);\n\n\t\t\t\tif (cssVariables) {\n\t\t\t\t\tconst libCssVarsSource = new Resource({\n\t\t\t\t\t\tpath: themeDir + \"/css_variables.source.less\",\n\t\t\t\t\t\tstring: result.cssVariablesSource\n\t\t\t\t\t});\n\t\t\t\t\tconst libCssVars = new Resource({\n\t\t\t\t\t\tpath: themeDir + \"/css_variables.css\",\n\t\t\t\t\t\tstring: result.cssVariables\n\t\t\t\t\t});\n\t\t\t\t\tconst libCssSkel = new Resource({\n\t\t\t\t\t\tpath: themeDir + \"/library_skeleton.css\",\n\t\t\t\t\t\tstring: result.cssSkeleton\n\t\t\t\t\t});\n\t\t\t\t\tconst libCssSkelRtl = new Resource({\n\t\t\t\t\t\tpath: themeDir + \"/library_skeleton-RTL.css\",\n\t\t\t\t\t\tstring: result.cssSkeletonRtl\n\t\t\t\t\t});\n\n\t\t\t\t\tfiles.push(libCssVarsSource, libCssVars, libCssSkel, libCssSkelRtl);\n\t\t\t\t}\n\t\t\t}, (err) => {\n\t\t\t\tlog.error(`Error while compiling ${resource.getPath()}: ${err.message}`);\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t};\n\n\t\treturn Promise.all(resources.map(compile)).then(() => {\n\t\t\treturn files;\n\t\t});\n\t}\n\n\t/**\n\t * Clears all cached build results\n\t *\n \t * @public\n\t * Use this method to prevent high memory consumption when building many themes within the same process.\n\t */\n\tclearCache() {\n\t\tthis.builder.clearCache();\n\t}\n}\n\n/**\n *\n * @public\n * @typedef {object} ThemeBuilderOptions\n * @property {boolean} [compress=false] Compress build output (CSS / JSON)\n * @property {boolean} [cssVariables=false] Generates the CSS variables\n * (css-variables.css, css-variables.source.less) and the skeleton for a theme\n * (library-skeleton.css, [library-skeleton-RTL.css])\n */\n\n/**\n * Builds a library theme.\n *\n * @public\n * @alias module:@ui5/builder.processors.themeBuilder\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.Resource[]} parameters.resources List of <code>library.source.less</code>\n *   resources to be processed\n * @param {fs|module:@ui5/fs.fsInterface} parameters.fs Node fs or custom\n *   [fs interface]{@link module:resources/module:@ui5/fs.fsInterface}\n * @param {ThemeBuilderOptions} [parameters.options] Options\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with theme resources\n */\nmodule.exports = async function({\n\tresources,\n\tfs,\n\toptions = {}\n}) {\n\tconst {compress, cssVariables} = /** @type {ThemeBuilderOptions} */ (options);\n\tconst themeBuilder = new ThemeBuilder({fs});\n\treturn themeBuilder.build(resources, {\n\t\tcompress,\n\t\tcssVariables\n\t}).then((files) => {\n\t\tthemeBuilder.clearCache();\n\t\treturn files;\n\t});\n};\n\nmodule.exports.ThemeBuilder = ThemeBuilder;\n",
    "lib/tasks/generateCachebusterInfo.js": "const resourceFactory = require(\"@ui5/fs\").resourceFactory;\nconst crypto = require(\"crypto\");\n\nasync function signByTime(resource) {\n\treturn resource.getStatInfo().mtime.getTime();\n}\n\nasync function signByHash(resource) {\n\tconst hasher = crypto.createHash(\"sha1\");\n\tconst buffer = await resource.getBuffer();\n\n\thasher.update(buffer.toString(\"binary\"));\n\treturn hasher.digest(\"hex\");\n}\n\nfunction getSigner(type) {\n\ttype = type || \"time\";\n\n\tswitch (type) {\n\tcase \"time\":\n\t\treturn signByTime;\n\tcase \"hash\":\n\t\treturn signByHash;\n\n\tdefault:\n\t\tthrow new Error(`Invalid signature type: '${type}'. Valid ones are: 'time' or 'hash'`);\n\t}\n}\n\n/**\n * Task to generate the application cachebuster info file.\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateCachebusterInfo\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.namespace Namespace of the application\n * @param {string} [parameters.options.signatureType='time'] Type of signature to be used ('time' or 'hash')\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = function({workspace, dependencies, options: {namespace, signatureType}}) {\n\treturn workspace.byGlob(`/resources/${namespace}/**/*`)\n\t\t.then(async (resources) => {\n\t\t\tconst cachebusterInfo = {};\n\t\t\tconst regex = new RegExp(`^/resources/${namespace}/`);\n\t\t\tconst signer = getSigner(signatureType);\n\n\t\t\tawait Promise.all(resources.map(async (resource) => {\n\t\t\t\tconst normalizedPath = resource.getPath().replace(regex, \"\");\n\t\t\t\tcachebusterInfo[normalizedPath] = await signer(resource);\n\t\t\t}));\n\t\t\tconst cachebusterInfoResource = resourceFactory.createResource({\n\t\t\t\tpath: `/resources/${namespace}/sap-ui-cachebuster-info.json`,\n\t\t\t\tstring: JSON.stringify(cachebusterInfo, null, 2)\n\t\t\t});\n\t\t\treturn workspace.write(cachebusterInfoResource);\n\t\t});\n};\n",
    "lib/tasks/jsdoc/generateJsdoc.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:tasks:jsdoc:generateJsdoc\");\nconst path = require(\"path\");\nconst makeDir = require(\"make-dir\");\nconst os = require(\"os\");\nconst fs = require(\"graceful-fs\");\nconst {promisify} = require(\"util\");\nconst mkdtemp = promisify(fs.mkdtemp);\nconst rimraf = promisify(require(\"rimraf\"));\nconst jsdocGenerator = require(\"../../processors/jsdoc/jsdocGenerator\");\nconst {resourceFactory} = require(\"@ui5/fs\");\n\n/**\n *\n * @public\n * @typedef {object} GenerateJsdocOptions\n * @property {string|string[]} pattern Pattern to locate the files to be processed\n * @property {string} projectName Project name\n * @property {string} namespace Namespace to build (e.g. <code>some/project/name</code>)\n * @property {string} version Project version\n */\n\n/**\n * Task to execute a JSDoc build for UI5 projects\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateJsdoc\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {GenerateJsdocOptions} parameters.options Options\n * @param {module:@ui5/builder.tasks.TaskUtil|object} [parameters.taskUtil] TaskUtil\n * @param {object} [parameters.buildContext] Internal, deprecated parameter\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nconst generateJsdoc = async function({\n\ttaskUtil,\n\tbuildContext,\n\tworkspace,\n\tdependencies,\n\toptions = {}\n}) {\n\tconst {projectName, namespace, version, pattern} = /** @type {GenerateJsdocOptions} */ (options);\n\n\tif (!projectName || !namespace || !version || !pattern) {\n\t\tthrow new Error(\"[generateJsdoc]: One or more mandatory options not provided\");\n\t}\n\n\tconst {sourcePath: resourcePath, targetPath, tmpPath, cleanup} =\n\t\tawait generateJsdoc._createTmpDirs(projectName);\n\n\t// TODO 3.0: remove buildContext\n\tconst _taskUtil = taskUtil || buildContext;\n\tif (_taskUtil) {\n\t\t_taskUtil.registerCleanupTask(cleanup);\n\t}\n\n\tconst [writtenResourcesCount] = await Promise.all([\n\t\tgenerateJsdoc._writeResourcesToDir({\n\t\t\tworkspace,\n\t\t\tpattern,\n\t\t\ttargetPath: resourcePath\n\t\t}),\n\t\tgenerateJsdoc._writeDependencyApisToDir({\n\t\t\tdependencies,\n\t\t\ttargetPath: path.join(tmpPath, \"dependency-apis\")\n\t\t})\n\t]);\n\n\tif (writtenResourcesCount === 0) {\n\t\tlog.info(`Failed to find any input resources for project ${projectName} using pattern ` +\n\t\t\t`${pattern}. Skipping JSDoc generation...`);\n\t\treturn;\n\t}\n\n\tconst createdResources = await jsdocGenerator({\n\t\tsourcePath: resourcePath,\n\t\ttargetPath,\n\t\ttmpPath,\n\t\toptions: {\n\t\t\tprojectName,\n\t\t\tnamespace,\n\t\t\tversion,\n\t\t\tvariants: [\"apijson\"]\n\t\t}\n\t});\n\n\tawait Promise.all(createdResources.map((resource) => {\n\t\treturn workspace.write(resource);\n\t}));\n};\n\n/**\n * Create temporary directories for JSDoc generation processor\n *\n * @private\n * @param {string} projectName Project name used for naming the temporary working directory\n * @returns {Promise<object>} Promise resolving with sourcePath, targetPath and tmpPath strings\n */\nasync function createTmpDirs(projectName) {\n\tconst tmpDirPath = await generateJsdoc._createTmpDir(projectName);\n\n\tconst sourcePath = path.join(tmpDirPath, \"src\"); // dir will be created by writing project resources below\n\tawait makeDir(sourcePath, {fs});\n\tconst targetPath = path.join(tmpDirPath, \"target\"); // dir will be created by jsdoc itself\n\tawait makeDir(targetPath, {fs});\n\n\tconst tmpPath = path.join(tmpDirPath, \"tmp\"); // dir needs to be created by us\n\tawait makeDir(tmpPath, {fs});\n\n\treturn {\n\t\tsourcePath,\n\t\ttargetPath,\n\t\ttmpPath,\n\t\tcleanup: async () => {\n\t\t\treturn rimraf(tmpDirPath);\n\t\t}\n\t};\n}\n\n/**\n * Create a temporary directory on the host system\n *\n * @private\n * @param {string} projectName Project name used for naming the temporary directory\n * @returns {Promise<string>} Promise resolving with path of the temporary directory\n */\nasync function createTmpDir(projectName) {\n\tconst sanitizedProjectName = projectName.replace(/[^A-Za-z0-9]/g, \"\");\n\n\tconst tmpRootPath = path.join(os.tmpdir(), \"ui5-tooling\");\n\tawait makeDir(tmpRootPath, {fs});\n\n\t// Appending minus sign also because node docs advise to \"avoid trailing X characters in prefix\"\n\treturn mkdtemp(path.join(tmpRootPath, `jsdoc-${sanitizedProjectName}-`));\n}\n\n/**\n * Write resources from workspace matching the given pattern to the given fs destination\n *\n * @private\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {string} parameters.pattern Pattern to match resources in workspace against\n * @param {string} parameters.targetPath Path to write the resources to\n * @returns {Promise<number>} Promise resolving with number of resources written to given directory\n */\nasync function writeResourcesToDir({workspace, pattern, targetPath}) {\n\tconst fsTarget = resourceFactory.createAdapter({\n\t\tfsBasePath: targetPath,\n\t\tvirBasePath: \"/resources/\"\n\t});\n\n\tlet allResources;\n\tif (workspace.byGlobSource) { // API only available on duplex collections\n\t\tallResources = await workspace.byGlobSource(pattern);\n\t} else {\n\t\tallResources = await workspace.byGlob(pattern);\n\t}\n\n\t// write all resources to the tmp folder\n\tawait Promise.all(allResources.map((resource) => fsTarget.write(resource)));\n\treturn allResources.length;\n}\n\n/**\n * Write api.json files of dependencies to given target path in a flat structure\n *\n * @private\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {string} parameters.targetPath Path to write the resources to\n * @returns {Promise<number>} Promise resolving with number of resources written to given directory\n */\nasync function writeDependencyApisToDir({dependencies, targetPath}) {\n\tconst depApis = await dependencies.byGlob(\"/test-resources/**/designtime/api.json\");\n\n\t// Clone resources before changing their path\n\tconst apis = await Promise.all(depApis.map((resource) => resource.clone()));\n\n\tfor (let i = 0; i < apis.length; i++) {\n\t\tapis[i].setPath(`/api-${i}.json`);\n\t}\n\n\tconst fsTarget = resourceFactory.createAdapter({\n\t\tfsBasePath: targetPath,\n\t\tvirBasePath: \"/\"\n\t});\n\tawait Promise.all(apis.map((resource) => fsTarget.write(resource)));\n\treturn apis.length;\n}\n\nmodule.exports = generateJsdoc;\nmodule.exports._createTmpDirs = createTmpDirs;\nmodule.exports._createTmpDir = createTmpDir;\nmodule.exports._writeResourcesToDir = writeResourcesToDir;\nmodule.exports._writeDependencyApisToDir = writeDependencyApisToDir;\n",
    "lib/types/AbstractUi5Formatter.js": "const log = require(\"@ui5/logger\").getLogger(\"types:AbstractUi5Formatter\");\nconst path = require(\"path\");\nconst fs = require(\"graceful-fs\");\nconst AbstractFormatter = require(\"./AbstractFormatter\");\nconst {promisify} = require(\"util\");\nconst readFile = promisify(fs.readFile);\n\n/**\n * Base class for formatters that require access to some UI5 specific resources\n * like pom.xml\n *\n * @abstract\n */\nclass AbstractUi5Formatter extends AbstractFormatter {\n\t/**\n\t * Constructor\n\t *\n\t * @param {object} parameters\n\t * @param {object} parameters.project Project\n\t */\n\tconstructor(parameters) {\n\t\tsuper(parameters);\n\t\tif (new.target === AbstractUi5Formatter) {\n\t\t\tthrow new TypeError(\"Class 'AbstractUi5Formatter' is abstract\");\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether a given string contains a maven placeholder.\n\t * E.g. <code>${appId}</code>.\n\t *\n\t * @param {string} value String to check\n\t * @returns {boolean} True if given string contains a maven placeholder\n\t */\n\thasMavenPlaceholder(value) {\n\t\treturn !!value.match(/^\\$\\{(.*)\\}$/);\n\t}\n\n\t/**\n\t * Resolves a maven placeholder in a given string using the projects pom.xml\n\t *\n\t * @param {string} value String containing a maven placeholder\n\t * @returns {Promise<string>} Resolved string\n\t */\n\tasync resolveMavenPlaceholder(value) {\n\t\tconst parts = value && value.match(/^\\$\\{(.*)\\}$/);\n\t\tif (parts) {\n\t\t\tlog.verbose(`\"${value} contains a maven placeholder \"${parts[1]}\". Resolving from projects pom.xml...`);\n\t\t\tconst pom = await this.getPom();\n\t\t\tlet mvnValue;\n\t\t\tif (pom.project && pom.project.properties && pom.project.properties[parts[1]]) {\n\t\t\t\tmvnValue = pom.project.properties[parts[1]];\n\t\t\t} else {\n\t\t\t\tlet obj = pom;\n\t\t\t\tparts[1].split(\".\").forEach((part) => {\n\t\t\t\t\tobj = obj && obj[part];\n\t\t\t\t});\n\t\t\t\tmvnValue = obj;\n\t\t\t}\n\t\t\tif (!mvnValue) {\n\t\t\t\tthrow new Error(`\"${value}\" couldn't be resolved from maven property ` +\n\t\t\t\t\t`\"${parts[1]}\" of pom.xml of project ${this._project.metadata.name}`);\n\t\t\t}\n\t\t\treturn mvnValue;\n\t\t} else {\n\t\t\tthrow new Error(`\"${value}\" is not a maven placeholder`);\n\t\t}\n\t}\n\n\t/**\n\t * Reads the projects pom.xml file\n\t *\n\t * @returns {Promise<object>} Resolves with a JSON representation of the content\n\t */\n\tasync getPom() {\n\t\tif (this._pPom) {\n\t\t\treturn this._pPom;\n\t\t}\n\t\tconst fsPath = path.join(this._project.path, \"pom.xml\");\n\t\treturn this._pPom = readFile(fsPath).then(async (content) => {\n\t\t\tconst xml2js = require(\"xml2js\");\n\t\t\tconst parser = new xml2js.Parser({\n\t\t\t\texplicitArray: false,\n\t\t\t\tignoreAttrs: true\n\t\t\t});\n\t\t\tconst readXML = promisify(parser.parseString);\n\t\t\treturn readXML(content);\n\t\t}).catch((err) => {\n\t\t\tthrow new Error(\n\t\t\t\t`Failed to read pom.xml for project ${this._project.metadata.name}: ${err.message}`);\n\t\t});\n\t}\n}\n\nmodule.exports = AbstractUi5Formatter;\n",
    "lib/types/application/ApplicationBuilder.js": "const AbstractBuilder = require(\"../AbstractBuilder\");\nconst {getTask} = require(\"../../tasks/taskRepository\");\n\nclass ApplicationBuilder extends AbstractBuilder {\n\taddStandardTasks({resourceCollections, project, log, taskUtil}) {\n\t\tif (!project.metadata.namespace) {\n\t\t\t// TODO 3.0: Throw here\n\t\t\tlog.info(\"Skipping some tasks due to missing application namespace information. If your project contains \" +\n\t\t\t\t\t\"a Component.js, you might be missing a manifest.json file. \" +\n\t\t\t\t\t\"Also see: https://sap.github.io/ui5-tooling/pages/Builder/#application\");\n\t\t}\n\n\t\tthis.addTask(\"escapeNonAsciiCharacters\", async () => {\n\t\t\tconst propertiesFileSourceEncoding = project.resources &&\n\t\t\tproject.resources.configuration &&\n\t\t\tproject.resources.configuration.propertiesFileSourceEncoding;\n\t\t\treturn getTask(\"escapeNonAsciiCharacters\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tencoding: propertiesFileSourceEncoding,\n\t\t\t\t\tpattern: \"/**/*.properties\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"replaceCopyright\", async () => {\n\t\t\treturn getTask(\"replaceCopyright\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tcopyright: project.metadata.copyright,\n\t\t\t\t\tpattern: \"/**/*.{js,json}\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"replaceVersion\", async () => {\n\t\t\treturn getTask(\"replaceVersion\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tversion: project.version,\n\t\t\t\t\tpattern: \"/**/*.{js,json}\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"generateFlexChangesBundle\", async () => {\n\t\t\tconst generateFlexChangesBundle = getTask(\"generateFlexChangesBundle\").task;\n\t\t\treturn generateFlexChangesBundle({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\ttaskUtil,\n\t\t\t\toptions: {\n\t\t\t\t\tnamespace: project.metadata.namespace\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tif (project.metadata.namespace) {\n\t\t\tthis.addTask(\"generateManifestBundle\", async () => {\n\t\t\t\tconst generateManifestBundle = getTask(\"generateManifestBundle\").task;\n\t\t\t\treturn generateManifestBundle({\n\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\tnamespace: project.metadata.namespace\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst componentPreload = project.builder && project.builder.componentPreload;\n\t\tif (componentPreload && (componentPreload.namespaces || componentPreload.paths)) {\n\t\t\tthis.addTask(\"generateComponentPreload\", async () => {\n\t\t\t\treturn getTask(\"generateComponentPreload\").task({\n\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\t\ttaskUtil,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\tpaths: componentPreload.paths,\n\t\t\t\t\t\tnamespaces: componentPreload.namespaces,\n\t\t\t\t\t\texcludes: componentPreload.excludes\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} else if (project.metadata.namespace) {\n\t\t\t// Default component preload for application namespace\n\t\t\tthis.addTask(\"generateComponentPreload\", async () => {\n\t\t\t\treturn getTask(\"generateComponentPreload\").task({\n\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\t\ttaskUtil,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\tnamespaces: [project.metadata.namespace],\n\t\t\t\t\t\texcludes: componentPreload && componentPreload.excludes\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis.addTask(\"generateStandaloneAppBundle\", async () => {\n\t\t\treturn getTask(\"generateStandaloneAppBundle\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\ttaskUtil,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\tnamespace: project.metadata.namespace\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"transformBootstrapHtml\", async () => {\n\t\t\treturn getTask(\"transformBootstrapHtml\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\tnamespace: project.metadata.namespace\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst bundles = project.builder && project.builder.bundles;\n\t\tif (bundles) {\n\t\t\tthis.addTask(\"generateBundle\", async () => {\n\t\t\t\treturn Promise.all(bundles.map((bundle) => {\n\t\t\t\t\treturn getTask(\"generateBundle\").task({\n\t\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\t\t\ttaskUtil,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\t\tbundleDefinition: bundle.bundleDefinition,\n\t\t\t\t\t\t\tbundleOptions: bundle.bundleOptions\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t});\n\t\t}\n\n\t\tthis.addTask(\"createDebugFiles\", async () => {\n\t\t\tconst createDebugFiles = getTask(\"createDebugFiles\").task;\n\t\t\treturn createDebugFiles({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tpattern: \"/**/*.js\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"uglify\", async () => {\n\t\t\tconst uglify = getTask(\"uglify\").task;\n\t\t\treturn uglify({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\ttaskUtil,\n\t\t\t\toptions: {\n\t\t\t\t\tpattern: \"/**/*.js\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"generateVersionInfo\", async () => {\n\t\t\treturn getTask(\"generateVersionInfo\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\trootProject: project,\n\t\t\t\t\tpattern: \"/resources/**/.library\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tif (project.metadata.namespace) {\n\t\t\tthis.addTask(\"generateCachebusterInfo\", async () => {\n\t\t\t\treturn getTask(\"generateCachebusterInfo\").task({\n\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tnamespace: project.metadata.namespace,\n\t\t\t\t\t\tsignatureType: project.builder &&\n\t\t\t\t\t\t\tproject.builder.cachebuster &&\n\t\t\t\t\t\t\tproject.builder.cachebuster.signatureType,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis.addTask(\"generateApiIndex\", async () => {\n\t\t\treturn getTask(\"generateApiIndex\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"generateResourcesJson\", () => {\n\t\t\treturn getTask(\"generateResourcesJson\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = ApplicationBuilder;\n",
    "lib/types/library/LibraryBuilder.js": "const AbstractBuilder = require(\"../AbstractBuilder\");\nconst {getTask} = require(\"../../tasks/taskRepository\");\n\nclass LibraryBuilder extends AbstractBuilder {\n\taddStandardTasks({resourceCollections, project, log, taskUtil}) {\n\t\tif (!project.metadata.namespace) {\n\t\t\t// TODO 3.0: Throw here\n\t\t\tlog.info(\"Skipping some tasks due to missing library namespace information. Your project \" +\n\t\t\t\t\"might be missing a manifest.json or .library file. \" +\n\t\t\t\t\"Also see: https://sap.github.io/ui5-tooling/pages/Builder/#library\");\n\t\t}\n\n\t\tthis.addTask(\"escapeNonAsciiCharacters\", async () => {\n\t\t\tconst propertiesFileSourceEncoding = project.resources &&\n\t\t\t\tproject.resources.configuration &&\n\t\t\t\tproject.resources.configuration.propertiesFileSourceEncoding;\n\t\t\treturn getTask(\"escapeNonAsciiCharacters\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tencoding: propertiesFileSourceEncoding,\n\t\t\t\t\tpattern: \"/**/*.properties\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"replaceCopyright\", async () => {\n\t\t\treturn getTask(\"replaceCopyright\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tcopyright: project.metadata.copyright,\n\t\t\t\t\tpattern: \"/resources/**/*.{js,library,less,theme}\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"replaceVersion\", async () => {\n\t\t\treturn getTask(\"replaceVersion\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tversion: project.version,\n\t\t\t\t\tpattern: \"/resources/**/*.{js,json,library,less,theme}\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tif (project.metadata.namespace) {\n\t\t\tthis.addTask(\"generateJsdoc\", async () => {\n\t\t\t\tconst patterns = [\"/resources/**/*.js\"];\n\t\t\t\t// Add excludes\n\t\t\t\tif (project.builder && project.builder.jsdoc && project.builder.jsdoc.excludes) {\n\t\t\t\t\tconst excludes = project.builder.jsdoc.excludes.map((pattern) => {\n\t\t\t\t\t\treturn `!/resources/${pattern}`;\n\t\t\t\t\t});\n\n\t\t\t\t\tpatterns.push(...excludes);\n\t\t\t\t}\n\n\t\t\t\treturn getTask(\"generateJsdoc\").task({\n\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\t\ttaskUtil,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\tnamespace: project.metadata.namespace,\n\t\t\t\t\t\tversion: project.version,\n\t\t\t\t\t\tpattern: patterns\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.addTask(\"executeJsdocSdkTransformation\", async () => {\n\t\t\t\treturn getTask(\"executeJsdocSdkTransformation\").task({\n\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\tdotLibraryPattern: \"/resources/**/*.library\",\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst componentPreload = project.builder && project.builder.componentPreload;\n\t\tif (componentPreload) {\n\t\t\tthis.addTask(\"generateComponentPreload\", async () => {\n\t\t\t\treturn getTask(\"generateComponentPreload\").task({\n\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\t\ttaskUtil,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\tpaths: componentPreload.paths,\n\t\t\t\t\t\tnamespaces: componentPreload.namespaces,\n\t\t\t\t\t\texcludes: componentPreload.excludes\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis.addTask(\"generateLibraryManifest\", async () => {\n\t\t\treturn getTask(\"generateLibraryManifest\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\ttaskUtil,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\n\t\tif (project.metadata.namespace) {\n\t\t\tthis.addTask(\"generateManifestBundle\", async () => {\n\t\t\t\treturn getTask(\"generateManifestBundle\").task({\n\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\tnamespace: project.metadata.namespace\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis.addTask(\"generateLibraryPreload\", async () => {\n\t\t\treturn getTask(\"generateLibraryPreload\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\ttaskUtil,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\texcludes:\n\t\t\t\t\t\tproject.builder &&\n\t\t\t\t\t\tproject.builder.libraryPreload &&\n\t\t\t\t\t\tproject.builder.libraryPreload.excludes\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst bundles = project.builder && project.builder.bundles;\n\t\tif (bundles) {\n\t\t\tthis.addTask(\"generateBundle\", async () => {\n\t\t\t\treturn bundles.reduce(function(sequence, bundle) {\n\t\t\t\t\treturn sequence.then(function() {\n\t\t\t\t\t\treturn getTask(\"generateBundle\").task({\n\t\t\t\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\t\t\t\ttaskUtil,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\t\t\t\tbundleDefinition: bundle.bundleDefinition,\n\t\t\t\t\t\t\t\tbundleOptions: bundle.bundleOptions\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}, Promise.resolve());\n\t\t\t});\n\t\t}\n\n\t\tthis.addTask(\"buildThemes\", async () => {\n\t\t\t// Only compile themes directly below the lib namespace to be in sync with the theme support at runtime\n\t\t\t// which only loads themes from that folder.\n\t\t\t// TODO 3.0: Remove fallback in case of missing namespace\n\t\t\tconst inputPattern = `/resources/${project.metadata.namespace || \"**\"}/themes/*/library.source.less`;\n\n\t\t\treturn getTask(\"buildThemes\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\tlibrariesPattern: !taskUtil.isRootProject() ? \"/resources/**/*.library\" : undefined,\n\t\t\t\t\tthemesPattern: !taskUtil.isRootProject() ? \"/resources/sap/ui/core/themes/*\" : undefined,\n\t\t\t\t\tinputPattern\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"generateThemeDesignerResources\", async () => {\n\t\t\treturn getTask(\"generateThemeDesignerResources\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\tversion: project.version,\n\t\t\t\t\tnamespace: project.metadata.namespace\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"createDebugFiles\", async () => {\n\t\t\treturn getTask(\"createDebugFiles\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tpattern: \"/resources/**/*.js\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"uglify\", async () => {\n\t\t\treturn getTask(\"uglify\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\ttaskUtil,\n\t\t\t\toptions: {\n\t\t\t\t\tpattern: \"/resources/**/*.js\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"generateResourcesJson\", () => {\n\t\t\treturn getTask(\"generateResourcesJson\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = LibraryBuilder;\n",
    "lib/types/themeLibrary/ThemeLibraryBuilder.js": "const AbstractBuilder = require(\"../AbstractBuilder\");\nconst {getTask} = require(\"../../tasks/taskRepository\");\n\nclass ThemeLibraryBuilder extends AbstractBuilder {\n\taddStandardTasks({resourceCollections, project, log, taskUtil}) {\n\t\tthis.addTask(\"replaceCopyright\", async () => {\n\t\t\treturn getTask(\"replaceCopyright\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tcopyright: project.metadata.copyright,\n\t\t\t\t\tpattern: \"/resources/**/*.{less,theme}\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"replaceVersion\", async () => {\n\t\t\treturn getTask(\"replaceVersion\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\toptions: {\n\t\t\t\t\tversion: project.version,\n\t\t\t\t\tpattern: \"/resources/**/*.{less,theme}\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"buildThemes\", async () => {\n\t\t\treturn getTask(\"buildThemes\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\tlibrariesPattern: !taskUtil.isRootProject() ? \"/resources/**/*.library\" : undefined,\n\t\t\t\t\tthemesPattern: !taskUtil.isRootProject() ? \"/resources/sap/ui/core/themes/*\" : undefined,\n\t\t\t\t\tinputPattern: \"/resources/**/themes/*/library.source.less\"\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"generateThemeDesignerResources\", async () => {\n\t\t\treturn getTask(\"generateThemeDesignerResources\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name,\n\t\t\t\t\tversion: project.version\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.addTask(\"generateResourcesJson\", () => {\n\t\t\treturn getTask(\"generateResourcesJson\").task({\n\t\t\t\tworkspace: resourceCollections.workspace,\n\t\t\t\tdependencies: resourceCollections.dependencies,\n\t\t\t\toptions: {\n\t\t\t\t\tprojectName: project.metadata.name\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = ThemeLibraryBuilder;\n",
    "test/lib/lbt/analyzer/ComponentAnalyzer.js": "const test = require(\"ava\");\nconst path = require(\"path\");\nconst ComponentAnalyzer = require(\"../../../../lib/lbt/analyzer/ComponentAnalyzer\");\n\nconst sinon = require(\"sinon\");\n\nfunction createMockPool(relPath, manifest) {\n\tconst expectedPath = path.join(relPath, \"manifest.json\");\n\treturn {\n\t\tasync findResource(name) {\n\t\t\tif (name !== expectedPath) {\n\t\t\t\tthrow new Error(`unexpected resource name: ${name}, expected ${expectedPath}`);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tasync buffer() {\n\t\t\t\t\treturn JSON.stringify(manifest);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n}\n\ntest(\"routing with empty config, routes, targets\", async (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {},\n\t\t\t\troutes: [],\n\t\t\t\ttargets: {}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\tawait subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo);\n\n\tt.deepEqual(mockInfo.deps, [\n\t\t\"sap/ui/core/routing/Router.js\"\n\t], \"dependencies should be correct\");\n});\n\ntest(\"routing with empty config, targets\", async (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {},\n\t\t\t\ttargets: {}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\tawait subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo);\n\n\tt.deepEqual(mockInfo.deps, [\n\t\t\"sap/ui/core/routing/Targets.js\",\n\t\t\"sap/ui/core/routing/Views.js\"\n\t], \"dependencies should be correct\");\n});\n\ntest(\"routing with targets but no routes\", async (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\ttargets: {\n\t\t\t\t\ttest: {\n\t\t\t\t\t\tviewName: \"App\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\tawait subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo);\n\n\tt.deepEqual(mockInfo.deps, [\n\t\t\"sap/ui/core/routing/Targets.js\",\n\t\t\"sap/ui/core/routing/Views.js\",\n\t\t\"test/view/App.view.xml\"\n\t], \"dependencies should be correct\");\n});\n\ntest(\"routing with routes as array\", async (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\troutes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"test\",\n\t\t\t\t\t\ttarget: \"test\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\ttargets: {\n\t\t\t\t\ttest: {viewName: \"App\"}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\tawait subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo);\n\n\tt.deepEqual(mockInfo.deps, [\n\t\t\"sap/ui/core/routing/Router.js\",\n\t\t\"test/view/App.view.xml\"\n\t], \"dependencies should be correct\");\n});\n\n\ntest(\"routing with routes as object\", async (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\troutes: {\n\t\t\t\t\ttest: {\n\t\t\t\t\t\ttarget: \"test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttargets: {\n\t\t\t\t\ttest: {viewName: \"App\"}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\tawait subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo);\n\n\tt.deepEqual(mockInfo.deps, [\n\t\t\"sap/ui/core/routing/Router.js\",\n\t\t\"test/view/App.view.xml\"\n\t], \"dependencies should be correct\");\n});\n\ntest(\"routing with route with multiple targets\", async (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\troutes: {\n\t\t\t\t\ttest: {\n\t\t\t\t\t\ttarget: [\"test1\", \"test2\"]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttargets: {\n\t\t\t\t\ttest1: {viewName: \"Master\"},\n\t\t\t\t\ttest2: {viewName: \"Detail\"}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\tawait subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo);\n\n\tt.deepEqual(mockInfo.deps, [\n\t\t\"sap/ui/core/routing/Router.js\",\n\t\t\"test/view/Master.view.xml\",\n\t\t\"test/view/Detail.view.xml\"\n\t], \"dependencies should be correct\");\n});\n\ntest(\"routing with targets with local config\", async (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\troutes: {\n\t\t\t\t\ttest1: {\n\t\t\t\t\t\ttarget: \"test1\"\n\t\t\t\t\t},\n\t\t\t\t\ttest2: {\n\t\t\t\t\t\ttarget: \"test2\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttargets: {\n\t\t\t\t\ttest1: {\n\t\t\t\t\t\tviewName: \"Master\",\n\t\t\t\t\t\tviewType: \"JS\"\n\t\t\t\t\t},\n\t\t\t\t\ttest2: {\n\t\t\t\t\t\tviewName: \"Detail\",\n\t\t\t\t\t\tviewPath: \"test.subview\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\tawait subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo);\n\n\tt.deepEqual(mockInfo.deps, [\n\t\t\"sap/ui/core/routing/Router.js\",\n\t\t\"test/view/Master.view.js\",\n\t\t\"test/subview/Detail.view.xml\"\n\t], \"dependencies should be correct\");\n});\n\ntest(\"rootView with object\", (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trootView: {\n\t\t\t\tviewName: \"test.view.App\",\n\t\t\t\ttype: \"JS\",\n\t\t\t\tasync: true\n\t\t\t}\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\treturn subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo).then( () => {\n\t\tt.deepEqual(mockInfo.deps, [\n\t\t\t\"test/view/App.view.js\",\n\t\t], \"dependencies should be correct\");\n\t});\n});\n\ntest(\"rootView with string\", (t) => {\n\tconst mockManifest = {\n\t\t\"sap.ui5\": {\n\t\t\trootView: \"test.view.App\"\n\t\t}\n\t};\n\n\tconst mockPool = createMockPool(\"test/\", mockManifest);\n\n\tconst mockInfo = {\n\t\tdeps: [],\n\t\taddDependency(name) {\n\t\t\tthis.deps.push(name);\n\t\t}\n\t};\n\n\tconst subject = new ComponentAnalyzer(mockPool);\n\treturn subject.analyze({name: path.join(\"test\", \"Component.js\")}, mockInfo).then( () => {\n\t\tt.deepEqual(mockInfo.deps, [\n\t\t\t\"test/view/App.view.xml\",\n\t\t], \"dependencies should be correct\");\n\t});\n});\n\n\ntest(\"analyze: with Component.js\", async (t) => {\n\tconst emptyPool = {};\n\tconst analyzer = new ComponentAnalyzer(emptyPool);\n\tconst name = \"sap/ui/core/Component.js\";\n\tconst moduleInfo = {};\n\tconst result = await analyzer.analyze({name}, moduleInfo);\n\tt.deepEqual(result, {}, \"moduleInfo was not modified\");\n});\n\ntest(\"analyze: with manifest\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t}\n\t};\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => JSON.stringify(manifest)\n\t\t\t};\n\t\t}\n\t};\n\n\tconst moduleInfo = {};\n\n\tconst analyzer = new ComponentAnalyzer(mockPool);\n\n\tconst stubAnalyzeManifest = sinon.stub(analyzer, \"_analyzeManifest\").resolves();\n\n\tconst name = \"MyComponent.js\";\n\tawait analyzer.analyze({name}, moduleInfo);\n\n\tt.true(stubAnalyzeManifest.calledOnce, \"_analyzeManifest was called once\");\n\tt.deepEqual(stubAnalyzeManifest.getCall(0).args[0], manifest,\n\t\t\"_analyzeManifest should be called with the manifest\");\n});\n\ntest(\"analyze: without manifest\", async (t) => {\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => {\n\t\t\t\t\tthrow new Error(\"Some error\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\tconst moduleInfo = {};\n\n\tconst analyzer = new ComponentAnalyzer(mockPool);\n\n\tconst stubAnalyzeManifest = sinon.stub(analyzer, \"_analyzeManifest\").resolves();\n\n\tconst name = \"MyComponent.js\";\n\tconst result = await analyzer.analyze({name}, moduleInfo);\n\n\tt.false(stubAnalyzeManifest.called, \"_analyzeManifest was not called\");\n\tt.deepEqual(result, {}, \"empty module info object expected since resource was not found (rejects)\");\n});\n\ntest(\"_analyzeManifest: empty Manifest\", async (t) => {\n\tconst manifest = {};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.false(stubAddDependency.called, \"addDependency was called once\");\n});\n\ntest(\"_analyzeManifest: Manifest with routing and routes array\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\troutes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"test\",\n\t\t\t\t\t\ttarget: \"test\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\ttargets: {\n\t\t\t\t\ttest: {viewName: \"App\"}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.deepEqual(stubAddDependency.callCount, 2, \"addDependency was called twice\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/core/routing/Router.js\",\n\t\t\"addDependency should be called with the router dependency name\");\n\tt.deepEqual(stubAddDependency.getCall(1).args[0], \"test/view/App.view.xml\",\n\t\t\"addDependency should be called with the app dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with routing and routes object\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\troutes: {\n\t\t\t\t\ttest: {\n\t\t\t\t\t\ttarget: \"test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttargets: {\n\t\t\t\t\ttest: {viewName: \"App\"}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.deepEqual(stubAddDependency.callCount, 2, \"addDependency was called twice\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/core/routing/Router.js\",\n\t\t\"addDependency should be called with the router dependency name\");\n\tt.deepEqual(stubAddDependency.getCall(1).args[0], \"test/view/App.view.xml\",\n\t\t\"addDependency should be called with the app dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with legacy routes object\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\troutes: {\n\t\t\t\t\ttest: {\n\t\t\t\t\t\tpattern: \"\",\n\t\t\t\t\t\tview: \"App\",\n\t\t\t\t\t\ttargetAggregation: \"pages\",\n\t\t\t\t\t\ttargetControl: \"app\",\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\t// Note: Dependencies to views within legacy routes are not collected\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/core/routing/Router.js\",\n\t\t\"addDependency should be called with the router dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with empty routes array\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\trouting: {\n\t\t\t\tconfig: {\n\t\t\t\t\tviewPath: \"test.view\",\n\t\t\t\t\tviewType: \"XML\"\n\t\t\t\t},\n\t\t\t\troutes: []\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/core/routing/Router.js\",\n\t\t\"addDependency should be called with the router dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with rootview object\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\trootView: {\n\t\t\t\tviewName: \"test.view.App\",\n\t\t\t\ttype: \"JS\",\n\t\t\t\tasync: true\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"test/view/App.view.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with rootview string\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\trootView: \"test.view.App\"\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"test/view/App.view.xml\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with dependency libs\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {\n\t\t\t\t\t\"sap.ui.core\": {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/core/library.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with dependency components\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"components\": {\n\t\t\t\t\t\"sap.ui.test.manifestload\": {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/test/manifestload/Component.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with models\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"i18n\": {\n\t\t\t\t\t\"type\": \"sap.ui.model.resource.ResourceModel\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/model/resource/ResourceModel.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with V2 OData model via dataSources\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/odata/v2/service\",\n\t\t\t\t\t\"type\": \"OData\",\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"odataVersion\": \"2.0\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/model/odata/v2/ODataModel.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with V2 OData model via dataSources (default type)\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/odata/v2/service\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/model/odata/v2/ODataModel.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with V2 OData model via dataSources with settings (default type)\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/odata/v2/service\",\n\t\t\t\t\t\"settings\": {}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/model/odata/v2/ODataModel.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with V4 OData model via dataSources\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/odata/v4/service\",\n\t\t\t\t\t\"type\": \"OData\",\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"odataVersion\": \"4.0\",\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/model/odata/v4/ODataModel.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with unknown OData version via dataSources\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/odata/v4/service\",\n\t\t\t\t\t\"type\": \"OData\",\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"odataVersion\": \"5.0\",\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.notCalled, \"addDependency was not called\");\n});\n\n\ntest(\"_analyzeManifest: Manifest with JSON model via dataSources\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/json/service\",\n\t\t\t\t\t\"type\": \"JSON\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/model/json/JSONModel.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with XML model via dataSources\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/xml/service\",\n\t\t\t\t\t\"type\": \"XML\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/ui/model/xml/XMLModel.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with model via dataSources (custom type)\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/some/service\",\n\t\t\t\t\t\"type\": \"MyType\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.notCalled, \"addDependency was not called\");\n});\n\ntest(\"_analyzeManifest: Manifest with model (non existing/different dataSource)\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.app\": {\n\t\t\t\"dataSources\": {\n\t\t\t\t\"mainService\": {\n\t\t\t\t\t\"uri\": \"/uri/to/some/service\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"someOtherService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.notCalled, \"addDependency was not called\");\n});\n\ntest(\"_analyzeManifest: Manifest with model (non existing dataSource)\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {\n\t\t\t\t\t\"dataSource\": \"mainService\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.notCalled, \"addDependency was not called\");\n});\n\ntest(\"_analyzeManifest: Manifest with model (no type / no dataSource)\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui5\": {\n\t\t\t\"models\": {\n\t\t\t\t\"\": {}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new ComponentAnalyzer();\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAddDependency.notCalled, \"addDependency was not called\");\n});\n",
    "test/lib/lbt/analyzer/FioriElementsAnalyzer.js": "const test = require(\"ava\");\nconst FioriElementsAnalyzer = require(\"../../../../lib/lbt/analyzer/FioriElementsAnalyzer\");\nconst sinon = require(\"sinon\");\nconst esprima = require(\"esprima\");\n\ntest(\"analyze: with Component.js\", async (t) => {\n\tconst emptyPool = {};\n\tconst analyzer = new FioriElementsAnalyzer(emptyPool);\n\tconst name = \"sap/ui/core/Component.js\";\n\tconst moduleInfo = {};\n\tconst result = await analyzer.analyze({name}, moduleInfo);\n\tt.deepEqual(result, {}, \"moduleInfo was not modified\");\n});\n\ntest(\"analyze: without manifest\", async (t) => {\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => {\n\t\t\t\t\tthrow new Error(\"Some error\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\tconst moduleInfo = {};\n\n\tconst analyzer = new FioriElementsAnalyzer(mockPool);\n\n\tconst stubAnalyzeManifest = sinon.stub(analyzer, \"_analyzeManifest\").resolves();\n\n\tconst name = \"MyComponent.js\";\n\tconst result = await analyzer.analyze({name}, moduleInfo);\n\n\tt.false(stubAnalyzeManifest.called, \"_analyzeManifest was not called\");\n\tt.deepEqual(result, {}, \"empty module info object expected since resource was not found (rejects)\");\n});\n\ntest(\"analyze: with manifest\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.fe\": {\n\t\t\t\"entitySets\": [{\n\t\t\t\t\"mySet\": {\n\t\t\t\t\t\"myProp\": {\n\t\t\t\t\t\t\"template\": \"MyTmpl\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => JSON.stringify(manifest)\n\t\t\t};\n\t\t}\n\t};\n\n\tconst moduleInfo = {};\n\n\tconst analyzer = new FioriElementsAnalyzer(mockPool);\n\n\tconst stubAnalyzeManifest = sinon.stub(analyzer, \"_analyzeManifest\").resolves();\n\n\tconst name = \"MyComponent.js\";\n\tawait analyzer.analyze({name}, moduleInfo);\n\n\tt.true(stubAnalyzeManifest.calledOnce, \"_analyzeManifest was called once\");\n\tt.deepEqual(stubAnalyzeManifest.getCall(0).args[0], manifest,\n\t\t\"_analyzeManifest should be called with the manifest\");\n});\n\ntest(\"_analyzeManifest: Manifest with TemplateAssembler code\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.fe\": {\n\t\t\t\"entitySets\": [{\n\t\t\t\t\"mySet\": {\n\t\t\t\t\t\"myProp\": {\n\t\t\t\t\t\t\"template\": \"MyTmpl\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new FioriElementsAnalyzer();\n\n\tconst stubAnalyzeTemplateComponent = sinon.stub(analyzer, \"_analyzeTemplateComponent\").resolves();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.true(stubAnalyzeTemplateComponent.calledOnce, \"_analyzeManifest was called once\");\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(0).args[0], \"sap/fe/templates/MyTmpl/Component.js\",\n\t\t\"_analyzeManifest should be called with the module name\");\n\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(0).args[1], {\n\t\t\"template\": \"MyTmpl\"\n\t}, \"_analyzeManifest should be called with the actionCfg\");\n\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(0).args[2], moduleInfo,\n\t\t\"_analyzeManifest should be called with moduleInfo\");\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"sap/fe/templates/MyTmpl/Component.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: Manifest with entitySet key\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.fe\": {\n\t\t\t\"entitySets\": [{\n\t\t\t\t\"entitySet\": \"123\"\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst moduleInfo = {};\n\tconst analyzer = new FioriElementsAnalyzer();\n\tconst result = await analyzer._analyzeManifest(manifest, moduleInfo);\n\tt.deepEqual(result, [], \"resolves with an empty array\");\n});\n\n\ntest.serial(\"_analyzeTemplateComponent: Manifest with TemplateAssembler code\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"\"\n\t\t\t};\n\t\t}\n\t};\n\n\tconst analyzer = new FioriElementsAnalyzer(mockPool);\n\n\tconst stubAnalyzeAST = sinon.stub(analyzer, \"_analyzeAST\").returns(\"mytpl\");\n\tconst stubParse = sinon.stub(esprima, \"parse\").returns(\"\");\n\n\tawait analyzer._analyzeTemplateComponent(\"pony\",\n\t\t{}, moduleInfo);\n\n\tt.true(stubAnalyzeAST.calledOnce, \"_analyzeManifest was called once\");\n\tt.deepEqual(stubAnalyzeAST.getCall(0).args[0], \"pony\",\n\t\t\"_analyzeManifest should be called with the module name\");\n\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"mytpl.view.xml\",\n\t\t\"addDependency should be called with the dependency name\");\n\tstubAnalyzeAST.restore();\n\tstubParse.restore();\n});\n\ntest.serial(\"_analyzeTemplateComponent: no default template name\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"\"\n\t\t\t};\n\t\t}\n\t};\n\n\tconst analyzer = new FioriElementsAnalyzer(mockPool);\n\n\tconst stubAnalyzeAST = sinon.stub(analyzer, \"_analyzeAST\").returns(\"\");\n\tconst stubParse = sinon.stub(esprima, \"parse\").returns(\"\");\n\n\tawait analyzer._analyzeTemplateComponent(\"pony\",\n\t\t{}, moduleInfo);\n\n\tt.true(stubAnalyzeAST.calledOnce, \"_analyzeManifest was called once\");\n\n\tt.true(stubAddDependency.notCalled, \"addDependency was not called\");\n\tstubAnalyzeAST.restore();\n\tstubParse.restore();\n});\n\ntest.serial(\"_analyzeTemplateComponent: with template name from pageConfig\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"\"\n\t\t\t};\n\t\t}\n\t};\n\n\tconst analyzer = new FioriElementsAnalyzer(mockPool);\n\n\tconst stubAnalyzeAST = sinon.stub(analyzer, \"_analyzeAST\").returns(\"\");\n\tconst stubParse = sinon.stub(esprima, \"parse\").returns(\"\");\n\n\tawait analyzer._analyzeTemplateComponent(\"pony\", {\n\t\tcomponent: {\n\t\t\tsettings: {\n\t\t\t\ttemplateName: \"donkey\"\n\t\t\t}\n\t\t}\n\t}, moduleInfo);\n\n\tt.true(stubAnalyzeAST.calledOnce, \"_analyzeManifest was called once\");\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"donkey.view.xml\",\n\t\t\"addDependency should be called with the dependency name\");\n\tstubAnalyzeAST.restore();\n\tstubParse.restore();\n});\n\ntest(\"_analyzeAST: get template name from ast\", async (t) => {\n\tconst code = `sap.ui.define([\"a\", \"sap/fe/core/TemplateAssembler\"], function(a, TemplateAssembler){\n\t\treturn TemplateAssembler.getTemplateComponent(getMethods,\n\t\t\"sap.fe.templates.Page.Component\", {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": \"sap.fe.templates.Page.view.Page\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t});});`;\n\tconst ast = esprima.parse(code);\n\n\tconst analyzer = new FioriElementsAnalyzer();\n\n\tconst stubAnalyzeTemplateClassDefinition = sinon.stub(analyzer,\n\t\t\"_analyzeTemplateClassDefinition\").returns(\"donkey\");\n\n\tconst result = await analyzer._analyzeAST(\"pony\", ast);\n\n\n\tt.true(stubAnalyzeTemplateClassDefinition.calledOnce, \"_analyzeTemplateClassDefinition was called once\");\n\n\tstubAnalyzeTemplateClassDefinition.restore();\n\tt.deepEqual(result, \"donkey\");\n});\n\ntest(\"_analyzeAST: no template name from ast\", async (t) => {\n\tconst code = `sap.ui.define([\"a\", \"sap/fe/core/TemplateAssembler\"], function(a, TemplateAssembler){\n\t\treturn TemplateAssembler.getTemplateComponent(getMethods,\n\t\t\"sap.fe.templates.Page.Component\", {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": \"sap.fe.templates.Page.view.Page\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t});});`;\n\tconst ast = esprima.parse(code);\n\n\tconst analyzer = new FioriElementsAnalyzer();\n\n\tconst stubAnalyzeTemplateClassDefinition = sinon.stub(analyzer,\n\t\t\"_analyzeTemplateClassDefinition\").returns(false);\n\n\tconst result = await analyzer._analyzeAST(\"pony\", ast);\n\n\n\tt.true(stubAnalyzeTemplateClassDefinition.calledOnce, \"_analyzeTemplateClassDefinition was called once\");\n\n\tstubAnalyzeTemplateClassDefinition.restore();\n\tt.deepEqual(result, \"\");\n});\n\ntest(\"_analyzeTemplateClassDefinition: get template name from metadata\", async (t) => {\n\tconst code = `var x = {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": \"sap.fe.templates.Page.view.Page\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t};`;\n\tconst ast = esprima.parse(code);\n\tconst expression = ast.body[0].declarations[0].init;\n\n\tconst analyzer = new FioriElementsAnalyzer();\n\n\tconst result = await analyzer._analyzeTemplateClassDefinition(expression);\n\n\tt.deepEqual(result, \"sap.fe.templates.Page.view.Page\", \"defaultValue is retrieved\");\n});\n\ntest(\"_analyzeTemplateClassDefinition: no string template name from metadata\", async (t) => {\n\tconst code = `var x = {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t};`;\n\tconst ast = esprima.parse(code);\n\tconst expression = ast.body[0].declarations[0].init;\n\n\tconst analyzer = new FioriElementsAnalyzer();\n\n\tconst result = await analyzer._analyzeTemplateClassDefinition(expression);\n\n\tt.falsy(result, \"defaultValue is not a string\");\n});\n",
    "test/lib/lbt/analyzer/SmartTemplateAnalyzer.js": "const test = require(\"ava\");\nconst SmartTemplateAnalyzer = require(\"../../../../lib/lbt/analyzer/SmartTemplateAnalyzer\");\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\nconst sinon = require(\"sinon\");\nconst esprima = require(\"esprima\");\n\n\ntest(\"analyze: with Component.js\", async (t) => {\n\tconst emptyPool = {};\n\tconst analyzer = new SmartTemplateAnalyzer(emptyPool);\n\tconst name = \"sap/ui/core/Component.js\";\n\tconst moduleInfo = {};\n\tconst result = await analyzer.analyze({name}, moduleInfo);\n\tt.deepEqual(result, {}, \"moduleInfo was not modified\");\n});\n\ntest(\"analyze: without manifest\", async (t) => {\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => {\n\t\t\t\t\tthrow new Error(\"Some error\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\tconst moduleInfo = {};\n\n\tconst analyzer = new SmartTemplateAnalyzer(mockPool);\n\tconst stubAnalyzeManifest = sinon.stub(analyzer, \"_analyzeManifest\").resolves();\n\n\tconst name = \"MyComponent.js\";\n\tconst result = await analyzer.analyze({name}, moduleInfo);\n\n\tt.false(stubAnalyzeManifest.called, \"_analyzeManifest was not called\");\n\tt.deepEqual(result, {}, \"empty module info object expected since resource was not found (rejects)\");\n});\n\ntest(\"_analyzeManifest: without manifest\", async (t) => {\n\tconst moduleInfo = {};\n\n\tconst analyzer = new SmartTemplateAnalyzer();\n\n\tconst result = await analyzer._analyzeManifest({}, moduleInfo);\n\n\tt.deepEqual(result, [], \"resolves with empty array\");\n});\n\n\ntest(\"_analyzeManifest: with manifest with recursive pages (as array)\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst manifest = {\n\t\t\"sap.ui.generic.app\": {\n\t\t\t\"pages\": [{\n\t\t\t\t\"component\": {\n\t\t\t\t\t\"name\": \"test.mycomp\",\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pages\": [{\n\t\t\t\t\t\"component\": {\n\t\t\t\t\t\t\"name\": \"test.mycomp2\",\n\t\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t}]\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst analyzer = new SmartTemplateAnalyzer();\n\tconst stubAnalyzeTemplateComponent = sinon.stub(analyzer, \"_analyzeTemplateComponent\").resolves();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.is(stubAnalyzeTemplateComponent.callCount, 2, \"_analyzeTemplateComponent was called twice\");\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(0).args[0], \"test/mycomp/Component.js\",\n\t\t\"_analyzeTemplateComponent should be called with the component\");\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(0).args[1], {\n\t\t\"component\": {\n\t\t\t\"name\": \"test.mycomp\",\n\t\t\t\"settings\": {\n\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t}\n\t\t},\n\t\t\"pages\": [{\n\t\t\t\"component\": {\n\t\t\t\t\"name\": \"test.mycomp2\",\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t\t}\n\t\t\t},\n\t\t}]\n\t}, \"_analyzeTemplateComponent should be called with the page\");\n\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(1).args[0], \"test/mycomp2/Component.js\",\n\t\t\"_analyzeTemplateComponent should be called with the component\");\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(1).args[1], {\n\t\t\"component\": {\n\t\t\t\"name\": \"test.mycomp2\",\n\t\t\t\"settings\": {\n\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t}\n\t\t}\n\t}, \"_analyzeTemplateComponent should be called with the page\");\n\n\tt.is(stubAddDependency.callCount, 2, \"addDependency was called twice\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"test/mycomp/Component.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeManifest: with manifest with recursive pages (as object)\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst manifest = {\n\t\t\"sap.ui.generic.app\": {\n\t\t\t\"pages\": {\n\t\t\t\t\"MyPage1\": {\n\t\t\t\t\t\"component\": {\n\t\t\t\t\t\t\"name\": \"test.mycomp\",\n\t\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"pages\": {\n\t\t\t\t\t\t\"MyPage2\": {\n\t\t\t\t\t\t\t\"component\": {\n\t\t\t\t\t\t\t\t\"name\": \"test.mycomp2\",\n\t\t\t\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst analyzer = new SmartTemplateAnalyzer();\n\tconst stubAnalyzeTemplateComponent = sinon.stub(analyzer, \"_analyzeTemplateComponent\").resolves();\n\n\tawait analyzer._analyzeManifest(manifest, moduleInfo);\n\n\tt.is(stubAnalyzeTemplateComponent.callCount, 2, \"_analyzeTemplateComponent was called twice\");\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(0).args[0], \"test/mycomp/Component.js\",\n\t\t\"_analyzeTemplateComponent should be called with the component\");\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(0).args[1], {\n\t\t\"component\": {\n\t\t\t\"name\": \"test.mycomp\",\n\t\t\t\"settings\": {\n\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t}\n\t\t},\n\t\t\"pages\": {\n\t\t\t\"MyPage2\": {\n\t\t\t\t\"component\": {\n\t\t\t\t\t\"name\": \"test.mycomp2\",\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, \"_analyzeTemplateComponent should be called with the page\");\n\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(1).args[0], \"test/mycomp2/Component.js\",\n\t\t\"_analyzeTemplateComponent should be called with the component\");\n\tt.deepEqual(stubAnalyzeTemplateComponent.getCall(1).args[1], {\n\t\t\"component\": {\n\t\t\t\"name\": \"test.mycomp2\",\n\t\t\t\"settings\": {\n\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t}\n\t\t}\n\t}, \"_analyzeTemplateComponent should be called with the page\");\n\n\tt.is(stubAddDependency.callCount, 2, \"addDependency was called twice\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"test/mycomp/Component.js\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest.serial(\"_analyzeTemplateComponent: Manifest with TemplateAssembler code\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"\"\n\t\t\t};\n\t\t},\n\t\tgetIgnoreMissingModules() {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tconst analyzer = new SmartTemplateAnalyzer(mockPool);\n\n\tconst stubAnalyzeAST = sinon.stub(analyzer, \"_analyzeAST\").returns(\"mytpl\");\n\tconst stubParse = sinon.stub(esprima, \"parse\").returns(\"\");\n\n\tawait analyzer._analyzeTemplateComponent(\"pony\",\n\t\t{}, moduleInfo);\n\n\tt.true(stubAnalyzeAST.calledOnce, \"_analyzeManifest was called once\");\n\tt.deepEqual(stubAnalyzeAST.getCall(0).args[0], \"pony\",\n\t\t\"_analyzeManifest should be called with the module name\");\n\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"mytpl.view.xml\",\n\t\t\"addDependency should be called with the dependency name\");\n\tstubAnalyzeAST.restore();\n\tstubParse.restore();\n});\n\ntest.serial(\"_analyzeTemplateComponent: no default template name\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"\"\n\t\t\t};\n\t\t},\n\t\tgetIgnoreMissingModules() {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tconst analyzer = new SmartTemplateAnalyzer(mockPool);\n\n\tconst stubAnalyzeAST = sinon.stub(analyzer, \"_analyzeAST\").returns(\"\");\n\tconst stubParse = sinon.stub(esprima, \"parse\").returns(\"\");\n\n\tawait analyzer._analyzeTemplateComponent(\"pony\",\n\t\t{}, moduleInfo);\n\n\tt.true(stubAnalyzeAST.calledOnce, \"_analyzeManifest was called once\");\n\n\tt.true(stubAddDependency.notCalled, \"addDependency was not called\");\n\tstubAnalyzeAST.restore();\n\tstubParse.restore();\n});\n\ntest.serial(\"_analyzeTemplateComponent: with template name from pageConfig\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"\"\n\t\t\t};\n\t\t},\n\t\tgetIgnoreMissingModules() {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tconst analyzer = new SmartTemplateAnalyzer(mockPool);\n\n\tconst stubAnalyzeAST = sinon.stub(analyzer, \"_analyzeAST\").returns(\"\");\n\tconst stubParse = sinon.stub(esprima, \"parse\").returns(\"\");\n\n\tawait analyzer._analyzeTemplateComponent(\"pony\", {\n\t\tcomponent: {\n\t\t\tsettings: {\n\t\t\t\ttemplateName: \"donkey\"\n\t\t\t}\n\t\t}\n\t}, moduleInfo);\n\n\tt.true(stubAnalyzeAST.calledOnce, \"_analyzeManifest was called once\");\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"donkey.view.xml\",\n\t\t\"addDependency should be called with the dependency name\");\n\tstubAnalyzeAST.restore();\n\tstubParse.restore();\n});\n\ntest.serial(\"_analyzeTemplateComponent: dependency not found\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\tthrow new Error(`resource not found in pool: 'pony'`);\n\t\t},\n\t\tgetIgnoreMissingModules() {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tconst analyzer = new SmartTemplateAnalyzer(mockPool);\n\n\tconst stubAnalyzeAST = sinon.stub(analyzer, \"_analyzeAST\").returns(\"\");\n\tconst stubParse = sinon.stub(esprima, \"parse\").returns(\"\");\n\n\tconst error = await t.throwsAsync(analyzer._analyzeTemplateComponent(\"pony\", {\n\t\tcomponent: {\n\t\t\tsettings: {\n\t\t\t\ttemplateName: \"donkey\"\n\t\t\t}\n\t\t}\n\t}, moduleInfo));\n\n\tt.deepEqual(error.message, `resource not found in pool: 'pony'`);\n\n\tt.is(stubAnalyzeAST.callCount, 0, \"_analyzeManifest was not called\");\n\n\tt.is(stubAddDependency.callCount, 0, \"addDependency was not called\");\n\tstubAnalyzeAST.restore();\n\tstubParse.restore();\n});\n\ntest.serial(\"_analyzeTemplateComponent: dependency not found is ignored\", async (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst mockPool = {\n\t\tasync findResource() {\n\t\t\tthrow new Error(`resource not found in pool: 'pony'`);\n\t\t},\n\t\tgetIgnoreMissingModules() {\n\t\t\treturn true; // Missing dependency error can be ignored\n\t\t}\n\t};\n\n\tconst analyzer = new SmartTemplateAnalyzer(mockPool);\n\n\tconst stubAnalyzeAST = sinon.stub(analyzer, \"_analyzeAST\").returns(\"\");\n\tconst stubParse = sinon.stub(esprima, \"parse\").returns(\"\");\n\n\tawait analyzer._analyzeTemplateComponent(\"pony\", {\n\t\tcomponent: {\n\t\t\tsettings: {\n\t\t\t\ttemplateName: \"donkey\"\n\t\t\t}\n\t\t}\n\t}, moduleInfo);\n\n\tt.is(stubAnalyzeAST.callCount, 0, \"_analyzeManifest was not called\");\n\n\tt.is(stubAddDependency.callCount, 0, \"addDependency was not called\");\n\tstubAnalyzeAST.restore();\n\tstubParse.restore();\n});\n\ntest(\"_analyzeAST: get template name from ast\", async (t) => {\n\tconst code = `sap.ui.define([\"a\", \"sap/suite/ui/generic/template/lib/TemplateAssembler\"],\n\tfunction(a, TemplateAssembler){\n\t\treturn TemplateAssembler.getTemplateComponent(getMethods,\n\t\t\"sap.fe.templates.Page.Component\", {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": \"sap.fe.templates.Page.view.Page\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t});});`;\n\tconst ast = esprima.parse(code);\n\n\tconst analyzer = new SmartTemplateAnalyzer();\n\n\tconst stubAnalyzeTemplateClassDefinition = sinon.stub(analyzer,\n\t\t\"_analyzeTemplateClassDefinition\").returns(\"donkey\");\n\n\tconst result = await analyzer._analyzeAST(\"pony\", ast);\n\n\n\tt.true(stubAnalyzeTemplateClassDefinition.calledOnce, \"_analyzeTemplateClassDefinition was called once\");\n\n\tstubAnalyzeTemplateClassDefinition.restore();\n\tt.deepEqual(result, \"donkey\");\n});\n\ntest(\"_analyzeAST: no template name from ast\", async (t) => {\n\tconst code = `sap.ui.define([\"a\", \"sap/suite/ui/generic/template/lib/TemplateAssembler\"],\n\tfunction(a, TemplateAssembler){\n\t\treturn TemplateAssembler.getTemplateComponent(getMethods,\n\t\t\"sap.fe.templates.Page.Component\", {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": \"sap.fe.templates.Page.view.Page\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t});});`;\n\tconst ast = esprima.parse(code);\n\n\tconst analyzer = new SmartTemplateAnalyzer();\n\n\tconst stubAnalyzeTemplateClassDefinition = sinon.stub(analyzer,\n\t\t\"_analyzeTemplateClassDefinition\").returns(false);\n\n\tconst result = await analyzer._analyzeAST(\"pony\", ast);\n\n\n\tt.true(stubAnalyzeTemplateClassDefinition.calledOnce, \"_analyzeTemplateClassDefinition was called once\");\n\n\tstubAnalyzeTemplateClassDefinition.restore();\n\tt.deepEqual(result, \"\");\n});\n\ntest(\"Analysis of Manifest and TemplateAssembler code\", async (t) => {\n\tconst manifest = {\n\t\t\"sap.ui.generic.app\": {\n\t\t\t\"pages\": [{\n\t\t\t\t\"component\": {\n\t\t\t\t\t\"name\": \"test.mycomp\",\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"templateName\": \"myTemplate\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst code = `sap.ui.define([\"a\", \"sap/suite/ui/generic/template/lib/TemplateAssembler\"],\n\t\tfunction(a, TemplateAssembler){   return TemplateAssembler.getTemplateComponent(getMethods,\n\t\t\"sap.suite.ui.generic.templates.Page.Component\", {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": \"sap.suite.ui.generic.templates.Page.view.Page\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t});\n\t});`;\n\tconst mockPool = {\n\t\tasync findResource(name) {\n\t\t\treturn {\n\t\t\t\tbuffer: () => name.endsWith(\".json\") ? JSON.stringify(manifest): code\n\t\t\t};\n\t\t}\n\t};\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new SmartTemplateAnalyzer(mockPool);\n\tconst name = \"MyComponent.js\";\n\tawait analyzer.analyze({name}, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies, [\"test/mycomp/Component.js\", \"myTemplate.view.xml\"],\n\t\t\"Resulting dependencies should come from manifest and code\");\n});\n\ntest(\"_analyzeTemplateClassDefinition: get template name from metadata\", async (t) => {\n\tconst code = `var x = {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": \"sap.fe.templates.Page.view.Page\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t};`;\n\tconst ast = esprima.parse(code);\n\tconst expression = ast.body[0].declarations[0].init;\n\n\tconst analyzer = new SmartTemplateAnalyzer();\n\n\tconst result = await analyzer._analyzeTemplateClassDefinition(expression);\n\n\tt.deepEqual(result, \"sap.fe.templates.Page.view.Page\", \"defaultValue is retrieved\");\n});\n\ntest(\"_analyzeTemplateClassDefinition: no string template name from metadata\", async (t) => {\n\tconst code = `var x = {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t};`;\n\tconst ast = esprima.parse(code);\n\tconst expression = ast.body[0].declarations[0].init;\n\n\tconst analyzer = new SmartTemplateAnalyzer();\n\n\tconst result = await analyzer._analyzeTemplateClassDefinition(expression);\n\n\tt.falsy(result, \"defaultValue is not a string\");\n});\n",
    "test/lib/lbt/analyzer/XMLCompositeAnalyzer.js": "const test = require(\"ava\");\nconst esprima = require(\"esprima\");\nconst sinon = require(\"sinon\");\nconst XMLCompositeAnalyzer = require(\"../../../../lib/lbt/analyzer/XMLCompositeAnalyzer\");\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\n\ntest(\"integration: XMLComposite code\", async (t) => {\n\tconst code = `sap.ui.define([\n\t\t'jquery.sap.global', 'sap/ui/core/XMLComposite'],\n\t\tfunction(jQuery, XMLComposite) {\n\t\t\"use strict\";\n\t\tvar ButtonList = XMLComposite.extend(\"composites.ButtonList\", {});\n\t\treturn ButtonList;\n\t});`;\n\n\tconst ast = esprima.parse(code);\n\n\tconst analyzer = new XMLCompositeAnalyzer();\n\tconst name = \"composites.ButtonList\";\n\tconst moduleInfo = new ModuleInfo();\n\tawait analyzer.analyze(ast, name, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies, [\"composites/ButtonList.control.xml\"],\n\t\t\"Dependency should be created from component name\");\n});\n\ntest(\"analyze: not an XMLComposite module\", async (t) => {\n\tconst code = `sap.ui.define([\n\t\t'jquery.sap.global', 'sap/ui/core/XMLComposite'],\n\t\tfunction(jQuery, XMLComposite) {\n\t\t\"use strict\";\n\t\treturn {};\n\t});`;\n\n\tconst ast = esprima.parse(code);\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new XMLCompositeAnalyzer();\n\tconst stubCheckForXMLCClassDefinition = sinon.stub(analyzer, \"_checkForXMLCClassDefinition\").returns(\"cow\");\n\tconst name = \"composites.ButtonList\";\n\tawait analyzer.analyze(ast, name, moduleInfo);\n\tt.false(stubCheckForXMLCClassDefinition.called, \"_checkForXMLCClassDefinition was not called\");\n\tt.false(stubAddDependency.called, \"addDependency was not called\");\n});\n\ntest(\"analyze: XMLComposite VariableDeclaration code\", async (t) => {\n\tconst code = `sap.ui.define([\n\t\t'jquery.sap.global', 'sap/ui/core/XMLComposite'],\n\t\tfunction(jQuery, XMLComposite) {\n\t\t\"use strict\";\n\t\tvar ButtonList = XMLComposite.extend(\"composites.ButtonList\", {});\n\t\treturn ButtonList;\n\t});`;\n\n\tconst ast = esprima.parse(code);\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new XMLCompositeAnalyzer();\n\tconst stubCheckForXMLCClassDefinition = sinon.stub(analyzer, \"_checkForXMLCClassDefinition\").returns(\"cow\");\n\tconst name = \"composites.ButtonList\";\n\tawait analyzer.analyze(ast, name, moduleInfo);\n\tt.true(stubCheckForXMLCClassDefinition.calledOnce, \"_checkForXMLCClassDefinition was called once\");\n\tt.deepEqual(stubCheckForXMLCClassDefinition.getCall(0).args[0], \"XMLComposite\",\n\t\t\"_checkForXMLCClassDefinition should be called with the name\");\n\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"cow.control.xml\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\n\ntest(\"analyze: XMLComposite Expression code\", async (t) => {\n\tconst code = `sap.ui.define([\n\t\t'jquery.sap.global', 'sap/ui/core/XMLComposite'],\n\t\tfunction(jQuery, XMLComposite) {\n\t\t\"use strict\";\n\t\tjQuery.sap.test = XMLComposite.extend(\"composites.ButtonList\", {});\n\t});`;\n\n\tconst ast = esprima.parse(code);\n\n\tconst moduleInfo = {\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new XMLCompositeAnalyzer();\n\tconst stubCheckForXMLCClassDefinition = sinon.stub(analyzer, \"_checkForXMLCClassDefinition\").returns(\"cow\");\n\tconst name = \"composites.ButtonList\";\n\tawait analyzer.analyze(ast, name, moduleInfo);\n\tt.true(stubCheckForXMLCClassDefinition.calledOnce, \"_checkForXMLCClassDefinition was called once\");\n\tt.deepEqual(stubCheckForXMLCClassDefinition.getCall(0).args[0], \"XMLComposite\",\n\t\t\"_checkForXMLCClassDefinition should be called with the name\");\n\n\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called once\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"cow.control.xml\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_checkForXMLCClassDefinition: string argument and object expression\", async (t) => {\n\tconst code = `XMLComposite.extend(\"composites.ButtonList\", {})`;\n\n\tconst ast = esprima.parse(code);\n\n\tconst analyzer = new XMLCompositeAnalyzer();\n\tconst stubAnalyzeXMLCClassDefinition = sinon.stub(analyzer, \"_analyzeXMLCClassDefinition\").returns(\"cow\");\n\tconst result = analyzer._checkForXMLCClassDefinition(\"XMLComposite\", ast.body[0].expression);\n\tt.true(stubAnalyzeXMLCClassDefinition.calledOnce, \"_checkForXMLCClassDefinition was called once\");\n\n\tt.deepEqual(result, \"cow\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeXMLCClassDefinition: name retrieval\", async (t) => {\n\tconst code = `test({fragment: \"cat\"})`;\n\n\tconst ast = esprima.parse(code);\n\n\tconst analyzer = new XMLCompositeAnalyzer();\n\tconst result = analyzer._analyzeXMLCClassDefinition(ast.body[0].expression.arguments[0]);\n\n\tt.deepEqual(result, \"cat\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n",
    "test/lib/lbt/bundle/AutoSplitter.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst terser = require(\"terser\");\nconst {pd} = require(\"pretty-data\");\nconst BundleResolver = require(\"../../../../lib/lbt/bundle/Resolver\");\nconst AutoSplitter = require(\"../../../../lib/lbt/bundle/AutoSplitter\");\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\n\nfunction createMockPool(dependencies) {\n\treturn {\n\t\tasync findResourceWithInfo(name) {\n\t\t\tconst info = new ModuleInfo(name);\n\t\t\tdependencies.forEach((dependency) => {\n\t\t\t\tinfo.addDependency(dependency);\n\t\t\t});\n\t\t\tif (name === \"c.js\") {\n\t\t\t\tinfo.compressedSize = 512;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tinfo,\n\t\t\t\tbuffer: async () => Buffer.from(name.padStart(2048, \"*\")),\n\t\t\t\tgetProject: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t\"resources\": {\n\t\t\t\t\t\t\t\"configuration\": {\n\t\t\t\t\t\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tresource: {\n\t\t\t\t\tgetBuffer: async () => Buffer.from(name.padStart(2048, \"*\"))\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tresources: [{\n\t\t\tname: \"a.js\"\n\t\t}, {\n\t\t\tname: \"c.js\"\n\t\t}, {\n\t\t\tname: \"b.json\"\n\t\t}, {\n\t\t\tname: \"x.view.xml\"\n\t\t}, {\n\t\t\tname: \"c.properties\"\n\t\t}]\n\t};\n}\n\ntest(\"integration: AutoSplitter with numberOfParts 1\", async (t) => {\n\tconst pool = createMockPool([\"mydep\"]);\n\tconst autoSplitter = new AutoSplitter(pool, new BundleResolver(pool));\n\tconst bundleDefinition = {\n\t\tname: `Component-preload.js`,\n\t\tdefaultFileTypes: [\".js\", \".fragment.xml\", \".view.xml\", \".properties\", \".json\"],\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"a.js\", \"b.json\"],\n\t\t\tresolve: false,\n\t\t\tresolveConditional: false,\n\t\t\trenderer: false\n\t\t}]\n\t};\n\tconst oResult = await autoSplitter.run(bundleDefinition, {numberOfParts: 1});\n\tt.is(oResult.length, 1, \"There should be only one part created since numberOfParts option is 1\");\n\tt.deepEqual(oResult[0], {\n\t\tname: `Component-preload-0.js`,\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"a.js\", \"b.json\"],\n\t\t\tname: undefined\n\t\t}]\n\t});\n});\n\ntest(\"integration: AutoSplitter with numberOfParts 2\", async (t) => {\n\tconst pool = createMockPool([\"a.js\", \"b.json\"]);\n\tconst autoSplitter = new AutoSplitter(pool, new BundleResolver(pool));\n\tconst bundleDefinition = {\n\t\tname: `Component-preload.js`,\n\t\tdefaultFileTypes: [\".js\", \".fragment.xml\", \".view.xml\", \".properties\", \".json\"],\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"a.js\", \"b.json\", \"x.view.xml\"],\n\t\t\tresolve: false,\n\t\t\tresolveConditional: false,\n\t\t\trenderer: false,\n\t\t\tmodules: [\"a.js\", \"b.json\", \"x.view.xml\"]\n\t\t}, {\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"c.js\", \"c.properties\"],\n\t\t\tresolve: false,\n\t\t\tresolveConditional: false,\n\t\t\trenderer: false,\n\t\t\tmodules: [\"c.js\", \"c.properties\"]\n\t\t}, {\n\t\t\tmode: \"provided\"\n\t\t}, {\n\t\t\tmode: \"raw\",\n\t\t\tmodules: [\"a.js\", \"b.json\"],\n\t\t\tfilters: [\"a.js\", \"b.json\"],\n\t\t\tsectionDefinition: {\n\t\t\t\tdeclareRawModules: [],\n\t\t\t\tsort: false\n\t\t\t}\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"a.js\", \"c.js\"],\n\t\t\tmodules: [\"a.js\", \"c.js\"]\n\t\t}],\n\t\tconfiguration: {}\n\t};\n\tconst oResult = await autoSplitter.run(bundleDefinition, {numberOfParts: 2, optimize: false});\n\tt.is(oResult.length, 2, \"2 parts expected\");\n\tt.deepEqual(oResult[0], {\n\t\tname: `Component-preload-0.js`,\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"a.js\"],\n\t\t\tname: undefined\n\t\t}],\n\t\tconfiguration: {}\n\t}, \"first part should contain only a.js since its size is only 2048\");\n\tt.deepEqual(oResult[1], {\n\t\tname: `Component-preload-1.js`,\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"b.json\", \"x.view.xml\"],\n\t\t\tname: undefined\n\t\t}, {\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"c.js\", \"c.properties\"],\n\t\t\tname: undefined\n\t\t}, {\n\t\t\tdeclareRawModules: undefined,\n\t\t\tmode: \"raw\",\n\t\t\tfilters: [],\n\t\t\tsort: undefined\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"a.js\", \"c.js\"]\n\t\t}]\n\t}, \"second part should contain the other resources\");\n});\n\n\ntest(\"_calcMinSize: compressedSize\", async (t) => {\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn {\n\t\t\t\tinfo: {\n\t\t\t\t\tcompressedSize: 123,\n\t\t\t\t\tsize: 333\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.js\"), 123);\n});\n\ntest(\"_calcMinSize: js resource\", async (t) => {\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn {\n\t\t\t\tinfo: {\n\t\t\t\t\tsize: 333,\n\t\t\t\t\tcompressedSize: 333\n\t\t\t\t},\n\t\t\t\tbuffer: async () => \"var test = 5;\",\n\t\t\t\tgetProject: () => undefined\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.js\"), 13);\n});\n\n\ntest.serial(\"_calcMinSize: uglify js resource\", async (t) => {\n\tconst stubTerser = sinon.stub(terser, \"minify\").resolves({code: \"123\"});\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn {\n\t\t\t\tinfo: {\n\t\t\t\t\tsize: 333,\n\t\t\t\t\tcompressedSize: 333\n\t\t\t\t},\n\t\t\t\tbuffer: async () => \"var test = 5;\",\n\t\t\t\tgetProject: () => undefined\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tautpSplitter.optimize = true;\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.js\"), 3);\n\tstubTerser.restore();\n});\n\ntest(\"_calcMinSize: properties resource\", async (t) => {\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\tlet content = \"1234ß\";\n\t\t\treturn {\n\t\t\t\tbuffer: async () => Buffer.from(content),\n\t\t\t\tresource: {\n\t\t\t\t\tsetString: (string) => {\n\t\t\t\t\t\tcontent = string;\n\t\t\t\t\t},\n\t\t\t\t\tgetBuffer: async () => Buffer.from(content, \"latin1\")\n\t\t\t\t},\n\t\t\t\tgetProject: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t\"resources\": {\n\t\t\t\t\t\t\t\"configuration\": {\n\t\t\t\t\t\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.properties\"), 10, \"length of 1234\\\\u00df\");\n});\n\ntest(\"_calcMinSize: xml view resource\", async (t) => {\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"12345\",\n\t\t\t\tgetProject: () => undefined\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tautpSplitter.optimizeXMLViews = true;\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.view.xml\"), 5);\n});\n\ntest(\"_calcMinSize: xml view resource without optimizeXMLViews\", async (t) => {\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"123456\",\n\t\t\t\tgetProject: () => undefined\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.view.xml\"), 6);\n});\n\ntest.serial(\"_calcMinSize: optimize xml view resource\", async (t) => {\n\tconst stubXmlmin = sinon.stub(pd, \"xmlmin\").returns(\"xxx123\");\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"xxx\",\n\t\t\t\tgetProject: () => undefined\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tautpSplitter.optimizeXMLViews = true;\n\tautpSplitter.optimize = true;\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.view.xml\"), 6);\n\tstubXmlmin.restore();\n});\n\ntest.serial(\"_calcMinSize: optimize xml view resource and pre tag\", async (t) => {\n\tconst stubXmlmin = sinon.spy(pd, \"xmlmin\");\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn {\n\t\t\t\tbuffer: async () => \"<xml><pre>asd</pre>\",\n\t\t\t\tgetProject: () => undefined\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tautpSplitter.optimizeXMLViews = true;\n\tautpSplitter.optimize = true;\n\tt.false(stubXmlmin.called, \"xmlmin should not be called\");\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.view.xml\"), 19);\n\tstubXmlmin.restore();\n});\n\ntest(\"_calcMinSize: no resource\", async (t) => {\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn null;\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.properties\"), 0);\n});\n\ntest(\"_calcMinSize: unknown resource with info\", async (t) => {\n\tconst pool = {\n\t\tfindResourceWithInfo: function() {\n\t\t\treturn {\n\t\t\t\tinfo: {\n\t\t\t\t\tsize: 47\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\tconst autpSplitter = new AutoSplitter(pool);\n\tt.deepEqual(await autpSplitter._calcMinSize(\"mymodule.mjs\"), 47);\n});\n",
    "test/lib/lbt/bundle/Builder.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nconst Builder = require(\"../../../../lib/lbt/bundle/Builder\");\nconst ResourcePool = require(\"../../../../lib/lbt/resources/ResourcePool\");\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.serial(\"writePreloadModule: with invalid json content\", async (t) => {\n\tconst writeStub = sinon.stub();\n\tconst logger = require(\"@ui5/logger\");\n\tconst verboseLogStub = sinon.stub();\n\tconst myLoggerInstance = {\n\t\tverbose: verboseLogStub\n\t};\n\tsinon.stub(logger, \"getLogger\").returns(myLoggerInstance);\n\tconst BuilderWithStub = mock.reRequire(\"../../../../lib/lbt/bundle/Builder\");\n\tconst invalidJsonContent = `{\n\t\"a\": 47,\n\t\"b\": {{include: asd}}\n\t}`;\n\n\tconst builder = new BuilderWithStub({});\n\tbuilder.optimize = true;\n\tbuilder.outW = {\n\t\twrite: writeStub\n\t};\n\tconst invalidJsonResource = {\n\t\tbuffer: async () => {\n\t\t\treturn invalidJsonContent;\n\t\t}\n\t};\n\tconst result = await builder.writePreloadModule(\"invalid.json\", undefined, invalidJsonResource);\n\n\n\tt.is(verboseLogStub.callCount, 2, \"called 2 times\");\n\tt.is(verboseLogStub.firstCall.args[0], \"Failed to parse JSON file %s. Ignoring error, skipping compression.\",\n\t\t\"first verbose log argument 0 is correct\");\n\tt.is(verboseLogStub.firstCall.args[1], \"invalid.json\", \"first verbose log argument 1 is correct\");\n\tt.deepEqual(verboseLogStub.secondCall.args[0], new SyntaxError(\"Unexpected token { in JSON at position 19\"),\n\t\t\"second verbose log\");\n\n\tt.true(result, \"result is true\");\n\tt.is(writeStub.callCount, 1, \"Writer is called once\");\n});\n\ntest(\"integration: createBundle with exposedGlobals\", async (t) => {\n\tconst pool = new ResourcePool();\n\tpool.addResource({\n\t\tname: \"a.js\",\n\t\tbuffer: async () => \"function One(){return 1;}\"\n\t});\n\tpool.addResource({\n\t\tname: \"ui5loader.js\",\n\t\tbuffer: async () => \"\"\n\t});\n\tpool.addResource({\n\t\tname: \"a.library\",\n\t\tbuffer: async () => `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t<appData>\n\t\t<packaging xmlns=\"http://www.sap.com/ui5/buildext/packaging\" version=\"2.0\" >\n\t\t\t  <module-infos>\n\t\t\t\t<raw-module name=\"a.js\"\n\t\t\t\t\trequiresTopLevelScope=\"false\" />\n\t\t\t</module-infos>\n\t\t</packaging>\n\t</appData>\n</library>`\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: `library-preload.js`,\n\t\tdefaultFileTypes: [\".js\"],\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tname: \"preload-section\",\n\t\t\tfilters: [\"a.js\"]\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"ui5loader.js\"]\n\t\t}]\n\t};\n\n\tconst builder = new Builder(pool);\n\tconst oResult = await builder.createBundle(bundleDefinition, {numberOfParts: 1, decorateBootstrapModule: true});\n\tt.deepEqual(oResult.name, \"library-preload.js\");\n\tconst expectedContent = `//@ui5-bundle library-preload.js\nsap.ui.require.preload({\n\t\"a.js\":function(){function One(){return 1;}\nthis.One=One;\n}\n},\"preload-section\");\nsap.ui.requireSync(\"ui5loader\");\n`;\n\tt.deepEqual(oResult.content, expectedContent, \"EVOBundleFormat \" +\n\t\t\"should contain:\" +\n\t\t\" preload part from a.js\" +\n\t\t\" require part from ui5loader.js\");\n\tt.deepEqual(oResult.bundleInfo.name, \"library-preload.js\", \"bundle info name is correct\");\n\tt.deepEqual(oResult.bundleInfo.size, expectedContent.length, \"bundle info size is correct\");\n\tt.deepEqual(oResult.bundleInfo.subModules, [\"a.js\"],\n\t\t\"bundle info subModules are correct\");\n});\n\ntest(\"integration: createBundle EVOBundleFormat (ui5loader.js)\", async (t) => {\n\tconst pool = new ResourcePool();\n\tpool.addResource({\n\t\tname: \"ui5loader.js\",\n\t\tbuffer: async () => \"(function(__global) {sap.ui.require = function(){};}(window));\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.global-dbg.js\",\n\t\tbuffer: async () => \"sap.ui.define([], function(){return {};});\"\n\t});\n\tpool.addResource({\n\t\tname: \"myModule.js\",\n\t\tbuffer: async () => \"(function(){window.mine = {};}());\"\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: `Component-preload.js`,\n\t\tdefaultFileTypes: [\".js\"],\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tname: \"preload-section\",\n\t\t\tfilters: [\"jquery.sap.global-dbg.js\"]\n\t\t}, {\n\t\t\tdeclareRawModules: undefined,\n\t\t\tmode: \"raw\",\n\t\t\tfilters: [\"myModule.js\"],\n\t\t\tsort: undefined\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"ui5loader.js\"]\n\t\t}]\n\t};\n\n\tconst builder = new Builder(pool);\n\tconst oResult = await builder.createBundle(bundleDefinition, {numberOfParts: 1, decorateBootstrapModule: true});\n\tt.deepEqual(oResult.name, \"Component-preload.js\");\n\tconst expectedContent = `//@ui5-bundle Component-preload.js\nwindow[\"sap-ui-optimized\"] = true;\nsap.ui.require.preload({\n\t\"jquery.sap.global-dbg.js\":function(){sap.ui.define([], function(){return {};});\n}\n},\"preload-section\");\n//@ui5-bundle-raw-include myModule.js\n(function(){window.mine = {};}());\nsap.ui.requireSync(\"ui5loader\");\n`;\n\tt.deepEqual(oResult.content, expectedContent, \"EVOBundleFormat should start with optomization and \" +\n\t\t\"should contain:\" +\n\t\t\" preload part from jquery.sap.global-dbg.js\" +\n\t\t\" raw part from myModule.js\" +\n\t\t\" require part from ui5loader.js\");\n\tt.deepEqual(oResult.bundleInfo.name, \"Component-preload.js\", \"bundle info name is correct\");\n\tt.deepEqual(oResult.bundleInfo.size, expectedContent.length, \"bundle info size is correct\");\n\tt.deepEqual(oResult.bundleInfo.subModules, [\"jquery.sap.global-dbg.js\", \"myModule.js\"],\n\t\t\"bundle info subModules are correct\");\n});\n\ntest(\"integration: createBundle EVOBundleFormat, using predefine calls\", async (t) => {\n\tconst pool = new ResourcePool();\n\tpool.addResource({\n\t\tname: \"ui5loader.js\",\n\t\tbuffer: async () => \"(function(__global) {sap.ui.require = function(){};}(window));\"\n\t});\n\tpool.addResource({ // the pool must contain this to activate optimization markers\n\t\tname: \"jquery.sap.global-dbg.js\",\n\t\tbuffer: async () => \"sap.ui.define([], function(){return {};});\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.global.js\",\n\t\tbuffer: async () => \"sap.ui.define([], function(){return {};});\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.pony1.js\",\n\t\tbuffer: async () => \"sap.ui.define(); // hello\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.pony2.js\",\n\t\tbuffer: async () => `sap.\n\t\tui.define\n\t\t/*hello*/\n\t\t\t\t();`\n\t});\n\tpool.addResource({\n\t\tname: \"myRawModule.js\",\n\t\tbuffer: async () => \"(function(){window.mine = {};}());\"\n\t});\n\tpool.addResource({\n\t\tname: \"myModuleUsingGlobalScope.js\",\n\t\tbuffer: async () => \"var magic = {};\"\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: `Component-preload.js`,\n\t\tdefaultFileTypes: [\".js\"],\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tname: \"preload-section\",\n\t\t\tfilters: [\n\t\t\t\t\"jquery.sap.global.js\",\n\t\t\t\t\"myModuleUsingGlobalScope.js\",\n\t\t\t\t\"jquery.sap.pony1.js\",\n\t\t\t\t\"jquery.sap.pony2.js\"\n\t\t\t]\n\t\t}, {\n\t\t\tdeclareRawModules: undefined,\n\t\t\tmode: \"raw\",\n\t\t\tfilters: [\"myRawModule.js\"],\n\t\t\tsort: undefined\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"ui5loader.js\"]\n\t\t}]\n\t};\n\n\tconst builder = new Builder(pool);\n\tconst oResult = await builder.createBundle(bundleDefinition, {\n\t\tusePredefineCalls: true,\n\t\tnumberOfParts: 1,\n\t\tdecorateBootstrapModule: true,\n\t\toptimize: true // Note: using 'optimize' makes the test sensitive to changes in terser\n\t});\n\tt.deepEqual(oResult.name, \"Component-preload.js\");\n\tconst expectedContent = `//@ui5-bundle Component-preload.js\nwindow[\"sap-ui-optimized\"] = true;\nsap.ui.predefine(\"jquery.sap.global\",[],function(){return{}});\nsap.ui.predefine(\"jquery.sap.pony1\");\nsap.ui.predefine(\"jquery.sap.pony2\");\nsap.ui.require.preload({\n\t\"myModuleUsingGlobalScope.js\":'var magic={};'\n},\"preload-section\");\n//@ui5-bundle-raw-include myRawModule.js\n(function(){window.mine={}})();\nsap.ui.requireSync(\"ui5loader\");\n`;\n\tt.deepEqual(oResult.content, expectedContent, \"EVOBundleFormat should start with optomization and \" +\n\t\t\"should contain:\" +\n\t\t\" preload part from jquery.sap.global-dbg.js\" +\n\t\t\" raw part from myModule.js\" +\n\t\t\" require part from ui5loader.js\");\n\tt.deepEqual(oResult.bundleInfo.name, \"Component-preload.js\", \"bundle info name is correct\");\n\tt.deepEqual(oResult.bundleInfo.size, expectedContent.length, \"bundle info size is correct\");\n\tt.deepEqual(oResult.bundleInfo.subModules,\n\t\t[\n\t\t\t\"jquery.sap.global.js\",\n\t\t\t\"jquery.sap.pony1.js\",\n\t\t\t\"jquery.sap.pony2.js\",\n\t\t\t\"myModuleUsingGlobalScope.js\",\n\t\t\t\"myRawModule.js\"\n\t\t], \"bundle info subModules are correct\");\n});\n\ntest(\"integration: createBundle EVOBundleFormat, using predefine calls, no optimize\", async (t) => {\n\tconst pool = new ResourcePool();\n\tpool.addResource({\n\t\tname: \"ui5loader.js\",\n\t\tbuffer: async () => \"(function(__global) {sap.ui.require = function(){};}(window));\"\n\t});\n\tpool.addResource({ // the pool must contain this to activate optimization markers\n\t\tname: \"jquery.sap.global-dbg.js\",\n\t\tbuffer: async () => \"sap.ui.define([], function(){return {};});\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.global.js\",\n\t\tbuffer: async () => \"sap.ui.define([], function(){return {};});\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.pony1.js\",\n\t\tbuffer: async () => \"sap.ui.define(); // hello\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.pony2.js\",\n\t\tbuffer: async () => `sap.\n\t\tui.define\n\t\t/*hello*/\n\t\t\t\t();`\n\t});\n\tpool.addResource({\n\t\tname: \"myRawModule.js\",\n\t\tbuffer: async () => \"(function(){window.mine = {};}());\"\n\t});\n\tpool.addResource({\n\t\tname: \"myModuleUsingGlobalScope.js\",\n\t\tbuffer: async () => \"var magic = {};\"\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: `Component-preload.js`,\n\t\tdefaultFileTypes: [\".js\"],\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tname: \"preload-section\",\n\t\t\tfilters: [\n\t\t\t\t\"jquery.sap.global.js\",\n\t\t\t\t\"myModuleUsingGlobalScope.js\",\n\t\t\t\t\"jquery.sap.pony1.js\",\n\t\t\t\t\"jquery.sap.pony2.js\"\n\t\t\t]\n\t\t}, {\n\t\t\tdeclareRawModules: undefined,\n\t\t\tmode: \"raw\",\n\t\t\tfilters: [\"myRawModule.js\"],\n\t\t\tsort: undefined\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"ui5loader.js\"]\n\t\t}]\n\t};\n\n\tconst builder = new Builder(pool);\n\tconst oResult = await builder.createBundle(bundleDefinition, {\n\t\tusePredefineCalls: true,\n\t\tnumberOfParts: 1,\n\t\tdecorateBootstrapModule: true,\n\t\toptimize: false\n\t});\n\tt.deepEqual(oResult.name, \"Component-preload.js\");\n\tconst expectedContent = `//@ui5-bundle Component-preload.js\nwindow[\"sap-ui-optimized\"] = true;\nsap.ui.predefine(\"jquery.sap.global\", [], function(){return {};});\nsap.ui.predefine(\"jquery.sap.pony1\"); // hello\nsap.\n\t\tui.predefine\n\t\t/*hello*/\n\t\t\t\t(\"jquery.sap.pony2\");\nsap.ui.require.preload({\n\t\"myModuleUsingGlobalScope.js\":'var magic = {};'\n},\"preload-section\");\n//@ui5-bundle-raw-include myRawModule.js\n(function(){window.mine = {};}());\nsap.ui.requireSync(\"ui5loader\");\n`;\n\tt.deepEqual(oResult.content, expectedContent, \"EVOBundleFormat should start with optomization and \" +\n\t\t\"should contain:\" +\n\t\t\" preload part from jquery.sap.global-dbg.js\" +\n\t\t\" raw part from myModule.js\" +\n\t\t\" require part from ui5loader.js\");\n\tt.deepEqual(oResult.bundleInfo.name, \"Component-preload.js\", \"bundle info name is correct\");\n\tt.deepEqual(oResult.bundleInfo.size, expectedContent.length, \"bundle info size is correct\");\n\tt.deepEqual(oResult.bundleInfo.subModules,\n\t\t[\n\t\t\t\"jquery.sap.global.js\",\n\t\t\t\"jquery.sap.pony1.js\",\n\t\t\t\"jquery.sap.pony2.js\",\n\t\t\t\"myModuleUsingGlobalScope.js\",\n\t\t\t\"myRawModule.js\"\n\t\t], \"bundle info subModules are correct\");\n});\n\ntest(\"integration: createBundle (bootstrap bundle)\", async (t) => {\n\tconst pool = new ResourcePool();\n\tpool.addResource({\n\t\tname: \"ui5loader.js\",\n\t\tbuffer: async () => \"(function(__global) {sap.ui.require = function(){};}(window));\"\n\t});\n\tpool.addResource({\n\t\tname: \"sap/ui/core/Core.js\",\n\t\tbuffer: async () => \"sap.ui.define([],function(){return {};});\"\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: `bootstrap.js`,\n\t\tdefaultFileTypes: [\".js\"],\n\t\tsections: [{\n\t\t\tmode: \"raw\",\n\t\t\tfilters: [\"ui5loader.js\"],\n\t\t\tdeclareRawModules: undefined,\n\t\t\tsort: undefined\n\t\t}, {\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"sap/ui/core/Core.js\"],\n\t\t\tresolve: true\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"sap/ui/core/Core.js\"]\n\t\t}]\n\t};\n\n\tconst builder = new Builder(pool);\n\tconst oResult = await builder.createBundle(bundleDefinition, {\n\t\tnumberOfParts: 1,\n\t\tdecorateBootstrapModule: true,\n\t\taddTryCatchRestartWrapper: true,\n\t\toptimize: true,\n\t\tusePredefineCalls: true\n\t});\n\tt.deepEqual(oResult.name, \"bootstrap.js\");\n\tconst expectedContent = `//@ui5-bundle bootstrap.js\nwindow[\"sap-ui-optimized\"] = true;\ntry {\n//@ui5-bundle-raw-include ui5loader.js\n(function(i){sap.ui.require=function(){}})(window);\nsap.ui.predefine(\"sap/ui/core/Core\",[],function(){return{}});\nsap.ui.requireSync(\"sap/ui/core/Core\");\n// as this module contains the Core, we ensure that the Core has been booted\nsap.ui.getCore().boot && sap.ui.getCore().boot();\n} catch(oError) {\nif (oError.name != \"Restart\") { throw oError; }\n}\n`;\n\tt.deepEqual(oResult.content, expectedContent, \"EVOBundleFormat should start with optomization and \" +\n\t\t\"should contain:\" +\n\t\t\" preload part from jquery.sap.global-dbg.js\" +\n\t\t\" raw part from myModule.js\" +\n\t\t\" require part from ui5loader.js\");\n\tt.deepEqual(oResult.bundleInfo.name, \"bootstrap.js\", \"bundle info name is correct\");\n\tt.deepEqual(oResult.bundleInfo.size, expectedContent.length, \"bundle info size is correct\");\n\tt.deepEqual(oResult.bundleInfo.subModules, [\"ui5loader.js\", \"sap/ui/core/Core.js\"],\n\t\t\"bundle info subModules are correct\");\n});\n\ntest(\"integration: createBundle UI5BundleFormat (non ui5loader.js)\", async (t) => {\n\tconst pool = new ResourcePool();\n\tpool.addResource({\n\t\tname: \"sap-ui-core.js\",\n\t\tbuffer: async () => \"(function(__global) {sap.ui.require = function(){};}(window));\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.global-dbg.js\",\n\t\tbuffer: async () => \"sap.ui.define([], function(){/* comment */ return {};});\"\n\t});\n\tpool.addResource({\n\t\tname: \"myModule.js\",\n\t\tbuffer: async () => \"(function(){window.mine = {};}());\"\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: `Component-preload.js`,\n\t\tdefaultFileTypes: [\".js\", \".fragment.xml\", \".view.xml\", \".properties\", \".json\"],\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tname: \"preload-section\",\n\t\t\tfilters: [\"jquery.sap.global-dbg.js\"]\n\t\t}, {\n\t\t\tdeclareRawModules: undefined,\n\t\t\tmode: \"raw\",\n\t\t\tfilters: [\"myModule.js\"],\n\t\t\tsort: undefined\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"sap-ui-core.js\"]\n\t\t}]\n\t};\n\n\tconst builder = new Builder(pool);\n\tconst oResult = await builder.createBundle(bundleDefinition, {numberOfParts: 1, decorateBootstrapModule: true});\n\tt.deepEqual(oResult.name, \"Component-preload.js\");\n\tconst expectedContent = `//@ui5-bundle Component-preload.js\njQuery.sap.registerPreloadedModules({\n\"name\":\"preload-section\",\n\"version\":\"2.0\",\n\"modules\":{\n\t\"jquery.sap.global-dbg.js\":function(){sap.ui.define([], function(){/* comment */ return {};});\n}\n}});\n//@ui5-bundle-raw-include myModule.js\n(function(){window.mine = {};}());\nsap.ui.requireSync(\"sap-ui-core\");\n`;\n\tt.deepEqual(oResult.content, expectedContent, \"Ui5BundleFormat should start with registerPreloadedModules \" +\n\t\t\"and should contain:\" +\n\t\t\" preload part from jquery.sap.global-dbg.js\" +\n\t\t\" raw part from myModule.js\" +\n\t\t\" require part from sap-ui-core.js\");\n\tt.deepEqual(oResult.bundleInfo.name, \"Component-preload.js\", \"bundle info name is correct\");\n\tt.deepEqual(oResult.bundleInfo.size, expectedContent.length, \"bundle info size is correct\");\n\tt.deepEqual(oResult.bundleInfo.subModules, [\"jquery.sap.global-dbg.js\", \"myModule.js\"],\n\t\t\"bundle info subModules are correct\");\n});\n\ntest(\"integration: createBundle (bootstrap bundle, UI5BundleFormat)\", async (t) => {\n\tconst pool = new ResourcePool();\n\tpool.addResource({\n\t\tname: \"jquery.sap.global.js\",\n\t\tbuffer: async () => \"(function(__global) {sap.ui.require = function(){};}(window));\"\n\t});\n\tpool.addResource({\n\t\tname: \"jquery.sap.global-dbg.js\",\n\t\tbuffer: async () => \"(function(__global) {sap.ui.require = function(){};}(window));\"\n\t});\n\tpool.addResource({\n\t\tname: \"myRawModule.js\",\n\t\tbuffer: async () => \"(function(){window.mine = {};}());\"\n\t});\n\tpool.addResource({\n\t\tname: \"sap/ui/core/Core.js\",\n\t\tbuffer: async () => \"sap.ui.define([],function(){return {};});\"\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: `bootstrap.js`,\n\t\tdefaultFileTypes: [\".js\"],\n\t\tsections: [{\n\t\t\tmode: \"raw\",\n\t\t\tfilters: [\"jquery.sap.global.js\", \"myRawModule.js\"],\n\t\t\tsort: false,\n\t\t\tdeclareRawModules: true\n\t\t}, {\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\"sap/ui/core/Core.js\"],\n\t\t\tresolve: true\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"sap/ui/core/Core.js\"]\n\t\t}]\n\t};\n\n\tconst builder = new Builder(pool);\n\tconst oResult = await builder.createBundle(bundleDefinition, {\n\t\tnumberOfParts: 1,\n\t\tdecorateBootstrapModule: true,\n\t\taddTryCatchRestartWrapper: true,\n\t\toptimize: true,\n\t\tusePredefineCalls: true\n\t});\n\tt.deepEqual(oResult.name, \"bootstrap.js\");\n\tconst expectedContent = `//@ui5-bundle bootstrap.js\nwindow[\"sap-ui-optimized\"] = true;\ntry {\n//@ui5-bundle-raw-include jquery.sap.global.js\n(function(i){sap.ui.require=function(){}})(window);\n//@ui5-bundle-raw-include myRawModule.js\n(function(){window.mine={}})();\njQuery.sap.declare('jquery.sap.global', false);\njQuery.sap.declare('myRawModule', false);\nsap.ui.predefine(\"sap/ui/core/Core\",[],function(){return{}});\nsap.ui.requireSync(\"sap/ui/core/Core\");\n// as this module contains the Core, we ensure that the Core has been booted\nsap.ui.getCore().boot && sap.ui.getCore().boot();\n} catch(oError) {\nif (oError.name != \"Restart\") { throw oError; }\n}\n`;\n\tt.deepEqual(oResult.content, expectedContent, \"EVOBundleFormat should start with optomization and \" +\n\t\t\"should contain:\" +\n\t\t\" preload part from jquery.sap.global-dbg.js\" +\n\t\t\" raw part from myModule.js\" +\n\t\t\" require part from ui5loader.js\");\n\tt.deepEqual(oResult.bundleInfo.name, \"bootstrap.js\", \"bundle info name is correct\");\n\tt.deepEqual(oResult.bundleInfo.size, expectedContent.length, \"bundle info size is correct\");\n\tt.deepEqual(oResult.bundleInfo.subModules, [\"jquery.sap.global.js\", \"myRawModule.js\", \"sap/ui/core/Core.js\"],\n\t\t\"bundle info subModules are correct\");\n});\n\ntest(\"integration: createBundle with bundleInfo\", async (t) => {\n\tconst pool = new ResourcePool();\n\tpool.addResource({\n\t\tname: \"a.js\",\n\t\tbuffer: async () => \"function One(){return 1;}\"\n\t});\n\tpool.addResource({\n\t\tname: \"b.js\",\n\t\tbuffer: async () => \"function Two(){return 2;}\"\n\t});\n\tpool.addResource({\n\t\tname: \"ui5loader.js\",\n\t\tbuffer: async () => \"\"\n\t});\n\tpool.addResource({\n\t\tname: \"a.library\",\n\t\tbuffer: async () => `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t<appData>\n\t\t<packaging xmlns=\"http://www.sap.com/ui5/buildext/packaging\" version=\"2.0\" >\n\t\t\t  <module-infos>\n\t\t\t\t<raw-module name=\"a.js\"\n\t\t\t\t\trequiresTopLevelScope=\"false\" />\n\t\t\t</module-infos>\n\t\t</packaging>\n\t</appData>\n</library>`\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: `library-preload.js`,\n\t\tdefaultFileTypes: [\".js\"],\n\t\tsections: [{\n\t\t\tmode: \"preload\",\n\t\t\tname: \"preload-section\",\n\t\t\tfilters: [\"a.js\"]\n\t\t}, {\n\t\t\tmode: \"require\",\n\t\t\tfilters: [\"ui5loader.js\"]\n\t\t}, {\n\t\t\tmode: \"bundleInfo\",\n\t\t\tname: \"my-custom-bundle\",\n\t\t\tfilters: [\"b.js\"]\n\t\t}]\n\t};\n\n\tconst builder = new Builder(pool);\n\tconst oResult = await builder.createBundle(bundleDefinition, {numberOfParts: 1, decorateBootstrapModule: true});\n\tt.deepEqual(oResult.name, \"library-preload.js\");\n\tconst expectedContent = `//@ui5-bundle library-preload.js\nsap.ui.require.preload({\n\t\"a.js\":function(){function One(){return 1;}\nthis.One=One;\n}\n},\"preload-section\");\nsap.ui.requireSync(\"ui5loader\");\nsap.ui.loader.config({bundlesUI5:{\n\"my-custom-bundle\":['b.js']\n}});\n`;\n\tt.deepEqual(oResult.content, expectedContent, \"EVOBundleFormat \" +\n\t\t\"should contain:\" +\n\t\t\" preload part from a.js\" +\n\t\t\" require part from ui5loader.js\");\n\tt.deepEqual(oResult.bundleInfo.name, \"library-preload.js\", \"bundle info name is correct\");\n\tt.deepEqual(oResult.bundleInfo.size, expectedContent.length, \"bundle info size is correct\");\n\tt.deepEqual(oResult.bundleInfo.subModules, [\"a.js\", \"b.js\"],\n\t\t\"bundle info subModules are correct\");\n});\n",
    "test/lib/lbt/bundle/Resolver.js": "const test = require(\"ava\");\n\nconst Resolver = require(\"../../../../lib/lbt/bundle/Resolver\");\nconst ResourcePool = require(\"../../../../lib/lbt/resources/ResourcePool\");\n\nconst sortedCopy = (array) => array.slice().sort();\n\nconst TRIVIAL_MODULE = \"sap.ui.define([], function() {});\";\n\nclass MockPool extends ResourcePool {\n\tconstructor(data) {\n\t\tsuper();\n\t\tfor ( const [name, content] of Object.entries(data) ) {\n\t\t\tthis.addResource({\n\t\t\t\tname,\n\t\t\t\tbuffer: async () => content\n\t\t\t});\n\t\t}\n\t}\n}\n\ntest.serial(\"resolve without resolving dependencies\", async (t) => {\n\tconst pool = new MockPool({\n\t\t\"app.js\": `\n\t\t\tsap.ui.define(['lib/mod1', 'lib/mod2'], function() {\n\t\t\t\treturn function() {\n\t\t\t\t\tsap.ui.require(['lib/mod3'], function(){});\n\t\t\t\t};\n\t\t\t});`,\n\t\t\"lib/mod1.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod2.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod3.js\": TRIVIAL_MODULE\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: \"bundle.js\",\n\t\tsections: [\n\t\t\t{\n\t\t\t\tmode: \"preload\",\n\t\t\t\tfilters: [\n\t\t\t\t\t\"app.js\",\n\t\t\t\t],\n\t\t\t\tresolve: false\n\t\t\t}\n\t\t]\n\t};\n\n\tconst resolver = new Resolver(pool);\n\n\t// act\n\tconst resolvedBundle = await resolver.resolve(bundleDefinition);\n\n\t// assert\n\tt.true(resolvedBundle != null, \"resolve() should return a bundle\");\n\tt.is(resolvedBundle.sections.length, 1, \"bundle should contain 1 section\");\n\tt.deepEqual(\n\t\tsortedCopy(resolvedBundle.sections[0].modules),\n\t\t[\n\t\t\t\"app.js\"\n\t\t], \"bundle should only contain the specified module\");\n});\n\n\ntest.serial(\"resolve with resolving static dependencies\", async (t) => {\n\tconst pool = new MockPool({\n\t\t\"app.js\": `\n\t\t\tsap.ui.define(['lib/mod1', 'lib/mod2'], function() {\n\t\t\t\treturn function() {\n\t\t\t\t\tsap.ui.require(['lib/mod3'], function(){});\n\t\t\t\t};\n\t\t\t});`,\n\t\t\"lib/mod1.js\": \"sap.ui.define(['./mod4'], function() {});\",\n\t\t\"lib/mod2.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod3.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod4.js\": TRIVIAL_MODULE\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: \"bundle.js\",\n\t\tsections: [\n\t\t\t{\n\t\t\t\tmode: \"preload\",\n\t\t\t\tfilters: [\n\t\t\t\t\t\"app.js\",\n\t\t\t\t],\n\t\t\t\tresolve: true\n\t\t\t}\n\t\t]\n\t};\n\n\tconst resolver = new Resolver(pool);\n\n\t// act\n\tconst resolvedBundle = await resolver.resolve(bundleDefinition);\n\n\t// assert\n\tt.true(resolvedBundle != null, \"resolve() should return a bundle\");\n\tt.is(resolvedBundle.sections.length, 1, \"bundle should contain 1 section\");\n\tt.deepEqual(\n\t\tsortedCopy(resolvedBundle.sections[0].modules),\n\t\t[\n\t\t\t\"app.js\",\n\t\t\t\"lib/mod1.js\",\n\t\t\t\"lib/mod2.js\",\n\t\t\t// \"lib/mod3.js\" // conditional dependency from app.js to lib/mod3 is NOT included\n\t\t\t\"lib/mod4.js\",\n\t\t], \"bundle should contain the expected modules\");\n});\n\ntest.serial(\"resolve, with resolving also conditional dependencies\", async (t) => {\n\tconst pool = new MockPool({\n\t\t\"app.js\": `\n\t\t\tsap.ui.define(['lib/mod1', 'lib/mod2'], function() {\n\t\t\t\treturn function() {\n\t\t\t\t\tsap.ui.require(['lib/mod3'], function(){});\n\t\t\t\t};\n\t\t\t});`,\n\t\t\"lib/mod1.js\": \"sap.ui.define(['./mod4'], function() {});\",\n\t\t\"lib/mod2.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod3.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod4.js\": TRIVIAL_MODULE\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: \"bundle.js\",\n\t\tsections: [\n\t\t\t{\n\t\t\t\tmode: \"preload\",\n\t\t\t\tfilters: [\n\t\t\t\t\t\"app.js\",\n\t\t\t\t],\n\t\t\t\tresolve: true,\n\t\t\t\tresolveConditional: true\n\t\t\t}\n\t\t]\n\t};\n\n\tconst resolver = new Resolver(pool);\n\n\t// act\n\tconst resolvedBundle = await resolver.resolve(bundleDefinition);\n\n\t// assert\n\tt.true(resolvedBundle != null, \"resolve() should return a bundle\");\n\tt.is(resolvedBundle.sections.length, 1, \"bundle should contain 1 section\");\n\tt.deepEqual(\n\t\tsortedCopy(resolvedBundle.sections[0].modules),\n\t\t[\n\t\t\t\"app.js\",\n\t\t\t\"lib/mod1.js\",\n\t\t\t\"lib/mod2.js\",\n\t\t\t\"lib/mod3.js\", // conditional dependency from app.js to lib/mod3 MUST BE included\n\t\t\t\"lib/mod4.js\",\n\t\t], \"bundle should contain the expected modules\");\n});\n\ntest.serial(\"embedd a decomposable bundle\", async (t) => {\n\tconst pool = new MockPool({\n\t\t\"lib/mod1.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod2.js\": \"sap.ui.define(['lib/mod4'], function() {});\",\n\t\t\"lib/mod3.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod4.js\": TRIVIAL_MODULE,\n\t\t\"vendor/decomposable-bundle.js\": `\n\t\t\tdefine(\"embedded/mod1\", function() {});\n\t\t\tdefine(\"lib/mod2\", function() {});\n\t\t\tdefine(\"embedded/mod3\", function() {});`\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: \"bundle.js\",\n\t\tsections: [\n\t\t\t{\n\t\t\t\tmode: \"preload\",\n\t\t\t\tfilters: [\n\t\t\t\t\t\"vendor/\"\n\t\t\t\t],\n\t\t\t\tresolve: true\n\t\t\t}\n\t\t]\n\t};\n\n\tconst resolver = new Resolver(pool);\n\n\tconst resolvedBundle = await resolver.resolve(bundleDefinition);\n\n\tt.true(resolvedBundle != null, \"resolve() should return a bundle\");\n\tt.is(resolvedBundle.sections.length, 1, \"bundle should contain 1 section\");\n\tt.deepEqual(\n\t\tsortedCopy(resolvedBundle.sections[0].modules),\n\t\t[\n\t\t\t\"lib/mod2.js\",\n\t\t\t\"lib/mod4.js\"\n\t\t], \"new bundle should contain the available modules of the decomposed bundle\");\n});\n\ntest.serial(\"embedd a non-decomposable bundle\", async (t) => {\n\tconst pool = new MockPool({\n\t\t\"lib/mod1.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod2.js\": TRIVIAL_MODULE,\n\t\t\"lib/mod3.js\": \"sap.ui.define(['lib/mod4'], function() {});\",\n\t\t\"lib/mod4.js\": TRIVIAL_MODULE,\n\t\t\"vendor/non-decomposable-bundle.js\": `\n\t\t\tdefine(\"external/mod1\", function() {});\n\t\t\tdefine(\"external/mod2\", function() {});\n\t\t\tdefine(\"external/mod3\", function() {});`\n\t});\n\n\tconst bundleDefinition = {\n\t\tname: \"bundle.js\",\n\t\tsections: [\n\t\t\t{\n\t\t\t\tmode: \"preload\",\n\t\t\t\tfilters: [\n\t\t\t\t\t\"vendor/\"\n\t\t\t\t],\n\t\t\t\tresolve: true\n\t\t\t}\n\t\t]\n\t};\n\n\tconst resolver = new Resolver(pool);\n\n\tconst resolvedBundle = await resolver.resolve(bundleDefinition);\n\n\tt.true(resolvedBundle != null, \"resolve() should return a bundle\");\n\tt.is(resolvedBundle.sections.length, 1, \"bundle should contain 1 section\");\n\tt.deepEqual(\n\t\tsortedCopy(resolvedBundle.sections[0].modules),\n\t\t[\n\t\t\t\"vendor/non-decomposable-bundle.js\"\n\t\t], \"new bundle should contain the non-decomposable bundle\");\n});\n",
    "test/lib/lbt/graph/dominatorTree.js": "const test = require(\"ava\");\n\nconst dominatorTree = require(\"../../../../lib/lbt/graph/dominatorTree\");\nconst dependencyGraph = require(\"../../../../lib/lbt/graph/dependencyGraph\");\n\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\n\nfunction createMockPool(dependencyMapping) {\n\treturn {\n\t\tasync getModuleInfo(name) {\n\t\t\tconst info = new ModuleInfo(name);\n\t\t\tlet dependencies = dependencyMapping[name];\n\t\t\tif (!dependencies) {\n\t\t\t\treturn info;\n\t\t\t}\n\t\t\tif (!Array.isArray(dependencies)) {\n\t\t\t\tdependencies = [dependencies];\n\t\t\t}\n\t\t\tdependencies.forEach((dep) => {\n\t\t\t\tinfo.addDependency(dep);\n\t\t\t});\n\t\t\treturn info;\n\t\t}\n\t};\n}\n\nfunction getNamesFromSet(node) {\n\treturn Array.from(node).map((node) => node.name);\n}\n\n/**\n * Dominator Tree is currently not being used therefore the tests are simplistic\n */\ntest(\"basic dominator tree test\", async (t) => {\n\tconst pool = createMockPool({\"myroot\": \"mydep\"});\n\tconst roots = [{\n\t\tname: \"myroot\"\n\t}];\n\tconst graph = await dependencyGraph(pool, roots);\n\tconst result = dominatorTree(graph);\n\tt.deepEqual(result.name, \"\");\n\tt.deepEqual(getNamesFromSet(result.dominators), [\"\"], \"There should be just the temp node as dominator\");\n\tt.deepEqual(getNamesFromSet(result.pred), [], \"There should be no predecessor\");\n\tt.deepEqual(getNamesFromSet(result.succ), [\"myroot\"], \"There should be the myroot node as successor\");\n});\n",
    "test/lib/lbt/graph/topologicalSort.js": "const test = require(\"ava\");\n\nconst topologicalSort = require(\"../../../../lib/lbt/graph/topologicalSort\");\n\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\n\nfunction createMockPool(dependencyMapping) {\n\treturn {\n\t\tasync getModuleInfo(name) {\n\t\t\tconst info = new ModuleInfo(name);\n\t\t\tlet dependencies = dependencyMapping[name];\n\t\t\tif (!dependencies) {\n\t\t\t\treturn info;\n\t\t\t}\n\t\t\tif (!Array.isArray(dependencies)) {\n\t\t\t\tdependencies = [dependencies];\n\t\t\t}\n\t\t\tdependencies.forEach((dep) => {\n\t\t\t\tinfo.addDependency(dep);\n\t\t\t});\n\t\t\treturn info;\n\t\t}\n\t};\n}\n\ntest(\"topologicalSort\", async (t) => {\n\tconst pool = createMockPool({\"myroot\": \"mydep\"});\n\tconst roots = [\"myroot\", \"mydep\"];\n\tconst topologicalSortResult = await topologicalSort(pool, roots);\n\tt.deepEqual(topologicalSortResult, [\"mydep\", \"myroot\"]);\n});\n\n\ntest(\"cyclic dependencies\", async (t) => {\n\tconst pool = createMockPool({\"third\": \"mydep\", \"mydep\": \"third\"});\n\tconst roots = [\"myroot\", \"mydep\", \"third\"];\n\tconst error = await t.throwsAsync(topologicalSort(pool, roots));\n\tt.deepEqual(error.message, \"failed to resolve cyclic dependencies: mydep,third\");\n});\n",
    "test/lib/lbt/resources/LocatorResourcePool.js": "const test = require(\"ava\");\nconst LocatorResourcePool = require(\"../../../../lib/lbt/resources/LocatorResourcePool\");\n\ntest(\"getIgnoreMissingModules\", async (t) => {\n\tconst resourcePool = new LocatorResourcePool({ignoreMissingModules: true});\n\tt.true(resourcePool.getIgnoreMissingModules(), \"ignoreMissingModules is true\");\n});\n\n",
    "test/lib/lbt/resources/ModuleInfo.js": "const test = require(\"ava\");\n\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\n\ntest(\"ModuleInfo: constructor\", async (t) => {\n\tconst moduleInfo = new ModuleInfo(\"myName\");\n\tt.falsy(moduleInfo.exposedGlobals, \"exposedGlobals is not set\");\n\tt.falsy(moduleInfo.format, \"format is not set\");\n\tt.falsy(moduleInfo.description, \"description is not set\");\n\tt.false(moduleInfo.requiresTopLevelScope, \"requiresTopLevelScope is false\");\n\tt.false(moduleInfo.rawModule, \"rawModule is false\");\n\tt.false(moduleInfo.dynamicDependencies, \"dynamicDependencies is false\");\n\tt.deepEqual(moduleInfo.subModules, [], \"submodules are empty\");\n});\n\ntest(\"ModuleInfo: addSubModule\", async (t) => {\n\t// setup\n\tconst moduleInfo = new ModuleInfo(\"myName\");\n\tmoduleInfo.addDependency(\"otherModule\", false);\n\tconst otherModuleInfo = new ModuleInfo(\"otherModule\");\n\totherModuleInfo.addDependency(\"unknownModule\", false);\n\totherModuleInfo.dynamicDependencies = true;\n\n\t// action\n\tmoduleInfo.addSubModule(otherModuleInfo);\n\n\t// expectation\n\tt.true(moduleInfo.dynamicDependencies, \"dynamicDependencies is set\");\n\tt.deepEqual(moduleInfo.subModules, [\"otherModule\"], \"submodule is set\");\n\tt.deepEqual(moduleInfo.dependencies, [\"unknownModule\"], \"unknownModule dependency is copied over\");\n});\n\ntest(\"ModuleInfo: name\", async (t) => {\n\t// setup\n\tconst moduleInfo = new ModuleInfo(\"myName\");\n\n\t// action\n\tmoduleInfo.addDependency(\"newName\", false);\n\tmoduleInfo.name = \"newName\";\n\n\tmoduleInfo.addSubModule(\"newName2\");\n\tmoduleInfo.name = \"newName2\";\n\n\t// expectation\n\tt.deepEqual(moduleInfo.subModules, [], \"submodule is empty\");\n\tt.deepEqual(moduleInfo.dependencies, [], \"dependencies is empty\");\n\tt.is(moduleInfo.name, \"newName2\", \"name was set\");\n});\n\ntest(\"ModuleInfo: toString\", async (t) => {\n\t// setup\n\tconst moduleInfo = new ModuleInfo(\"myName\");\n\n\t// action\n\tmoduleInfo.addDependency(\"dep1\", false);\n\tmoduleInfo.addDependency(\"dep2\", false);\n\tmoduleInfo.addSubModule(\"sub1\");\n\tmoduleInfo.addSubModule(\"sub2\");\n\tconst stringContent = moduleInfo.toString();\n\n\t// expectation\n\tt.is(stringContent, \"ModuleInfo(myName, dependencies=dep1,dep2, includes=sub1,sub2)\", \"string value is correct\");\n});\n\ntest(\"ModuleInfo: removeIgnoredGlobalNames\", (t) => {\n\t// setup\n\tconst moduleInfo = new ModuleInfo(\"myName\");\n\tmoduleInfo.exposedGlobals = [\"supi\", \"dupi\"];\n\n\tmoduleInfo.removeIgnoredGlobalNames([\"hop\", \"supi\"]);\n\n\t// expectation\n\tt.deepEqual(moduleInfo.exposedGlobals, [\"dupi\"], \"exposedGlobals are correct\");\n});\n",
    "test/lib/lbt/resources/Resource.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nlet Resource = require(\"../../../../lib/lbt/resources/Resource\");\n\ntest.serial(\"Resource: buffer\", async (t) => {\n\tconst readFileStub = sinon.stub().callsArg(1);\n\tmock(\"graceful-fs\", {\n\t\treadFile: readFileStub\n\t});\n\tmock.reRequire(\"graceful-fs\");\n\n\t// Re-require tested module\n\tResource = mock.reRequire(\"../../../../lib/lbt/resources/Resource\");\n\tconst resource = new Resource({}, \"name\", \"file\");\n\tawait resource.buffer();\n\n\tmock.stop(\"graceful-fs\");\n\n\tt.is(readFileStub.callCount, 1, \"called once\");\n\tt.is(readFileStub.getCall(0).args[0], \"file\", \"called with file parameter\");\n});\n\ntest.serial(\"Resource: constructor\", async (t) => {\n\tconst resource = new Resource({}, \"name\", \"file\");\n\tt.is(resource.fileSize, -1, \"called once\");\n});\n\ntest.serial(\"Resource: constructor with stat\", async (t) => {\n\tconst resource = new Resource({}, \"name\", \"file\", {size: 47});\n\tt.is(resource.fileSize, 47, \"called once\");\n});\n",
    "test/lib/lbt/resources/ResourceCollector.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nlet ResourceCollector = require(\"../../../../lib/lbt/resources/ResourceCollector\");\n\ntest.beforeEach((t) => {\n\t// Spying logger of processors/bootstrapHtmlTransformer\n\tconst log = require(\"@ui5/logger\");\n\tconst loggerInstance = log.getLogger(\"lbt:resources:ResourceCollector\");\n\tmock(\"@ui5/logger\", {\n\t\tgetLogger: () => loggerInstance\n\t});\n\tmock.reRequire(\"@ui5/logger\");\n\tt.context.logWarnSpy = sinon.spy(loggerInstance, \"warn\");\n\n\t// Re-require tested module\n\tResourceCollector = mock.reRequire(\"../../../../lib/lbt/resources/ResourceCollector\");\n});\n\ntest.afterEach.always((t) => {\n\tmock.stop(\"@ui5/logger\");\n\tt.context.logWarnSpy.restore();\n});\n\n\ntest.serial(\"add: empty constructor dummy params\", (t) => {\n\tconst resourceCollector = new ResourceCollector({}, {});\n\tt.is(resourceCollector.resources.size, 0, \"empty\");\n});\n\ntest.serial(\"add: empty constructor\", (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\tt.is(resourceCollector.resources.size, 0, \"empty\");\n});\n\ntest.serial(\"setExternalResources: empty filters\", (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\tresourceCollector.setExternalResources({\n\t\t\"testcomp\": []\n\t});\n\tconst orphanFilters = resourceCollector.createOrphanFilters();\n\tt.is(orphanFilters.size, 1, \"1 filter\");\n});\n\ntest.serial(\"createOrphanFilters: filters\", (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\tresourceCollector.setExternalResources({\n\t\t\"testcomp\": [\"test\"],\n\t\t\"/\": [\"test\"],\n\t\t\"\": [\"test\"],\n\t\t\"a/\": [\"test\"],\n\t\t\"b\": [\"test\"],\n\t});\n\tconst orphanFilters = resourceCollector.createOrphanFilters();\n\tt.is(orphanFilters.size, 4, \"4 filters\");\n});\n\ntest.serial(\"visitResource: path\", async (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\tawait resourceCollector.visitResource({getPath: () => \"mypath\", getSize: async () => 13});\n\tt.is(t.context.logWarnSpy.callCount, 1);\n\tt.is(t.context.logWarnSpy.getCall(0).args[0], \"non-runtime resource mypath ignored\");\n});\n\ntest.serial(\"visitResource: library.source.less\", async (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\tt.is(resourceCollector.themePackages.size, 0, \"initially there is no theme package\");\n\tawait resourceCollector.visitResource({\n\t\tgetPath: () => \"/resources/themes/a/library.source.less\",\n\t\tgetSize: async () => 13\n\t});\n\tt.is(resourceCollector.themePackages.size, 1, \"theme package was added\");\n});\n\ntest.serial(\"groupResourcesByComponents: debugBundles\", async (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\tresourceCollector.setExternalResources({\n\t\t\"testcomp\": [\"my/file.js\"]\n\t});\n\tawait resourceCollector.visitResource({getPath: () => \"/resources/testcomp/Component.js\", getSize: async () => 13});\n\tawait resourceCollector.visitResource({getPath: () => \"/resources/my/file.js\", getSize: async () => 13});\n\tresourceCollector.groupResourcesByComponents();\n\tt.is(resourceCollector.resources.size, 0, \"all resources were deleted\");\n});\n\ntest.serial(\"groupResourcesByComponents: theme\", async (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\tawait resourceCollector.visitResource({getPath: () => \"/resources/themes/a/.theming\", getSize: async () => 13});\n\tt.is(resourceCollector.themePackages.size, 1, \"1 theme was added\");\n\tawait resourceCollector.determineResourceDetails({});\n\tresourceCollector.groupResourcesByComponents();\n\tt.is(resourceCollector.themePackages.get(\"themes/a/\").resources.length, 1, \"1 theme was grouped\");\n});\n\ntest.serial(\"determineResourceDetails: properties\", async (t) => {\n\tconst resourceCollector = new ResourceCollector({\n\t\tgetModuleInfo: async (moduleInfo) => {\n\t\t\treturn {\n\t\t\t\tname: \"myName\"\n\t\t\t};\n\t\t}\n\t});\n\tawait resourceCollector.visitResource({\n\t\tgetPath: () => \"/resources/mylib/manifest.json\", getSize: async () => 13\n\t});\n\tawait resourceCollector.visitResource({\n\t\tgetPath: () => \"/resources/mylib/i18n/i18n_de.properties\", getSize: async () => 13\n\t});\n\tawait resourceCollector.visitResource({\n\t\tgetPath: () => \"/resources/mylib/i18n/i18n.properties\", getSize: async () => 13\n\t});\n\tawait resourceCollector.determineResourceDetails({});\n\tresourceCollector.groupResourcesByComponents();\n\tconst resources = resourceCollector.components.get(\"mylib/\").resources;\n\tt.deepEqual(resources.map((res) => res.i18nName),\n\t\t[null, \"i18n/i18n.properties\", \"i18n/i18n.properties\"], \"i18nName was set\");\n});\n\ntest.serial(\"determineResourceDetails: view.xml\", async (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\tconst enrichWithDependencyInfoStub = sinon.stub(resourceCollector, \"enrichWithDependencyInfo\")\n\t\t.returns(Promise.resolve());\n\tawait resourceCollector.visitResource({getPath: () => \"/resources/mylib/my.view.xml\", getSize: async () => 13});\n\tawait resourceCollector.determineResourceDetails({});\n\tt.is(enrichWithDependencyInfoStub.callCount, 1, \"is called once\");\n\tt.is(enrichWithDependencyInfoStub.getCall(0).args[0].name, \"mylib/my.view.xml\", \"is called with view\");\n});\n\ntest.serial(\"determineResourceDetails: Debug bundle\", async (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\n\tconst enrichWithDependencyInfoStub = sinon.stub(resourceCollector, \"enrichWithDependencyInfo\").resolves();\n\tawait resourceCollector.visitResource({getPath: () => \"/resources/MyBundle-dbg.js\", getSize: async () => 13});\n\n\tawait resourceCollector.determineResourceDetails({\n\t\tdebugBundles: [\"MyBundle-dbg.js\"]\n\t});\n\tt.is(enrichWithDependencyInfoStub.callCount, 1, \"enrichWithDependencyInfo is called once\");\n\tt.is(enrichWithDependencyInfoStub.getCall(0).args[0].name, \"MyBundle-dbg.js\",\n\t\t\"enrichWithDependencyInfo is called with debug bundle\");\n});\n\ntest.serial(\"determineResourceDetails: Debug files and non-debug files\", async (t) => {\n\tconst resourceCollector = new ResourceCollector();\n\n\tconst enrichWithDependencyInfoStub = sinon.stub(resourceCollector, \"enrichWithDependencyInfo\")\n\t\t.callsFake((resourceInfo) => {\n\t\t\t// Simulate enriching resource info with dependency info to test whether it gets shared\n\t\t\t// with the dbg resource later on\n\t\t\tresourceInfo.dynRequired = true;\n\t\t});\n\tawait Promise.all([\n\t\t\"/resources/MyBundle-dbg.js\",\n\t\t\"/resources/mylib/MyControlA-dbg.js\",\n\t\t\"/resources/mylib/MyControlA.js\",\n\t\t\"/resources/mylib/MyControlB.js\",\n\t\t\"/resources/mylib/MyControlB-dbg.js\"\n\t].map((resourcePath) => {\n\t\treturn resourceCollector.visitResource({getPath: () => resourcePath, getSize: async () => 13});\n\t}));\n\n\tawait resourceCollector.determineResourceDetails({\n\t\tdebugResources: [\"**/*-dbg.js\"],\n\t\tdebugBundles: [\"MyBundle-dbg.js\"]\n\t});\n\tt.is(enrichWithDependencyInfoStub.callCount, 3, \"enrichWithDependencyInfo is called three times\");\n\tt.is(enrichWithDependencyInfoStub.getCall(0).args[0].name, \"MyBundle-dbg.js\",\n\t\t\"enrichWithDependencyInfo called with debug bundle\");\n\tt.is(enrichWithDependencyInfoStub.getCall(1).args[0].name, \"mylib/MyControlA.js\",\n\t\t\"enrichWithDependencyInfo called with non-debug control A\");\n\tt.is(enrichWithDependencyInfoStub.getCall(2).args[0].name, \"mylib/MyControlB.js\",\n\t\t\"enrichWithDependencyInfo called with non-debug control B\");\n\n\tt.is(resourceCollector._resources.get(\"MyBundle-dbg.js\").isDebug, true, \"MyBundle-dbg is a debug file\");\n\tt.is(resourceCollector._resources.get(\"MyBundle-dbg.js\").dynRequired, true,\n\t\t\"MyBundle-dbg is flagged as dynRequired\");\n\n\tt.is(resourceCollector._resources.get(\"mylib/MyControlA.js\").isDebug, false, \"MyControlA is no debug file\");\n\tt.is(resourceCollector._resources.get(\"mylib/MyControlA.js\").dynRequired, true,\n\t\t\"MyControlA is flagged as dynRequired\");\n\n\tt.is(resourceCollector._resources.get(\"mylib/MyControlA-dbg.js\").isDebug, true, \"MyControlA-dbg is a debug file\");\n\tt.is(resourceCollector._resources.get(\"mylib/MyControlA-dbg.js\").dynRequired, true,\n\t\t\"MyControlA-dbg is flagged as dynRequired\");\n\n\tt.is(resourceCollector._resources.get(\"mylib/MyControlB.js\").isDebug, false, \"MyControlB is no debug file\");\n\tt.is(resourceCollector._resources.get(\"mylib/MyControlB.js\").dynRequired, true,\n\t\t\"MyControlB is flagged as dynRequired\");\n\n\tt.is(resourceCollector._resources.get(\"mylib/MyControlB-dbg.js\").isDebug, true, \"MyControlB-dbg is a debug file\");\n\tt.is(resourceCollector._resources.get(\"mylib/MyControlB-dbg.js\").dynRequired, true,\n\t\t\"MyControlB-dbg is flagged as dynRequired\");\n});\n\ntest.serial(\"enrichWithDependencyInfo: add infos to resourceinfo\", async (t) => {\n\tconst resourceCollector = new ResourceCollector({\n\t\tgetModuleInfo: async () => {\n\t\t\treturn {\n\t\t\t\tname: \"myname\",\n\t\t\t\tdynamicDependencies: true,\n\t\t\t\tisConditionalDependency: (dep) => {\n\t\t\t\t\treturn dep.includes(\"conditional\");\n\t\t\t\t},\n\t\t\t\tisImplicitDependency: (dep) => {\n\t\t\t\t\treturn dep.includes(\"implicit\");\n\t\t\t\t},\n\t\t\t\tdependencies: [\n\t\t\t\t\t\"mydependency.conditional\", \"mydependency.implicit\", \"mydependency\"\n\t\t\t\t],\n\t\t\t\tsubModules: [\n\t\t\t\t\t\"mySubmodule\"\n\t\t\t\t],\n\t\t\t\trequiresTopLevelScope: true,\n\t\t\t\texposedGlobals: [\"myGlobal\"],\n\t\t\t\trawModule: true\n\t\t\t};\n\t\t}\n\t});\n\tconst resourceInfo = {};\n\tawait resourceCollector.enrichWithDependencyInfo(resourceInfo);\n\tt.deepEqual(resourceInfo, {\n\t\tcondRequired: new Set([\"mydependency.conditional\"]),\n\t\tdynRequired: true,\n\t\texposedGlobalNames: new Set([\"myGlobal\"]),\n\t\tformat: \"raw\",\n\t\tincluded: new Set([\"mySubmodule\"]),\n\t\tmodule: \"myname\",\n\t\trequired: new Set([\"mydependency\"]),\n\t\trequiresTopLevelScope: true\n\t}, \"all information gets used for the resourceInfo\");\n});\n",
    "test/lib/lbt/resources/ResourceInfo.js": "const test = require(\"ava\");\n\nconst ResourceInfo = require(\"../../../../lib/lbt/resources/ResourceInfo\");\n\ntest(\"ResourceInfo: constructor\", async (t) => {\n\tconst resourceInfo = new ResourceInfo(\"myName\");\n\tt.falsy(resourceInfo.module, \"module not set\");\n\tt.falsy(resourceInfo.format, \"format not set\");\n\tt.is(resourceInfo.size, -1, \"size not set\");\n});\n\ntest(\"ResourceInfo: copyFrom\", async (t) => {\n\t// setup\n\tconst resourceInfo = new ResourceInfo(\"myName\");\n\tconst origResourceInfo = new ResourceInfo(\"origMyName\");\n\torigResourceInfo.i18nName = \"i18nName\";\n\torigResourceInfo.i18nLocale = \"i18nLocale\";\n\torigResourceInfo.isDebug = false;\n\torigResourceInfo.theme = \"theme\";\n\torigResourceInfo.merged = false;\n\torigResourceInfo.designtime = false;\n\torigResourceInfo.support = false;\n\torigResourceInfo.module = \"module\";\n\torigResourceInfo.required = new Set([\"required\"]);\n\torigResourceInfo.condRequired = new Set([\"condRequired\"]);\n\torigResourceInfo.included = new Set([\"included\"]);\n\torigResourceInfo.dynRequired = false;\n\torigResourceInfo.requiresTopLevelScope = false;\n\torigResourceInfo.exposedGlobalNames = new Set([\"myGlobal\"]);\n\torigResourceInfo.format = \"raw\";\n\torigResourceInfo.size = 13;\n\n\t// action\n\tresourceInfo.copyFrom(\"prefix\", origResourceInfo);\n\n\t// expectation\n\tt.is(resourceInfo.i18nName, \"i18nName\", \"value is copied over\");\n\tt.is(resourceInfo.i18nLocale, \"i18nLocale\", \"value is copied over\");\n\tt.is(resourceInfo.isDebug, false, \"value is copied over\");\n\tt.is(resourceInfo.theme, \"theme\", \"value is copied over\");\n\tt.is(resourceInfo.merged, true, \"value is copied over\");\n\tt.is(resourceInfo.designtime, false, \"value is copied over\");\n\tt.is(resourceInfo.support, false, \"value is copied over\");\n\tt.is(resourceInfo.module, \"module\", \"value is copied over\");\n\tt.deepEqual(resourceInfo.required, new Set([\"required\"]), \"value is copied over\");\n\tt.deepEqual(resourceInfo.condRequired, new Set([\"condRequired\"]), \"value is copied over\");\n\tt.deepEqual(resourceInfo.included, new Set([\"included\"]), \"value is copied over\");\n\tt.is(resourceInfo.dynRequired, false, \"value is copied over\");\n\tt.is(resourceInfo.requiresTopLevelScope, false, \"value is copied over\");\n\tt.deepEqual(resourceInfo.exposedGlobalNames, new Set([\"myGlobal\"]), \"value is copied over\");\n\tt.is(resourceInfo.format, \"raw\", \"value is copied over\");\n\tt.is(resourceInfo.size, 13, \"value is copied over\");\n});\n\ntest(\"ResourceInfo: toJSON\", async (t) => {\n\tconst resourceInfo = new ResourceInfo(\"myName\");\n\tresourceInfo.i18nName = \"i18nName\";\n\tresourceInfo.i18nLocale = \"i18nLocale\";\n\tresourceInfo.isDebug = true;\n\tresourceInfo.theme = \"theme\";\n\tresourceInfo.merged = true;\n\tresourceInfo.designtime = true;\n\tresourceInfo.support = true;\n\tresourceInfo.module = \"module\";\n\tresourceInfo.required = new Set([\"required\"]);\n\tresourceInfo.condRequired = new Set([\"condRequired\"]);\n\tresourceInfo.included = new Set([\"included\"]);\n\tresourceInfo.dynRequired = true;\n\tresourceInfo.requiresTopLevelScope = true;\n\tresourceInfo.exposedGlobalNames = new Set([\"myGlobal\"]);\n\tresourceInfo.format = \"raw\";\n\tresourceInfo.size = 13;\n\n\tt.deepEqual(resourceInfo.toJSON(), {\n\t\tcondRequired: [\n\t\t\t\"condRequired\",\n\t\t],\n\t\tdesigntime: true,\n\t\tdynRequired: true,\n\t\texposedGlobalNames: [\n\t\t\t\"myGlobal\",\n\t\t],\n\t\tformat: \"raw\",\n\t\tincluded: [\n\t\t\t\"included\",\n\t\t],\n\t\tisDebug: true,\n\t\tlocale: \"i18nLocale\",\n\t\tmerged: true,\n\t\tmodule: \"module\",\n\t\tname: \"myName\",\n\t\traw: \"i18nName\",\n\t\trequired: [\n\t\t\t\"required\",\n\t\t],\n\t\trequiresTopLevelScope: true,\n\t\tsize: 13,\n\t\tsupport: true,\n\t\ttheme: \"theme\",\n\t}, \"json content is correct\");\n});\n",
    "test/lib/lbt/resources/ResourcePool.js": "const test = require(\"ava\");\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\nconst ResourcePool = require(\"../../../../lib/lbt/resources/ResourcePool\");\nconst ResourceFilterList = require(\"../../../../lib/lbt/resources/ResourceFilterList\");\n\nconst LibraryFileAnalyzer = require(\"../../../../lib/lbt/resources/LibraryFileAnalyzer\");\nconst sinon = require(\"sinon\");\n\ntest(\"findResources: based on pattern\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\n\tconst resourceB = {name: \"b\"};\n\tresourcePool.addResource(resourceB);\n\n\t// not found\n\tconst resourcesOfEmptyPool = await resourcePool.findResources(/a/);\n\tt.deepEqual(resourcesOfEmptyPool, [], \"nothing is found\");\n\n\tconst resourceA = {name: \"a\"};\n\tresourcePool.addResource(resourceA);\n\n\t// found\n\tconst resources = await resourcePool.findResources(/a/);\n\tt.deepEqual(resources, [resourceA], \"resource a is found\");\n});\n\ntest(\"findResources: based on ResourceFilterList\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\n\tconst resourceB = {name: \"b\"};\n\tresourcePool.addResource(resourceB);\n\n\t// not found\n\tconst resourcesOfEmptyPool = await resourcePool.findResources(new ResourceFilterList([\"a\"]));\n\tt.deepEqual(resourcesOfEmptyPool, [], \"nothing is found\");\n\n\tconst resourceA = {name: \"a\"};\n\tresourcePool.addResource(resourceA);\n\n\t// found\n\tconst resources = await resourcePool.findResources(new ResourceFilterList([\"a\"]));\n\tt.deepEqual(resources, [resourceA], \"resource a is found\");\n});\n\ntest(\"size\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tt.deepEqual(resourcePool.size, 0, \"size of empty pool is 0\");\n\n\tconst resourceA = {name: \"a\"};\n\tresourcePool.addResource(resourceA);\n\tt.deepEqual(resourcePool.size, 1, \"size of pool is 1\");\n});\n\ntest(\"resources\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tt.deepEqual(resourcePool.resources, [], \"no resources in empty pool\");\n\n\tconst resourceA = {name: \"a\"};\n\tresourcePool.addResource(resourceA);\n\tt.deepEqual(resourcePool.resources, [resourceA], \"resource a in pool\");\n});\n\ntest(\"getIgnoreMissingModules\", async (t) => {\n\tlet resourcePool = new ResourcePool({});\n\tt.deepEqual(resourcePool.getIgnoreMissingModules(), false, \"returned expected value\");\n\n\tresourcePool = new ResourcePool({\n\t\tignoreMissingModules: true\n\t});\n\tt.deepEqual(resourcePool.getIgnoreMissingModules(), true, \"returned expected value\");\n});\n\n\nclass ResourcePoolWithRejectingModuleInfo extends ResourcePool {\n\tasync getModuleInfo(name) {\n\t\tthrow new Error(\"myerror\");\n\t}\n}\n\ntest(\"findResourceWithInfo: rejecting getModuleInfo\", async (t) => {\n\tconst resourcePool = new ResourcePoolWithRejectingModuleInfo();\n\tconst resourceA = {name: \"a\"};\n\tresourcePool.addResource(resourceA);\n\tconst resource = await resourcePool.findResourceWithInfo(\"a\");\n\tt.falsy(resource.info, \"in the rejection case the info is not there\");\n\tt.deepEqual(resource, resourceA, \"Although info was rejected resource is still found\");\n});\n\ntest.serial(\"findResourceWithInfo\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tconst resourceA = {name: \"a\"};\n\tresourcePool.addResource(resourceA);\n\n\tsinon.stub(resourcePool, \"getModuleInfo\").resolves(\"myInfo\");\n\n\tconst resource = await resourcePool.findResourceWithInfo(\"a\");\n\tt.deepEqual(resource.info, \"myInfo\", \"info is set correctly\");\n\tsinon.restore();\n});\n\ntest(\"getModuleInfo\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tconst code = \"var test = 47;\";\n\tconst inputJsResource = {name: \"a.js\", buffer: async () => code};\n\tresourcePool.addResource(inputJsResource);\n\tconst jsResource = await resourcePool.getModuleInfo(\"a.js\");\n\tt.is(await resourcePool._dependencyInfos.get(inputJsResource.name), jsResource,\n\t\t\"info has been added to _dependencyInfos map\");\n\n\tt.deepEqual(jsResource.name, inputJsResource.name, \"name should be the same\");\n\tt.deepEqual(jsResource.size, code.length, \"size is the character length of code\");\n\tt.true(jsResource.rawModule);\n\tt.deepEqual(jsResource.subModules, [], \"does not contain submodules\");\n});\n\ntest(\"getModuleInfo: determineDependencyInfo for raw js resources\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tconst code = `function One() {return 1;}`;\n\tconst inputJsResource = {name: \"a.js\", buffer: async () => code};\n\tresourcePool.addResource(inputJsResource);\n\n\n\tconst infoA = new ModuleInfo(\"a.js\");\n\tinfoA.requiresTopLevelScope = false;\n\n\tconst stubGetDependencyInfos = sinon.stub(LibraryFileAnalyzer, \"getDependencyInfos\").returns({\n\t\t\"a.js\": infoA\n\t});\n\n\tconst library = {\n\t\tname: \"a.library\",\n\t\tbuffer: async () => \"\"\n\t};\n\tawait resourcePool.addResource(library);\n\n\tconst jsResource = await resourcePool.getModuleInfo(\"a.js\");\n\tt.false(jsResource.requiresTopLevelScope);\n\n\tstubGetDependencyInfos.restore();\n});\n\ntest(\"getModuleInfo: determineDependencyInfo for js templateAssembler code\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tconst code = `sap.ui.define([\"a\", \"sap/fe/core/TemplateAssembler\"], function(a, TemplateAssembler){\n\treturn TemplateAssembler.getTemplateComponent(getMethods,\n\t\t\"sap.fe.templates.Page.Component\", {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"templateName\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"defaultValue\": \"sap.fe.templates.Page.view.Page\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"manifest\": \"json\"\n\t\t\t}\n\t\t});\n\t});`;\n\tconst inputJsResource = {name: \"a.js\", buffer: async () => code};\n\tresourcePool.addResource(inputJsResource);\n\n\tconst jsResource = await resourcePool.getModuleInfo(\"a.js\");\n\tt.is(await resourcePool._dependencyInfos.get(inputJsResource.name), jsResource,\n\t\t\"info has been added to _dependencyInfos map\");\n\tt.deepEqual(jsResource.size, 372);\n\tt.deepEqual(jsResource.format, \"ui5-define\", \"contains sap.ui.define therefore should be a ui5-define format\");\n\tt.deepEqual(jsResource.name, \"a.js\");\n\tt.false(jsResource.rawModule);\n\tt.deepEqual(jsResource.subModules, []);\n});\n\ntest(\"getModuleInfo: determineDependencyInfo for xml control and fragment\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tconst xmlFragment = `<HBox xmlns:m=\"sap.m\" xmlns:l=\"sap.ui.layout\" controllerName=\"myController\">\n\t\t<items>\n\t\t<l:HorizontalLayout id=\"layout\">\n\t\t<m:Button text=\"Button 1\" id=\"button1\" />\n\t\t<m:Button text=\"Button 2\" id=\"button2\" />\n\t\t<m:Button text=\"Button 3\" id=\"button3\" />\n\t\t</l:HorizontalLayout>\n\t\t</items>\n\t\t</HBox>`;\n\n\tconst inputXmlControlResource = {name: \"a.control.xml\", buffer: () => xmlFragment};\n\tresourcePool.addResource(inputXmlControlResource);\n\tconst inputXmlFragmentResource = {name: \"a.fragment.xml\", buffer: () => xmlFragment};\n\tresourcePool.addResource(inputXmlFragmentResource);\n\n\n\tconst xmlControlResource = await resourcePool.getModuleInfo(\"a.control.xml\");\n\tt.is(await resourcePool._dependencyInfos.get(inputXmlControlResource.name), xmlControlResource,\n\t\t\"info has been added to _dependencyInfos map\");\n\tt.deepEqual(xmlControlResource.size, 298);\n\tt.falsy(xmlControlResource.format);\n\tt.deepEqual(xmlControlResource.name, \"a.control.xml\");\n\tt.false(xmlControlResource.rawModule);\n\tt.deepEqual(xmlControlResource.subModules, []);\n\n\tconst xmlFragmentResource = await resourcePool.getModuleInfo(\"a.fragment.xml\");\n\tt.is(await resourcePool._dependencyInfos.get(inputXmlFragmentResource.name), xmlFragmentResource,\n\t\t\"info has been added to _dependencyInfos map\");\n\tt.deepEqual(xmlFragmentResource.size, 298);\n\tt.falsy(xmlFragmentResource.format);\n\tt.deepEqual(xmlFragmentResource.name, \"a.fragment.xml\");\n\tt.false(xmlFragmentResource.rawModule);\n\tt.deepEqual(xmlFragmentResource.subModules, []);\n});\n\ntest(\"getModuleInfo: determineDependencyInfo for xml view\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tconst xmlView = `<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:m=\"sap.m\" xmlns:l=\"sap.ui.layout\"\n\t\tcontrollerName=\"myController\">\n\t\t<l:HorizontalLayout id=\"layout\">\n\t\t<m:Button text=\"Button 1\" id=\"button1\" />\n\t\t<m:Button text=\"Button 2\" id=\"button2\" />\n\t\t<m:Button text=\"Button 3\" id=\"button3\" />\n\t\t</l:HorizontalLayout>\n\t\t</mvc:View>`;\n\n\tconst inputXmlViewResource = {name: \"a.view.xml\", buffer: () => xmlView};\n\tresourcePool.addResource(inputXmlViewResource);\n\n\tconst xmlViewResource = await resourcePool.getModuleInfo(\"a.view.xml\");\n\tt.is(await resourcePool._dependencyInfos.get(inputXmlViewResource.name), xmlViewResource,\n\t\t\"info has been added to _dependencyInfos map\");\n\tt.deepEqual(xmlViewResource.size, 315);\n\tt.falsy(xmlViewResource.format);\n\tt.deepEqual(xmlViewResource.name, \"a.view.xml\");\n\tt.false(xmlViewResource.rawModule);\n\tt.deepEqual(xmlViewResource.subModules, []);\n});\n\n\ntest(\"addResource twice\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\tconst resourceA = {name: \"a\"};\n\n\tresourcePool.addResource(resourceA);\n\tresourcePool.addResource(resourceA);\n\tt.deepEqual(resourcePool._resources, [resourceA, resourceA], \"resource a has been added to resources array twice\");\n\tt.is(resourcePool._resourcesByName.get(\"a\"), resourceA, \"resource a has been added to the _resourcesByName map\");\n\tt.is(resourcePool._resourcesByName.size, 1, \"resource a was added to _resourcesByName map\");\n});\n\ntest.serial(\"addResource: library and eval raw module info\", async (t) => {\n\tconst resourcePool = new ResourcePool();\n\n\tconst infoA = {};\n\tinfoA.name = \"moduleA.js\";\n\tinfoA.rawModule = true;\n\tinfoA.dependencies = [\"123.js\"];\n\tinfoA.ignoredGlobals = [\"foo\", \"bar\"];\n\tconst infoB = {};\n\tinfoB.name = \"moduleB.js\";\n\tinfoB.rawModule = true;\n\tinfoB.dependencies = [\"456.js\"];\n\n\tconst stubGetDependencyInfos = sinon.stub(LibraryFileAnalyzer, \"getDependencyInfos\").returns({\n\t\t\"moduleA.js\": infoA,\n\t\t\"moduleB.js\": infoB\n\t});\n\n\tconst library = {\n\t\tname: \"a.library\",\n\n\t\t// LibraryFileAnalyzer.getDependencyInfos() is stubbed! Therefore this content is irrelevant.\n\t\tbuffer: async () => \"\"\n\t};\n\tawait resourcePool.addResource(library);\n\tconst moduleA = {\n\t\tname: \"moduleA.js\",\n\t\tbuffer: async () => \"var foo,bar,some;\"\n\t};\n\tawait resourcePool.addResource(moduleA);\n\tconst moduleB = {\n\t\tname: \"moduleB.js\",\n\t\tbuffer: async () => \"var foo,bar,some; jQuery.sap.require(\\\"moduleC\\\");\"\n\t};\n\tawait resourcePool.addResource(moduleB);\n\n\tt.deepEqual(resourcePool._resources, [library, moduleA, moduleB], \"resources have been added to resources array\");\n\tt.is(resourcePool._resourcesByName.get(\"a.library\"), library,\n\t\t\"library a has been added to the _resourcesByName map\");\n\tt.is(resourcePool._resourcesByName.size, 3, \"library a was added to _resourcesByName map\");\n\tt.deepEqual(resourcePool._rawModuleInfos.get(\"moduleA.js\"), infoA, \"module info has been added to _rawModuleInfos\");\n\tt.deepEqual(resourcePool._rawModuleInfos.get(\"moduleB.js\"), infoB, \"module info has been added to _rawModuleInfos\");\n\n\tconst actualResourceA = await resourcePool.findResourceWithInfo(\"moduleA.js\");\n\tt.true(actualResourceA.info instanceof ModuleInfo);\n\tt.deepEqual(actualResourceA.info.dependencies, [\"123.js\"],\n\t\t\"configured dependencies should have been dded\");\n\tt.true(actualResourceA.info.requiresTopLevelScope, \"'some' is the global variable to be exposed\");\n\tt.deepEqual(actualResourceA.info.exposedGlobals, [\"some\"],\n\t\t\"global names should be known from analysis step\");\n\n\tconst actualResourceB = await resourcePool.findResourceWithInfo(\"moduleB.js\");\n\tt.true(actualResourceB.info instanceof ModuleInfo);\n\tt.deepEqual(actualResourceB.info.dependencies, [\"moduleC.js\", \"jquery.sap.global.js\", \"456.js\"],\n\t\t\"dependencies from analsyis and raw info should have been merged\");\n\tt.true(actualResourceB.info.requiresTopLevelScope);\n\tt.deepEqual(actualResourceB.info.exposedGlobals, [\"foo\", \"bar\", \"some\"],\n\t\t\"global names should be known from analsyis step\");\n\n\tstubGetDependencyInfos.restore();\n});\n\n",
    "test/lib/lbt/utils/escapePropertiesFile.js": "const test = require(\"ava\");\nconst mock = require(\"mock-require\");\nconst sinon = require(\"sinon\");\n\n\ntest.beforeEach((t) => {\n\t// Spying logger of processors/bootstrapHtmlTransformer\n\tt.context.getEncodingFromAliasStub = sinon.stub().returns(\"node encoding name\");\n\tt.context.nonAsciiEscaperStub = sinon.stub().resolves();\n\tt.context.nonAsciiEscaperStub.getEncodingFromAlias = t.context.getEncodingFromAliasStub;\n\tmock(\"../../../../lib/processors/nonAsciiEscaper\", t.context.nonAsciiEscaperStub);\n\tt.context.escapePropertiesFile = mock.reRequire(\"../../../../lib/lbt/utils/escapePropertiesFile\");\n});\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"propertiesFileSourceEncoding UTF-8\", async (t) => {\n\tconst lbtResource = {\n\t\tgetProject: () => {\n\t\t\treturn {\n\t\t\t\tresources: {\n\t\t\t\t\tconfiguration: {\n\t\t\t\t\t\tpropertiesFileSourceEncoding: \"UTF-8\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tresource: \"actual resource\",\n\t\tbuffer: async () => {\n\t\t\treturn \"resource content\";\n\t\t}\n\t};\n\tconst res = await t.context.escapePropertiesFile(lbtResource);\n\tt.is(t.context.getEncodingFromAliasStub.callCount, 1, \"getEncodingFromAlias got called once\");\n\tt.is(t.context.getEncodingFromAliasStub.getCall(0).args[0], \"UTF-8\",\n\t\t\"getEncodingFromAlias got called with excepted argument\");\n\tt.is(t.context.nonAsciiEscaperStub.callCount, 1, \"nonAsciiEscaper got called once\");\n\tt.deepEqual(t.context.nonAsciiEscaperStub.getCall(0).args[0], {\n\t\tresources: [\"actual resource\"],\n\t\toptions: {\n\t\t\tencoding: \"node encoding name\"\n\t\t}\n\t}, \"getEncodingFromAlias got called with excepted argument\");\n\tt.is(res, \"resource content\", \"Correct result\");\n});\n\n\ntest.serial(\"propertiesFileSourceEncoding ISO-8859-1\", async (t) => {\n\tconst lbtResource = {\n\t\tgetProject: () => {\n\t\t\treturn {\n\t\t\t\tresources: {\n\t\t\t\t\tconfiguration: {\n\t\t\t\t\t\tpropertiesFileSourceEncoding: \"ISO-8859-1\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tresource: \"actual resource\",\n\t\tbuffer: async () => {\n\t\t\treturn \"resource content\";\n\t\t}\n\t};\n\tconst res = await t.context.escapePropertiesFile(lbtResource);\n\tt.is(t.context.getEncodingFromAliasStub.callCount, 1, \"getEncodingFromAlias got called once\");\n\tt.is(t.context.getEncodingFromAliasStub.getCall(0).args[0], \"ISO-8859-1\",\n\t\t\"getEncodingFromAlias got called with excepted argument\");\n\tt.is(t.context.nonAsciiEscaperStub.callCount, 1, \"nonAsciiEscaper got called once\");\n\tt.deepEqual(t.context.nonAsciiEscaperStub.getCall(0).args[0], {\n\t\tresources: [\"actual resource\"],\n\t\toptions: {\n\t\t\tencoding: \"node encoding name\"\n\t\t}\n\t}, \"getEncodingFromAlias got called with excepted argument\");\n\tt.is(res, \"resource content\", \"Correct result\");\n});\n\ntest.serial(\"propertiesFileSourceEncoding not set\", async (t) => {\n\tconst lbtResource = {\n\t\tgetProject: () => {\n\t\t\treturn {\n\t\t\t\tresources: {\n\t\t\t\t\tconfiguration: {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tresource: \"actual resource\",\n\t\tbuffer: async () => {\n\t\t\treturn \"resource content\";\n\t\t}\n\t};\n\tconst res = await t.context.escapePropertiesFile(lbtResource);\n\tt.is(t.context.getEncodingFromAliasStub.callCount, 1, \"getEncodingFromAlias got called once\");\n\tt.is(t.context.getEncodingFromAliasStub.getCall(0).args[0], \"UTF-8\",\n\t\t\"getEncodingFromAlias got called with excepted argument\");\n\tt.is(t.context.nonAsciiEscaperStub.callCount, 1, \"nonAsciiEscaper got called once\");\n\tt.deepEqual(t.context.nonAsciiEscaperStub.getCall(0).args[0], {\n\t\tresources: [\"actual resource\"],\n\t\toptions: {\n\t\t\tencoding: \"node encoding name\"\n\t\t}\n\t}, \"getEncodingFromAlias got called with excepted argument\");\n\tt.is(res, \"resource content\", \"Correct result\");\n});\n\ntest.serial(\"propertiesFileSourceEncoding not set - specVersion 0.1\", async (t) => {\n\tconst lbtResource = {\n\t\tgetProject: () => {\n\t\t\treturn {\n\t\t\t\tspecVersion: \"0.1\"\n\t\t\t};\n\t\t},\n\t\tresource: \"actual resource\",\n\t\tbuffer: async () => {\n\t\t\treturn \"resource content\";\n\t\t}\n\t};\n\tconst res = await t.context.escapePropertiesFile(lbtResource);\n\tt.is(t.context.getEncodingFromAliasStub.callCount, 1, \"getEncodingFromAlias got called once\");\n\tt.is(t.context.getEncodingFromAliasStub.getCall(0).args[0], \"ISO-8859-1\",\n\t\t\"getEncodingFromAlias got called with excepted argument\");\n\tt.is(t.context.nonAsciiEscaperStub.callCount, 1, \"nonAsciiEscaper got called once\");\n\tt.deepEqual(t.context.nonAsciiEscaperStub.getCall(0).args[0], {\n\t\tresources: [\"actual resource\"],\n\t\toptions: {\n\t\t\tencoding: \"node encoding name\"\n\t\t}\n\t}, \"getEncodingFromAlias got called with excepted argument\");\n\tt.is(res, \"resource content\", \"Correct result\");\n});\n\ntest.serial(\"propertiesFileSourceEncoding not set - specVersion 1.0\", async (t) => {\n\tconst lbtResource = {\n\t\tgetProject: () => {\n\t\t\treturn {\n\t\t\t\tspecVersion: \"1.0\"\n\t\t\t};\n\t\t},\n\t\tresource: \"actual resource\",\n\t\tbuffer: async () => {\n\t\t\treturn \"resource content\";\n\t\t}\n\t};\n\tconst res = await t.context.escapePropertiesFile(lbtResource);\n\tt.is(t.context.getEncodingFromAliasStub.callCount, 1, \"getEncodingFromAlias got called once\");\n\tt.is(t.context.getEncodingFromAliasStub.getCall(0).args[0], \"ISO-8859-1\",\n\t\t\"getEncodingFromAlias got called with excepted argument\");\n\tt.is(t.context.nonAsciiEscaperStub.callCount, 1, \"nonAsciiEscaper got called once\");\n\tt.deepEqual(t.context.nonAsciiEscaperStub.getCall(0).args[0], {\n\t\tresources: [\"actual resource\"],\n\t\toptions: {\n\t\t\tencoding: \"node encoding name\"\n\t\t}\n\t}, \"getEncodingFromAlias got called with excepted argument\");\n\tt.is(res, \"resource content\", \"Correct result\");\n});\n\ntest.serial(\"propertiesFileSourceEncoding not set - specVersion 1.1\", async (t) => {\n\tconst lbtResource = {\n\t\tgetProject: () => {\n\t\t\treturn {\n\t\t\t\tspecVersion: \"1.1\"\n\t\t\t};\n\t\t},\n\t\tresource: \"actual resource\",\n\t\tbuffer: async () => {\n\t\t\treturn \"resource content\";\n\t\t}\n\t};\n\tconst res = await t.context.escapePropertiesFile(lbtResource);\n\tt.is(t.context.getEncodingFromAliasStub.callCount, 1, \"getEncodingFromAlias got called once\");\n\tt.is(t.context.getEncodingFromAliasStub.getCall(0).args[0], \"ISO-8859-1\",\n\t\t\"getEncodingFromAlias got called with excepted argument\");\n\tt.is(t.context.nonAsciiEscaperStub.callCount, 1, \"nonAsciiEscaper got called once\");\n\tt.deepEqual(t.context.nonAsciiEscaperStub.getCall(0).args[0], {\n\t\tresources: [\"actual resource\"],\n\t\toptions: {\n\t\t\tencoding: \"node encoding name\"\n\t\t}\n\t}, \"getEncodingFromAlias got called with excepted argument\");\n\tt.is(res, \"resource content\", \"Correct result\");\n});\n\ntest.serial(\"propertiesFileSourceEncoding not set - specVersion 2.0\", async (t) => {\n\tconst lbtResource = {\n\t\tgetProject: () => {\n\t\t\treturn {\n\t\t\t\tspecVersion: \"2.0\"\n\t\t\t};\n\t\t},\n\t\tresource: \"actual resource\",\n\t\tbuffer: async () => {\n\t\t\treturn \"resource content\";\n\t\t}\n\t};\n\tconst res = await t.context.escapePropertiesFile(lbtResource);\n\tt.is(t.context.getEncodingFromAliasStub.callCount, 1, \"getEncodingFromAlias got called once\");\n\tt.is(t.context.getEncodingFromAliasStub.getCall(0).args[0], \"UTF-8\",\n\t\t\"getEncodingFromAlias got called with excepted argument\");\n\tt.is(t.context.nonAsciiEscaperStub.callCount, 1, \"nonAsciiEscaper got called once\");\n\tt.deepEqual(t.context.nonAsciiEscaperStub.getCall(0).args[0], {\n\t\tresources: [\"actual resource\"],\n\t\toptions: {\n\t\t\tencoding: \"node encoding name\"\n\t\t}\n\t}, \"getEncodingFromAlias got called with excepted argument\");\n\tt.is(res, \"resource content\", \"Correct result\");\n});\n",
    "test/lib/processors/bundlers/flexChangesBundler.js": "const test = require(\"ava\");\n\nconst flexChangesBundler = require(\"../../../../lib/processors/bundlers/flexChangesBundler\");\n\ntest(\"flexChangesBundler with empty resources\", async (t) => {\n\tconst resources = [];\n\tconst options = {};\n\tconst aResult = await flexChangesBundler({resources, options});\n\tt.deepEqual(aResult, [], \"The result should be an empty array\");\n});\n\ntest(\"flexChangesBundler with 2 changes\", async (t) => {\n\tconst flexBundle = [\n\t\t{\n\t\t\t\"fileName\": \"id_1504764957630_7_rename2\",\n\t\t\t\"fileType\": \"change\",\n\t\t\t\"changeType\": \"rename\",\n\t\t\t\"reference\": \"rta.performance.Component\",\n\t\t\t\"packageName\": \"$TMP\",\n\t\t\t\"content\": {\n\t\t\t\t\"originalControlType\": \"sap.m.Label\"\n\t\t\t},\n\t\t\t\"selector\": {\n\t\t\t\t\"id\": \"initialLabel\",\n\t\t\t\t\"idIsLocal\": false\n\t\t\t},\n\t\t\t\"layer\": \"USER\",\n\t\t\t\"texts\": {\n\t\t\t\t\"newText\": {\n\t\t\t\t\t\"value\": \"rename_5\",\n\t\t\t\t\t\"type\": \"XFLD\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"namespace\": \"apps/MyComponent/changes/\",\n\t\t\t\"creation\": \"2017-09-01T11:54:55.238Z\",\n\t\t\t\"originalLanguage\": \"EN\",\n\t\t\t\"conditions\": {},\n\t\t\t\"context\": \"\",\n\t\t\t\"support\": {\n\t\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\t\"service\": \"\",\n\t\t\t\t\"user\": \"\",\n\t\t\t\t\"sapui5Version\": \"1.51.0-SNAPSHOT\"\n\t\t\t},\n\t\t\t\"dependentSelector\": {},\n\t\t\t\"validAppVersions\": {\n\t\t\t\t\"creation\": \"1.0.0\",\n\t\t\t\t\"from\": \"1.0.0\",\n\t\t\t\t\"to\": \"1.0.0\"\n\t\t\t}\n\t\t}, {\n\t\t\t\"fileName\": \"id_1504764957625_7_rename1\",\n\t\t\t\"fileType\": \"change\",\n\t\t\t\"changeType\": \"rename\",\n\t\t\t\"reference\": \"rta.performance.Component\",\n\t\t\t\"packageName\": \"$TMP\",\n\t\t\t\"content\": {\n\t\t\t\t\"originalControlType\": \"sap.m.Label\"\n\t\t\t},\n\t\t\t\"selector\": {\n\t\t\t\t\"id\": \"initialLabel\",\n\t\t\t\t\"idIsLocal\": false\n\t\t\t},\n\t\t\t\"layer\": \"CUSTOMER\",\n\t\t\t\"texts\": {\n\t\t\t\t\"newText\": {\n\t\t\t\t\t\"value\": \"rename_0\",\n\t\t\t\t\t\"type\": \"XFLD\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"namespace\": \"apps/MyComponent/changes/\",\n\t\t\t\"creation\": \"2017-09-06T11:54:55.238Z\",\n\t\t\t\"originalLanguage\": \"EN\",\n\t\t\t\"conditions\": {},\n\t\t\t\"context\": \"\",\n\t\t\t\"support\": {\n\t\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\t\"service\": \"\",\n\t\t\t\t\"user\": \"\",\n\t\t\t\t\"sapui5Version\": \"1.51.0-SNAPSHOT\"\n\t\t\t},\n\t\t\t\"dependentSelector\": {},\n\t\t\t\"validAppVersions\": {\n\t\t\t\t\"creation\": \"1.0.0\",\n\t\t\t\t\"from\": \"1.0.0\",\n\t\t\t\t\"to\": \"1.0.0\"\n\t\t\t}\n\t\t}\n\t];\n\n\tconst resources = [];\n\tflexBundle.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\n\tconst options = {\n\t\tpathPrefix: \"mypath\"\n\t};\n\tconst aResult = await flexChangesBundler({resources, options});\n\tt.deepEqual(aResult.length, 1, \"There should be only one element\");\n\tconst oResult = aResult[0];\n\n\t// check path\n\tt.deepEqual(oResult.getPath(), \"mypath/changes/changes-bundle.json\", \"path should be generated from options\");\n\n\t// check content\n\tconst content = await oResult.getString();\n\tconst parsedContent = JSON.parse(content);\n\tt.deepEqual(parsedContent, flexBundle, \"Result must contain the content\");\n});\n\ntest(\"flexChangesBundler has ctrl_variant and hasFlexBundleVersion = true\", async (t) => {\n\tconst changeList = [\n\t\t{\n\t\t\t\"fileName\": \"id_1504764957630_7_rename2\",\n\t\t\t\"fileType\": \"change\",\n\t\t\t\"changeType\": \"rename\",\n\t\t\t\"reference\": \"rta.performance.Component\",\n\t\t\t\"packageName\": \"$TMP\",\n\t\t\t\"content\": {\n\t\t\t\t\"originalControlType\": \"sap.m.Label\"\n\t\t\t},\n\t\t\t\"selector\": {\n\t\t\t\t\"id\": \"initialLabel\",\n\t\t\t\t\"idIsLocal\": false\n\t\t\t},\n\t\t\t\"layer\": \"USER\",\n\t\t\t\"texts\": {\n\t\t\t\t\"newText\": {\n\t\t\t\t\t\"value\": \"rename_5\",\n\t\t\t\t\t\"type\": \"XFLD\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"namespace\": \"apps/MyComponent/changes/\",\n\t\t\t\"creation\": \"2017-09-01T11:54:55.238Z\",\n\t\t\t\"originalLanguage\": \"EN\",\n\t\t\t\"conditions\": {},\n\t\t\t\"context\": \"\",\n\t\t\t\"support\": {\n\t\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\t\"service\": \"\",\n\t\t\t\t\"user\": \"\",\n\t\t\t\t\"sapui5Version\": \"1.51.0-SNAPSHOT\"\n\t\t\t},\n\t\t\t\"dependentSelector\": {},\n\t\t\t\"validAppVersions\": {\n\t\t\t\t\"creation\": \"1.0.0\",\n\t\t\t\t\"from\": \"1.0.0\",\n\t\t\t\t\"to\": \"1.0.0\"\n\t\t\t}\n\t\t}, {\n\t\t\t\"fileName\": \"id_1504764957625_7_rename1\",\n\t\t\t\"fileType\": \"change\",\n\t\t\t\"changeType\": \"rename\",\n\t\t\t\"reference\": \"rta.performance.Component\",\n\t\t\t\"packageName\": \"$TMP\",\n\t\t\t\"content\": {\n\t\t\t\t\"originalControlType\": \"sap.m.Label\"\n\t\t\t},\n\t\t\t\"selector\": {\n\t\t\t\t\"id\": \"initialLabel\",\n\t\t\t\t\"idIsLocal\": false\n\t\t\t},\n\t\t\t\"layer\": \"CUSTOMER\",\n\t\t\t\"texts\": {\n\t\t\t\t\"newText\": {\n\t\t\t\t\t\"value\": \"rename_0\",\n\t\t\t\t\t\"type\": \"XFLD\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"namespace\": \"apps/MyComponent/changes/\",\n\t\t\t\"creation\": \"2017-09-06T11:54:55.238Z\",\n\t\t\t\"originalLanguage\": \"EN\",\n\t\t\t\"conditions\": {},\n\t\t\t\"context\": \"\",\n\t\t\t\"support\": {\n\t\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\t\"service\": \"\",\n\t\t\t\t\"user\": \"\",\n\t\t\t\t\"sapui5Version\": \"1.51.0-SNAPSHOT\"\n\t\t\t},\n\t\t\t\"dependentSelector\": {},\n\t\t\t\"validAppVersions\": {\n\t\t\t\t\"creation\": \"1.0.0\",\n\t\t\t\t\"from\": \"1.0.0\",\n\t\t\t\t\"to\": \"1.0.0\"\n\t\t\t}\n\t\t}\n\t];\n\tconst compVariants = [{\n\t\t\"fileName\": \"id_1504764957625_7_rename1\",\n\t\t\"fileType\": \"variant\",\n\t\t\"changeType\": \"rename\",\n\t\t\"reference\": \"rta.performance.Component\",\n\t\t\"packageName\": \"$TMP\",\n\t\t\"appDescriptorChange\": false,\n\t\t\"content\": {\n\t\t\t\"originalControlType\": \"sap.m.Label\"\n\t\t},\n\t\t\"selector\": {\n\t\t\t\"id\": \"initialLabel\",\n\t\t\t\"idIsLocal\": false\n\t\t},\n\t\t\"layer\": \"CUSTOMER\",\n\t\t\"texts\": {\n\t\t\t\"newText\": {\n\t\t\t\t\"value\": \"rename_0\",\n\t\t\t\t\"type\": \"XFLD\"\n\t\t\t}\n\t\t},\n\t\t\"namespace\": \"apps/MyComponent/changes/\",\n\t\t\"creation\": \"2017-09-06T11:54:55.238Z\",\n\t\t\"originalLanguage\": \"EN\",\n\t\t\"conditions\": {},\n\t\t\"context\": \"\",\n\t\t\"support\": {\n\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\"service\": \"\",\n\t\t\t\"user\": \"\",\n\t\t\t\"sapui5Version\": \"1.51.0-SNAPSHOT\"\n\t\t},\n\t\t\"dependentSelector\": {},\n\t\t\"validAppVersions\": {\n\t\t\t\"creation\": \"1.0.0\",\n\t\t\t\"from\": \"1.0.0\",\n\t\t\t\"to\": \"1.0.0\"\n\t\t}\n\t}];\n\tconst variantDependentControlChange = [{\n\t\t\"fileName\": \"id_1504764957625_7_rename1\",\n\t\t\"fileType\": \"change\",\n\t\t\"changeType\": \"rename\",\n\t\t\"reference\": \"rta.performance.Component\",\n\t\t\"packageName\": \"$TMP\",\n\t\t\"variantReference\": \"someting\",\n\t\t\"content\": {\n\t\t\t\"originalControlType\": \"sap.m.Label\"\n\t\t},\n\t\t\"selector\": {\n\t\t\t\"id\": \"initialLabel\",\n\t\t\t\"idIsLocal\": false\n\t\t},\n\t\t\"layer\": \"CUSTOMER\",\n\t\t\"texts\": {\n\t\t\t\"newText\": {\n\t\t\t\t\"value\": \"rename_0\",\n\t\t\t\t\"type\": \"XFLD\"\n\t\t\t}\n\t\t},\n\t\t\"namespace\": \"apps/MyComponent/changes/\",\n\t\t\"creation\": \"2017-09-06T11:54:55.238Z\",\n\t\t\"originalLanguage\": \"EN\",\n\t\t\"conditions\": {},\n\t\t\"context\": \"\",\n\t\t\"support\": {\n\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\"service\": \"\",\n\t\t\t\"user\": \"\",\n\t\t\t\"sapui5Version\": \"1.51.0-SNAPSHOT\"\n\t\t},\n\t\t\"dependentSelector\": {},\n\t\t\"validAppVersions\": {\n\t\t\t\"creation\": \"1.0.0\",\n\t\t\t\"from\": \"1.0.0\",\n\t\t\t\"to\": \"1.0.0\"\n\t\t}\n\t}];\n\tconst ctrlVariant = [{\n\t\t\"fileName\": \"ctrl_variants_route_test_variant1\",\n\t\t\"title\": \"variant1\",\n\t\t\"variantManagementReference\": \"masterPageVariant\",\n\t\t\"variantReference\": \"sap.ui.demo.todo.Component\",\n\t\t\"fileType\": \"ctrl_variant\",\n\t\t\"component\": \"lrep.mocha.test.ctrl.variants.route.Component\",\n\t\t\"packageName\": \"$TMP\",\n\t\t\"content\": {},\n\t\t\"selector\": {\n\t\t\t\"id\": \"\"\n\t\t},\n\t\t\"layer\": \"VENDOR\",\n\t\t\"texts\": {},\n\t\t\"namespace\": \"lrep_unit_test_mocha/ctrl-variants-route-test/\",\n\t\t\"creation\": \"20170705-12-00-00\",\n\t\t\"originalLanguage\": \"EN\",\n\t\t\"conditions\": {},\n\t\t\"support\": {\n\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\"service\": \"\",\n\t\t\t\"user\": \"SAP\"\n\t\t}\n\t}];\n\tconst ctrlVariantChange = [{\n\t\t\"fileName\": \"ctrl_variants_route_test_variant1\",\n\t\t\"title\": \"variant1\",\n\t\t\"variantManagementReference\": \"masterPageVariant\",\n\t\t\"variantReference\": \"sap.ui.demo.todo.Component\",\n\t\t\"fileType\": \"ctrl_variant_change\",\n\t\t\"component\": \"lrep.mocha.test.ctrl.variants.route.Component\",\n\t\t\"packageName\": \"$TMP\",\n\t\t\"content\": {},\n\t\t\"selector\": {\n\t\t\t\"id\": \"\"\n\t\t},\n\t\t\"layer\": \"VENDOR\",\n\t\t\"texts\": {},\n\t\t\"namespace\": \"lrep_unit_test_mocha/ctrl-variants-route-test/\",\n\t\t\"creation\": \"20170705-12-00-00\",\n\t\t\"originalLanguage\": \"EN\",\n\t\t\"conditions\": {},\n\t\t\"support\": {\n\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\"service\": \"\",\n\t\t\t\"user\": \"SAP\"\n\t\t}\n\t}];\n\tconst ctrlVariantManagementChange = [{\n\t\t\"fileName\": \"ctrl_variants_route_test_variant1\",\n\t\t\"title\": \"variant1\",\n\t\t\"variantManagementReference\": \"masterPageVariant\",\n\t\t\"variantReference\": \"sap.ui.demo.todo.Component\",\n\t\t\"fileType\": \"ctrl_variant_management_change\",\n\t\t\"component\": \"lrep.mocha.test.ctrl.variants.route.Component\",\n\t\t\"packageName\": \"$TMP\",\n\t\t\"content\": {},\n\t\t\"selector\": {\n\t\t\t\"id\": \"\"\n\t\t},\n\t\t\"layer\": \"VENDOR\",\n\t\t\"texts\": {},\n\t\t\"namespace\": \"lrep_unit_test_mocha/ctrl-variants-route-test/\",\n\t\t\"creation\": \"20170705-12-00-00\",\n\t\t\"originalLanguage\": \"EN\",\n\t\t\"conditions\": {},\n\t\t\"support\": {\n\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\"service\": \"\",\n\t\t\t\"user\": \"SAP\"\n\t\t}\n\t}];\n\n\tconst resources = [];\n\tchangeList.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\tcompVariants.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\tvariantDependentControlChange.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\tctrlVariantChange.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\tctrlVariantManagementChange.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\tctrlVariant.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\n\tconst flexBundle = {\n\t\t\"changes\": changeList,\n\t\t\"compVariants\": compVariants,\n\t\t\"variantChanges\": ctrlVariantChange,\n\t\t\"variantDependentControlChanges\": variantDependentControlChange,\n\t\t\"variantManagementChanges\": ctrlVariantManagementChange,\n\t\t\"variants\": ctrlVariant\n\t};\n\n\tconst options = {\n\t\tpathPrefix: \"mypath\",\n\t\thasFlexBundleVersion: true\n\t};\n\tconst aResult = await flexChangesBundler({resources, options});\n\tt.deepEqual(aResult.length, 1, \"There should be only one element\");\n\tconst oResult = aResult[0];\n\n\t// check path\n\tt.deepEqual(oResult.getPath(), \"mypath/changes/flexibility-bundle.json\", \"path should be generated from options\");\n\n\t// check content\n\tconst content = await oResult.getString();\n\tconst parsedContent = JSON.parse(content);\n\tt.deepEqual(parsedContent, flexBundle, \"Result must contain the content\");\n});\n\ntest(\"flexChangesBundler has ctrl_variant and hasFlexBundleVersion = false\", async (t) => {\n\tconst change = [{\n\t\t\"fileName\": \"id_1504764957625_7_rename1\",\n\t\t\"fileType\": \"change\",\n\t\t\"changeType\": \"rename\",\n\t\t\"reference\": \"rta.performance.Component\",\n\t\t\"packageName\": \"$TMP\",\n\t\t\"content\": {\n\t\t\t\"originalControlType\": \"sap.m.Label\"\n\t\t},\n\t\t\"selector\": {\n\t\t\t\"id\": \"initialLabel\",\n\t\t\t\"idIsLocal\": false\n\t\t},\n\t\t\"layer\": \"CUSTOMER\",\n\t\t\"texts\": {\n\t\t\t\"newText\": {\n\t\t\t\t\"value\": \"rename_0\",\n\t\t\t\t\"type\": \"XFLD\"\n\t\t\t}\n\t\t},\n\t\t\"namespace\": \"apps/MyComponent/changes/\",\n\t\t\"creation\": \"2017-09-06T11:54:55.238Z\",\n\t\t\"originalLanguage\": \"EN\",\n\t\t\"conditions\": {},\n\t\t\"context\": \"\",\n\t\t\"support\": {\n\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\"service\": \"\",\n\t\t\t\"user\": \"\",\n\t\t\t\"sapui5Version\": \"1.51.0-SNAPSHOT\"\n\t\t},\n\t\t\"dependentSelector\": {},\n\t\t\"validAppVersions\": {\n\t\t\t\"creation\": \"1.0.0\",\n\t\t\t\"from\": \"1.0.0\",\n\t\t\t\"to\": \"1.0.0\"\n\t\t}\n\t}];\n\tconst ctrlVariant = [{\n\t\t\"fileName\": \"ctrl_variants_route_test_variant1\",\n\t\t\"title\": \"variant1\",\n\t\t\"variantManagementReference\": \"masterPageVariant\",\n\t\t\"variantReference\": \"sap.ui.demo.todo.Component\",\n\t\t\"fileType\": \"ctrl_variant\",\n\t\t\"component\": \"lrep.mocha.test.ctrl.variants.route.Component\",\n\t\t\"packageName\": \"$TMP\",\n\t\t\"content\": {},\n\t\t\"selector\": {\n\t\t\t\"id\": \"\"\n\t\t},\n\t\t\"layer\": \"VENDOR\",\n\t\t\"texts\": {},\n\t\t\"namespace\": \"lrep_unit_test_mocha/ctrl-variants-route-test/\",\n\t\t\"creation\": \"20170705-12-00-00\",\n\t\t\"originalLanguage\": \"EN\",\n\t\t\"conditions\": {},\n\t\t\"support\": {\n\t\t\t\"generator\": \"Change.createInitialFileContent\",\n\t\t\t\"service\": \"\",\n\t\t\t\"user\": \"SAP\"\n\t\t}\n\t}];\n\n\tconst resources = [];\n\tchange.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\tctrlVariant.forEach((change) => {\n\t\tresources.push({\n\t\t\tname: \"flexChange\",\n\t\t\tgetBuffer: async () => JSON.stringify(change)\n\t\t});\n\t});\n\n\tconst options = {\n\t\tpathPrefix: \"mypath\",\n\t\thasFlexBundleVersion: false\n\t};\n\n\tconst error = await t.throwsAsync(flexChangesBundler({resources, options}));\n\tt.deepEqual(error.message, \"There are some control variant changes in the changes folder. \" +\n\t\t\"This only works with a minUI5Version 1.73.0. Please update the minUI5Version in the manifest.json \" +\n\t\t\"to 1.73.0 or higher\", \"Correct exception thrown\");\n});\n",
    "test/lib/processors/bundlers/manifestBundler.js": "const test = require(\"ava\");\n\nconst yazl = require(\"yazl\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nlet manifestBundler = require(\"../../../../lib/processors/bundlers/manifestBundler\");\n\ntest.beforeEach((t) => {\n\t// Stubbing logger of processors/bundlers/manifestBundler\n\tconst log = require(\"@ui5/logger\");\n\tconst loggerInstance = log.getLogger(\"builder:processors:bundlers:manifestBundler\");\n\tmock(\"@ui5/logger\", {\n\t\tgetLogger: () => loggerInstance\n\t});\n\tmock.reRequire(\"@ui5/logger\");\n\tt.context.logVerboseSpy = sinon.stub(loggerInstance, \"verbose\");\n\tt.context.logWarnSpy = sinon.stub(loggerInstance, \"warn\");\n\tt.context.logErrorSpy = sinon.stub(loggerInstance, \"error\");\n\n\t// Re-require tested module\n\tmanifestBundler = mock.reRequire(\"../../../../lib/processors/bundlers/manifestBundler\");\n\n\n\tconst zip = new yazl.ZipFile();\n\tt.context.addBufferSpy = sinon.spy(zip, \"addBuffer\");\n\tt.context.yazlZipFile = sinon.stub(yazl, \"ZipFile\").returns(zip);\n});\n\ntest.afterEach.always(() => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.serial(\"manifestBundler with empty resources\", async (t) => {\n\tconst resources = [];\n\tconst options = {};\n\tawait manifestBundler({resources, options});\n\tt.is(t.context.addBufferSpy.callCount, 0);\n\tt.is(t.context.logVerboseSpy.callCount, 0);\n\tt.is(t.context.logWarnSpy.callCount, 0);\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n\ntest.serial(\"manifestBundler with manifest path not starting with '/resources'\", async (t) => {\n\tconst resources = [];\n\tresources.push({\n\t\tname: \"manifest.json\",\n\t\tgetPath: () => \"pony/manifest.json\",\n\t\tgetBuffer: async () => JSON.stringify({\n\t\t\t\"sap.app\": {}\n\t\t})\n\t});\n\tconst options = {\n\t\tdescriptor: \"manifest.json\",\n\t\tnamespace: \"pony\"\n\t};\n\n\tawait manifestBundler({resources, options});\n\n\tt.deepEqual(t.context.addBufferSpy.callCount, 0, \"should not be called\");\n\n\tt.is(t.context.logVerboseSpy.callCount, 1);\n\tt.deepEqual(t.context.logVerboseSpy.getCall(0).args,\n\t\t[\"Not bundling resource with path pony/manifest.json since it is not based on path /resources/pony/\"],\n\t\t\"should be called with correct arguments\");\n\tt.is(t.context.logWarnSpy.callCount, 1);\n\tt.deepEqual(t.context.logWarnSpy.getCall(0).args,\n\t\t[\"Could not find any resources for i18n bundle 'pony/i18n'\"]);\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n\ntest.serial(\"manifestBundler with manifest without i18n section in sap.app\", async (t) => {\n\tconst resources = [];\n\tresources.push({\n\t\tname: \"manifest.json\",\n\t\tgetPath: () => \"/resources/pony/manifest.json\",\n\t\tgetBuffer: async () => JSON.stringify({\n\t\t\t\"sap.app\": {}\n\t\t})\n\t});\n\tconst options = {\n\t\tdescriptor: \"manifest.json\",\n\t\tnamespace: \"pony\"\n\t};\n\n\tawait manifestBundler({resources, options});\n\n\tt.is(t.context.addBufferSpy.callCount, 1, \"should be called once\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(0).args, [\"{\\\"sap.app\\\":{}}\", \"manifest.json\"],\n\t\t\"should be called with correct arguments\");\n\n\tt.is(t.context.logVerboseSpy.callCount, 0);\n\tt.is(t.context.logWarnSpy.callCount, 1);\n\tt.deepEqual(t.context.logWarnSpy.getCall(0).args,\n\t\t[\"Could not find any resources for i18n bundle '/resources/pony/i18n'\"]);\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n\ntest.serial(\"manifestBundler with manifest with i18n string\", async (t) => {\n\tconst resources = [];\n\tresources.push({\n\t\tname: \"manifest.json\",\n\t\tgetPath: () => \"/resources/pony/manifest.json\",\n\t\tgetBuffer: async () => JSON.stringify({\n\t\t\t\"sap.app\": {\n\t\t\t\t\"i18n\": \"i18n-bundle/i18n.properties\"\n\t\t\t}\n\t\t})\n\t});\n\tresources.push({\n\t\tname: \"i18n.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n-bundle/i18n.properties\",\n\t\tgetBuffer: async () => \"A=B\"\n\t});\n\tconst options = {\n\t\tdescriptor: \"manifest.json\",\n\t\tnamespace: \"pony\"\n\t};\n\n\tawait manifestBundler({resources, options});\n\n\tt.deepEqual(t.context.addBufferSpy.callCount, 2);\n\tt.deepEqual(t.context.addBufferSpy.getCall(0).args,\n\t\t[\"{\\\"sap.app\\\":{\\\"i18n\\\":\\\"i18n-bundle/i18n.properties\\\"}}\", \"manifest.json\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(1).args,\n\t\t[\"A=B\", \"i18n-bundle/i18n.properties\"],\n\t\t\"should be called with correct arguments\");\n\n\tt.is(t.context.logVerboseSpy.callCount, 0);\n\tt.is(t.context.logWarnSpy.callCount, 0);\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n\ntest.serial(\"manifestBundler with manifest with i18n object (bundleUrl)\", async (t) => {\n\tconst resources = [];\n\tconst manifestString = JSON.stringify({\n\t\t\"sap.app\": {\n\t\t\t\"i18n\": {\n\t\t\t\t\"bundleUrl\": \"i18n/i18n.properties\",\n\t\t\t\t\"supportedLocales\": [\"en\", \"de\"],\n\t\t\t\t\"fallbackLocale\": \"en\"\n\t\t\t}\n\t\t}\n\t});\n\tresources.push({\n\t\tname: \"manifest.json\",\n\t\tgetPath: () => \"/resources/pony/manifest.json\",\n\t\tgetBuffer: async () => manifestString\n\t});\n\tresources.push({\n\t\tname: \"i18n_de.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n/i18n_de.properties\",\n\t\tgetBuffer: async () => \"A=B\"\n\t});\n\tresources.push({\n\t\tname: \"i18n_en.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n/i18n_en.properties\",\n\t\tgetBuffer: async () => \"A=C\"\n\t});\n\tconst options = {\n\t\tdescriptor: \"manifest.json\",\n\t\tnamespace: \"pony\",\n\t\tpropertiesExtension: \".properties\"\n\t};\n\n\tawait manifestBundler({resources, options});\n\n\tt.is(t.context.addBufferSpy.callCount, 3, \"should be called 3 times\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(0).args, [manifestString, \"manifest.json\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(1).args, [\"A=B\", \"i18n/i18n_de.properties\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(2).args, [\"A=C\", \"i18n/i18n_en.properties\"],\n\t\t\"should be called with correct arguments\");\n\n\tt.is(t.context.logVerboseSpy.callCount, 0);\n\tt.is(t.context.logWarnSpy.callCount, 0);\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n\ntest.serial(\"manifestBundler with manifest with i18n object (bundleName)\", async (t) => {\n\tconst resources = [];\n\tconst manifestString = JSON.stringify({\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"pony\",\n\t\t\t\"i18n\": {\n\t\t\t\t\"bundleName\": \"pony.i18n.i18n\",\n\t\t\t\t\"supportedLocales\": [\"en\", \"de\"],\n\t\t\t\t\"fallbackLocale\": \"en\"\n\t\t\t}\n\t\t}\n\t});\n\tresources.push({\n\t\tname: \"manifest.json\",\n\t\tgetPath: () => \"/resources/pony/manifest.json\",\n\t\tgetBuffer: async () => manifestString\n\t});\n\tresources.push({\n\t\tname: \"i18n_de.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n/i18n_de.properties\",\n\t\tgetBuffer: async () => \"A=B\"\n\t});\n\tresources.push({\n\t\tname: \"i18n_en.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n/i18n_en.properties\",\n\t\tgetBuffer: async () => \"A=C\"\n\t});\n\tconst options = {\n\t\tdescriptor: \"manifest.json\",\n\t\tnamespace: \"pony\",\n\t\tpropertiesExtension: \".properties\"\n\t};\n\n\tawait manifestBundler({resources, options});\n\n\tt.is(t.context.addBufferSpy.callCount, 3, \"should be called 3 times\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(0).args, [manifestString, \"manifest.json\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(1).args, [\"A=B\", \"i18n/i18n_de.properties\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(2).args, [\"A=C\", \"i18n/i18n_en.properties\"],\n\t\t\"should be called with correct arguments\");\n\n\tt.is(t.context.logVerboseSpy.callCount, 0);\n\tt.is(t.context.logWarnSpy.callCount, 0);\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n\ntest.serial(\"manifestBundler with manifest with i18n enhanceWith\", async (t) => {\n\tconst resources = [];\n\tconst manifestString = JSON.stringify({\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"pony\",\n\t\t\t\"i18n\": {\n\t\t\t\t\"bundleUrl\": \"i18n/i18n.properties\",\n\t\t\t\t\"enhanceWith\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bundleUrl\": \"enhancement1/i18n.properties\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bundleName\": \"pony.enhancement2.i18n\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t});\n\tresources.push({\n\t\tname: \"manifest.json\",\n\t\tgetPath: () => \"/resources/pony/manifest.json\",\n\t\tgetBuffer: async () => manifestString\n\t});\n\tresources.push({\n\t\tname: \"i18n_de.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n/i18n_de.properties\",\n\t\tgetBuffer: async () => \"A=B\"\n\t});\n\tresources.push({\n\t\tname: \"i18n_en.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n/i18n_en.properties\",\n\t\tgetBuffer: async () => \"A=C\"\n\t});\n\tresources.push({\n\t\tname: \"i18n.properties\",\n\t\tgetPath: () => \"/resources/pony/enhancement1/i18n.properties\",\n\t\tgetBuffer: async () => \"A=enhancement1\"\n\t});\n\tresources.push({\n\t\tname: \"i18n.properties\",\n\t\tgetPath: () => \"/resources/pony/enhancement2/i18n.properties\",\n\t\tgetBuffer: async () => \"A=enhancement2\"\n\t});\n\tconst options = {\n\t\tdescriptor: \"manifest.json\",\n\t\tnamespace: \"pony\",\n\t\tpropertiesExtension: \".properties\"\n\t};\n\n\tawait manifestBundler({resources, options});\n\n\tt.is(t.context.addBufferSpy.callCount, 5, \"should be called 5 times\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(0).args, [manifestString, \"manifest.json\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(1).args, [\"A=B\", \"i18n/i18n_de.properties\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(2).args, [\"A=C\", \"i18n/i18n_en.properties\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(3).args, [\"A=enhancement1\", \"enhancement1/i18n.properties\"],\n\t\t\"should be called with correct arguments\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(4).args, [\"A=enhancement2\", \"enhancement2/i18n.properties\"],\n\t\t\"should be called with correct arguments\");\n\n\tt.is(t.context.logVerboseSpy.callCount, 0);\n\tt.is(t.context.logWarnSpy.callCount, 0);\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n\ntest.serial(\"manifestBundler with manifest with missing i18n files\", async (t) => {\n\tconst resources = [];\n\tconst manifestString = JSON.stringify({\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"pony\",\n\t\t\t\"i18n\": {\n\t\t\t\t\"bundleUrl\": \"i18n/i18n.properties\",\n\t\t\t\t\"enhanceWith\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bundleUrl\": \"enhancement1/i18n.properties\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bundleName\": \"pony.enhancement2.i18n\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t});\n\tresources.push({\n\t\tname: \"manifest.json\",\n\t\tgetPath: () => \"/resources/pony/manifest.json\",\n\t\tgetBuffer: async () => manifestString\n\t});\n\tconst options = {\n\t\tdescriptor: \"manifest.json\",\n\t\tnamespace: \"pony\",\n\t\tpropertiesExtension: \".properties\"\n\t};\n\n\tawait manifestBundler({resources, options});\n\n\tt.is(t.context.addBufferSpy.callCount, 1, \"should be called 1 time\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(0).args, [manifestString, \"manifest.json\"],\n\t\t\"should be called with correct arguments\");\n\n\tt.is(t.context.logVerboseSpy.callCount, 0);\n\tt.is(t.context.logWarnSpy.callCount, 3);\n\tt.deepEqual(t.context.logWarnSpy.getCall(0).args, [\n\t\t`Could not find any resources for i18n bundle '/resources/pony/i18n'`\n\t]);\n\tt.deepEqual(t.context.logWarnSpy.getCall(1).args, [\n\t\t`Could not find any resources for i18n bundle '/resources/pony/enhancement1'`\n\t]);\n\tt.deepEqual(t.context.logWarnSpy.getCall(2).args, [\n\t\t`Could not find any resources for i18n bundle '/resources/pony/enhancement2'`\n\t]);\n\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n\ntest.serial(\"manifestBundler with manifest with ui5:// url\", async (t) => {\n\tconst resources = [];\n\tconst manifestString = JSON.stringify({\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"pony\",\n\t\t\t\"i18n\": {\n\t\t\t\t\"bundleUrl\": \"ui5://pony/i18n/i18n.properties\"\n\t\t\t}\n\t\t}\n\t});\n\tresources.push({\n\t\tname: \"manifest.json\",\n\t\tgetPath: () => \"/resources/pony/manifest.json\",\n\t\tgetBuffer: async () => manifestString\n\t});\n\tresources.push({\n\t\tname: \"i18n_de.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n/i18n_de.properties\",\n\t\tgetBuffer: async () => \"A=B\"\n\t});\n\tresources.push({\n\t\tname: \"i18n_en.properties\",\n\t\tgetPath: () => \"/resources/pony/i18n/i18n_en.properties\",\n\t\tgetBuffer: async () => \"A=C\"\n\t});\n\tconst options = {\n\t\tdescriptor: \"manifest.json\",\n\t\tnamespace: \"pony\",\n\t\tpropertiesExtension: \".properties\"\n\t};\n\n\tawait manifestBundler({resources, options});\n\n\tt.is(t.context.addBufferSpy.callCount, 1, \"should be called 1 time\");\n\tt.deepEqual(t.context.addBufferSpy.getCall(0).args, [manifestString, \"manifest.json\"],\n\t\t\"should be called with correct arguments\");\n\n\tt.is(t.context.logVerboseSpy.callCount, 0);\n\tt.is(t.context.logWarnSpy.callCount, 1);\n\tt.deepEqual(t.context.logWarnSpy.getCall(0).args, [\n\t\t`Using the ui5:// protocol for i18n bundles is currently not supported ` +\n\t\t`('ui5://pony/i18n/i18n.properties' in /resources/pony/manifest.json)`\n\t]);\n\tt.is(t.context.logErrorSpy.callCount, 0);\n});\n",
    "test/lib/processors/libraryLessGenerator.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nconst FILE_HEADER = `/* NOTE: This file was generated as an optimized version of ` +\n\t`\"library.source.less\" for the Theme Designer. */`;\n\ntest.beforeEach((t) => {\n\tt.context.log = {\n\t\terror: sinon.stub(),\n\t\tverbose: sinon.stub()\n\t};\n\tconst logger = require(\"@ui5/logger\");\n\tsinon.stub(logger, \"getLogger\").withArgs(\"builder:processors:libraryLessGenerator\").returns(t.context.log);\n\n\tconst processor = mock.reRequire(\"../../../lib/processors/libraryLessGenerator\");\n\tt.context.processor = processor;\n\tt.context.LibraryLessGenerator = processor._LibraryLessGenerator;\n});\n\ntest.afterEach.always(() => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"processor\", async (t) => {\n\tconst {processor, log} = t.context;\n\n\tconst resources = [\n\t\t{\n\t\t\tgetPath() {\n\t\t\t\treturn \"/resources/sap/foo/themes/base/library.source.less\";\n\t\t\t},\n\t\t\tgetString() {\n\t\t\t\treturn `@import \"../../../../sap/ui/core/themes/base/base.less\";\\n` +\n\t\t\t\t`@import \"../../../../sap/ui/core/themes/base/global.less\";\\n` +\n\t\t\t\t`@import \"Foo.less\";`;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tgetPath() {\n\t\t\t\treturn \"/resources/sap/foo/themes/my_theme/library.source.less\";\n\t\t\t},\n\t\t\tgetString() {\n\t\t\t\treturn `@import \"../base/library.source.less\";\\n` +\n\t\t\t\t`@import \"../../../../sap/ui/core/themes/my_theme/base.less\";\\n` +\n\t\t\t\t`@import \"../../../../sap/ui/core/themes/my_theme/global.less\";\\n` +\n\t\t\t\t`@import \"Foo.less\";`;\n\t\t\t}\n\t\t}\n\t];\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tswitch (filePath) {\n\t\t\tcase \"/resources/sap/foo/themes/base/Foo.less\":\n\t\t\t\tcb(null, `// Content of Foo.less\\n` +\n\t\t\t\t`@import \"Bar.less\";`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\tcase \"/resources/sap/foo/themes/base/Bar.less\":\n\t\t\t\tcb(null, `// Content of Bar.less`);\n\t\t\t\treturn;\n\t\t\tcase \"/resources/sap/foo/themes/my_theme/Foo.less\":\n\t\t\t\tcb(null, `// Content of Foo.less`);\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tcb(new Error(\"File not found: \" + filePath));\n\t\t\t\treturn;\n\t\t\t}\n\t\t})\n\t};\n\n\tconst outputResources = await processor({resources, fs});\n\n\tt.is(log.error.callCount, 0);\n\tt.is(resources.length, outputResources.length, \"Processor returns same amount of resources\");\n\tt.is(outputResources[0].getPath(), `/resources/sap/foo/themes/base/library.less`,\n\t\t\"Processor returns new library.less resource\");\n\tt.is(await outputResources[0].getString(),\n\t\t`/* NOTE: This file was generated as an optimized version of \"library.source.less\" for the Theme Designer. */\n\n@import \"../../../../../Base/baseLib/baseTheme/base.less\"; \\\n/* ORIGINAL IMPORT PATH: \"../../../../sap/ui/core/themes/base/base.less\" */\n\n@import \"../../../../sap/ui/core/themes/base/global.less\";\n/* START \"Foo.less\" */\n// Content of Foo.less\n/* START \"Bar.less\" */\n// Content of Bar.less\n/* END \"Bar.less\" */\n\n/* END \"Foo.less\" */\n`,\n\t\t\"Processor returns new library.less resource\");\n\tt.is(outputResources[1].getPath(), `/resources/sap/foo/themes/my_theme/library.less`,\n\t\t\"Processor returns new library.less resource\");\n\tt.is(await outputResources[1].getString(),\n\t\t`/* NOTE: This file was generated as an optimized version of \"library.source.less\" for the Theme Designer. */\n\n@import \"../base/library.less\";\n@import \"../../../../../Base/baseLib/my_theme/base.less\"; \\\n/* ORIGINAL IMPORT PATH: \"../../../../sap/ui/core/themes/my_theme/base.less\" */\n\n@import \"../../../../sap/ui/core/themes/my_theme/global.less\";\n/* START \"Foo.less\" */\n// Content of Foo.less\n/* END \"Foo.less\" */\n`,\n\t\t\"Processor returns new library.less resource\");\n});\n\ntest.serial(\"LibraryLessGenerator: File without imports\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `.rule {}`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n.rule {}`;\n\n\tconst fs = {readFile: sinon.stub()};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/foo/themes/base/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(fs.readFile.callCount, 0, \"fs.readFile should not be called\");\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: File with normal import\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"Foo.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`/* START \"Foo.less\" */\\n` +\n\t`// Content of foo.less\\n` +\n\t`/* END \"Foo.less\" */\\n`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tswitch (filePath) {\n\t\t\tcase \"/resources/sap/foo/themes/base/Foo.less\":\n\t\t\t\tcb(null, `// Content of foo.less`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/foo/themes/base/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: File with absolute import\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"/resources/sap/foo/themes/base/Foo.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`/* START \"/resources/sap/foo/themes/base/Foo.less\" */\\n` +\n\t`// Content of foo.less\\n` +\n\t`/* END \"/resources/sap/foo/themes/base/Foo.less\" */\\n`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tswitch (filePath) {\n\t\t\tcase \"/resources/sap/foo/themes/base/Foo.less\":\n\t\t\t\tcb(null, `// Content of foo.less`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/foo/themes/base/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: File with multiple imports\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `\n@import \"File1.less\";\n@import \"File2.less\";\n@import \"File3.less\";\n@import \"File4.less\";\n@import (less) \"File5.css\";\n`;\n\tconst expectedOutput = `${FILE_HEADER}\n\n\n/* START \"File1.less\" */\n// Content of /resources/sap/foo/themes/base/File1.less\n/* END \"File1.less\" */\n\n/* START \"File2.less\" */\n// Content of /resources/sap/foo/themes/base/File2.less\n/* END \"File2.less\" */\n\n/* START \"File3.less\" */\n// Content of /resources/sap/foo/themes/base/File3.less\n/* END \"File3.less\" */\n\n/* START \"File4.less\" */\n// Content of /resources/sap/foo/themes/base/File4.less\n/* END \"File4.less\" */\n\n/* START \"File5.css\" */\n// Content of /resources/sap/foo/themes/base/File5.css\n/* END \"File5.css\" */\n\n`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tcb(null, `// Content of ${filePath}`);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/foo/themes/base/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: File with nested imports\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `// Content of input\\n` +\n\t`@import \"Foo.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`// Content of input\\n` +\n\t`/* START \"Foo.less\" */\\n` +\n\t`// Content of Foo.less\\n` +\n\t`/* START \"Bar.less\" */\\n` +\n\t`// Content of Bar.less\\n` +\n\t`/* END \"Bar.less\" */\\n` +\n\t`\\n` +\n\t`/* END \"Foo.less\" */\\n`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tswitch (filePath) {\n\t\t\tcase \"/resources/sap/foo/themes/base/Foo.less\":\n\t\t\t\tcb(null, `// Content of Foo.less\\n` +\n\t\t\t\t`@import \"Bar.less\";`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\tcase \"/resources/sap/foo/themes/base/Bar.less\":\n\t\t\t\tcb(null, `// Content of Bar.less`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/foo/themes/base/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: No rewrite for sap.ui.core global.less\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"global.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`@import \"global.less\";`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/base/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(fs.readFile.callCount, 0, \"fs.readFile should not be called\");\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: No special handling for legacy sap.ui.core global.css\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import (less) \"global.css\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`/* START \"global.css\" */\\n` +\n\t`// Content of global.css\\n` +\n\t`/* END \"global.css\" */\\n`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tswitch (filePath) {\n\t\t\tcase \"/resources/sap/ui/core/themes/base/global.css\":\n\t\t\t\tcb(null, `// Content of global.css`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/base/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: Rewrite for sap.ui.core base.less\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"../base/base.less\";\\n` +\n\t\t`@import \"base.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`@import \"../../../../../../Base/baseLib/baseTheme/base.less\"; ` +\n\t\t`/* ORIGINAL IMPORT PATH: \"../base/base.less\" */\\n\\n` +\n\t`@import \"../../../../../../Base/baseLib/sap_fiori_3/base.less\"; ` +\n\t\t`/* ORIGINAL IMPORT PATH: \"base.less\" */\\n`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/sap_fiori_3/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(fs.readFile.callCount, 0, \"fs.readFile should not be called\");\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: Rewrite for sap.ui.core base.less (from different library)\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"../../../../sap/ui/core/themes/base/base.less\";\\n` +\n\t\t`@import \"../../../../sap/ui/core/themes/sap_fiori_3/base.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`@import \"../../../../../Base/baseLib/baseTheme/base.less\"; ` +\n\t\t`/* ORIGINAL IMPORT PATH: \"../../../../sap/ui/core/themes/base/base.less\" */\\n\\n` +\n\t`@import \"../../../../../Base/baseLib/sap_fiori_3/base.less\"; ` +\n\t\t`/* ORIGINAL IMPORT PATH: \"../../../../sap/ui/core/themes/sap_fiori_3/base.less\" */\\n`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/f/themes/sap_fiori_3/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(fs.readFile.callCount, 0, \"fs.readFile should not be called\");\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: Rewrite for library.source.less\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"../base/library.source.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`@import \"../base/library.less\";`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/sap_fiori_3/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(fs.readFile.callCount, 0, \"fs.readFile should not be called\");\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: Log error for file in sub-directory\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"foo/bar.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`@import \"foo/bar.less\"; /* ImportError: Could not inline import outside of theme directory */`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/sap_fiori_3/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(fs.readFile.callCount, 0, \"fs.readFile should not be called\");\n\tt.is(log.error.callCount, 1);\n\tt.deepEqual(log.error.getCall(0).args, [\n\t\t\"Could not inline import '/resources/sap/ui/core/themes/sap_fiori_3/foo/bar.less' \" +\n\t\t\"outside of theme directory '/resources/sap/ui/core/themes/sap_fiori_3'. \" +\n\t\t\"Stylesheets must be located in the theme directory (no sub-directories). \" +\n\t\t\"The generated '/resources/sap/ui/core/themes/sap_fiori_3/library.less' will cause \" +\n\t\t\"errors when compiled with the Theme Designer.\"\n\t]);\n});\n\ntest.serial(\"LibraryLessGenerator: Log error for file outside of theme directory\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"../foo/bar.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`@import \"../foo/bar.less\"; /* ImportError: Could not inline import outside of theme directory */`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/sap_fiori_3/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(fs.readFile.callCount, 0, \"fs.readFile should not be called\");\n\tt.is(log.error.callCount, 1);\n\tt.deepEqual(log.error.getCall(0).args, [\n\t\t\"Could not inline import '/resources/sap/ui/core/themes/foo/bar.less' \" +\n\t\t\"outside of theme directory '/resources/sap/ui/core/themes/sap_fiori_3'. \" +\n\t\t\"Stylesheets must be located in the theme directory (no sub-directories). \" +\n\t\t\"The generated '/resources/sap/ui/core/themes/sap_fiori_3/library.less' will cause \" +\n\t\t\"errors when compiled with the Theme Designer.\"\n\t]);\n});\n\ntest.serial(\"LibraryLessGenerator: Log error for absolute import outside of theme directory\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"/foo/bar.less\";`;\n\tconst expectedOutput = `${FILE_HEADER}\\n\\n` +\n\t`@import \"/foo/bar.less\"; /* ImportError: Could not inline import outside of theme directory */`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tconst output = await (new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/sap_fiori_3/library.source.less\",\n\t\tfileContent: input\n\t});\n\n\tt.is(output, expectedOutput);\n\tt.is(fs.readFile.callCount, 0, \"fs.readFile should not be called\");\n\tt.is(log.error.callCount, 1);\n\tt.deepEqual(log.error.getCall(0).args, [\n\t\t\"Could not inline import '/foo/bar.less' \" +\n\t\t\"outside of theme directory '/resources/sap/ui/core/themes/sap_fiori_3'. \" +\n\t\t\"Stylesheets must be located in the theme directory (no sub-directories). \" +\n\t\t\"The generated '/resources/sap/ui/core/themes/sap_fiori_3/library.less' will cause \" +\n\t\t\"errors when compiled with the Theme Designer.\"\n\t]);\n});\n\ntest.serial(\"LibraryLessGenerator: Throw error when file can't be found\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"foo.less\";`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"ENOENT: no such file or directory, open \" + filePath);\n\t\t\terr.code = \"ENOENT\";\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tawait t.throwsAsync((new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/sap_fiori_3/library.source.less\",\n\t\tfileContent: input\n\t}), {\n\t\tmessage:\n\t\t`libraryLessGenerator: Unable to resolve import 'foo.less' from ` +\n\t\t`'/resources/sap/ui/core/themes/sap_fiori_3'\\n` +\n\t\t`ENOENT: no such file or directory, open /resources/sap/ui/core/themes/sap_fiori_3/foo.less`\n\t});\n\n\tt.is(fs.readFile.callCount, 1, \"fs.readFile should be called once\");\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator: Throw error when readFile fails\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tconst input = `@import \"foo.less\";`;\n\n\tconst fs = {\n\t\treadFile: sinon.stub().callsFake((filePath, options, cb) => {\n\t\t\tconst err = new Error(\"Unexpected error from fs.readFile\");\n\t\t\tcb(err);\n\t\t})\n\t};\n\n\tawait t.throwsAsync((new LibraryLessGenerator({fs})).generate({\n\t\tfilePath: \"/resources/sap/ui/core/themes/sap_fiori_3/library.source.less\",\n\t\tfileContent: input\n\t}), {\n\t\tmessage:\n\t\t`Unexpected error from fs.readFile`\n\t});\n\n\tt.is(fs.readFile.callCount, 1, \"fs.readFile should be called once\");\n\tt.is(log.error.callCount, 0);\n});\n\ntest.serial(\"LibraryLessGenerator.getPathToRoot\", async (t) => {\n\tconst {LibraryLessGenerator, log} = t.context;\n\n\tt.is(\n\t\tLibraryLessGenerator.getPathToRoot(\"/resources/sap/ui/core/themes/base\"),\n\t\t\"../../../../../../\"\n\t);\n\tt.is(\n\t\tLibraryLessGenerator.getPathToRoot(\"/resources/sap/f/themes/sap_fiori_3\"),\n\t\t\"../../../../../\"\n\t);\n\tt.is(log.error.callCount, 0);\n});\n",
    "test/lib/processors/manifestCreator.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst logger = require(\"@ui5/logger\");\nconst {SemVer: Version} = require(\"semver\");\n\nconst libraryContent = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t<name>library.e</name>\n\t<vendor>SAP SE</vendor>\n\t<copyright>my copyright</copyright>\n\t<version>1.0.0</version>\n\t<documentation>Library E</documentation>\n\n\t<dependencies>\n\t    <dependency>\n\t      <libraryName>sap.ui.core</libraryName>\n\t    </dependency>\n\t</dependencies>\n\t\n\t<appData>\n\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t<i18n>i18n/i18n.properties</i18n>\n\t\t</manifest>\n\t</appData>\n</library>`;\n\nconst libraryContentSpecialChars = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t<name>library.e</name>\n\t<vendor>SAP SE</vendor>\n\t<copyright>my copyright</copyright>\n\t<version>1.0.0</version>\n\t<documentation>Library E</documentation>\n\n\t<dependencies>\n\t    <dependency>\n\t      <libraryName>sap.ui.core</libraryName>\n\t    </dependency>\n\t</dependencies>\n\t\n\t<appData>\n\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t<i18n>i18n(.*)./i18n(.*).properties</i18n>\n\t\t</manifest>\n\t</appData>\n</library>`;\n\nconst expectedManifestContentObject = () => {\n\treturn {\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"library.e\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [],\n\t\t\t\"i18n\": {\n\t\t\t\t\"bundleUrl\": \"i18n/i18n.properties\",\n\t\t\t\t\"supportedLocales\": [\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"de\",\n\t\t\t\t\t\"en\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"Library E\",\n\t\t\t\"description\": \"Library E\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {\n\t\t\t\t\t\"sap.ui.core\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t};\n};\n\nconst expectedManifestContent = JSON.stringify(expectedManifestContentObject(), null, 2);\nconst expectedManifestContentSpecialCharsObject = expectedManifestContentObject();\nexpectedManifestContentSpecialCharsObject[\"sap.app\"][\"i18n\"][\"bundleUrl\"] = \"i18n(.*)./i18n(.*).properties\";\nconst expectedManifestContentSpecialChars = JSON.stringify(expectedManifestContentSpecialCharsObject, null, 2);\n\ntest.beforeEach((t) => {\n\tt.context.verboseLogStub = sinon.stub();\n\tt.context.errorLogStub = sinon.stub();\n\tsinon.stub(logger, \"getLogger\").returns({\n\t\tverbose: t.context.verboseLogStub,\n\t\terror: t.context.errorLogStub\n\t});\n\tt.context.manifestCreator = mock.reRequire(\"../../../lib/processors/manifestCreator\");\n});\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.serial(\"default manifest creation\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\tconst prefix = \"/resources/sap/ui/mine/\";\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \".library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn libraryContent;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\tconst resources = [\"\", \"_en\", \"_de\"].map((lang) => {\n\t\treturn {\n\t\t\tgetPath: () => {\n\t\t\t\treturn `${prefix}i18n/i18n${lang}.properties`;\n\t\t\t}\n\t\t};\n\t});\n\tt.is(errorLogStub.callCount, 0);\n\n\tconst result = await manifestCreator({libraryResource, resources, options: {}});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n});\n\ntest.serial(\"default manifest creation i18n empty string\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\tconst prefix = \"/resources/sap/ui/mine/\";\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \".library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t\t<name>library.e</name>\n\t\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t\t<copyright>my copyright</copyright>\n\t\t\t\t\t<version>1.0.0</version>\n\t\t\t\t\t<documentation>Library E</documentation>\n\t\t\t\t\n\t\t\t\t\t<dependencies>\n\t\t\t\t\t    <dependency>\n\t\t\t\t\t      <libraryName>sap.ui.core</libraryName>\n\t\t\t\t\t    </dependency>\n\t\t\t\t\t</dependencies>\n\t\t\t\t\t\n\t\t\t\t\t<appData>\n\t\t\t\t\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t\t\t\t\t<i18n></i18n>\n\t\t\t\t\t\t</manifest>\n\t\t\t\t\t</appData>\n\t\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tt.is(errorLogStub.callCount, 0);\n\tconst expectedManifestContentObjectModified = expectedManifestContentObject();\n\texpectedManifestContentObjectModified[\"sap.app\"][\"i18n\"] = \"\";\n\tconst expectedManifestContent = JSON.stringify(expectedManifestContentObjectModified, null, 2);\n\tconst result = await manifestCreator({libraryResource, resources: [], options: {}});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n});\n\ntest.serial(\"default manifest creation with invalid version\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\tconst prefix = \"/resources/sap/ui/mine/\";\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \".library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t\t<name>library.e</name>\n\t\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t\t<version>@version@</version>\n\t\t\t\t\t<documentation>Library E</documentation>\n\t\t\t\t\n\t\t\t\t\t<dependencies>\n\t\t\t\t\t    <dependency>\n\t\t\t\t\t      <libraryName>sap.ui.core</libraryName>\n\t\t\t\t\t    </dependency>\n\t\t\t\t\t</dependencies>\n\n\t\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}],\n\t\t\tversion: \"1.2.3\"\n\t\t}\n\t};\n\n\tt.is(errorLogStub.callCount, 0);\n\tconst expectedManifestContentObjectModified = expectedManifestContentObject();\n\texpectedManifestContentObjectModified[\"sap.app\"][\"i18n\"] = undefined;\n\texpectedManifestContentObjectModified[\"sap.app\"][\"applicationVersion\"][\"version\"] = \"1.2.3\";\n\tconst expectedManifestContent = JSON.stringify(expectedManifestContentObjectModified, null, 2);\n\tconst result = await manifestCreator({libraryResource, resources: [], options: {}});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n});\n\ntest.serial(\"default manifest creation with sourceTemplate and thirdparty\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\tconst prefix = \"/resources/sap/ui/mine/\";\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \".library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t\t<name>library.e</name>\n\t\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t\t<version>@version@</version>\n\t\t\t\t\t<documentation>Library E</documentation>\n\t\t\t\t\n\t\t\t\t\t<dependencies>\n\t\t\t\t\t    <dependency>\n\t\t\t\t\t      <libraryName>sap.ui.core</libraryName>\n\t\t\t\t\t    </dependency>\n\t\t\t\t\t    <dependency>\n\t\t\t\t\t      <libraryName>my.lib</libraryName>\n\t\t\t\t\t      <version>4.5.6</version>\n\t\t\t\t\t    </dependency>\n\t\t\t\t\t</dependencies>\n\t\t\t\t\t\n\t\t\t\t\t<appData>\n\t\t\t\t\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t\t\t\t\t<sourceTemplate>\n\t\t\t\t\t\t\t\t<id>myid</id>\n\t\t\t\t\t\t\t\t<version>1.2.3</version>\n\t\t\t\t\t\t\t</sourceTemplate>\n\t\t\t\t\t\t</manifest>\n\t\t\t\t\t\t<thirdparty xmlns=\"http://www.sap.com/ui5/buildext/thirdparty\">\n\t\t\t\t\t\t\t<lib name=\"jquery-3\" displayName=\"jQuery 3\" version=\"3.5.1\" homepage=\"https://jquery.com\"></lib>\n\t\t\t\t\t\t\t<lib name=\"jquery-2\" displayName=\"jQuery 2\" version=\"2.2.3\" homepage=\"https://jquery.com\"></lib>\n\t\t\t\t\t\t</thirdparty>\n\t\t\t\t\t</appData>\n\n\t\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"my.lib\"\n\t\t\t\t}\n\t\t\t}],\n\t\t\tversion: \"1.2.3\"\n\t\t}\n\t};\n\n\tt.is(errorLogStub.callCount, 0);\n\tconst expectedManifestContentObjectModified = expectedManifestContentObject();\n\texpectedManifestContentObjectModified[\"sap.app\"][\"i18n\"] = undefined;\n\texpectedManifestContentObjectModified[\"sap.app\"][\"applicationVersion\"][\"version\"] = \"1.2.3\";\n\texpectedManifestContentObjectModified[\"sap.app\"][\"sourceTemplate\"]= {\n\t\tid: \"myid\",\n\t\tversion: \"1.2.3\"\n\t};\n\texpectedManifestContentObjectModified[\"sap.app\"][\"openSourceComponents\"]= [{\n\t\t\"name\": \"jquery-3\",\n\t\t\"packagedWithMySelf\": true,\n\t\t\"version\": \"3.5.1\"\n\t}, {\n\t\t\"name\": \"jquery-2\",\n\t\t\"packagedWithMySelf\": true,\n\t\t\"version\": \"2.2.3\"\n\t}];\n\texpectedManifestContentObjectModified[\"sap.ui5\"][\"dependencies\"][\"libs\"][\"my.lib\"] = {\n\t\t\"minVersion\": \"4.5.6\"\n\t};\n\tconst expectedManifestContent = JSON.stringify(expectedManifestContentObjectModified, null, 2);\n\tconst result = await manifestCreator({libraryResource, resources: [], options: {}});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n});\n\ntest.serial(\"default manifest creation no dependency version\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\tconst prefix = \"/resources/sap/ui/mine/\";\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \".library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t\t<name>library.e</name>\n\t\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t\t<documentation>Library E</documentation>\n\t\t\t\t\n\t\t\t\t\t<dependencies>\n\t\t\t\t\t    <dependency>\n\t\t\t\t\t      <libraryName>sap.ui.core</libraryName>\n\t\t\t\t\t    </dependency>\n\t\t\t\t\t    <dependency>\n\t\t\t\t\t      <libraryName>my.lib</libraryName>\n\t\t\t\t\t    </dependency>\n\t\t\t\t\t</dependencies>\n\n\t\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tt.is(errorLogStub.callCount, 0);\n\n\tconst error = await t.throwsAsync(manifestCreator({\n\t\tlibraryResource,\n\t\tresources: []\n\t}));\n\tt.deepEqual(error.message,\n\t\t\"Couldn't find version for library 'my.lib', project dependency missing?\", \"error message correct\");\n});\n\ntest.serial(\"default manifest creation with special characters\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\tconst prefix = \"/resources/sap/ui/mine/\";\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \".library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn libraryContentSpecialChars;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\tconst resources = [\"\", \"_en\", \"_de\"].map((lang) => {\n\t\treturn {\n\t\t\tgetPath: () => {\n\t\t\t\treturn `${prefix}i18n(.*)./i18n(.*)${lang}.properties`;\n\t\t\t}\n\t\t};\n\t});\n\n\t// additional non-i18n resource\n\tresources.push({\n\t\tgetPath: () => {\n\t\t\treturn `${prefix}model/data.json`;\n\t\t}\n\t});\n\tt.is(errorLogStub.callCount, 0);\n\n\tconst result = await manifestCreator({libraryResource, resources, options: {}});\n\tt.is(await result.getString(), expectedManifestContentSpecialChars, \"Correct result returned\");\n});\n\ntest.serial(\"default manifest creation with special characters small app descriptor version\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\tconst prefix = \"/resources/sap/ui/mine/\";\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \".library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn libraryContent;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\tconst resources = [\"\", \"_en\", \"_de\"].map((lang) => {\n\t\treturn {\n\t\t\tgetPath: () => {\n\t\t\t\treturn `${prefix}i18n/i18n${lang}.properties`;\n\t\t\t}\n\t\t};\n\t});\n\tt.is(errorLogStub.callCount, 0);\n\n\tconst options = {descriptorVersion: new Version(\"1.9.0\")};\n\tconst result = await manifestCreator({libraryResource, resources, options});\n\tconst expectedManifestContentSmallVersion = expectedManifestContentObject();\n\texpectedManifestContentSmallVersion[\"_version\"] = \"1.9.0\";\n\texpectedManifestContentSmallVersion[\"sap.app\"][\"i18n\"] = \"i18n/i18n.properties\";\n\tconst expectedManifestContentSmallVersionString = JSON.stringify(expectedManifestContentSmallVersion, null, 2);\n\tt.is(await result.getString(), expectedManifestContentSmallVersionString, \"Correct result returned\");\n});\n\ntest.serial(\"default manifest creation with special characters very small app descriptor version\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\tconst prefix = \"/resources/sap/ui/mine/\";\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \".library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn libraryContent;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\tt.is(errorLogStub.callCount, 0);\n\n\tconst options = {descriptorVersion: new Version(\"1.1.0\")};\n\tconst result = await manifestCreator({libraryResource, resources: [], options});\n\tconst expectedManifestContentSmallVersion = expectedManifestContentObject();\n\texpectedManifestContentSmallVersion[\"_version\"] = \"1.1.0\";\n\texpectedManifestContentSmallVersion[\"sap.app\"][\"_version\"] = \"1.2.0\";\n\texpectedManifestContentSmallVersion[\"sap.ui\"][\"_version\"] = \"1.1.0\";\n\texpectedManifestContentSmallVersion[\"sap.ui5\"][\"_version\"] = \"1.1.0\";\n\texpectedManifestContentSmallVersion[\"sap.app\"][\"i18n\"] = \"i18n/i18n.properties\";\n\tconst sResult = await result.getString();\n\tt.deepEqual(JSON.parse(sResult), expectedManifestContentSmallVersion, \"Correct result returned\");\n});\n\ntest.serial(\"manifest creation for sap/apf\", async (t) => {\n\tconst {manifestCreator, errorLogStub, verboseLogStub} = t.context;\n\n\tconst prefix = \"/resources/sap/apf/\";\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/apf/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn libraryContent;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn prefix + \"Component.js\";\n\t\t}\n\t};\n\tconst resources = [\"\", \"_en\", \"_de\"].map((lang) => {\n\t\treturn {\n\t\t\tgetPath: () => {\n\t\t\t\treturn `${prefix}i18n/i18n${lang}.properties`;\n\t\t\t}\n\t\t};\n\t});\n\tresources.push(componentResource);\n\tconst result = await manifestCreator({libraryResource, resources, options: {}});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n\n\tt.is(verboseLogStub.callCount, 10);\n\tt.is(verboseLogStub.getCall(0).args[0], \"sap.app/i18n taken from .library appData: '%s'\");\n\tt.is(verboseLogStub.getCall(1).args[0],\n\t\t\"checking component at %s\");\n\tt.is(verboseLogStub.getCall(1).args[1], \"/resources/sap/apf\");\n\tt.is(verboseLogStub.getCall(2).args[0],\n\t\t\"Package %s contains both '*.library' and 'Component.js'. \" +\n\t\t\"This is a known issue but can't be solved due to backward compatibility.\");\n\tt.is(verboseLogStub.getCall(2).args[1], \"/resources/sap/apf\");\n});\n\ntest.serial(\"manifest creation for sap/ui/core\", async (t) => {\n\tconst {manifestCreator, errorLogStub, verboseLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.ui.core\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.ui.core\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/ui/core/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.ui.core</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tmetadata: {\n\t\t\t\tname: \"sap.ui.core\"\n\t\t\t}\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/ui/core/Component.js\";\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({libraryResource, resources: [componentResource], options: {}});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n\n\tt.is(verboseLogStub.callCount, 8);\n\tt.is(verboseLogStub.getCall(1).args[0],\n\t\t\"  sap.app/id taken from .library: '%s'\");\n\tt.is(verboseLogStub.getCall(1).args[1], \"sap.ui.core\");\n});\n\ntest.serial(\"manifest creation with .library / Component.js at same namespace\", async (t) => {\n\tconst {manifestCreator, errorLogStub, verboseLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/Component.js\";\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({libraryResource, resources: [componentResource], options: {}});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 1);\n\tt.deepEqual(errorLogStub.getCall(0).args, [\n\t\t\"Package %s contains both '*.library' and 'Component.js'. \" +\n\t\t\"This is not supported by manifests, therefore the component won't be \" +\n\t\t\"listed in the library's manifest.\",\n\t\t\"/resources/sap/lib1\"\n\t]);\n\n\tt.is(verboseLogStub.callCount, 8);\n\tt.is(verboseLogStub.getCall(1).args[0],\n\t\t\"  sap.app/id taken from .library: '%s'\");\n\tt.is(verboseLogStub.getCall(1).args[1], \"sap.lib1\");\n});\n\ntest.serial(\"manifest creation with embedded component\", async (t) => {\n\tconst {manifestCreator, errorLogStub, verboseLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [\n\t\t\t\t\"component1\"\n\t\t\t],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/Component.js\";\n\t\t}\n\t};\n\tconst componentManifestResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"embeddedBy\": \"../\"\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({\n\t\tlibraryResource,\n\t\tresources: [\n\t\t\tcomponentResource,\n\t\t\tcomponentManifestResource\n\t\t]\n\t});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n\n\tt.true(verboseLogStub.callCount >= 2, \"There should be at least 2 verbose log calls\");\n\tt.deepEqual(verboseLogStub.getCall(0).args, [\n\t\t\"checking component at %s\", \"/resources/sap/lib1/component1\"\n\t]);\n\tt.deepEqual(verboseLogStub.getCall(1).args, [\n\t\t\"  sap.app/id taken from .library: '%s'\", \"sap.lib1\"\n\t]);\n});\n\ntest.serial(\"manifest creation with embedded component (Missing 'embeddedBy')\", async (t) => {\n\tconst {manifestCreator, errorLogStub, verboseLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [\n\t\t\t\t\"component1\"\n\t\t\t],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/Component.js\";\n\t\t}\n\t};\n\tconst componentManifestResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({});\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({\n\t\tlibraryResource,\n\t\tresources: [\n\t\t\tcomponentResource,\n\t\t\tcomponentManifestResource\n\t\t]\n\t});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n\n\tt.true(verboseLogStub.callCount >= 2, \"There should be at least 2 verbose log calls\");\n\tt.deepEqual(verboseLogStub.getCall(0).args, [\n\t\t\"checking component at %s\", \"/resources/sap/lib1/component1\"\n\t]);\n\tt.deepEqual(verboseLogStub.getCall(1).args, [\n\t\t\"  sap.app/id taken from .library: '%s'\", \"sap.lib1\"\n\t]);\n});\n\ntest.serial(\"manifest creation with embedded component ('embeddedBy' doesn't point to library)\", async (t) => {\n\tconst {manifestCreator, errorLogStub, verboseLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [\n\t\t\t\t\"component1\"\n\t\t\t],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/Component.js\";\n\t\t}\n\t};\n\tconst componentManifestResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"embeddedBy\": \"../foo/\"\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({\n\t\tlibraryResource,\n\t\tresources: [\n\t\t\tcomponentResource,\n\t\t\tcomponentManifestResource\n\t\t]\n\t});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n\n\tt.true(verboseLogStub.callCount >= 2, \"There should be at least 2 verbose log calls\");\n\tt.deepEqual(verboseLogStub.getCall(0).args, [\n\t\t\"checking component at %s\", \"/resources/sap/lib1/component1\"\n\t]);\n\tt.deepEqual(verboseLogStub.getCall(1).args, [\n\t\t\"  sap.app/id taken from .library: '%s'\", \"sap.lib1\"\n\t]);\n});\n\ntest.serial(\"manifest creation with embedded component ('embeddedBy' absolute path)\", async (t) => {\n\tconst {manifestCreator, errorLogStub, verboseLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [\n\t\t\t\t\"component1\"\n\t\t\t],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/Component.js\";\n\t\t}\n\t};\n\tconst componentManifestResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"embeddedBy\": \"/\"\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({\n\t\tlibraryResource,\n\t\tresources: [\n\t\t\tcomponentResource,\n\t\t\tcomponentManifestResource\n\t\t]\n\t});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n\n\tt.true(verboseLogStub.callCount >= 2, \"There should be at least 2 verbose log calls\");\n\tt.deepEqual(verboseLogStub.getCall(0).args, [\n\t\t\"checking component at %s\", \"/resources/sap/lib1/component1\"\n\t]);\n\tt.deepEqual(verboseLogStub.getCall(1).args, [\n\t\t\"  sap.app/id taken from .library: '%s'\", \"sap.lib1\"\n\t]);\n});\n\ntest.serial(\"manifest creation with embedded component ('embeddedBy' empty string)\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [\n\t\t\t\t\"component1\"\n\t\t\t],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/Component.js\";\n\t\t}\n\t};\n\tconst componentManifestResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"embeddedBy\": \"\"\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({\n\t\tlibraryResource,\n\t\tresources: [\n\t\t\tcomponentResource,\n\t\t\tcomponentManifestResource\n\t\t]\n\t});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n});\n\ntest.serial(\"manifest creation with embedded component ('embeddedBy' object)\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [\n\t\t\t\t\"component1\"\n\t\t\t],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/Component.js\";\n\t\t}\n\t};\n\tconst componentManifestResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"embeddedBy\": {\n\t\t\t\t\t\t\"foo\": \"bar\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({\n\t\tlibraryResource,\n\t\tresources: [\n\t\t\tcomponentResource,\n\t\t\tcomponentManifestResource\n\t\t]\n\t});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n});\n\ntest.serial(\"manifest creation with embedded component (no manifest.json)\", async (t) => {\n\tconst {manifestCreator, errorLogStub, verboseLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/Component.js\";\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({\n\t\tlibraryResource,\n\t\tresources: [\n\t\t\tcomponentResource\n\t\t]\n\t});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n\n\tt.true(verboseLogStub.callCount >= 2, \"There should be at least 2 verbose log calls\");\n\tt.deepEqual(verboseLogStub.getCall(0).args, [\n\t\t\"checking component at %s\",\n\t\t\"/resources/sap/lib1/component1\"\n\t]);\n\tt.deepEqual(verboseLogStub.getCall(1).args, [\n\t\t\"  component has no accompanying manifest.json, don't list it as 'embedded'\"\n\t]);\n});\n\ntest.serial(\"manifest creation with embedded component (invalid manifest.json)\", async (t) => {\n\tconst {manifestCreator, errorLogStub} = t.context;\n\n\tconst expectedManifestContent = JSON.stringify({\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\t\"id\": \"sap.lib1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"embeds\": [\n\t\t\t\t\"component1\"\n\t\t\t],\n\t\t\t\"applicationVersion\": {\n\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t},\n\t\t\t\"title\": \"sap.lib1\",\n\t\t\t\"resources\": \"resources.json\",\n\t\t\t\"offline\": true\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\t\"technology\": \"UI5\",\n\t\t\t\"supportedThemes\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": {}\n\t\t\t},\n\t\t\t\"library\": {\n\t\t\t\t\"i18n\": false\n\t\t\t}\n\t\t}\n\t}, null, 2);\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>sap.lib1</name>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</library>`;\n\t\t},\n\t\t_project: {\n\t\t\tdependencies: [{\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t};\n\n\tconst componentResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/Component.js\";\n\t\t}\n\t};\n\tconst componentManifestResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/component1/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn \"{invalid}\";\n\t\t}\n\t};\n\n\tconst result = await manifestCreator({\n\t\tlibraryResource,\n\t\tresources: [\n\t\t\tcomponentResource,\n\t\t\tcomponentManifestResource\n\t\t]\n\t});\n\tt.is(await result.getString(), expectedManifestContent, \"Correct result returned\");\n\n\tt.is(errorLogStub.callCount, 0);\n});\n\ntest.serial(\"manifest creation for invalid .library content\", async (t) => {\n\tconst {manifestCreator} = t.context;\n\n\tconst libraryResource = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/sap/lib1/.library\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<<>`;\n\t\t}\n\t};\n\n\tconst error = await t.throwsAsync(manifestCreator({\n\t\tlibraryResource,\n\t\tresources: []\n\t}));\n\tt.deepEqual(error.message, `Unencoded <\nLine: 1\nColumn: 5\nChar: <`, \"error message for unencoded <\");\n});\n",
    "test/lib/processors/nonAsciiEscaper.js": "const test = require(\"ava\");\n\nconst nonAsciiEscaper = require(\"../../../lib/processors/nonAsciiEscaper\");\nconst Resource = require(\"@ui5/fs\").Resource;\n\n/**\n * Executes string escaping. Returns <code>undefined</code> if nothing was escaped.\n *\n * @param {string} input string\n * @param {object} [options]\n * @param {string} encoding character encoding used, e.g. utf8, latin1, ..\n * @returns {Promise<string|undefined>} escaped string if non-ascii characters present, <code>undefined</code> otherwise\n */\nconst escape = async function(input, options={}, encoding=\"utf8\") {\n\tconst resource = new Resource({\n\t\tpath: \"my.properties\",\n\t\tbuffer: Buffer.from(input, encoding)\n\t});\n\treturn nonAsciiEscaper({resources: [resource], options});\n};\n\ntest(\"Escape characters (ISO-8859-1)\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `Viele Grüße`;\n\tconst expected = `Viele Gr\\\\u00fc\\\\u00dfe`;\n\tconst [resource] = await escape(input, {\n\t\tencoding: \"latin1\" // escape encoding\n\t}, \"latin1\"); // resource encoding\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\ntest(\"Escape characters (UTF-8, explicit parameter)\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `These are 人物 characters`;\n\tconst expected = \"These are \\\\u4eba\\\\u7269 characters\";\n\tconst [resource] = await escape(input, {\n\t\tencoding: \"utf8\" // escape encoding\n\t}, \"utf8\"); // resource encoding\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\ntest(\"Escape characters (UTF-8, default)\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `Viele Grüße`;\n\tconst expected = `Viele Gr\\\\u00fc\\\\u00dfe`;\n\t// default encoding is utf8\n\tconst [resource] = await escape(input);\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\ntest(\"Replace symbol characters\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `L♥VE is everywhere`;\n\tconst expected = `L\\\\u2665VE is everywhere`;\n\tconst [resource] = await escape(input);\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\ntest(\"Replace chinese characters\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `These are 人物 characters`;\n\tconst expected = \"These are \\\\u4eba\\\\u7269 characters\";\n\tconst [resource] = await escape(input);\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\ntest(\"Replace umlaut characters\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `Achso Ähem`;\n\tconst expected = \"Achso \\\\u00c4hem\";\n\tconst [resource] = await escape(input);\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\ntest(\"Replace constructed characters\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `Oh ẛ̣ that's ẛ̣ yes`;\n\tconst expected = \"Oh \\\\u1e9b\\\\u0323 that's \\\\u1e9b\\\\u0323 yes\";\n\tconst [resource] = await escape(input);\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\n\ntest(\"Replace multiple times same character\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `♥H L♥VE AND HARM♥NY ♥MG`;\n\tconst expected = \"\\\\u2665H L\\\\u2665VE AND HARM\\\\u2665NY \\\\u2665MG\";\n\tconst [resource] = await escape(input);\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\ntest(\"No Replace of characters\", async (t) => {\n\tt.plan(1);\n\n\tconst input = `ONE LOVE`;\n\tconst expected = `ONE LOVE`;\n\tconst [resource] = await escape(input);\n\tt.deepEqual(await resource.getString(), expected, \"Correct file content should be set\");\n});\n\ntest(\"Invalid encoding\", async (t) => {\n\tt.plan(2);\n\n\tconst input = `ONE LOVE`;\n\tconst error = await t.throwsAsync(escape(input, {encoding: \"asd\"}));\n\tt.is(error.message, \"Unknown encoding: asd\");\n});\n\n\ntest(\"getEncodingFromAlias\", (t) => {\n\tt.is(\"utf8\", nonAsciiEscaper.getEncodingFromAlias(\"UTF-8\"));\n});\n\ntest(\"getEncodingFromAlias invalid\", (t) => {\n\tconst error = t.throws(function() {\n\t\tnonAsciiEscaper.getEncodingFromAlias(\"asd\");\n\t});\n\tt.is(error.message, `Encoding \"asd\" is not supported. Only UTF-8, ISO-8859-1 are allowed values`);\n});\n",
    "test/lib/processors/versionInfoGenerator.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\n\nconst mock = require(\"mock-require\");\nconst logger = require(\"@ui5/logger\");\n\nlet versionInfoGenerator = require(\"../../../lib/processors/versionInfoGenerator\");\n\n\ntest(\"versionInfoGenerator missing parameters\", async (t) => {\n\tconst error = await t.throwsAsync(versionInfoGenerator({options: {}}));\n\tt.deepEqual(error.message, \"[versionInfoGenerator]: Missing options parameters\");\n});\n\ntest.beforeEach((t) => {\n\tt.context.warnLogStub = sinon.stub();\n\tt.context.infoLogStub = sinon.stub();\n\tt.context.verboseLogStub = sinon.stub();\n\tsinon.stub(logger, \"getLogger\").returns({\n\t\twarn: t.context.warnLogStub,\n\t\tinfo: t.context.infoLogStub,\n\t\tverbose: t.context.verboseLogStub,\n\t\tisLevelEnabled: () => true\n\t});\n\tversionInfoGenerator = mock.reRequire(\"../../../lib/processors/versionInfoGenerator\");\n});\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\nconst assertVersionInfoContent = (t, oExpectedVersionInfo, sActualContent) => {\n\tconst currentVersionInfo = JSON.parse(sActualContent);\n\n\tt.is(currentVersionInfo.buildTimestamp.length, 12, \"Timestamp should have length of 12 (yyyyMMddHHmm)\");\n\n\tdelete currentVersionInfo.buildTimestamp; // removing to allow deep comparison\n\tcurrentVersionInfo.libraries.forEach((lib) => {\n\t\tt.is(lib.buildTimestamp.length, 12, \"Timestamp should have length of 12 (yyyyMMddHHmm)\");\n\t\tdelete lib.buildTimestamp; // removing to allow deep comparison\n\t});\n\n\n\tt.deepEqual(currentVersionInfo, oExpectedVersionInfo, \"Correct content\");\n};\n\ntest.serial(\"versionInfoGenerator empty libraryInfos parameter\", async (t) => {\n\tconst versionInfos = await versionInfoGenerator({options: {\n\t\trootProjectName: \"myname\", rootProjectVersion: \"1.33.7\", libraryInfos: []}});\n\n\tconst resource = versionInfos[0];\n\tconst result = await resource.getString();\n\n\tconst oExpected = {\n\t\t\"name\": \"myname\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"scmRevision\": \"\",\n\t\t\"libraries\": []\n\t};\n\tassertVersionInfoContent(t, oExpected, result);\n});\n\n\ntest.serial(\"versionInfoGenerator simple library infos\", async (t) => {\n\tconst options = {\n\t\trootProjectName: \"myname\", rootProjectVersion: \"1.33.7\", libraryInfos: [\n\t\t\t{name: \"my.lib\", version: \"1.2.3\"}\n\t\t]};\n\tconst versionInfos = await versionInfoGenerator({options});\n\n\tconst resource = versionInfos[0];\n\tconst result = await resource.getString();\n\n\tconst oExpected = {\n\t\t\"name\": \"myname\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"scmRevision\": \"\",\n\t\t\"libraries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"my.lib\",\n\t\t\t\t\"version\": \"1.2.3\",\n\t\t\t\t\"scmRevision\": \"\"\n\t\t\t}\n\t\t]\n\t};\n\tassertVersionInfoContent(t, oExpected, result);\n\tt.is(t.context.verboseLogStub.callCount, 1);\n\tt.is(t.context.verboseLogStub.getCall(0).args[0],\n\t\t\"Cannot add meta information for library 'my.lib'. The manifest.json file cannot be found\");\n});\n\ntest.serial(\"versionInfoGenerator manifest without libs\", async (t) => {\n\tconst libAManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/lib/a/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"lib.a\",\n\t\t\t\t\t\"embeds\": []\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst libA = {name: \"lib.a\", version: \"1.2.3\", libraryManifest: libAManifest};\n\n\tconst options = {\n\t\trootProjectName: \"myname\", rootProjectVersion: \"1.33.7\", libraryInfos: [\n\t\t\tlibA\n\t\t]};\n\tconst versionInfos = await versionInfoGenerator({options});\n\n\tconst resource = versionInfos[0];\n\tconst result = await resource.getString();\n\n\tconst oExpected = {\n\t\t\"name\": \"myname\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"scmRevision\": \"\",\n\t\t\"libraries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"lib.a\",\n\t\t\t\t\"version\": \"1.2.3\",\n\t\t\t\t\"scmRevision\": \"\"\n\t\t\t}\n\t\t]\n\t};\n\tassertVersionInfoContent(t, oExpected, result);\n\tt.is(t.context.infoLogStub.callCount, 0);\n\tt.is(t.context.warnLogStub.callCount, 0);\n});\n\ntest.serial(\"versionInfoGenerator library infos with dependencies\", async (t) => {\n\tconst libAManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/lib/a/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"lib.a\",\n\t\t\t\t\t\"embeds\": []\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\t\"my.dep\": {\n\t\t\t\t\t\t\t\t\"minVersion\": \"1.84.0\",\n\t\t\t\t\t\t\t\t\"lazy\": false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst libA = {name: \"lib.a\", version: \"1.2.3\", libraryManifest: libAManifest};\n\tconst myDepManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/my/dep/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"my.dep\",\n\t\t\t\t\t\"embeds\": []\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\t\t\"libs\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst myDep = {name: \"my.dep\", version: \"1.2.3\", libraryManifest: myDepManifest};\n\tconst options = {\n\t\trootProjectName: \"myname\", rootProjectVersion: \"1.33.7\", libraryInfos: [\n\t\t\tlibA, myDep\n\t\t]};\n\tconst versionInfos = await versionInfoGenerator({options});\n\n\tconst resource = versionInfos[0];\n\tconst result = await resource.getString();\n\n\tconst oExpected = {\n\t\t\"name\": \"myname\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"scmRevision\": \"\",\n\t\t\"libraries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"lib.a\",\n\t\t\t\t\"version\": \"1.2.3\",\n\t\t\t\t\"scmRevision\": \"\",\n\t\t\t\t\"manifestHints\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\t\"my.dep\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"my.dep\",\n\t\t\t\t\"version\": \"1.2.3\",\n\t\t\t\t\"scmRevision\": \"\"\n\t\t\t}\n\t\t]\n\t};\n\tassertVersionInfoContent(t, oExpected, result);\n\tt.is(t.context.infoLogStub.callCount, 0);\n\tt.is(t.context.warnLogStub.callCount, 0);\n});\n\ntest.serial(\"versionInfoGenerator library infos with embeds\", async (t) => {\n\tconst libAManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/lib/a/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"lib.a\",\n\t\t\t\t\t\"embeds\": [\"sub\"]\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\t\t\"libs\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst subManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/lib/a/sub/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"lib.a.sub\",\n\t\t\t\t\t\"embeds\": []\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\t\t\"libs\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst libA = {name: \"lib.a\", version: \"1.2.3\", libraryManifest: libAManifest, embeddedManifests: [subManifest]};\n\n\tconst options = {\n\t\trootProjectName: \"myname\", rootProjectVersion: \"1.33.7\", libraryInfos: [\n\t\t\tlibA\n\t\t]};\n\tconst versionInfos = await versionInfoGenerator({options});\n\n\tconst resource = versionInfos[0];\n\tconst result = await resource.getString();\n\n\tconst oExpected = {\n\t\t\"name\": \"myname\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"scmRevision\": \"\",\n\t\t\"libraries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"lib.a\",\n\t\t\t\t\"version\": \"1.2.3\",\n\t\t\t\t\"scmRevision\": \"\"\n\t\t\t}\n\t\t],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub\": {\n\t\t\t\t\"hasOwnPreload\": true,\n\t\t\t\t\"library\": \"lib.a\"\n\t\t\t}\n\t\t}\n\t};\n\tassertVersionInfoContent(t, oExpected, result);\n\tt.is(t.context.infoLogStub.callCount, 0);\n\tt.is(t.context.warnLogStub.callCount, 0);\n});\n\ntest.serial(\"versionInfoGenerator library infos with no embeds\", async (t) => {\n\tconst libAManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/lib/a/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"lib.a\"\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\t\"my.dep\": {\n\t\t\t\t\t\t\t\t\"minVersion\": \"1.84.0\",\n\t\t\t\t\t\t\t\t\"lazy\": false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst libA = {name: \"lib.a\", version: \"1.2.3\", libraryManifest: libAManifest};\n\tconst myDepManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/my/dep/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"my.dep\"\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\t\t\"libs\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst myDep = {name: \"my.dep\", version: \"1.2.3\", libraryManifest: myDepManifest};\n\tconst options = {\n\t\trootProjectName: \"myname\", rootProjectVersion: \"1.33.7\", libraryInfos: [\n\t\t\tlibA, myDep\n\t\t]};\n\tconst versionInfos = await versionInfoGenerator({options});\n\n\tconst resource = versionInfos[0];\n\tconst result = await resource.getString();\n\n\tconst oExpected = {\n\t\t\"name\": \"myname\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"scmRevision\": \"\",\n\t\t\"libraries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"lib.a\",\n\t\t\t\t\"version\": \"1.2.3\",\n\t\t\t\t\"scmRevision\": \"\",\n\t\t\t\t\"manifestHints\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\t\"my.dep\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"my.dep\",\n\t\t\t\t\"version\": \"1.2.3\",\n\t\t\t\t\"scmRevision\": \"\"\n\t\t\t}\n\t\t]\n\t};\n\tassertVersionInfoContent(t, oExpected, result);\n\tt.is(t.context.infoLogStub.callCount, 0);\n\tt.is(t.context.warnLogStub.callCount, 0);\n});\n\ntest.serial(\"versionInfoGenerator library infos with embeds and embeddedBy (hasOwnPreload)\", async (t) => {\n\tconst libAManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/lib/a/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"lib.a\",\n\t\t\t\t\t\"embeds\": [\"sub\"]\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\t\t\"libs\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst subManifest = {\n\t\tgetPath: () => {\n\t\t\treturn \"/resources/lib/a/sub/manifest.json\";\n\t\t},\n\t\tgetString: async () => {\n\t\t\treturn JSON.stringify({\n\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\"id\": \"lib.a.sub\",\n\t\t\t\t\t\"embeds\": [],\n\t\t\t\t\t\"embeddedBy\": \"../\"\n\t\t\t\t},\n\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\t\t\"libs\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst libA = {name: \"lib.a\", version: \"1.2.3\", libraryManifest: libAManifest, embeddedManifests: [subManifest]};\n\n\tconst options = {\n\t\trootProjectName: \"myname\", rootProjectVersion: \"1.33.7\", libraryInfos: [\n\t\t\tlibA\n\t\t]};\n\tconst versionInfos = await versionInfoGenerator({options});\n\n\tconst resource = versionInfos[0];\n\tconst result = await resource.getString();\n\n\tconst oExpected = {\n\t\t\"name\": \"myname\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"scmRevision\": \"\",\n\t\t\"libraries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"lib.a\",\n\t\t\t\t\"version\": \"1.2.3\",\n\t\t\t\t\"scmRevision\": \"\"\n\t\t\t}\n\t\t],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub\": {\n\t\t\t\t\"library\": \"lib.a\"\n\t\t\t}\n\t\t}\n\t};\n\tassertVersionInfoContent(t, oExpected, result);\n\tt.is(t.context.infoLogStub.callCount, 0);\n\tt.is(t.context.warnLogStub.callCount, 0);\n});\n",
    "test/lib/tasks/TaskUtil.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst TaskUtil = require(\"../../../lib/tasks/TaskUtil\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\ntest(\"Instantiation\", async (t) => {\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\", \"some other tag\", \"Thursday\"]\n\t\t}\n\t});\n\n\tt.deepEqual(taskUtil.STANDARD_TAGS, [\"some tag\", \"some other tag\", \"Thursday\"], \"Correct standard tags exposed\");\n});\n\ntest(\"setTag\", async (t) => {\n\tconst setTagStub = sinon.stub();\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"],\n\t\t\tgetResourceTagCollection: () => {\n\t\t\t\treturn {\n\t\t\t\t\tsetTag: setTagStub\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\ttaskUtil.setTag(\"my resource\", \"my tag\", \"my value\");\n\n\tt.is(setTagStub.callCount, 1, \"ResourceTagCollection#setTag got called once\");\n\tt.deepEqual(setTagStub.getCall(0).args[0], \"my resource\", \"Correct resource parameter supplied\");\n\tt.deepEqual(setTagStub.getCall(0).args[1], \"my tag\", \"Correct tag parameter supplied\");\n\tt.deepEqual(setTagStub.getCall(0).args[2], \"my value\", \"Correct value parameter supplied\");\n});\n\ntest(\"getTag\", async (t) => {\n\tconst getTagStub = sinon.stub().returns(42);\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"],\n\t\t\tgetResourceTagCollection: () => {\n\t\t\t\treturn {\n\t\t\t\t\tgetTag: getTagStub\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\tconst res = taskUtil.getTag(\"my resource\", \"my tag\", \"my value\");\n\n\tt.is(getTagStub.callCount, 1, \"ResourceTagCollection#getTag got called once\");\n\tt.deepEqual(getTagStub.getCall(0).args[0], \"my resource\", \"Correct resource parameter supplied\");\n\tt.deepEqual(getTagStub.getCall(0).args[1], \"my tag\", \"Correct tag parameter supplied\");\n\tt.is(res, 42, \"Correct result\");\n});\n\ntest(\"clearTag\", async (t) => {\n\tconst clearTagStub = sinon.stub();\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"],\n\t\t\tgetResourceTagCollection: () => {\n\t\t\t\treturn {\n\t\t\t\t\tclearTag: clearTagStub\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\ttaskUtil.clearTag(\"my resource\", \"my tag\", \"my value\");\n\n\tt.is(clearTagStub.callCount, 1, \"ResourceTagCollection#clearTag got called once\");\n\tt.deepEqual(clearTagStub.getCall(0).args[0], \"my resource\", \"Correct resource parameter supplied\");\n\tt.deepEqual(clearTagStub.getCall(0).args[1], \"my tag\", \"Correct tag parameter supplied\");\n});\n\ntest(\"isRootProject\", async (t) => {\n\tconst isRootProjectStub = sinon.stub().returns(true);\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"],\n\t\t\tisRootProject: isRootProjectStub\n\t\t}\n\t});\n\n\tconst res = taskUtil.isRootProject();\n\n\tt.is(isRootProjectStub.callCount, 1, \"ProjectBuildContext#isRootProject got called once\");\n\tt.is(res, true, \"Correct result\");\n});\n\ntest(\"registerCleanupTask\", async (t) => {\n\tconst registerCleanupTaskStub = sinon.stub();\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"],\n\t\t\tregisterCleanupTask: registerCleanupTaskStub\n\t\t}\n\t});\n\n\ttaskUtil.registerCleanupTask(\"my callback\");\n\n\tt.is(registerCleanupTaskStub.callCount, 1, \"ProjectBuildContext#registerCleanupTask got called once\");\n\tt.deepEqual(registerCleanupTaskStub.getCall(0).args[0], \"my callback\", \"Correct callback parameter supplied\");\n});\n\ntest(\"getInterface: specVersion 1.0\", async (t) => {\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"]\n\t\t}\n\t});\n\n\tconst interfacedTaskUtil = taskUtil.getInterface(\"1.0\");\n\n\tt.is(interfacedTaskUtil, undefined, \"no interface provided\");\n});\n\ntest(\"getInterface: specVersion 2.2\", async (t) => {\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"]\n\t\t}\n\t});\n\n\tconst interfacedTaskUtil = taskUtil.getInterface(\"2.2\");\n\n\tt.deepEqual(Object.keys(interfacedTaskUtil), [\n\t\t\"STANDARD_TAGS\",\n\t\t\"setTag\",\n\t\t\"clearTag\",\n\t\t\"getTag\",\n\t\t\"isRootProject\",\n\t\t\"registerCleanupTask\"\n\t], \"Correct methods are provided\");\n\n\tt.deepEqual(interfacedTaskUtil.STANDARD_TAGS, [\"some tag\"], \"attribute STANDARD_TAGS is provided\");\n\tt.is(typeof interfacedTaskUtil.setTag, \"function\", \"function setTag is provided\");\n\tt.is(typeof interfacedTaskUtil.clearTag, \"function\", \"function clearTag is provided\");\n\tt.is(typeof interfacedTaskUtil.getTag, \"function\", \"function getTag is provided\");\n\tt.is(typeof interfacedTaskUtil.isRootProject, \"function\", \"function isRootProject is provided\");\n\tt.is(typeof interfacedTaskUtil.registerCleanupTask, \"function\", \"function registerCleanupTask is provided\");\n});\n\ntest(\"getInterface: specVersion 2.3\", async (t) => {\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"]\n\t\t}\n\t});\n\n\tconst interfacedTaskUtil = taskUtil.getInterface(\"2.3\");\n\n\tt.deepEqual(Object.keys(interfacedTaskUtil), [\n\t\t\"STANDARD_TAGS\",\n\t\t\"setTag\",\n\t\t\"clearTag\",\n\t\t\"getTag\",\n\t\t\"isRootProject\",\n\t\t\"registerCleanupTask\"\n\t], \"Correct methods are provided\");\n\n\tt.deepEqual(interfacedTaskUtil.STANDARD_TAGS, [\"some tag\"], \"attribute STANDARD_TAGS is provided\");\n\tt.is(typeof interfacedTaskUtil.setTag, \"function\", \"function setTag is provided\");\n\tt.is(typeof interfacedTaskUtil.clearTag, \"function\", \"function clearTag is provided\");\n\tt.is(typeof interfacedTaskUtil.getTag, \"function\", \"function getTag is provided\");\n\tt.is(typeof interfacedTaskUtil.isRootProject, \"function\", \"function isRootProject is provided\");\n\tt.is(typeof interfacedTaskUtil.registerCleanupTask, \"function\", \"function registerCleanupTask is provided\");\n});\n\ntest(\"getInterface: specVersion 2.4\", async (t) => {\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"]\n\t\t}\n\t});\n\n\tconst interfacedTaskUtil = taskUtil.getInterface(\"2.4\");\n\n\tt.deepEqual(Object.keys(interfacedTaskUtil), [\n\t\t\"STANDARD_TAGS\",\n\t\t\"setTag\",\n\t\t\"clearTag\",\n\t\t\"getTag\",\n\t\t\"isRootProject\",\n\t\t\"registerCleanupTask\"\n\t], \"Correct methods are provided\");\n\n\tt.deepEqual(interfacedTaskUtil.STANDARD_TAGS, [\"some tag\"], \"attribute STANDARD_TAGS is provided\");\n\tt.is(typeof interfacedTaskUtil.setTag, \"function\", \"function setTag is provided\");\n\tt.is(typeof interfacedTaskUtil.clearTag, \"function\", \"function clearTag is provided\");\n\tt.is(typeof interfacedTaskUtil.getTag, \"function\", \"function getTag is provided\");\n\tt.is(typeof interfacedTaskUtil.isRootProject, \"function\", \"function isRootProject is provided\");\n\tt.is(typeof interfacedTaskUtil.registerCleanupTask, \"function\", \"function registerCleanupTask is provided\");\n});\n\ntest(\"getInterface: specVersion undefined\", async (t) => {\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"]\n\t\t}\n\t});\n\n\tconst err = t.throws(() => {\n\t\ttaskUtil.getInterface();\n\t});\n\n\tt.is(err.message, \"TaskUtil: Unknown or unsupported Specification Version undefined\",\n\t\t\"Throw with correct error message\");\n});\n\ntest(\"getInterface: specVersion unknown\", async (t) => {\n\tconst taskUtil = new TaskUtil({\n\t\tprojectBuildContext: {\n\t\t\tSTANDARD_TAGS: [\"some tag\"]\n\t\t}\n\t});\n\tconst err = t.throws(() => {\n\t\ttaskUtil.getInterface(\"1.5\");\n\t});\n\n\tt.is(err.message, \"TaskUtil: Unknown or unsupported Specification Version 1.5\",\n\t\t\"Throw with correct error message\");\n});\n",
    "test/lib/tasks/buildThemes.js": "const test = require(\"ava\");\n\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nlet buildThemes = require(\"../../../lib/tasks/buildThemes\");\n\ntest.before(() => {\n\t// Enable verbose logging to also cover verbose logging code\n\trequire(\"@ui5/logger\").setLevel(\"verbose\");\n});\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.beforeEach((t) => {\n\t// Stubbing processors/themeBuilder\n\tt.context.themeBuilderStub = sinon.stub();\n\tt.context.fsInterfaceStub = sinon.stub(require(\"@ui5/fs\"), \"fsInterface\");\n\tt.context.fsInterfaceStub.returns({});\n\n\tt.context.ReaderCollectionPrioritizedStub = sinon.stub(require(\"@ui5/fs\"), \"ReaderCollectionPrioritized\");\n\tt.context.comboByGlob = sinon.stub();\n\tt.context.ReaderCollectionPrioritizedStub.returns({byGlob: t.context.comboByGlob});\n\n\tmock(\"@ui5/fs\", {\n\t\tReaderCollectionPrioritized: t.context.ReaderCollectionPrioritizedStub,\n\t\tfsInterface: t.context.fsInterfaceStub\n\t});\n\tmock(\"../../../lib/processors/themeBuilder\", t.context.themeBuilderStub);\n\n\t// Re-require tested module\n\tbuildThemes = mock.reRequire(\"../../../lib/tasks/buildThemes\");\n});\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"buildThemes\", async (t) => {\n\tt.plan(6);\n\n\tconst lessResource = {};\n\n\tconst workspace = {\n\t\tbyGlob: async (globPattern) => {\n\t\t\tif (globPattern === \"/resources/test/library.source.less\") {\n\t\t\t\treturn [lessResource];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\t\twrite: sinon.stub()\n\t};\n\n\tconst cssResource = {};\n\tconst cssRtlResource = {};\n\tconst jsonParametersResource = {};\n\n\tt.context.themeBuilderStub.returns([\n\t\tcssResource,\n\t\tcssRtlResource,\n\t\tjsonParametersResource\n\t]);\n\n\tawait buildThemes({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.demo.app\",\n\t\t\tinputPattern: \"/resources/test/library.source.less\"\n\t\t}\n\t});\n\n\tt.deepEqual(t.context.themeBuilderStub.callCount, 1,\n\t\t\"Processor should be called once\");\n\n\tt.deepEqual(t.context.themeBuilderStub.getCall(0).args[0], {\n\t\tresources: [lessResource],\n\t\tfs: {},\n\t\toptions: {\n\t\t\tcompress: true, // default\n\t\t\tcssVariables: false // default\n\t\t}\n\t}, \"Processor should be called with expected arguments\");\n\n\tt.deepEqual(workspace.write.callCount, 3,\n\t\t\"workspace.write should be called 3 times\");\n\tt.true(workspace.write.calledWithExactly(cssResource));\n\tt.true(workspace.write.calledWithExactly(cssRtlResource));\n\tt.true(workspace.write.calledWithExactly(jsonParametersResource));\n});\n\n\ntest.serial(\"buildThemes (compress = false)\", async (t) => {\n\tt.plan(6);\n\n\tconst lessResource = {};\n\n\tconst workspace = {\n\t\tbyGlob: async (globPattern) => {\n\t\t\tif (globPattern === \"/resources/test/library.source.less\") {\n\t\t\t\treturn [lessResource];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\t\twrite: sinon.stub()\n\t};\n\n\tconst cssResource = {};\n\tconst cssRtlResource = {};\n\tconst jsonParametersResource = {};\n\n\tt.context.themeBuilderStub.returns([\n\t\tcssResource,\n\t\tcssRtlResource,\n\t\tjsonParametersResource\n\t]);\n\n\tawait buildThemes({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.demo.app\",\n\t\t\tinputPattern: \"/resources/test/library.source.less\",\n\t\t\tcompress: false\n\t\t}\n\t});\n\n\tt.deepEqual(t.context.themeBuilderStub.callCount, 1,\n\t\t\"Processor should be called once\");\n\n\tt.deepEqual(t.context.themeBuilderStub.getCall(0).args[0], {\n\t\tresources: [lessResource],\n\t\tfs: {},\n\t\toptions: {\n\t\t\tcompress: false,\n\t\t\tcssVariables: false\n\t\t}\n\t}, \"Processor should be called with expected arguments\");\n\n\tt.deepEqual(workspace.write.callCount, 3,\n\t\t\"workspace.write should be called 3 times\");\n\tt.true(workspace.write.calledWithExactly(cssResource));\n\tt.true(workspace.write.calledWithExactly(cssRtlResource));\n\tt.true(workspace.write.calledWithExactly(jsonParametersResource));\n});\n\ntest.serial(\"buildThemes (cssVariables = true)\", async (t) => {\n\tt.plan(10);\n\n\tconst lessResource = {};\n\n\tconst workspace = {\n\t\tbyGlob: async (globPattern) => {\n\t\t\tif (globPattern === \"/resources/test/library.source.less\") {\n\t\t\t\treturn [lessResource];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\t\twrite: sinon.stub()\n\t};\n\n\tconst cssResource = {};\n\tconst cssRtlResource = {};\n\tconst jsonParametersResource = {};\n\tconst cssVariablesSourceResource = {};\n\tconst cssVariablesResource = {};\n\tconst cssSkeletonResource = {};\n\tconst cssSkeletonRtlResource = {};\n\n\tt.context.themeBuilderStub.returns([\n\t\tcssResource,\n\t\tcssRtlResource,\n\t\tjsonParametersResource,\n\t\tcssVariablesSourceResource,\n\t\tcssVariablesResource,\n\t\tcssSkeletonResource,\n\t\tcssSkeletonRtlResource\n\t]);\n\n\tawait buildThemes({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.demo.app\",\n\t\t\tinputPattern: \"/resources/test/library.source.less\",\n\t\t\tcssVariables: true\n\t\t}\n\t});\n\n\tt.deepEqual(t.context.themeBuilderStub.callCount, 1,\n\t\t\"Processor should be called once\");\n\n\tt.deepEqual(t.context.themeBuilderStub.getCall(0).args[0], {\n\t\tresources: [lessResource],\n\t\tfs: {},\n\t\toptions: {\n\t\t\tcompress: true,\n\t\t\tcssVariables: true\n\t\t}\n\t}, \"Processor should be called with expected arguments\");\n\n\tt.deepEqual(workspace.write.callCount, 7,\n\t\t\"workspace.write should be called 7 times\");\n\tt.true(workspace.write.calledWithExactly(cssResource));\n\tt.true(workspace.write.calledWithExactly(cssRtlResource));\n\tt.true(workspace.write.calledWithExactly(jsonParametersResource));\n\tt.true(workspace.write.calledWithExactly(cssVariablesSourceResource));\n\tt.true(workspace.write.calledWithExactly(cssVariablesResource));\n\tt.true(workspace.write.calledWithExactly(cssSkeletonResource));\n\tt.true(workspace.write.calledWithExactly(cssSkeletonRtlResource));\n});\n\ntest.serial(\"buildThemes (filtering libraries)\", async (t) => {\n\tt.plan(3);\n\n\tconst lessResources = {\n\t\t\"sap/ui/lib1/themes/theme1/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/themes/theme1/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib2/themes/theme1/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib2/themes/theme1/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib3/themes/theme1/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib3/themes/theme1/library.source.less\")\n\t\t}\n\t};\n\n\tconst dotLibraryResources = {\n\t\t\"sap/ui/lib1/.library\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/.library\")\n\t\t},\n\t\t\"sap/ui/lib3/.library\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib3/.library\")\n\t\t}\n\t};\n\n\tconst workspaceByGlob = sinon.stub();\n\tconst workspace = {\n\t\tbyGlob: workspaceByGlob,\n\t\twrite: sinon.stub()\n\t};\n\n\tworkspaceByGlob\n\t\t.withArgs(\"/resources/**/themes/*/library.source.less\").resolves([\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib2/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib3/themes/theme1/library.source.less\"]\n\t\t]);\n\n\tt.context.comboByGlob\n\t\t.withArgs(\"/resources/**/*.library\").resolves([\n\t\t\tdotLibraryResources[\"sap/ui/lib1/.library\"],\n\t\t\tdotLibraryResources[\"sap/ui/lib3/.library\"]\n\t\t]);\n\n\tt.context.themeBuilderStub.returns([{}]);\n\n\tawait buildThemes({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.test.lib1\",\n\t\t\tinputPattern: \"/resources/**/themes/*/library.source.less\",\n\t\t\tlibrariesPattern: \"/resources/**/*.library\"\n\t\t}\n\t});\n\n\tt.deepEqual(t.context.themeBuilderStub.callCount, 1,\n\t\t\"Processor should be called once\");\n\n\tt.deepEqual(t.context.themeBuilderStub.getCall(0).args[0], {\n\t\tresources: [\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib3/themes/theme1/library.source.less\"]\n\t\t],\n\t\tfs: {},\n\t\toptions: {\n\t\t\tcompress: true,\n\t\t\tcssVariables: false\n\t\t}\n\t}, \"Processor should be called with expected arguments\");\n\n\tt.deepEqual(workspace.write.callCount, 1,\n\t\t\"workspace.write should be called once\");\n});\n\ntest.serial(\"buildThemes (filtering themes)\", async (t) => {\n\tt.plan(3);\n\n\tconst lessResources = {\n\t\t\"sap/ui/lib1/themes/theme1/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/themes/theme1/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib1/themes/theme2/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/themes/theme2/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib1/themes/theme3/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/themes/theme3/library.source.less\")\n\t\t}\n\t};\n\n\tconst baseThemes = {\n\t\t\"sap/ui/core/themes/theme1/\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/core/themes/theme1/\"),\n\t\t\tgetStatInfo: () => {\n\t\t\t\treturn {isDirectory: () => true};\n\t\t\t}\n\t\t},\n\t\t\"sap/ui/core/themes/theme3/\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/core/themes/theme3/\"),\n\t\t\tgetStatInfo: () => {\n\t\t\t\treturn {isDirectory: () => true};\n\t\t\t}\n\t\t}\n\t};\n\n\tconst workspaceByGlob = sinon.stub();\n\tconst workspace = {\n\t\tbyGlob: workspaceByGlob,\n\t\twrite: sinon.stub()\n\t};\n\n\tworkspaceByGlob\n\t\t.withArgs(\"/resources/**/themes/*/library.source.less\").resolves([\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme2/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme3/library.source.less\"]\n\t\t]);\n\n\tt.context.comboByGlob\n\t\t.withArgs(\"/resources/sap/ui/core/themes/*\", {nodir: false}).resolves([\n\t\t\tbaseThemes[\"sap/ui/core/themes/theme1/\"],\n\t\t\tbaseThemes[\"sap/ui/core/themes/theme3/\"]\n\t\t]);\n\n\tt.context.themeBuilderStub.returns([{}]);\n\n\tawait buildThemes({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.test.lib1\",\n\t\t\tinputPattern: \"/resources/**/themes/*/library.source.less\",\n\t\t\tthemesPattern: \"/resources/sap/ui/core/themes/*\"\n\t\t}\n\t});\n\n\tt.deepEqual(t.context.themeBuilderStub.callCount, 1,\n\t\t\"Processor should be called once\");\n\n\tt.deepEqual(t.context.themeBuilderStub.getCall(0).args[0], {\n\t\tresources: [\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme3/library.source.less\"]\n\t\t],\n\t\tfs: {},\n\t\toptions: {\n\t\t\tcompress: true,\n\t\t\tcssVariables: false\n\t\t}\n\t}, \"Processor should be called with expected arguments\");\n\n\tt.deepEqual(workspace.write.callCount, 1,\n\t\t\"workspace.write should be called once\");\n});\n\ntest.serial(\"buildThemes (filtering libraries + themes)\", async (t) => {\n\tt.plan(3);\n\n\tconst lessResources = {\n\t\t\"sap/ui/lib1/themes/theme1/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/themes/theme1/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib1/themes/theme2/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/themes/theme2/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib1/themes/theme3/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/themes/theme3/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib2/themes/theme1/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib2/themes/theme1/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib2/themes/theme2/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib2/themes/theme2/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib2/themes/theme3/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib2/themes/theme3/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib3/themes/theme1/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib3/themes/theme1/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib3/themes/theme2/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib3/themes/theme2/library.source.less\")\n\t\t},\n\t\t\"sap/ui/lib3/themes/theme3/library.source.less\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib3/themes/theme3/library.source.less\")\n\t\t}\n\t};\n\n\tconst dotLibraryResources = {\n\t\t\"sap/ui/lib1/.library\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib1/.library\")\n\t\t},\n\t\t\"sap/ui/lib3/.library\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/lib3/.library\")\n\t\t}\n\t};\n\n\tconst baseThemes = {\n\t\t\"sap/ui/core/themes/theme1/\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/core/themes/theme1/\"),\n\t\t\tgetStatInfo: () => {\n\t\t\t\treturn {isDirectory: () => true};\n\t\t\t}\n\t\t},\n\t\t\"sap/ui/core/themes/theme3/\": {\n\t\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/core/themes/theme3/\"),\n\t\t\tgetStatInfo: () => {\n\t\t\t\treturn {isDirectory: () => true};\n\t\t\t}\n\t\t}\n\t};\n\n\tconst workspaceByGlob = sinon.stub();\n\tconst workspace = {\n\t\tbyGlob: workspaceByGlob,\n\t\twrite: sinon.stub()\n\t};\n\n\tworkspaceByGlob\n\t\t.withArgs(\"/resources/**/themes/*/library.source.less\").resolves([\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme2/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme3/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib2/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib2/themes/theme2/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib2/themes/theme3/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib3/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib3/themes/theme2/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib3/themes/theme3/library.source.less\"]\n\t\t]);\n\n\tt.context.comboByGlob\n\t\t.withArgs(\"/resources/**/*.library\").resolves([\n\t\t\tdotLibraryResources[\"sap/ui/lib1/.library\"],\n\t\t\tdotLibraryResources[\"sap/ui/lib3/.library\"]\n\t\t])\n\t\t.withArgs(\"/resources/sap/ui/core/themes/*\", {nodir: false}).resolves([\n\t\t\tbaseThemes[\"sap/ui/core/themes/theme1/\"],\n\t\t\tbaseThemes[\"sap/ui/core/themes/theme3/\"]\n\t\t]);\n\n\tt.context.themeBuilderStub.returns([{}]);\n\n\tawait buildThemes({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.test.lib1\",\n\t\t\tinputPattern: \"/resources/**/themes/*/library.source.less\",\n\t\t\tlibrariesPattern: \"/resources/**/*.library\",\n\t\t\tthemesPattern: \"/resources/sap/ui/core/themes/*\"\n\t\t}\n\t});\n\n\tt.deepEqual(t.context.themeBuilderStub.callCount, 1,\n\t\t\"Processor should be called once\");\n\n\tt.deepEqual(t.context.themeBuilderStub.getCall(0).args[0], {\n\t\tresources: [\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib1/themes/theme3/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib3/themes/theme1/library.source.less\"],\n\t\t\tlessResources[\"sap/ui/lib3/themes/theme3/library.source.less\"]\n\t\t],\n\t\tfs: {},\n\t\toptions: {\n\t\t\tcompress: true,\n\t\t\tcssVariables: false\n\t\t}\n\t}, \"Processor should be called with expected arguments\");\n\n\tt.deepEqual(workspace.write.callCount, 1,\n\t\t\"workspace.write should be called once\");\n});\n",
    "test/lib/tasks/bundlers/generateLibraryPreload.integration.js": "const test = require(\"ava\");\nconst path = require(\"path\");\nconst chai = require(\"chai\");\nchai.use(require(\"chai-fs\"));\nconst assert = chai.assert;\n\nconst ui5Fs = require(\"@ui5/fs\");\nconst resourceFactory = ui5Fs.resourceFactory;\nconst DuplexCollection = ui5Fs.DuplexCollection;\n\nconst ui5Builder = require(\"../../../../\");\nconst builder = ui5Builder.builder;\nconst {generateLibraryPreload} = ui5Builder.tasks;\nconst libraryDPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"library.d\");\nconst sapUiCorePath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"sap.ui.core\");\n\nconst recursive = require(\"recursive-readdir\");\n\nconst findFiles = (folder) => {\n\treturn new Promise((resolve, reject) => {\n\t\trecursive(folder, (err, files) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(files);\n\t\t\t}\n\t\t});\n\t});\n};\n\ntest(\"integration: build library.d with library preload\", async (t) => {\n\tconst destPath = \"./test/tmp/build/library.d/preload\";\n\tconst expectedPath = \"./test/expected/build/library.d/preload\";\n\tconst excludedTasks = [\"*\"];\n\tconst includedTasks = [\"generateLibraryPreload\"];\n\n\treturn t.notThrowsAsync(builder.build({\n\t\ttree: libraryDTree,\n\t\tdestPath,\n\t\texcludedTasks,\n\t\tincludedTasks\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\tt.deepEqual(expectedFiles.length, 4, \"4 files are expected\");\n\t\texpectedFiles.forEach((expectedFile) => {\n\t\t\tconst relativeFile = path.relative(expectedPath, expectedFile);\n\t\t\tconst destFile = path.join(destPath, relativeFile);\n\t\t\tassert.fileEqual(destFile, expectedFile);\n\t\t});\n\t}));\n});\n\nconst libraryDTree = {\n\t\"id\": \"library.d\",\n\t\"version\": \"1.0.0\",\n\t\"path\": libraryDPath,\n\t\"dependencies\": [],\n\t\"_level\": 1,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"library.d\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"main/src\",\n\t\t\t\t\"test\": \"main/test\"\n\t\t\t}\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"main/src\",\n\t\t\t\"/test-resources/\": \"main/test\"\n\t\t}\n\t}\n};\n\ntest(\"integration: build sap.ui.core with library preload\", async (t) => {\n\tconst destPath = \"./test/tmp/build/sap.ui.core/preload\";\n\tconst expectedPath = \"./test/expected/build/sap.ui.core/preload\";\n\tconst excludedTasks = [\"*\"];\n\tconst includedTasks = [\"generateLibraryPreload\"];\n\n\treturn t.notThrowsAsync(builder.build({\n\t\ttree: sapUiCoreTree,\n\t\tdestPath,\n\t\texcludedTasks,\n\t\tincludedTasks\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\tt.deepEqual(expectedFiles.length, 10, \"10 files are expected\");\n\t\texpectedFiles.forEach((expectedFile) => {\n\t\t\tconst relativeFile = path.relative(expectedPath, expectedFile);\n\t\t\tconst destFile = path.join(destPath, relativeFile);\n\t\t\tassert.fileEqual(destFile, expectedFile);\n\t\t});\n\t}));\n});\n\nconst sapUiCoreTree = {\n\t\"id\": \"sap.ui.core\",\n\t\"version\": \"1.0.0\",\n\t\"path\": sapUiCorePath,\n\t\"dependencies\": [],\n\t\"_level\": 1,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"sap.ui.core\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"main/src\",\n\t\t\t\t\"test\": \"main/test\"\n\t\t\t}\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"main/src\",\n\t\t\t\"/test-resources/\": \"main/test\"\n\t\t}\n\t}\n};\n\n\ntest(\"integration: generateLibraryPreload\", async (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tawait reader.write(resourceFactory.createResource({\n\t\tpath: \"/resources/my/test/lib/library.js\",\n\t\tstring: \"\"\n\t}));\n\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst duplexCollection = new DuplexCollection({reader, writer});\n\tconst dependencies = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\n\tawait generateLibraryPreload({\n\t\tworkspace: duplexCollection,\n\t\tdependencies: dependencies,\n\t\toptions: {\n\t\t\tprojectName: \"my.test.lib\"\n\t\t}\n\t});\n\n\tconst writtenResources = await writer.byGlob([\"**/**\"]);\n\tt.deepEqual(writtenResources.map((r) => r.getPath()).sort(), [\n\t\t\"/resources/my/test/lib/library-preload.js\"\n\t], \"Expected preload files should be created\");\n\n\tconst libraryPreload = await writer.byPath(\"/resources/my/test/lib/library-preload.js\");\n\tt.truthy(libraryPreload, \"library-preload.js should have been created\");\n\tconst libraryPreloadContent = await libraryPreload.getString();\n\tt.true(libraryPreloadContent.includes(\"//@ui5-bundle my/test/lib/library-preload.js\"),\n\t\t\"library-preload should be a bundle\");\n\tt.regex(libraryPreloadContent, new RegExp(\"my/test/lib/library\"),\n\t\t\"library-preload should include library.js module\");\n});\n\ntest(\"integration: generateLibraryPreload with designtime and support files\", async (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tawait reader.write(resourceFactory.createResource({\n\t\tpath: \"/resources/my/test/lib/library.js\",\n\t\tstring: \"\"\n\t}));\n\n\t// designtime\n\tawait reader.write(resourceFactory.createResource({\n\t\tpath: \"/resources/my/test/lib/designtime/foo.js\",\n\t\tstring: \"\"\n\t}));\n\tawait reader.write(resourceFactory.createResource({\n\t\tpath: \"/resources/my/test/lib/some.designtime.js\",\n\t\tstring: \"\"\n\t}));\n\n\t// support\n\tawait reader.write(resourceFactory.createResource({\n\t\tpath: \"/resources/my/test/lib/some.support.js\",\n\t\tstring: \"\"\n\t}));\n\tawait reader.write(resourceFactory.createResource({\n\t\tpath: \"/resources/my/test/lib/support/foo.support.js\",\n\t\tstring: \"\"\n\t}));\n\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst duplexCollection = new DuplexCollection({reader, writer});\n\tconst dependencies = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\n\tawait generateLibraryPreload({\n\t\tworkspace: duplexCollection,\n\t\tdependencies: dependencies,\n\t\toptions: {\n\t\t\tprojectName: \"my.test.lib\"\n\t\t}\n\t});\n\n\tconst writtenResources = await writer.byGlob([\"**/**\"]);\n\tt.deepEqual(writtenResources.map((r) => r.getPath()).sort(), [\n\t\t\"/resources/my/test/lib/designtime/library-preload.designtime.js\",\n\t\t\"/resources/my/test/lib/library-preload.js\",\n\t\t\"/resources/my/test/lib/library-preload.support.js\"\n\t], \"Expected preload files should be created\");\n\n\tconst libraryPreload = await writer.byPath(\"/resources/my/test/lib/library-preload.js\");\n\tt.truthy(libraryPreload, \"library-preload.js should have been created\");\n\tconst libraryPreloadContent = await libraryPreload.getString();\n\tt.true(libraryPreloadContent.includes(\"//@ui5-bundle my/test/lib/library-preload.js\"),\n\t\t\"library-preload should be a bundle\");\n\tt.regex(libraryPreloadContent, new RegExp(\"my/test/lib/library\"),\n\t\t\"library-preload should include library.js module\");\n\n\tconst designtimePreload = await writer.byPath(\"/resources/my/test/lib/designtime/library-preload.designtime.js\");\n\tt.truthy(designtimePreload, \"library-preload.js should have been created\");\n\tconst designtimePreloadContent = await designtimePreload.getString();\n\tt.true(designtimePreloadContent.includes(\"//@ui5-bundle my/test/lib/designtime/library-preload.designtime.js\"),\n\t\t\"library-preload.designtime should be a bundle\");\n\tt.regex(designtimePreloadContent, new RegExp(\"my/test/lib/designtime/foo\"),\n\t\t\"library-preload should include designtime/foo module\");\n\tt.regex(designtimePreloadContent, new RegExp(\"my/test/lib/some\\\\.designtime\"),\n\t\t\"library-preload should include some.designtime module\");\n\n\tconst supportPreload = await writer.byPath(\"/resources/my/test/lib/library-preload.support.js\");\n\tt.truthy(supportPreload, \"library-preload.js should have been created\");\n\tconst supportPreloadContent = await supportPreload.getString();\n\tt.true(supportPreloadContent.includes(\"//@ui5-bundle my/test/lib/library-preload.support.js\"),\n\t\t\"library-preload.support should be a bundle\");\n\tt.regex(supportPreloadContent, new RegExp(\"my/test/lib/some\\\\.support\"),\n\t\t\"library-preload.support should include some.support module\");\n\tt.regex(supportPreloadContent, new RegExp(\"my/test/lib/support/foo\\\\.support\"),\n\t\t\"library-preload.support should include support/foo.support module\");\n});\n",
    "test/lib/tasks/bundlers/generateStandaloneAppBundle.integration.js": "const test = require(\"ava\");\nconst path = require(\"path\");\nconst chai = require(\"chai\");\nchai.use(require(\"chai-fs\"));\nconst assert = chai.assert;\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\nconst recursive = require(\"recursive-readdir\");\nconst ui5Builder = require(\"../../../../\");\nconst builder = ui5Builder.builder;\nconst applicationBPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"application.b\");\nconst sapUiCorePath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"sap.ui.core\");\n\nconst findFiles = (folder) => {\n\treturn new Promise((resolve, reject) => {\n\t\trecursive(folder, (err, files) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(files);\n\t\t\t}\n\t\t});\n\t});\n};\n\ntest(\"integration: build application.b standalone\", async (t) => {\n\t// beforeEach mocks do not apply to this test as all modules have already been required via ui5Builder require above\n\tconst destPath = \"./test/tmp/build/application.b/standalone\";\n\tconst expectedPath = \"./test/expected/build/application.b/standalone\";\n\tconst excludedTasks = [\"*\"];\n\tconst includedTasks = [\"generateStandaloneAppBundle\"];\n\n\treturn builder.build({\n\t\ttree: applicationBTree,\n\t\tdestPath,\n\t\texcludedTasks,\n\t\tincludedTasks\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath, \"Result directory structure correct\");\n\n\t\t// Check for all file contents\n\t\tt.deepEqual(expectedFiles.length, 11, \"11 files are expected\");\n\t\texpectedFiles.forEach((expectedFile) => {\n\t\t\tconst relativeFile = path.relative(expectedPath, expectedFile);\n\t\t\tconst destFile = path.join(destPath, relativeFile);\n\t\t\tassert.fileEqual(destFile, expectedFile, \"Correct file content\");\n\t\t});\n\t});\n});\n\nconst applicationBTree = {\n\t\"id\": \"application.b\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationBPath,\n\t\"dependencies\": [\n\t\t{\n\t\t\t\"id\": \"sap.ui.core\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": sapUiCorePath,\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"sap.ui.core\",\n\t\t\t\t\"copyright\": \"Some fancy copyright\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\",\n\t\t\t\t\t\t\"test\": \"main/test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\",\n\t\t\t\t\t\"/test-resources/\": \"main/test\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"library.d\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": path.join(applicationBPath, \"..\", \"library.d\"),\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"library.d\",\n\t\t\t\t\"copyright\": \"Some fancy copyright\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\",\n\t\t\t\t\t\t\"test\": \"main/test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\",\n\t\t\t\t\t\"/test-resources/\": \"main/test\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"library.a\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": path.join(applicationBPath, \"..\", \"collection\", \"library.a\"),\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"library.a\",\n\t\t\t\t\"copyright\": \"${copyright}\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"src\",\n\t\t\t\t\t\t\"test\": \"test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"library.b\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": path.join(applicationBPath, \"..\", \"collection\", \"library.b\"),\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"library.b\",\n\t\t\t\t\"copyright\": \"${copyright}\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"src\",\n\t\t\t\t\t\t\"test\": \"test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"library.c\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": path.join(applicationBPath, \"..\", \"collection\", \"library.c\"),\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"library.c\",\n\t\t\t\t\"copyright\": \"${copyright}\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"src\",\n\t\t\t\t\t\t\"test\": \"test\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"builder\": {},\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.b\",\n\t\t\"namespace\": \"id1\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t}\n};\n",
    "test/lib/tasks/bundlers/generateStandaloneAppBundle.js": "const test = require(\"ava\");\nconst chai = require(\"chai\");\nchai.use(require(\"chai-fs\"));\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nlet generateStandaloneAppBundle = require(\"../../../../lib/tasks/bundlers/generateStandaloneAppBundle\");\n\ntest.beforeEach((t) => {\n\t// Stubbing processors/bundlers/moduleBundler\n\tt.context.moduleBundlerStub = sinon.stub();\n\tt.context.moduleBundlerStub.resolves([\"I am a resource\"]);\n\tmock(\"../../../../lib/processors/bundlers/moduleBundler\", t.context.moduleBundlerStub);\n\n\t// Re-require tested module\n\tgenerateStandaloneAppBundle = mock.reRequire(\"../../../../lib/tasks/bundlers/generateStandaloneAppBundle\");\n});\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.serial(\"execute module bundler and write results\", async (t) => {\n\tconst dummyResource = {\n\t\tgetPath: function() {\n\t\t\treturn \"ponyPath\";\n\t\t}\n\t};\n\tconst dummyReaderWriter = {\n\t\tbyGlob: async function() {\n\t\t\treturn [dummyResource, dummyResource];\n\t\t},\n\t\twrite: function() {}\n\t};\n\tsinon.stub(dummyReaderWriter, \"write\").resolves();\n\tconst params = {\n\t\tworkspace: dummyReaderWriter,\n\t\tdependencies: dummyReaderWriter,\n\t\toptions: {\n\t\t\tprojectName: \"some.project.name\",\n\t\t\tnamespace: \"some/project/namespace\"\n\t\t}\n\t};\n\tawait generateStandaloneAppBundle(params);\n\n\tt.deepEqual(t.context.moduleBundlerStub.callCount, 2, \"moduleBundler should be called once\");\n\n\tconst {resources, options} = t.context.moduleBundlerStub.getCall(0).args[0];\n\tt.deepEqual(resources.length, 4, \"moduleBundler got supplied with 4 resources\");\n\tt.deepEqual(options.bundleDefinition.sections[0].filters, [\n\t\t\"jquery.sap.global.js\"\n\t], \"Correct filter in first bundle definition section\");\n\tt.deepEqual(options.bundleDefinition.sections[1].filters, [\n\t\t\"some/project/namespace/\",\n\t\t\"some/project/namespace/**/manifest.json\",\n\t\t\"some/project/namespace/changes/changes-bundle.json\",\n\t\t\"some/project/namespace/changes/flexibility-bundle.json\",\n\t\t\"!some/project/namespace/test/\",\n\t\t\"sap/ui/core/Core.js\"\n\t], \"Correct filter in second bundle definition section\");\n\tt.deepEqual(options.bundleDefinition.defaultFileTypes, [\n\t\t\".js\",\n\t\t\".control.xml\",\n\t\t\".fragment.html\",\n\t\t\".fragment.json\",\n\t\t\".fragment.xml\",\n\t\t\".view.html\",\n\t\t\".view.json\",\n\t\t\".view.xml\",\n\t\t\".properties\"\n\t], \"Correct default file types in bundle definition\");\n});\n\ntest.serial(\"execute module bundler and write results without namespace\", async (t) => {\n\tconst dummyResource = {\n\t\tgetPath: function() {\n\t\t\treturn \"ponyPath\";\n\t\t}\n\t};\n\tconst dummyReaderWriter = {\n\t\tbyGlob: async function() {\n\t\t\treturn [dummyResource, dummyResource];\n\t\t},\n\t\twrite: function() {}\n\t};\n\tsinon.stub(dummyReaderWriter, \"write\").resolves();\n\tconst params = {\n\t\tworkspace: dummyReaderWriter,\n\t\tdependencies: dummyReaderWriter,\n\t\toptions: {\n\t\t\tprojectName: \"some.project.name\"\n\t\t}\n\t};\n\tawait generateStandaloneAppBundle(params);\n\n\tt.deepEqual(t.context.moduleBundlerStub.callCount, 2, \"moduleBundler should be called once\");\n\n\tconst {resources, options} = t.context.moduleBundlerStub.getCall(0).args[0];\n\tt.deepEqual(resources.length, 4, \"moduleBundler got supplied with 4 resources\");\n\tt.deepEqual(options.bundleDefinition.sections[0].filters, [\n\t\t\"jquery.sap.global.js\"\n\t], \"Correct filter in first bundle definition section\");\n\tt.deepEqual(options.bundleDefinition.sections[1].filters, [\n\t\t\"/\",\n\t\t\"/**/manifest.json\",\n\t\t\"/changes/changes-bundle.json\",\n\t\t\"/changes/flexibility-bundle.json\",\n\t\t\"!/test/\",\n\t\t\"sap/ui/core/Core.js\"\n\t], \"Correct filter in second bundle definition section\");\n});\n\n\ntest.serial(\"execute module bundler and write results in evo mode\", async (t) => {\n\tconst dummyResource = {\n\t\tgetPath: function() {\n\t\t\treturn \"/resources/ui5loader.js\"; // Triggers evo mode\n\t\t}\n\t};\n\tconst dummyReaderWriter = {\n\t\tbyGlob: async function() {\n\t\t\treturn [dummyResource, dummyResource];\n\t\t},\n\t\twrite: function() {}\n\t};\n\tsinon.stub(dummyReaderWriter, \"write\").resolves();\n\tconst params = {\n\t\tworkspace: dummyReaderWriter,\n\t\tdependencies: dummyReaderWriter,\n\t\toptions: {\n\t\t\tprojectName: \"some.project.name\",\n\t\t\tnamespace: \"some/project/namespace\"\n\t\t}\n\t};\n\tawait generateStandaloneAppBundle(params);\n\n\tt.deepEqual(t.context.moduleBundlerStub.callCount, 2, \"moduleBundler should be called once\");\n\n\tconst {resources, options} = t.context.moduleBundlerStub.getCall(0).args[0];\n\tt.deepEqual(resources.length, 4, \"moduleBundler got supplied with 4 resources\");\n\tt.deepEqual(options.bundleDefinition.sections[0].filters, [\n\t\t\"ui5loader-autoconfig.js\"\n\t], \"Evo mode active - Correct filter in first bundle definition section\");\n\tt.deepEqual(options.bundleDefinition.sections[1].filters, [\n\t\t\"some/project/namespace/\",\n\t\t\"some/project/namespace/**/manifest.json\",\n\t\t\"some/project/namespace/changes/changes-bundle.json\",\n\t\t\"some/project/namespace/changes/flexibility-bundle.json\",\n\t\t\"!some/project/namespace/test/\",\n\t\t\"sap/ui/core/Core.js\"\n\t], \"Correct filter in second bundle definition section\");\n});\n",
    "test/lib/tasks/generateThemeDesignerResources.js": "const test = require(\"ava\");\n\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\ntest.beforeEach((t) => {\n\tconst ui5Fs = require(\"@ui5/fs\");\n\n\tt.context.fsInterfaceStub = sinon.stub(ui5Fs, \"fsInterface\");\n\tt.context.fsInterfaceStub.returns({});\n\n\tt.context.ReaderCollectionPrioritizedStub = sinon.stub(ui5Fs, \"ReaderCollectionPrioritized\");\n\tt.context.ReaderCollectionPrioritizedStub.returns({\n\t\tbyPath: sinon.stub()\n\t});\n\n\tt.context.ResourceStub = sinon.stub();\n\n\tmock(\"@ui5/fs\", {\n\t\tReaderCollectionPrioritized: t.context.ReaderCollectionPrioritizedStub,\n\t\tfsInterface: t.context.fsInterfaceStub,\n\t\tResource: t.context.ResourceStub\n\t});\n\n\tt.context.libraryLessGeneratorStub = sinon.stub();\n\n\tmock(\"../../../lib/processors/libraryLessGenerator\", t.context.libraryLessGeneratorStub);\n\n\t// Re-require tested module\n\tt.context.generateThemeDesignerResources = mock.reRequire(\"../../../lib/tasks/generateThemeDesignerResources\");\n});\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"generateThemeDesignerResources: Library\", async (t) => {\n\tconst {generateThemeDesignerResources, libraryLessGeneratorStub, fsInterfaceStub, ResourceStub,\n\t\tReaderCollectionPrioritizedStub} = t.context;\n\n\tconst librarySourceLessResource1 = {\n\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/demo/lib/themes/base/library.source.less\")\n\t};\n\tconst librarySourceLessResource2 = {\n\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/demo/lib/themes/my_theme/library.source.less\")\n\t};\n\tconst librarySourceLessResource3 = {\n\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/demo/lib/themes/sap_fiori_3/library.source.less\")\n\t};\n\n\tconst clonedCoreBaseDotThemingResourceStub = {\n\t\tsetPath: sinon.stub()\n\t};\n\tconst coreBaseDotThemingResourceStub = {\n\t\tclone: sinon.stub().resolves(clonedCoreBaseDotThemingResourceStub)\n\t};\n\tReaderCollectionPrioritizedStub.returns({\n\t\tbyPath: sinon.stub().callsFake(async (virPath) => {\n\t\t\tif (virPath === \"/resources/sap/ui/core/themes/sap_fiori_3/.theming\") {\n\t\t\t\treturn coreBaseDotThemingResourceStub;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t})\n\t});\n\n\tconst workspace = {\n\t\tbyGlob: sinon.stub().callsFake(async (globPattern) => {\n\t\t\tif (globPattern === \"/resources/sap/ui/demo/lib/themes/*/library.source.less\") {\n\t\t\t\treturn [librarySourceLessResource1, librarySourceLessResource2, librarySourceLessResource3];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}),\n\t\twrite: sinon.stub()\n\t};\n\tconst dependencies = {};\n\n\tconst libraryLessResource1 = {};\n\tconst libraryLessResource2 = {};\n\tconst libraryLessResource3 = {};\n\n\tlibraryLessGeneratorStub.resolves([libraryLessResource1, libraryLessResource2, libraryLessResource3]);\n\n\tawait generateThemeDesignerResources({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.demo.lib\",\n\t\t\tversion: \"1.2.3\",\n\t\t\tnamespace: \"sap/ui/demo/lib\"\n\t\t}\n\t});\n\n\tt.is(t.context.ReaderCollectionPrioritizedStub.callCount, 1, \"ReaderCollectionPrioritized should be created once\");\n\tt.deepEqual(t.context.ReaderCollectionPrioritizedStub.getCall(0).args, [{\n\t\tname: `generateThemeDesignerResources - prioritize workspace over dependencies: sap.ui.demo.lib`,\n\t\treaders: [workspace, dependencies]\n\t}]);\n\tconst combo = t.context.ReaderCollectionPrioritizedStub.getCall(0).returnValue;\n\n\tt.is(fsInterfaceStub.callCount, 1, \"fsInterface should be created once\");\n\tt.deepEqual(fsInterfaceStub.getCall(0).args, [combo], \"fsInterface should be created for 'combo'\");\n\tconst fs = fsInterfaceStub.getCall(0).returnValue;\n\n\tt.is(libraryLessGeneratorStub.callCount, 1);\n\n\tt.deepEqual(libraryLessGeneratorStub.getCall(0).args[0], {\n\t\tresources: [librarySourceLessResource1, librarySourceLessResource2, librarySourceLessResource3],\n\t\tfs,\n\t}, \"libraryLessGenerator processor should be called with expected arguments\");\n\n\tt.is(ResourceStub.callCount, 3);\n\tt.true(ResourceStub.alwaysCalledWithNew());\n\n\tt.deepEqual(ResourceStub.getCall(0).args, [{\n\t\tpath: \"/resources/sap/ui/demo/lib/.theming\",\n\t\tstring: JSON.stringify({\n\t\t\tsEntity: \"Library\",\n\t\t\tsId: \"sap/ui/demo/lib\",\n\t\t\tsVersion: \"1.2.3\"\n\t\t}, null, 2)\n\t}]);\n\tconst libraryDotTheming = ResourceStub.getCall(0).returnValue;\n\n\tt.deepEqual(ResourceStub.getCall(1).args, [{\n\t\tpath: \"/resources/sap/ui/demo/lib/themes/base/.theming\",\n\t\tstring: JSON.stringify({\n\t\t\tsEntity: \"Theme\",\n\t\t\tsId: \"base\",\n\t\t\tsVendor: \"SAP\"\n\t\t}, null, 2)\n\t}]);\n\tconst baseThemeDotTheming = ResourceStub.getCall(1).returnValue;\n\n\tt.deepEqual(ResourceStub.getCall(2).args, [{\n\t\tpath: \"/resources/sap/ui/demo/lib/themes/my_theme/.theming\",\n\t\tstring: JSON.stringify({\n\t\t\tsEntity: \"Theme\",\n\t\t\tsId: \"my_theme\",\n\t\t\tsVendor: \"SAP\",\n\t\t\toExtends: \"base\"\n\t\t}, null, 2)\n\t}]);\n\tconst myThemeDotTheming = ResourceStub.getCall(2).returnValue;\n\n\tt.is(clonedCoreBaseDotThemingResourceStub.setPath.callCount, 1);\n\tt.deepEqual(clonedCoreBaseDotThemingResourceStub.setPath.getCall(0).args,\n\t\t[\"/resources/sap/ui/demo/lib/themes/sap_fiori_3/.theming\"]);\n\n\tt.is(workspace.write.callCount, 7);\n\tt.is(workspace.write.getCall(0).args.length, 1,\n\t\t\"workspace.write for libraryDotTheming should be called with 1 argument\");\n\tt.is(workspace.write.getCall(0).args[0], libraryDotTheming,\n\t\t\"workspace.write should be called with libraryDotTheming\");\n\tt.is(workspace.write.getCall(1).args.length, 1,\n\t\t\"workspace.write for baseThemeDotTheming should be called with 1 argument\");\n\tt.is(workspace.write.getCall(1).args[0], baseThemeDotTheming,\n\t\t\"workspace.write should be called with baseThemeDotTheming\");\n\tt.is(workspace.write.getCall(2).args.length, 1,\n\t\t\"workspace.write for myThemeDotTheming should be called with 1 argument\");\n\tt.is(workspace.write.getCall(2).args[0], myThemeDotTheming,\n\t\t\"workspace.write should be called with myThemeDotTheming\");\n\tt.is(workspace.write.getCall(3).args.length, 1,\n\t\t\"workspace.write for clonedCoreBaseDotThemingResourceStub should be called with 1 argument\");\n\tt.is(workspace.write.getCall(3).args[0], clonedCoreBaseDotThemingResourceStub,\n\t\t\"workspace.write should be called with clonedCoreBaseDotThemingResourceStub\");\n\tt.is(workspace.write.getCall(4).args.length, 1,\n\t\t\"workspace.write for libraryLessResource1 should be called with 1 argument\");\n\tt.is(workspace.write.getCall(4).args[0], libraryLessResource1,\n\t\t\"workspace.write should be called with libraryLessResource1\");\n\tt.is(workspace.write.getCall(5).args.length, 1,\n\t\t\"workspace.write for libraryLessResource2 should be called with 1 argument\");\n\tt.is(workspace.write.getCall(5).args[0], libraryLessResource2,\n\t\t\"workspace.write should be called with libraryLessResource2\");\n});\n\ntest.serial(\"generateThemeDesignerResources: Library sap.ui.core\", async (t) => {\n\tconst {generateThemeDesignerResources, libraryLessGeneratorStub, fsInterfaceStub, ResourceStub} = t.context;\n\n\tconst librarySourceLessResource = {\n\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/core/themes/base/library.source.less\")\n\t};\n\n\tconst workspace = {\n\t\tbyGlob: sinon.stub().callsFake(async (globPattern) => {\n\t\t\tif (globPattern === \"/resources/sap/ui/core/themes/*/library.source.less\") {\n\t\t\t\treturn [librarySourceLessResource];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}),\n\t\tbyPath: sinon.stub().callsFake(async (virPath) => {\n\t\t\tif (virPath === \"/resources/sap/ui/core/themes/base/.theming\") {\n\t\t\t\treturn {};\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}),\n\t\twrite: sinon.stub()\n\t};\n\tconst dependencies = {};\n\n\tconst libraryLessResource = {};\n\n\tlibraryLessGeneratorStub.resolves([libraryLessResource]);\n\n\tawait generateThemeDesignerResources({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.core\",\n\t\t\tversion: \"1.2.3\",\n\t\t\tnamespace: \"sap/ui/core\"\n\t\t}\n\t});\n\n\tt.is(t.context.ReaderCollectionPrioritizedStub.callCount, 1, \"ReaderCollectionPrioritized should be created once\");\n\tt.deepEqual(t.context.ReaderCollectionPrioritizedStub.getCall(0).args, [{\n\t\tname: `generateThemeDesignerResources - prioritize workspace over dependencies: sap.ui.core`,\n\t\treaders: [workspace, dependencies]\n\t}]);\n\tconst combo = t.context.ReaderCollectionPrioritizedStub.getCall(0).returnValue;\n\n\tt.is(fsInterfaceStub.callCount, 1, \"fsInterface should be created once\");\n\tt.deepEqual(fsInterfaceStub.getCall(0).args, [combo], \"fsInterface should be created for 'combo'\");\n\tconst fs = fsInterfaceStub.getCall(0).returnValue;\n\n\tt.is(libraryLessGeneratorStub.callCount, 1);\n\n\tt.deepEqual(libraryLessGeneratorStub.getCall(0).args[0], {\n\t\tresources: [librarySourceLessResource],\n\t\tfs,\n\t}, \"libraryLessGenerator processor should be called with expected arguments\");\n\n\tt.is(ResourceStub.callCount, 1);\n\tt.true(ResourceStub.alwaysCalledWithNew());\n\n\tt.deepEqual(ResourceStub.getCall(0).args, [{\n\t\tpath: \"/resources/sap/ui/core/.theming\",\n\t\tstring: JSON.stringify({\n\t\t\tsEntity: \"Library\",\n\t\t\tsId: \"sap/ui/core\",\n\t\t\tsVersion: \"1.2.3\",\n\t\t\taFiles: [\n\t\t\t\t\"library\",\n\t\t\t\t\"global\",\n\t\t\t\t\"css_variables\"\n\t\t\t]\n\t\t}, null, 2)\n\t}]);\n\tconst libraryDotTheming = ResourceStub.getCall(0).returnValue;\n\n\tt.is(workspace.write.callCount, 2);\n\tt.is(workspace.write.getCall(0).args.length, 1,\n\t\t\"workspace.write for libraryDotTheming should be called with 1 argument\");\n\tt.is(workspace.write.getCall(0).args[0], libraryDotTheming,\n\t\t\"workspace.write should be called with libraryDotTheming\");\n\tt.is(workspace.write.getCall(1).args.length, 1,\n\t\t\"workspace.write for libraryLessResource should be called with 1 argument\");\n\tt.is(workspace.write.getCall(1).args[0], libraryLessResource,\n\t\t\"workspace.write should be called with libraryLessResource\");\n});\n\ntest.serial(\"generateThemeDesignerResources: Library sap.ui.documentation is skipped\", async (t) => {\n\tconst {generateThemeDesignerResources, libraryLessGeneratorStub, fsInterfaceStub, ResourceStub} = t.context;\n\n\tconst workspace = {\n\t\tbyGlob: sinon.stub(),\n\t\twrite: sinon.stub()\n\t};\n\n\tawait generateThemeDesignerResources({\n\t\tworkspace: {},\n\t\tdependencies: {},\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.documentation\",\n\t\t\tversion: \"1.2.3\",\n\t\t\tnamespace: \"sap/ui/documentation\"\n\t\t}\n\t});\n\n\tt.is(t.context.ReaderCollectionPrioritizedStub.callCount, 0);\n\tt.is(fsInterfaceStub.callCount, 0);\n\tt.is(libraryLessGeneratorStub.callCount, 0);\n\tt.is(ResourceStub.callCount, 0);\n\tt.is(workspace.byGlob.callCount, 0);\n\tt.is(workspace.write.callCount, 0);\n});\n\ntest.serial(\"generateThemeDesignerResources: Library without themes\", async (t) => {\n\tconst {generateThemeDesignerResources, libraryLessGeneratorStub, fsInterfaceStub, ResourceStub} = t.context;\n\n\tconst workspace = {\n\t\tbyGlob: sinon.stub().callsFake(async () => {\n\t\t\treturn [];\n\t\t}),\n\t\twrite: sinon.stub()\n\t};\n\n\tawait generateThemeDesignerResources({\n\t\tworkspace,\n\t\tdependencies: {},\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.demo.lib\",\n\t\t\tversion: \"1.2.3\",\n\t\t\tnamespace: \"sap/ui/demo/lib\"\n\t\t}\n\t});\n\n\tt.is(t.context.ReaderCollectionPrioritizedStub.callCount, 0);\n\tt.is(fsInterfaceStub.callCount, 0);\n\tt.is(libraryLessGeneratorStub.callCount, 0);\n\n\tt.is(ResourceStub.callCount, 1);\n\tt.true(ResourceStub.alwaysCalledWithNew());\n\n\tt.deepEqual(ResourceStub.getCall(0).args, [{\n\t\tpath: \"/resources/sap/ui/demo/lib/.theming\",\n\t\tstring: JSON.stringify({\n\t\t\tsEntity: \"Library\",\n\t\t\tsId: \"sap/ui/demo/lib\",\n\t\t\tsVersion: \"1.2.3\",\n\t\t\tbIgnore: true\n\t\t}, null, 2)\n\t}]);\n\tconst libraryDotTheming = ResourceStub.getCall(0).returnValue;\n\n\tt.is(workspace.write.callCount, 1);\n\tt.is(workspace.write.getCall(0).args.length, 1,\n\t\t\"workspace.write for libraryDotTheming should be called with 1 argument\");\n\tt.is(workspace.write.getCall(0).args[0], libraryDotTheming,\n\t\t\"workspace.write should be called with libraryDotTheming\");\n});\n\ntest.serial(\"generateThemeDesignerResources: Theme-Library\", async (t) => {\n\tconst {generateThemeDesignerResources, libraryLessGeneratorStub, fsInterfaceStub, ResourceStub} = t.context;\n\n\tconst librarySourceLessResource = {\n\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/demo/lib/themes/my_theme/library.source.less\")\n\t};\n\n\tconst workspace = {\n\t\tbyGlob: sinon.stub().callsFake(async (globPattern) => {\n\t\t\tif (globPattern === \"/resources/**/themes/*/library.source.less\") {\n\t\t\t\treturn [librarySourceLessResource];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}),\n\t\twrite: sinon.stub()\n\t};\n\tconst dependencies = {};\n\n\tconst libraryLessResource = {};\n\n\tlibraryLessGeneratorStub.resolves([libraryLessResource]);\n\n\tawait generateThemeDesignerResources({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.demo.lib\",\n\t\t\tversion: \"1.2.3\"\n\t\t}\n\t});\n\n\tt.is(t.context.ReaderCollectionPrioritizedStub.callCount, 1, \"ReaderCollectionPrioritized should be created once\");\n\tt.deepEqual(t.context.ReaderCollectionPrioritizedStub.getCall(0).args, [{\n\t\tname: `generateThemeDesignerResources - prioritize workspace over dependencies: sap.ui.demo.lib`,\n\t\treaders: [workspace, dependencies]\n\t}]);\n\tconst combo = t.context.ReaderCollectionPrioritizedStub.getCall(0).returnValue;\n\n\tt.is(fsInterfaceStub.callCount, 1, \"fsInterface should be created once\");\n\tt.deepEqual(fsInterfaceStub.getCall(0).args, [combo], \"fsInterface should be created for 'combo'\");\n\tconst fs = fsInterfaceStub.getCall(0).returnValue;\n\n\tt.is(libraryLessGeneratorStub.callCount, 1);\n\n\tt.deepEqual(libraryLessGeneratorStub.getCall(0).args[0], {\n\t\tresources: [librarySourceLessResource],\n\t\tfs,\n\t}, \"libraryLessGenerator processor should be called with expected arguments\");\n\n\tt.is(ResourceStub.callCount, 1);\n\tt.true(ResourceStub.alwaysCalledWithNew());\n\n\tt.deepEqual(ResourceStub.getCall(0).args, [{\n\t\tpath: \"/resources/sap/ui/demo/lib/themes/my_theme/.theming\",\n\t\tstring: JSON.stringify({\n\t\t\tsEntity: \"Theme\",\n\t\t\tsId: \"my_theme\",\n\t\t\tsVendor: \"SAP\",\n\t\t\toExtends: \"base\"\n\t\t}, null, 2)\n\t}]);\n\tconst myThemeDotTheming = ResourceStub.getCall(0).returnValue;\n\n\tt.is(workspace.write.callCount, 2);\n\tt.is(workspace.write.getCall(0).args.length, 1,\n\t\t\"workspace.write for myThemeDotTheming should be called with 1 argument\");\n\tt.is(workspace.write.getCall(0).args[0], myThemeDotTheming,\n\t\t\"workspace.write should be called with myThemeDotTheming\");\n\tt.is(workspace.write.getCall(1).args.length, 1,\n\t\t\"workspace.write for libraryLessResource should be called with 1 argument\");\n\tt.is(workspace.write.getCall(1).args[0], libraryLessResource,\n\t\t\"workspace.write should be called with libraryLessResource\");\n});\n\ntest.serial(\"generateThemeDesignerResources: .theming file missing in sap.ui.core library source`\", async (t) => {\n\tconst {generateThemeDesignerResources, libraryLessGeneratorStub, ResourceStub} = t.context;\n\n\tconst librarySourceLessResource = {\n\t\tgetPath: sinon.stub().returns(\"/resources/sap/ui/core/themes/base/library.source.less\")\n\t};\n\n\tconst workspace = {\n\t\tbyGlob: sinon.stub().callsFake(async (globPattern) => {\n\t\t\tif (globPattern === \"/resources/sap/ui/core/themes/*/library.source.less\") {\n\t\t\t\treturn [librarySourceLessResource];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}),\n\t\tbyPath: sinon.stub().callsFake(async (virPath) => {\n\t\t\treturn null;\n\t\t}),\n\t\twrite: sinon.stub()\n\t};\n\tconst dependencies = {};\n\n\tconst libraryLessResource = {};\n\n\tlibraryLessGeneratorStub.resolves([libraryLessResource]);\n\n\tawait t.throwsAsync(generateThemeDesignerResources({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.core\",\n\t\t\tversion: \"1.2.3\",\n\t\t\tnamespace: \"sap/ui/core\"\n\t\t}\n\t}), {\n\t\tmessage: \".theming file for theme base missing in sap.ui.core library source\"\n\t});\n\n\tt.is(ResourceStub.callCount, 1);\n\tt.true(ResourceStub.alwaysCalledWithNew());\n\n\tt.deepEqual(ResourceStub.getCall(0).args, [{\n\t\tpath: \"/resources/sap/ui/core/.theming\",\n\t\tstring: JSON.stringify({\n\t\t\tsEntity: \"Library\",\n\t\t\tsId: \"sap/ui/core\",\n\t\t\tsVersion: \"1.2.3\",\n\t\t\taFiles: [\n\t\t\t\t\"library\",\n\t\t\t\t\"global\",\n\t\t\t\t\"css_variables\"\n\t\t\t]\n\t\t}, null, 2)\n\t}]);\n\tconst libraryDotTheming = ResourceStub.getCall(0).returnValue;\n\n\tt.is(workspace.write.callCount, 1);\n\tt.is(workspace.write.getCall(0).args.length, 1,\n\t\t\"workspace.write for libraryDotTheming should be called with 1 argument\");\n\tt.is(workspace.write.getCall(0).args[0], libraryDotTheming,\n\t\t\"workspace.write should be called with libraryDotTheming\");\n});\n\ntest.serial(\"generateThemeDesignerResources: Failed to extract library name from theme folder path\", async (t) => {\n\tconst {generateThemeDesignerResources} = t.context;\n\n\tconst librarySourceLessResource = {\n\t\tgetPath: sinon.stub().returns(\"/resources/foo/library.source.less\")\n\t};\n\n\tconst workspace = {\n\t\tbyGlob: sinon.stub().callsFake(async (globPattern) => {\n\t\t\tif (globPattern === \"/resources/**/themes/*/library.source.less\") {\n\t\t\t\treturn [librarySourceLessResource];\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}),\n\t\twrite: sinon.stub()\n\t};\n\tconst dependencies = {};\n\n\tawait t.throwsAsync(generateThemeDesignerResources({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.demo.lib\",\n\t\t\tversion: \"1.2.3\"\n\t\t}\n\t}), {\n\t\tmessage: \"Failed to extract library name from theme folder path: /resources/foo\"\n\t});\n\n\tt.is(workspace.write.callCount, 0);\n});\n",
    "test/lib/types/AbstractUi5Formatter.js": "const test = require(\"ava\");\nconst path = require(\"path\");\nconst fs = require(\"graceful-fs\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\nconst AbstractUi5Formatter = require(\"../../../lib/types/AbstractUi5Formatter\");\n// It's not possible to create instances from AbstractUi5Formatter itself (because it's abstract)\n// Therefore we create a local extension Class\nclass CustomUi5Formatter extends AbstractUi5Formatter {\n\tgetSourceBasePath() {\n\t\treturn \"webapp\";\n\t}\n}\n\nconst applicationBPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.b\");\nconst myTree = {\n\tid: \"random.project.id\",\n\tversion: \"1.0.0\",\n\tpath: applicationBPath,\n\tdependencies: [],\n\tmetadata: {\n\t\tname: \"random.project\",\n\t}\n};\n\nfunction clone(o) {\n\treturn JSON.parse(JSON.stringify(o));\n}\n\ntest(\"hasMavenPlaceholder: has maven placeholder\", async (t) => {\n\tconst myProject = clone(myTree);\n\tconst libraryFormatter = new CustomUi5Formatter({project: myProject});\n\n\tconst res = libraryFormatter.hasMavenPlaceholder(\"${mvn-pony}\");\n\tt.true(res, \"String has maven placeholder\");\n});\n\ntest(\"hasMavenPlaceholder: has no maven placeholder\", async (t) => {\n\tconst myProject = clone(myTree);\n\tconst libraryFormatter = new CustomUi5Formatter({project: myProject});\n\n\tconst res = libraryFormatter.hasMavenPlaceholder(\"$mvn-pony}\");\n\tt.false(res, \"String has no maven placeholder\");\n});\n\ntest(\"resolveMavenPlaceholder: resolves maven placeholder from first POM level\", async (t) => {\n\tconst myProject = clone(myTree);\n\tconst libraryFormatter = new CustomUi5Formatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getPom\").resolves({\n\t\tproject: {\n\t\t\tproperties: {\n\t\t\t\t\"mvn-pony\": \"unicorn\"\n\t\t\t}\n\t\t}\n\t});\n\n\tconst res = await libraryFormatter.resolveMavenPlaceholder(\"${mvn-pony}\");\n\tt.deepEqual(res, \"unicorn\", \"Resolved placeholder correctly\");\n});\n\ntest(\"resolveMavenPlaceholder: resolves maven placeholder from deeper POM level\", async (t) => {\n\tconst myProject = clone(myTree);\n\tconst libraryFormatter = new CustomUi5Formatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getPom\").resolves({\n\t\t\"mvn-pony\": {\n\t\t\tsome: {\n\t\t\t\tid: \"unicorn\"\n\t\t\t}\n\t\t}\n\t});\n\n\tconst res = await libraryFormatter.resolveMavenPlaceholder(\"${mvn-pony.some.id}\");\n\tt.deepEqual(res, \"unicorn\", \"Resolved placeholder correctly\");\n});\n\ntest(\"resolveMavenPlaceholder: can't resolve from POM\", async (t) => {\n\tconst myProject = clone(myTree);\n\tconst libraryFormatter = new CustomUi5Formatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getPom\").resolves({});\n\n\tconst err = await t.throwsAsync(libraryFormatter.resolveMavenPlaceholder(\"${mvn-pony}\"));\n\tt.deepEqual(err.message,\n\t\t`\"\\${mvn-pony}\" couldn't be resolved from maven property \"mvn-pony\" ` +\n\t\t`of pom.xml of project random.project`,\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"resolveMavenPlaceholder: provided value is no placeholder\", async (t) => {\n\tconst myProject = clone(myTree);\n\tconst libraryFormatter = new CustomUi5Formatter({project: myProject});\n\n\tconst err = await t.throwsAsync(libraryFormatter.resolveMavenPlaceholder(\"My ${mvn-pony}\"));\n\tt.deepEqual(err.message,\n\t\t`\"My \\${mvn-pony}\" is not a maven placeholder`,\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"getPom: reads correctly\", async (t) => {\n\tconst myProject = clone(myTree);\n\t// Application H contains a pom.xml\n\tconst applicationHPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.h\");\n\tmyProject.path = applicationHPath;\n\n\tconst libraryFormatter = new CustomUi5Formatter({project: myProject});\n\n\tconst res = await libraryFormatter.getPom();\n\tt.deepEqual(res.project.modelVersion, \"4.0.0\", \"pom.xml content has been read\");\n});\n\ntest.serial(\"getPom: fs read error\", async (t) => {\n\tconst myProject = clone(myTree);\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, new Error(\"EPON: Pony Error\"));\n\n\tconst AbstractUi5Formatter = mock.reRequire(\"../../../lib/types/AbstractUi5Formatter\");\n\tclass LocalUi5Formatter extends AbstractUi5Formatter {}\n\tconst libraryFormatter = new LocalUi5Formatter({project: myProject});\n\n\tconst error = await t.throwsAsync(libraryFormatter.getPom());\n\tt.deepEqual(error.message,\n\t\t\"Failed to read pom.xml for project random.project: \" +\n\t\t\"EPON: Pony Error\",\n\t\t\"Rejected with correct error message\");\n\tt.deepEqual(readFileStub.callCount, 1, \"fs.read got called once\");\n\tconst expectedPath = path.join(applicationBPath, \"pom.xml\");\n\tt.deepEqual(readFileStub.getCall(0).args[0], expectedPath, \"fs.read got called with the correct argument\");\n});\n\ntest.serial(\"getPom: result is cached\", async (t) => {\n\tconst myProject = clone(myTree);\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, undefined,\n\t\t`<pony>no unicorn</pony>`);\n\n\tconst AbstractUi5Formatter = mock.reRequire(\"../../../lib/types/AbstractUi5Formatter\");\n\tclass LocalUi5Formatter extends AbstractUi5Formatter {}\n\tconst libraryFormatter = new LocalUi5Formatter({project: myProject});\n\n\tlet res = await libraryFormatter.getPom();\n\tt.deepEqual(res, {pony: \"no unicorn\"}, \"Correct result on first call\");\n\tres = await libraryFormatter.getPom();\n\tt.deepEqual(res, {pony: \"no unicorn\"}, \"Correct result on second call\");\n\n\tt.deepEqual(readFileStub.callCount, 1, \"fs.read got called exactly once (and then cached)\");\n});\n",
    "test/lib/types/application/ApplicationFormatter.js": "const test = require(\"ava\");\nconst path = require(\"path\");\nconst sinon = require(\"sinon\");\nconst fs = require(\"graceful-fs\");\nconst mock = require(\"mock-require\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\nconst ApplicationFormatter = require(\"../../../../lib/types/application/ApplicationFormatter\");\n\nconst applicationBPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"application.b\");\nconst applicationBTree = {\n\tid: \"application.b\",\n\tversion: \"1.0.0\",\n\tpath: applicationBPath,\n\tdependencies: [],\n\t_level: 0,\n\t_isRoot: true,\n\tspecVersion: \"2.0\",\n\ttype: \"application\",\n\tmetadata: {\n\t\tname: \"application.b\"\n\t},\n\tresources: {\n\t\tconfiguration: {\n\t\t\tpaths: {\n\t\t\t\twebapp: \"webapp\"\n\t\t\t}\n\t\t},\n\t\tpathMappings: {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t}\n};\n\nfunction clone(o) {\n\treturn JSON.parse(JSON.stringify(o));\n}\n\ntest(\"validate: not existing directory webapp for c3\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.path = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"application.notExisting\");\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\tconst error = await t.throwsAsync(applicationFormatter.validate());\n\tt.regex(error.message, /^Could not find application directory of project application\\.b: (?!(undefined))+/,\n\t\t\"Correct exception thrown\");\n});\n\ntest(\"validate: project not defined\", async (t) => {\n\tconst applicationFormatter = new ApplicationFormatter({project: null});\n\n\t// error is thrown because project is not defined (null)\n\tconst error = await t.throwsAsync(applicationFormatter.validate());\n\tt.deepEqual(error.message, \"Project is undefined\", \"Correct exception thrown\");\n});\n\ntest(\"validate: empty version\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.version = undefined;\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\t// error is thrown because project's version is not defined\n\tconst error = await t.throwsAsync(applicationFormatter.validate());\n\tt.deepEqual(error.message, `\"version\" is missing for project application.b`, \"Correct exception thrown\");\n});\n\ntest(\"validate: empty type\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.type = undefined;\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\t// error is thrown because project's type is not defined\n\tconst error = await t.throwsAsync(applicationFormatter.validate());\n\tt.deepEqual(error.message, `\"type\" configuration is missing for project application.b`, \"Correct exception thrown\");\n});\n\ntest(\"validate: empty metadata\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.metadata = undefined;\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\t// error is thrown because project's metadata is not defined\n\tconst error = await t.throwsAsync(applicationFormatter.validate());\n\tt.deepEqual(error.message, `\"metadata.name\" configuration is missing for project application.b`,\n\t\t\"Correct exception thrown\");\n});\n\ntest(\"validate: empty resources\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.resources = undefined;\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\t// error is thrown because project's resources are not defined\n\tawait applicationFormatter.validate();\n\tt.deepEqual(myProject.resources.configuration.paths.webapp, \"webapp\", \"default webapp directory is set\");\n});\n\ntest(\"validate: empty encoding\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tdelete myProject.resources.configuration.propertiesFileSourceEncoding;\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tawait applicationFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.propertiesFileSourceEncoding, \"UTF-8\",\n\t\t\"default resources encoding is set\");\n});\n\ntest(\"validate: empty encoding - legacy specVersion 0.1\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.specVersion = \"0.1\";\n\tdelete myProject.resources.configuration.propertiesFileSourceEncoding;\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tawait applicationFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.propertiesFileSourceEncoding, \"ISO-8859-1\",\n\t\t\"default resources encoding is set\");\n});\n\ntest(\"validate: empty encoding - legacy specVersion 1.0\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.specVersion = \"1.0\";\n\tdelete myProject.resources.configuration.propertiesFileSourceEncoding;\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tawait applicationFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.propertiesFileSourceEncoding, \"ISO-8859-1\",\n\t\t\"default resources encoding is set\");\n});\n\ntest(\"validate: empty encoding - legacy specVersion 1.1\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.specVersion = \"1.1\";\n\tdelete myProject.resources.configuration.propertiesFileSourceEncoding;\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tawait applicationFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.propertiesFileSourceEncoding, \"ISO-8859-1\",\n\t\t\"default resources encoding is set\");\n});\n\ntest(\"validate: test invalid encoding\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.resources.configuration.propertiesFileSourceEncoding = \"test\";\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(applicationFormatter.validate(myProject));\n\tt.is(error.message, `Invalid properties file encoding specified for project application.b. Encoding provided: ` +\n\t\t`test. Must be either \"ISO-8859-1\" or \"UTF-8\".`, \"Missing source directory caused error\");\n});\n\ntest(\"format and validate non-ASCII project correctly\", async (t) => {\n\tconst applicationØPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"application.ø\");\n\tconst myProject = {\n\t\tid: \"application.ø.id\",\n\t\tversion: \"1.0.0\",\n\t\tpath: applicationØPath,\n\t\tdependencies: [],\n\t\t_level: 0,\n\t\t_isRoot: true,\n\t\tspecVersion: \"2.0\",\n\t\ttype: \"application\",\n\t\tmetadata: {\n\t\t\tname: \"application.ø\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\twebapp: \"wêbäpp\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tpathMappings: {\n\t\t\t\t\"/\": \"wêbäpp\"\n\t\t\t}\n\t\t}\n\t};\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tawait applicationFormatter.format();\n\tt.deepEqual(myProject, {\n\t\tid: \"application.ø.id\",\n\t\tversion: \"1.0.0\",\n\t\tpath: applicationØPath,\n\t\tdependencies: [],\n\t\t_level: 0,\n\t\t_isRoot: true,\n\t\tspecVersion: \"2.0\",\n\t\ttype: \"application\",\n\t\tmetadata: {\n\t\t\tname: \"application.ø\",\n\t\t\tnamespace: \"application/ø\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\twebapp: \"wêbäpp\"\n\t\t\t\t},\n\t\t\t\tpropertiesFileSourceEncoding: \"UTF-8\",\n\t\t\t},\n\t\t\tpathMappings: {\n\t\t\t\t\"/\": \"wêbäpp\"\n\t\t\t}\n\t\t}\n\t}, \"Project got formatted correctly\");\n});\n\nfunction createMockProject() {\n\treturn {\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\twebapp: \"webapp\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmetadata: {\n\t\t\tname: \"projectName\"\n\t\t}\n\t};\n}\n\ntest(\"getSourceBasePath: posix\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\tmyProject.path = \"my/pony\";\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tconst sourceBasePath = applicationFormatter.getSourceBasePath(true);\n\tt.is(sourceBasePath, \"my/pony/webapp\", \"correct path\");\n});\n\ntest(\"format\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tconst validateStub = sinon.stub(applicationFormatter, \"validate\").resolves();\n\tconst getNamespaceStub = sinon.stub(applicationFormatter, \"getNamespace\").resolves(\"my/namespace\");\n\n\tawait applicationFormatter.format();\n\tt.deepEqual(project.resources.pathMappings[\"/\"], \"webapp\", \"path mappings is set\");\n\tt.deepEqual(project.metadata.namespace, \"my/namespace\", \"correct namespace set\");\n\tt.deepEqual(validateStub.callCount, 1, \"validate called once\");\n\tt.deepEqual(getNamespaceStub.callCount, 1, \"getNamespace called once\");\n});\n\ntest(\"getNamespaceFromManifestJson: No 'sap.app' configuration found\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tsinon.stub(applicationFormatter, \"getJson\").resolves({content: {}, fsPath: {}});\n\n\tconst error = await t.throwsAsync(applicationFormatter.getNamespaceFromManifestJson());\n\tt.deepEqual(error.message, \"No sap.app/id configuration found in manifest.json of project projectName\",\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"getNamespaceFromManifestJson: No application id in 'sap.app' configuration found\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tsinon.stub(applicationFormatter, \"getJson\").resolves({content: {\"sap.app\": {}}});\n\n\tconst error = await t.throwsAsync(applicationFormatter.getNamespaceFromManifestJson());\n\tt.deepEqual(error.message, \"No sap.app/id configuration found in manifest.json of project projectName\");\n});\n\ntest(\"getNamespaceFromManifestJson: set namespace to id\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tsinon.stub(applicationFormatter, \"getJson\").resolves({content: {\"sap.app\": {id: \"my.id\"}}});\n\n\tconst namespace = await applicationFormatter.getNamespaceFromManifestJson();\n\tt.deepEqual(namespace, \"my/id\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromManifestAppDescVariant: No 'id' property found\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tsinon.stub(applicationFormatter, \"getJson\").resolves({content: {}, fsPath: {}});\n\n\tconst error = await t.throwsAsync(applicationFormatter.getNamespaceFromManifestAppDescVariant());\n\tt.deepEqual(error.message, `No \"id\" property found in manifest.appdescr_variant of project projectName`,\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"getNamespaceFromManifestAppDescVariant: set namespace to id\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tsinon.stub(applicationFormatter, \"getJson\").resolves({content: {id: \"my.id\"}});\n\n\tconst namespace = await applicationFormatter.getNamespaceFromManifestAppDescVariant();\n\tt.deepEqual(namespace, \"my/id\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespace: Correct fallback to manifest.appdescr_variant if manifest.json is missing\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tconst getJsonStub = sinon.stub(applicationFormatter, \"getJson\")\n\t\t.onFirstCall().rejects({code: \"ENOENT\"})\n\t\t.onSecondCall().resolves({content: {id: \"my.id\"}});\n\n\tconst namespace = await applicationFormatter.getNamespace();\n\tt.deepEqual(namespace, \"my/id\", \"Returned correct namespace\");\n\tt.is(getJsonStub.callCount, 2, \"getJson called exactly twice\");\n\tt.is(getJsonStub.getCall(0).args[0], \"manifest.json\", \"getJson called for manifest.json first\");\n\tt.is(getJsonStub.getCall(1).args[0], \"manifest.appdescr_variant\",\n\t\t\"getJson called for manifest.appdescr_variant in fallback\");\n});\n\ntest(\"getNamespace: Correct error message if fallback to manifest.appdescr_variant failed\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tconst getJsonStub = sinon.stub(applicationFormatter, \"getJson\")\n\t\t.onFirstCall().rejects({code: \"ENOENT\"})\n\t\t.onSecondCall().rejects(new Error(\"EPON: Pony Error\"));\n\n\tconst error = await t.throwsAsync(applicationFormatter.getNamespace());\n\tt.deepEqual(error.message, \"EPON: Pony Error\",\n\t\t\"Rejected with correct error message\");\n\tt.is(getJsonStub.callCount, 2, \"getJson called exactly twice\");\n\tt.is(getJsonStub.getCall(0).args[0], \"manifest.json\", \"getJson called for manifest.json first\");\n\tt.is(getJsonStub.getCall(1).args[0], \"manifest.appdescr_variant\",\n\t\t\"getJson called for manifest.appdescr_variant in fallback\");\n});\n\ntest(\"getNamespace: Correct error message if fallback to manifest.appdescr_variant is not possible\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tconst getJsonStub = sinon.stub(applicationFormatter, \"getJson\")\n\t\t.onFirstCall().rejects({message: \"No such stable or directory: manifest.json\", code: \"ENOENT\"})\n\t\t.onSecondCall().rejects({code: \"ENOENT\"}); // both files are missing\n\n\tconst error = await t.throwsAsync(applicationFormatter.getNamespace());\n\tt.deepEqual(error.message,\n\t\t\"Could not find required manifest.json for project projectName: \" +\n\t\t\"No such stable or directory: manifest.json\",\n\t\t\"Rejected with correct error message\");\n\n\tt.is(getJsonStub.callCount, 2, \"getJson called exactly twice\");\n\tt.is(getJsonStub.getCall(0).args[0], \"manifest.json\", \"getJson called for manifest.json first\");\n\tt.is(getJsonStub.getCall(1).args[0], \"manifest.appdescr_variant\",\n\t\t\"getJson called for manifest.appdescr_variant in fallback\");\n});\n\ntest(\"getNamespace: No fallback if manifest.json is present but failed to parse\", async (t) => {\n\tconst project = createMockProject();\n\tconst applicationFormatter = new ApplicationFormatter({project});\n\tconst getJsonStub = sinon.stub(applicationFormatter, \"getJson\")\n\t\t.onFirstCall().rejects(new Error(\"EPON: Pony Error\"));\n\n\tconst error = await t.throwsAsync(applicationFormatter.getNamespace());\n\tt.deepEqual(error.message, \"EPON: Pony Error\",\n\t\t\"Rejected with correct error message\");\n\n\tt.is(getJsonStub.callCount, 1, \"getJson called exactly once\");\n\tt.is(getJsonStub.getCall(0).args[0], \"manifest.json\", \"getJson called for manifest.json only\");\n});\n\ntest(\"getJson: reads correctly\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\n\tconst libraryFormatter = new ApplicationFormatter({project: myProject});\n\n\tconst {content, fsPath} = await libraryFormatter.getJson(\"manifest.json\");\n\tt.deepEqual(content._version, \"1.1.0\", \"manifest.json content has been read\");\n\tconst expectedPath = path.join(applicationBPath, \"webapp\", \"manifest.json\");\n\tt.deepEqual(fsPath, expectedPath, \"Correct manifest.json path returned\");\n});\n\ntest.serial(\"getJson: invalid JSON\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, undefined, \"pony\");\n\n\tconst ApplicationFormatter = mock.reRequire(\"../../../../lib/types/application/ApplicationFormatter\");\n\tconst libraryFormatter = new ApplicationFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(libraryFormatter.getJson(\"manifest.json\"));\n\tt.deepEqual(error.message,\n\t\t\"Failed to read manifest.json for project application.b: \" +\n\t\t\"Unexpected token p in JSON at position 0\",\n\t\t\"Rejected with correct error message\");\n\tt.deepEqual(readFileStub.callCount, 1, \"fs.read got called once\");\n\tconst expectedPath = path.join(applicationBPath, \"webapp\", \"manifest.json\");\n\tt.deepEqual(readFileStub.getCall(0).args[0], expectedPath, \"fs.read got called with the correct argument\");\n});\n\ntest.serial(\"getJson: fs read error\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, new Error(\"EPON: Pony Error\"));\n\n\tconst ApplicationFormatter = mock.reRequire(\"../../../../lib/types/application/ApplicationFormatter\");\n\tconst libraryFormatter = new ApplicationFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(libraryFormatter.getJson(\"manifest.json\"));\n\tt.deepEqual(error.message,\n\t\t\"Failed to read manifest.json for project application.b: \" +\n\t\t\"EPON: Pony Error\",\n\t\t\"Rejected with correct error message\");\n\tt.deepEqual(readFileStub.callCount, 1, \"fs.read got called once\");\n\tconst expectedPath = path.join(applicationBPath, \"webapp\", \"manifest.json\");\n\tt.deepEqual(readFileStub.getCall(0).args[0], expectedPath, \"fs.read got called with the correct argument\");\n});\n\ntest.serial(\"getJson: result is cached\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, undefined,\n\t\t`{\"pony\": \"no unicorn\"}`);\n\n\tconst ApplicationFormatter = mock.reRequire(\"../../../../lib/types/application/ApplicationFormatter\");\n\tconst libraryFormatter = new ApplicationFormatter({project: myProject});\n\tconst expectedPath = path.join(applicationBPath, \"webapp\", \"manifest.json\");\n\tconst expectedPath2 = path.join(applicationBPath, \"webapp\", \"otherfile.json\");\n\n\tconst {content, fsPath} = await libraryFormatter.getJson(\"manifest.json\");\n\tt.deepEqual(content, {pony: \"no unicorn\"}, \"Correct result on first call\");\n\tt.deepEqual(fsPath, expectedPath, \"Correct manifest.json path returned on first call\");\n\n\tconst {content: content2, fsPath: fsPath2} = await libraryFormatter.getJson(\"otherfile.json\");\n\tt.deepEqual(content2, {pony: \"no unicorn\"}, \"Correct result on second call\");\n\tt.deepEqual(fsPath2, expectedPath2, \"Correct otherfile.json path returned on second call\");\n\n\tt.deepEqual(readFileStub.callCount, 2, \"fs.read got called exactly twice (and then cached)\");\n});\n\ntest.serial(\"getJson: Alternative file names\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, undefined,\n\t\t`{\"pony\": \"no unicorn\"}`);\n\n\tconst ApplicationFormatter = mock.reRequire(\"../../../../lib/types/application/ApplicationFormatter\");\n\tconst libraryFormatter = new ApplicationFormatter({project: myProject});\n\tconst expectedPath = path.join(applicationBPath, \"webapp\", \"manifest.appdescr_variant\");\n\tconst expectedPath2 = path.join(applicationBPath, \"webapp\", \"pony.json\");\n\n\tconst {content, fsPath} = await libraryFormatter.getJson(\"manifest.appdescr_variant\");\n\tt.deepEqual(content, {pony: \"no unicorn\"}, \"Correct result on first call\");\n\tt.deepEqual(fsPath, expectedPath, \"Correct manifest.appdescr_variant path returned on first call\");\n\n\tconst {content: content2, fsPath: fsPath2} = await libraryFormatter.getJson(\"pony.json\");\n\tt.deepEqual(content2, {pony: \"no unicorn\"}, \"Correct result on second call\");\n\tt.deepEqual(fsPath2, expectedPath2, \"Correct pony.json path returned on second call\");\n\n\tt.deepEqual(readFileStub.callCount, 2, \"fs.read got called exactly twice\");\n});\n\ntest.serial(\"getJson: Caches successes and failures\", async (t) => {\n\tconst myProject = clone(applicationBTree);\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\")\n\t\t.onFirstCall().callsArgWithAsync(1, new Error(\"EPON: Pony Error\"))\n\t\t.onSecondCall().callsArgWithAsync(1, undefined, `{\"pony\": \"no unicorn\"}`);\n\n\tconst ApplicationFormatter = mock.reRequire(\"../../../../lib/types/application/ApplicationFormatter\");\n\tconst libraryFormatter = new ApplicationFormatter({project: myProject});\n\tconst expectedPath = path.join(applicationBPath, \"webapp\", \"manifest.json\");\n\tconst expectedPath2 = path.join(applicationBPath, \"webapp\", \"manifest.appdescr_variant\");\n\n\tconst error = await t.throwsAsync(libraryFormatter.getJson(\"manifest.json\"));\n\tt.deepEqual(error.message,\n\t\t\"Failed to read manifest.json for project application.b: \" +\n\t\t\"EPON: Pony Error\",\n\t\t\"Rejected with correct error message\");\n\n\tconst {content, fsPath} = await libraryFormatter.getJson(\"manifest.appdescr_variant\");\n\tt.deepEqual(content, {pony: \"no unicorn\"}, \"Correct result on second call\");\n\tt.deepEqual(fsPath, expectedPath2, \"Correct manifest.appdescr_variant path returned on second call\");\n\n\tconst error2 = await t.throwsAsync(libraryFormatter.getJson(\"manifest.json\"));\n\tt.deepEqual(error2.message,\n\t\t\"Failed to read manifest.json for project application.b: \" +\n\t\t\"EPON: Pony Error\",\n\t\t\"From cache: Rejected with correct error message\");\n\n\tconst {content: content2, fsPath: fsPath2} = await libraryFormatter.getJson(\"manifest.appdescr_variant\");\n\tt.deepEqual(content2, {pony: \"no unicorn\"}, \"From cache: Correct result on first call\");\n\tt.deepEqual(fsPath2, expectedPath2, \"From cache: Correct manifest.appdescr_variant path returned on first call\");\n\n\tt.deepEqual(readFileStub.callCount, 2,\n\t\t\"fs.read got called exactly twice (and then cached)\");\n\tt.deepEqual(readFileStub.getCall(0).args[0], expectedPath,\n\t\t\"manifest.json: fs.read got called with the correct argument\");\n\tt.deepEqual(readFileStub.getCall(1).args[0], expectedPath2,\n\t\t\"manifest.appdescr_variant: fs.read got called with the correct argument\");\n});\n\nconst applicationHPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"application.h\");\nconst applicationHTree = {\n\tid: \"application.h\",\n\tversion: \"1.0.0\",\n\tpath: applicationHPath,\n\tdependencies: [],\n\t_level: 0,\n\t_isRoot: true,\n\tspecVersion: \"2.0\",\n\ttype: \"application\",\n\tmetadata: {\n\t\tname: \"application.h\"\n\t},\n\tresources: {\n\t\tconfiguration: {\n\t\t\tpaths: {\n\t\t\t\twebapp: \"webapp\"\n\t\t\t}\n\t\t}\n\t}\n};\n\ntest(\"namespace: detect namespace from pom.xml via ${project.artifactId}\", async (t) => {\n\tconst myProject = clone(applicationHTree);\n\tmyProject.resources.configuration.paths.webapp = \"webapp-project.artifactId\";\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tawait applicationFormatter.format();\n\tt.deepEqual(myProject.metadata.namespace, \"application/h\",\n\t\t\"namespace was successfully set since getJson provides the correct object structure\");\n});\n\ntest(\"namespace: detect namespace from pom.xml via ${componentName} from properties\", async (t) => {\n\tconst myProject = clone(applicationHTree);\n\tmyProject.resources.configuration.paths.webapp = \"webapp-properties.componentName\";\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tawait applicationFormatter.format();\n\tt.deepEqual(myProject.metadata.namespace, \"application/h\",\n\t\t\"namespace was successfully set since getJson provides the correct object structure\");\n});\n\ntest(\"namespace: detect namespace from pom.xml via ${appId} from properties\", async (t) => {\n\tconst myProject = clone(applicationHTree);\n\tmyProject.resources.configuration.paths.webapp = \"webapp-properties.appId\";\n\tconst applicationFormatter = new ApplicationFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(applicationFormatter.format());\n\tt.deepEqual(error.message, \"Failed to resolve namespace of project application.h: \\\"${appId}\\\"\" +\n\t\t\" couldn't be resolved from maven property \\\"appId\\\" of pom.xml of project application.h\");\n});\n",
    "test/lib/types/library/LibraryFormatter.js": "const test = require(\"ava\");\nconst fs = require(\"graceful-fs\");\nconst path = require(\"path\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst logger = require(\"@ui5/logger\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\nconst LibraryFormatter = require(\"../../../../lib/types/library/LibraryFormatter\");\n\nconst libraryEPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"library.e\");\nconst libraryETree = {\n\tid: \"library.e.id\",\n\tversion: \"1.0.0\",\n\tpath: libraryEPath,\n\tdependencies: [],\n\t_level: 0,\n\t_isRoot: true,\n\tspecVersion: \"2.0\",\n\ttype: \"library\",\n\tmetadata: {\n\t\tname: \"library.e\",\n\t\tcopyright: \"UI development toolkit for HTML5 (OpenUI5)\\n * (c) Copyright 2009-xxx SAP SE or an SAP affiliate \" +\n\t\t\t\"company.\\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\"\n\t},\n\tresources: {\n\t\tconfiguration: {\n\t\t\tpaths: {\n\t\t\t\tsrc: \"src\",\n\t\t\t\ttest: \"test\"\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst legacyThemeLibPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"theme.library.e\");\nconst legacyThemeLibTree = {\n\tid: \"@openui5/themelib_sap_bluecrystal\",\n\tversion: \"1.0.0\",\n\tpath: legacyThemeLibPath,\n\tdependencies: [],\n\t_level: 0,\n\t_isRoot: true,\n\tspecVersion: \"2.0\",\n\ttype: \"library\",\n\tmetadata: {\n\t\tname: \"themelib_sap_bluecrystal\",\n\t\tcopyright: \"UI development toolkit for HTML5 (OpenUI5)\\n * (c) Copyright 2009-xxx SAP SE or an SAP affiliate \" +\n\t\t\t\"company.\\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\"\n\t},\n\tresources: {\n\t\tconfiguration: {\n\t\t\tpaths: {\n\t\t\t\tsrc: \"src\",\n\t\t\t\ttest: \"test\"\n\t\t\t}\n\t\t}\n\t}\n};\n\nfunction clone(o) {\n\treturn JSON.parse(JSON.stringify(o));\n}\n\ntest(\"validate: project not defined\", async (t) => {\n\tconst libraryFormatter = new LibraryFormatter({project: null});\n\n\t// error is thrown because project is not defined (null)\n\tconst error = await t.throwsAsync(libraryFormatter.validate());\n\tt.deepEqual(error.message, \"Project is undefined\", \"Correct exception thrown\");\n});\n\ntest(\"validate: empty version\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.version = undefined;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\t// error is thrown because project's version is not defined\n\tconst error = await t.throwsAsync(libraryFormatter.validate(myProject));\n\tt.deepEqual(error.message, `\"version\" is missing for project library.e.id`, \"Correct exception thrown\");\n});\n\ntest(\"validate: empty type\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.type = undefined;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\t// error is thrown because project's type is not defined\n\tconst error = await t.throwsAsync(libraryFormatter.validate(myProject));\n\tt.deepEqual(error.message, `\"type\" configuration is missing for project library.e.id`, \"Correct exception thrown\");\n});\n\n\ntest(\"validate: empty metadata\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.metadata = undefined;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\t// error is thrown because project's metadata is not defined\n\tconst error = await t.throwsAsync(libraryFormatter.validate(myProject));\n\tt.deepEqual(error.message, `\"metadata.name\" configuration is missing for project library.e.id`,\n\t\t\"Correct exception thrown\");\n});\n\ntest(\"validate: empty resources\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources = undefined;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tawait libraryFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.paths.src, \"src\", \"default src directory is set\");\n\tt.deepEqual(myProject.resources.configuration.paths.test, \"test\", \"default test directory is set\");\n});\n\ntest(\"validate: empty encoding\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tdelete myProject.resources.configuration.propertiesFileSourceEncoding;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tawait libraryFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.propertiesFileSourceEncoding, \"UTF-8\",\n\t\t\"default resources encoding is set\");\n});\n\ntest(\"validate: empty encoding - legacy specVersions 0.1\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.specVersion = \"0.1\";\n\tdelete myProject.resources.configuration.propertiesFileSourceEncoding;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tawait libraryFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.propertiesFileSourceEncoding, \"ISO-8859-1\",\n\t\t\"default resources encoding is set\");\n});\n\ntest(\"validate: empty encoding - legacy specVersions 1.0\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.specVersion = \"1.0\";\n\tdelete myProject.resources.configuration.propertiesFileSourceEncoding;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tawait libraryFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.propertiesFileSourceEncoding, \"ISO-8859-1\",\n\t\t\"default resources encoding is set\");\n});\n\ntest(\"validate: empty encoding - legacy specVersions 1.1\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.specVersion = \"1.1\";\n\tdelete myProject.resources.configuration.propertiesFileSourceEncoding;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tawait libraryFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.propertiesFileSourceEncoding, \"ISO-8859-1\",\n\t\t\"default resources encoding is set\");\n});\n\ntest(\"validate: src directory does not exist\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tconst dirExists = sinon.stub(libraryFormatter, \"dirExists\");\n\tdirExists.onFirstCall().resolves(false);\n\tdirExists.onSecondCall().resolves(true);\n\n\tconst error = await t.throwsAsync(libraryFormatter.validate(myProject));\n\tt.regex(error.message, /^Could not find source directory of project library\\.e\\.id: (?!(undefined))+/,\n\t\t\"Missing source directory caused error\");\n});\n\ntest(\"validate: test directory does not exist\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tconst dirExists = sinon.stub(libraryFormatter, \"dirExists\");\n\tdirExists.onFirstCall().resolves(true);\n\tdirExists.onSecondCall().resolves(false);\n\n\tawait libraryFormatter.validate(myProject);\n\t// Missing test directory is not an error\n\tt.deepEqual(myProject.resources.configuration.paths.test, null, \"Project test path configuration is set to null\");\n});\n\ntest(\"validate: test invalid encoding\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.configuration.propertiesFileSourceEncoding = \"test\";\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(libraryFormatter.validate(myProject));\n\tt.is(error.message, `Invalid properties file encoding specified for project library.e.id. Encoding provided: ` +\n\t\t`test. Must be either \"ISO-8859-1\" or \"UTF-8\".`, \"Missing source directory caused error\");\n});\n\ntest(\"format and validate non-ASCII project correctly\", async (t) => {\n\tconst libraryØPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"library.ø\");\n\tconst myProject = {\n\t\tid: \"library.ø.id\",\n\t\tversion: \"1.0.0\",\n\t\tpath: libraryØPath,\n\t\tdependencies: [],\n\t\t_level: 0,\n\t\t_isRoot: true,\n\t\tspecVersion: \"2.0\",\n\t\ttype: \"library\",\n\t\tmetadata: {\n\t\t\tname: \"library.ø\",\n\t\t\tnamespace: \"library/ø\",\n\t\t\tcopyright: \"Some fancy copyright\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"máin/ßrc\",\n\t\t\t\t\ttest: \"máin/吉\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tpathMappings: {\n\t\t\t\t\"/resources/\": \"máin/ßrc\",\n\t\t\t\t\"/test-resources/\": \"máin/吉\"\n\t\t\t}\n\t\t}\n\t};\n\tmyProject.metadata.copyright = undefined;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tawait libraryFormatter.format();\n\tt.deepEqual(myProject, {\n\t\tid: \"library.ø.id\",\n\t\tversion: \"1.0.0\",\n\t\tpath: libraryØPath,\n\t\tdependencies: [],\n\t\t_level: 0,\n\t\t_isRoot: true,\n\t\tspecVersion: \"2.0\",\n\t\ttype: \"library\",\n\t\tmetadata: {\n\t\t\tname: \"library.ø\",\n\t\t\tnamespace: \"library/ø\",\n\t\t\tcopyright: \"Some fancy copyright\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"máin/ßrc\",\n\t\t\t\t\ttest: \"máin/吉\"\n\t\t\t\t},\n\t\t\t\tpropertiesFileSourceEncoding: \"UTF-8\"\n\t\t\t},\n\t\t\tpathMappings: {\n\t\t\t\t\"/resources/\": \"máin/ßrc\",\n\t\t\t\t\"/test-resources/\": \"máin/吉\"\n\t\t\t}\n\t\t}\n\t}, \"Project got formatted correctly\");\n});\n\ntest(\"format: copyright already configured\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\n\tawait libraryFormatter.format();\n\tt.deepEqual(myProject.metadata.copyright, libraryETree.metadata.copyright, \"Copyright was not altered\");\n});\n\ntest.serial(\"format: copyright retrieval fails\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst log = require(\"@ui5/logger\");\n\tconst loggerInstance = log.getLogger(\"types:library:LibraryFormatter\");\n\n\tmock(\"@ui5/logger\", {\n\t\tgetLogger: () => loggerInstance\n\t});\n\tmock.reRequire(\"@ui5/logger\");\n\tconst loggerVerboseSpy = sinon.spy(loggerInstance, \"verbose\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\tsinon.stub(libraryFormatter, \"getCopyright\").rejects(Error(\"my-pony\"));\n\n\tawait libraryFormatter.format();\n\tt.deepEqual(myProject.metadata.copyright, libraryETree.metadata.copyright, \"Copyright was not altered\");\n\n\n\tt.is(loggerVerboseSpy.callCount, 7, \"calls to verbose\");\n\tt.is(loggerVerboseSpy.getCall(6).args[0], \"my-pony\", \"message from rejection\");\n\n\tmock.stop(\"@ui5/logger\");\n});\n\ntest(\"format: formats correctly\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.metadata.copyright = undefined;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\n\tawait libraryFormatter.format();\n\tt.deepEqual(myProject, {\n\t\tid: \"library.e.id\",\n\t\tversion: \"1.0.0\",\n\t\tpath: libraryEPath,\n\t\tdependencies: [],\n\t\t_level: 0,\n\t\t_isRoot: true,\n\t\tspecVersion: \"2.0\",\n\t\ttype: \"library\",\n\t\tmetadata: {\n\t\t\tname: \"library.e\",\n\t\t\tcopyright: \"${copyright}\",\n\t\t\tnamespace: \"library/e\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"src\",\n\t\t\t\t\ttest: \"test\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tpathMappings: {\n\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t}\n\t\t}\n\t}, \"Project got formatted correctly\");\n});\n\ntest(\"format: formats legacy specVersion correctly\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.specVersion = \"0.1\";\n\tmyProject.metadata.copyright = undefined;\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\n\tawait libraryFormatter.format();\n\tt.deepEqual(myProject, {\n\t\tid: \"library.e.id\",\n\t\tversion: \"1.0.0\",\n\t\tpath: libraryEPath,\n\t\tdependencies: [],\n\t\t_level: 0,\n\t\t_isRoot: true,\n\t\tspecVersion: \"0.1\",\n\t\ttype: \"library\",\n\t\tmetadata: {\n\t\t\tname: \"library.e\",\n\t\t\tcopyright: \"${copyright}\",\n\t\t\tnamespace: \"library/e\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"src\",\n\t\t\t\t\ttest: \"test\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tpathMappings: {\n\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t}\n\t\t}\n\t}, \"Project got formatted correctly\");\n});\n\n\ntest.serial(\"format: namespace resolution fails\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.metadata.copyright = undefined;\n\n\n\tconst globbyStub = sinon.stub().resolves([]);\n\tmock(\"globby\", globbyStub);\n\tmock.reRequire(\"globby\");\n\n\n\tconst log = require(\"@ui5/logger\");\n\tconst loggerInstance = log.getLogger(\"types:library:LibraryFormatter\");\n\n\tmock(\"@ui5/logger\", {\n\t\tgetLogger: () => loggerInstance\n\t});\n\tmock.reRequire(\"@ui5/logger\");\n\tconst loggerVerboseSpy = sinon.spy(loggerInstance, \"verbose\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\n\n\tconst error = await t.throwsAsync(libraryFormatter.format());\n\tt.deepEqual(error.message, \"Failed to detect namespace or namespace is empty for project library.e.\" +\n\t\t\" Check verbose log for details.\");\n\n\tt.deepEqual(globbyStub.callCount, 3, \"globby got called three times\");\n\tt.deepEqual(globbyStub.getCall(0).args[0], \"**/manifest.json\", \"First glob is for manifest.json files\");\n\tt.deepEqual(globbyStub.getCall(1).args[0], \"**/.library\", \"Second glob is for .library files\");\n\tt.deepEqual(globbyStub.getCall(2).args[0], \"**/library.js\", \"Third glob for library.js files\");\n\tt.deepEqual(loggerVerboseSpy.callCount, 5, \"5 calls to log.verbose should be done\");\n\tconst logVerboseCalls = loggerVerboseSpy.getCalls().map((call) => call.args[0]);\n\n\tt.true(logVerboseCalls.includes(\n\t\t\"Namespace resolution from .library failed for project library.e: \" +\n\t\t\"Could not find .library file for project library.e\"),\n\t\"should contain message for missing .library\");\n\n\tt.true(logVerboseCalls.includes(\n\t\t\"Namespace resolution from manifest.json failed for project library.e: \" +\n\t\t\"Could not find manifest.json file for project library.e\"),\n\t\"should contain message for missing manifest.json\");\n\n\tt.true(logVerboseCalls.includes(\n\t\t\"Namespace resolution from library.js file path failed for project library.e: \" +\n\t\t\"Could not find library.js file for project library.e\"),\n\t\"should contain message for missing library.js\");\n\n\tmock.stop(\"globby\");\n\tmock.stop(\"@ui5/logger\");\n});\n\ntest(\"format: legacy OpenUI5 theme library\", async (t) => {\n\tconst myProject = clone(legacyThemeLibTree);\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\n\tawait t.notThrowsAsync(libraryFormatter.format(), \"Does not throw for missing .library\");\n\tt.deepEqual(myProject.metadata.copyright, legacyThemeLibTree.metadata.copyright, \"Copyright was not altered\");\n});\n\ntest(\"format: configuration test path\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\tmyProject.resources.configuration.paths.test = null;\n\tawait libraryFormatter.format();\n\n\tt.falsy(myProject.resources.pathMappings[\"/test-resources/\"], \"test-resources pathMapping is not set\");\n});\n\ntest.serial(\"format: Preload exclude fallback for framework libraries (@openui5)\", async (t) => {\n\tconst log = {\n\t\tverbose: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"types:library:LibraryFormatter\").returns(log);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst project = {\n\t\tid: \"@openui5/foo\",\n\t\tmetadata: {\n\t\t\tname: \"test\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"src\",\n\t\t\t\t\ttest: \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project});\n\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\tsinon.stub(libraryFormatter, \"getNamespace\").resolves(\"namespace\");\n\tsinon.stub(libraryFormatter, \"getCopyright\").resolves(\"copyright\");\n\tsinon.stub(libraryFormatter, \"getPreloadExcludesFromDotLibrary\").resolves([\"test/exclude/**\"]);\n\n\tawait libraryFormatter.format();\n\n\tt.deepEqual(project.builder.libraryPreload.excludes, [\"test/exclude/**\"],\n\t\t\"getPreloadExcludesFromDotLibrary should return array with excludes\");\n\n\tt.is(libraryFormatter.getPreloadExcludesFromDotLibrary.callCount, 1,\n\t\t\"getPreloadExcludesFromDotLibrary should be called once\");\n\n\tt.is(log.verbose.callCount, 2, \"log.verbose should be called twice\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Formatting library project %s...\", \"test\"\n\t]);\n\tt.deepEqual(log.verbose.getCall(1).args, [\n\t\t\"No preload excludes defined in project configuration of framework library test. \" +\n\t\t\"Falling back to .library...\"\n\t]);\n});\n\ntest.serial(\"format: Preload exclude fallback for framework libraries (@sapui5)\", async (t) => {\n\tconst log = {\n\t\tverbose: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"types:library:LibraryFormatter\").returns(log);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst project = {\n\t\tid: \"@sapui5/foo\",\n\t\tmetadata: {\n\t\t\tname: \"test\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"src\",\n\t\t\t\t\ttest: \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project});\n\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\tsinon.stub(libraryFormatter, \"getNamespace\").resolves(\"namespace\");\n\tsinon.stub(libraryFormatter, \"getCopyright\").resolves(\"copyright\");\n\tsinon.stub(libraryFormatter, \"getPreloadExcludesFromDotLibrary\").resolves([\"test/exclude/**\"]);\n\n\tawait libraryFormatter.format();\n\n\tt.deepEqual(project.builder.libraryPreload.excludes, [\"test/exclude/**\"],\n\t\t\"getPreloadExcludesFromDotLibrary should return array with excludes\");\n\n\tt.is(libraryFormatter.getPreloadExcludesFromDotLibrary.callCount, 1,\n\t\t\"getPreloadExcludesFromDotLibrary should be called once\");\n\n\tt.is(log.verbose.callCount, 2, \"log.verbose should be called twice\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Formatting library project %s...\", \"test\"\n\t]);\n\tt.deepEqual(log.verbose.getCall(1).args, [\n\t\t\"No preload excludes defined in project configuration of framework library test. \" +\n\t\t\"Falling back to .library...\"\n\t]);\n});\n\ntest.serial(\"format: No preload exclude fallback for non-framework libraries\", async (t) => {\n\tconst log = {\n\t\tverbose: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"types:library:LibraryFormatter\").returns(log);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst project = {\n\t\tid: \"@foo/bar\",\n\t\tmetadata: {\n\t\t\tname: \"test\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"src\",\n\t\t\t\t\ttest: \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project});\n\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\tsinon.stub(libraryFormatter, \"getNamespace\").resolves(\"namespace\");\n\tsinon.stub(libraryFormatter, \"getCopyright\").resolves(\"copyright\");\n\tsinon.stub(libraryFormatter, \"getPreloadExcludesFromDotLibrary\").resolves(null);\n\n\tawait libraryFormatter.format();\n\n\tt.is(project.builder, undefined);\n\n\tt.is(libraryFormatter.getPreloadExcludesFromDotLibrary.callCount, 0,\n\t\t\"getPreloadExcludesFromDotLibrary should not be called\");\n\n\tt.is(log.verbose.callCount, 1, \"log.verbose should be called once\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Formatting library project %s...\", \"test\"\n\t]);\n});\n\ntest.serial(\"format: No preload exclude fallback when excludes defined in configuration\", async (t) => {\n\tconst log = {\n\t\tverbose: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"types:library:LibraryFormatter\").returns(log);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst project = {\n\t\tid: \"@sapui5/foo\",\n\t\tmetadata: {\n\t\t\tname: \"test\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"src\",\n\t\t\t\t\ttest: \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbuilder: {\n\t\t\tlibraryPreload: {\n\t\t\t\texcludes: [\"test/exclude/**\"]\n\t\t\t}\n\t\t}\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project});\n\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\tsinon.stub(libraryFormatter, \"getNamespace\").resolves(\"namespace\");\n\tsinon.stub(libraryFormatter, \"getCopyright\").resolves(\"copyright\");\n\tsinon.stub(libraryFormatter, \"getPreloadExcludesFromDotLibrary\").resolves(null);\n\n\tawait libraryFormatter.format();\n\n\tt.deepEqual(project.builder.libraryPreload.excludes, [\"test/exclude/**\"],\n\t\t\"Defined excludes should remain untouched\");\n\n\tt.is(libraryFormatter.getPreloadExcludesFromDotLibrary.callCount, 0,\n\t\t\"getPreloadExcludesFromDotLibrary should not be called\");\n\n\tt.is(log.verbose.callCount, 2, \"log.verbose should be called once\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Formatting library project %s...\", \"test\"\n\t]);\n\tt.deepEqual(log.verbose.getCall(1).args, [\n\t\t\"Using preload excludes for framework library test from project configuration\"\n\t]);\n});\n\ntest.serial(\"format: Preload exclude fallback returns null\", async (t) => {\n\tconst log = {\n\t\tverbose: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"types:library:LibraryFormatter\").returns(log);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst project = {\n\t\tid: \"@sapui5/foo\",\n\t\tmetadata: {\n\t\t\tname: \"test\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"src\",\n\t\t\t\t\ttest: \"test\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project});\n\n\tsinon.stub(libraryFormatter, \"validate\").resolves();\n\tsinon.stub(libraryFormatter, \"getNamespace\").resolves(\"namespace\");\n\tsinon.stub(libraryFormatter, \"getCopyright\").resolves(\"copyright\");\n\tsinon.stub(libraryFormatter, \"getPreloadExcludesFromDotLibrary\").resolves(null);\n\n\tawait libraryFormatter.format();\n\n\tt.is(project.builder, undefined);\n\n\tt.is(libraryFormatter.getPreloadExcludesFromDotLibrary.callCount, 1,\n\t\t\"getPreloadExcludesFromDotLibrary should be called once\");\n\n\tt.is(log.verbose.callCount, 2, \"log.verbose should be called twice\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Formatting library project %s...\", \"test\"\n\t]);\n\tt.deepEqual(log.verbose.getCall(1).args, [\n\t\t\"No preload excludes defined in project configuration of framework library test. \" +\n\t\t\"Falling back to .library...\"\n\t]);\n});\n\ntest(\"getDotLibrary: reads correctly\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst {content, fsPath} = await libraryFormatter.getDotLibrary();\n\tt.deepEqual(content.library.name._, \"library.e\", \".library content has been read\");\n\tconst expectedPath = path.join(myProject.path,\n\t\tmyProject.resources.configuration.paths.src, \"library\", \"e\", \".library\");\n\tt.deepEqual(fsPath, expectedPath, \".library fsPath is correct\");\n});\n\ntest.serial(\"getDotLibrary: multiple dot library files\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tmock(\"globby\", function(name) {\n\t\tt.deepEqual(name, \"**/.library\", \"Glob for .library files\");\n\t\treturn Promise.resolve([\"folder1/.library\", \"folder2/.library\"]);\n\t});\n\tmock.reRequire(\"globby\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tconst error = await t.throwsAsync(libraryFormatter.getDotLibrary());\n\tt.deepEqual(error.message, \"Found multiple (2) .library files for project library.e\",\n\t\t\"Rejected with correct error message\");\n\tmock.stop(\"globby\");\n});\n\ntest.serial(\"getDotLibrary: no dot library file\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tmock(\"globby\", function(name) {\n\t\treturn Promise.resolve([]);\n\t});\n\tmock.reRequire(\"globby\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(libraryFormatter.getDotLibrary());\n\tt.deepEqual(error.message, \"Could not find .library file for project library.e\",\n\t\t\"Rejected with correct error message\");\n\tmock.stop(\"globby\");\n});\n\ntest.serial(\"getDotLibrary: result is cached\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\tconst globby = require(\"globby\");\n\tconst globbySpy = sinon.spy(globby);\n\tmock(\"globby\", globbySpy);\n\tmock.reRequire(\"globby\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst {content, fsPath} = await libraryFormatter.getDotLibrary();\n\tt.deepEqual(content.library.name._, \"library.e\", \".library content has been read\");\n\tconst expectedPath = path.join(myProject.path,\n\t\tmyProject.resources.configuration.paths.src, \"library\", \"e\", \".library\");\n\tt.deepEqual(fsPath, expectedPath, \".library fsPath is correct\");\n\n\tconst {content: contentSecondCall, fsPath: fsPathSecondCall} = await libraryFormatter.getDotLibrary();\n\tt.deepEqual(contentSecondCall.library.name._, \"library.e\", \".library content has been read, \" +\n\t\t\"but should be cached now.\");\n\tconst expectedPathSecondCall = path.join(myProject.path,\n\t\tmyProject.resources.configuration.paths.src, \"library\", \"e\", \".library\");\n\tt.deepEqual(fsPathSecondCall, expectedPathSecondCall, \".library fsPath is correct\");\n\n\tt.deepEqual(globbySpy.callCount, 1,\n\t\t\"globby got called exactly once (and then cached)\");\n\tmock.stop(\"globby\");\n});\n\ntest(\"getLibraryJsPath: reads correctly\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst fsPath = await libraryFormatter.getLibraryJsPath();\n\tconst expectedPath = path.join(myProject.path,\n\t\tmyProject.resources.configuration.paths.src, \"library\", \"e\", \"library.js\");\n\tt.deepEqual(fsPath, expectedPath, \".library fsPath is correct\");\n});\n\ntest.serial(\"getLibraryJsPath: multiple dot library files\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tmock(\"globby\", function(name) {\n\t\tt.deepEqual(name, \"**/library.js\", \"Glob for library.js files\");\n\t\treturn Promise.resolve([\"folder1/library.js\", \"folder2/library.js\"]);\n\t});\n\tmock.reRequire(\"globby\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tconst error = await t.throwsAsync(libraryFormatter.getLibraryJsPath());\n\tt.deepEqual(error.message, \"Found multiple (2) library.js files for project library.e\",\n\t\t\"Rejected with correct error message\");\n\tmock.stop(\"globby\");\n});\n\ntest.serial(\"getLibraryJsPath: no dot library file\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tmock(\"globby\", function(name) {\n\t\treturn Promise.resolve([]);\n\t});\n\tmock.reRequire(\"globby\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(libraryFormatter.getLibraryJsPath());\n\tt.deepEqual(error.message, \"Could not find library.js file for project library.e\",\n\t\t\"Rejected with correct error message\");\n\tmock.stop(\"globby\");\n});\n\ntest.serial(\"getLibraryJsPath: result is cached\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\tconst globby = require(\"globby\");\n\tconst globbySpy = sinon.spy(globby);\n\tmock(\"globby\", globbySpy);\n\tmock.reRequire(\"globby\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst fsPath = await libraryFormatter.getLibraryJsPath();\n\tconst expectedPath = path.join(myProject.path,\n\t\tmyProject.resources.configuration.paths.src, \"library\", \"e\", \"library.js\");\n\tt.deepEqual(fsPath, expectedPath, \".library fsPath is correct\");\n\n\tconst fsPathSecondCall = await libraryFormatter.getLibraryJsPath();\n\tconst expectedPathSecondCall = path.join(myProject.path,\n\t\tmyProject.resources.configuration.paths.src, \"library\", \"e\", \"library.js\");\n\tt.deepEqual(fsPathSecondCall, expectedPathSecondCall, \".library fsPath is correct\");\n\n\tt.deepEqual(globbySpy.callCount, 1,\n\t\t\"globby got called exactly once (and then cached)\");\n\tmock.stop(\"globby\");\n});\n\ntest(\"getCopyright: takes copyright from project configuration\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.metadata.copyright = \"unicorn\"; // Simulate configured copyright\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tconst copyright = await libraryFormatter.getCopyright();\n\tt.deepEqual(copyright, \"unicorn\", \"Returned correct copyright\");\n});\n\ntest(\"getCopyright: takes copyright from .library\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\tmyProject.metadata.copyright = undefined; // Simulate unconfigured copyright\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tconst res = await libraryFormatter.getCopyright();\n\tt.deepEqual(res, \"${copyright}\", \"Returned correct copyright\");\n});\n\ntest(\"getCopyright: takes copyright from stubbed .library\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.metadata.copyright = undefined; // Simulate unconfigured copyright\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {copyright: {_: \"pony\"}}\n\t\t},\n\t\tfsPath: \"/some/path\"\n\t});\n\tconst res = await libraryFormatter.getCopyright();\n\tt.deepEqual(res, \"pony\", \"Returned correct copyright\");\n});\n\n\ntest(\"getCopyright: no copyright available\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.metadata.copyright = undefined; // Simulate unconfigured copyright\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {}\n\t\t},\n\t\tfsPath: \"/some/path\"\n\t});\n\tconst err = await t.throwsAsync(libraryFormatter.getCopyright());\n\tt.deepEqual(err.message,\n\t\t\"No copyright configuration found in .library \" +\n\t\t\"of project library.e\",\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"getNamespace: from manifest.json with .library on same level\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({\n\t\tcontent: {\n\t\t\t\"sap.app\": {\n\t\t\t\tid: \"mani-pony\"\n\t\t\t}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/mani-pony/manifest.json\") // normalize for windows\n\t});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {name: \"dot-pony\"}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/mani-pony/.library\") // normalize for windows\n\t});\n\tconst getSourceBasePathStub = sinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst res = await libraryFormatter.getNamespace();\n\tt.deepEqual(getSourceBasePathStub.callCount, 1,\n\t\t\"getSourceBasePath got called once\");\n\tt.deepEqual(getSourceBasePathStub.getCall(0).args[0], true,\n\t\t\"getSourceBasePath called with correct argument\");\n\tt.deepEqual(res, \"mani-pony\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespace: from manifest.json with .library on same level but different directory\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst manifestFsPath = path.normalize(\"/some/path/mani-pony/manifest.json\"); // normalize for windows\n\tconst dotLibraryFsPath = path.normalize(\"/some/path/different-pony/.library\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({\n\t\tcontent: {\n\t\t\t\"sap.app\": {\n\t\t\t\tid: \"mani-pony\"\n\t\t\t}\n\t\t},\n\t\tfsPath: manifestFsPath\n\t});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {name: {_: \"dot-pony\"}}\n\t\t},\n\t\tfsPath: dotLibraryFsPath\n\t});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\n\tconst err = await t.throwsAsync(libraryFormatter.getNamespace());\n\n\tt.deepEqual(err.message,\n\t\t`Failed to detect namespace for project library.e: Found a manifest.json on the same directory level ` +\n\t\t`but in a different directory than the .library file. They should be in the same directory.\\n` +\n\t\t`  manifest.json path: ${manifestFsPath}\\n` +\n\t\t`  is different to\\n` +\n\t\t`  .library path: ${dotLibraryFsPath}`,\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"getNamespace: from manifest.json with not matching file path\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({\n\t\tcontent: {\n\t\t\t\"sap.app\": {\n\t\t\t\tid: \"mani-pony\"\n\t\t\t}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/different/namespace/manifest.json\") // normalize for windows\n\t});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {name: \"dot-pony\"}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/different/namespace/.library\") // normalize for windows\n\t});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst err = await t.throwsAsync(libraryFormatter.getNamespace());\n\n\tt.deepEqual(err.message, `Detected namespace \"mani-pony\" does not match detected directory structure ` +\n\t\t`\"different/namespace\" for project library.e`, \"Rejected with correct error message\");\n});\n\ntest.serial(\"getNamespace: from manifest.json without sap.app id\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst log = require(\"@ui5/logger\");\n\tconst loggerInstance = log.getLogger(\"types:library:LibraryFormatter\");\n\n\tmock(\"@ui5/logger\", {\n\t\tgetLogger: () => loggerInstance\n\t});\n\tmock.reRequire(\"@ui5/logger\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tconst manifestPath = path.normalize(\"/some/path/different/namespace/manifest.json\"); // normalize for windows\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({\n\t\tcontent: {\n\t\t\t\"sap.app\": {\n\t\t\t}\n\t\t},\n\t\tfsPath: manifestPath\n\t});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\n\tconst loggerSpy = sinon.spy(loggerInstance, \"verbose\");\n\tconst err = await t.throwsAsync(libraryFormatter.getNamespace());\n\n\tt.deepEqual(err.message,\n\t\t`Failed to detect namespace or namespace is empty for project library.e. Check verbose log for details.`,\n\t\t\"Rejected with correct error message\");\n\tt.is(loggerSpy.callCount, 4, \"calls to verbose\");\n\n\n\tt.is(loggerSpy.getCall(0).args[0],\n\t\t`No sap.app/id configuration found in manifest.json of project library.e at ${manifestPath}`,\n\t\t\"correct verbose message\");\n\tmock.stop(\"@ui5/logger\");\n});\n\ntest(\"getNamespace: from .library\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").rejects(\"No manifest aint' here\");\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {name: {_: \"dot-pony\"}}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/dot-pony/.library\") // normalize for windows\n\t});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst res = await libraryFormatter.getNamespace();\n\tt.deepEqual(res, \"dot-pony\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespace: from .library with ignored manifest.json on lower level\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({\n\t\tcontent: {\n\t\t\t\"sap.app\": {\n\t\t\t\tid: \"mani-pony\"\n\t\t\t}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/namespace/somedir/manifest.json\") // normalize for windows\n\t});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {name: {_: \"dot-pony\"}}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/dot-pony/.library\") // normalize for windows\n\t});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst res = await libraryFormatter.getNamespace();\n\tt.deepEqual(res, \"dot-pony\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespace: manifest.json on higher level than .library\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst manifestFsPath = path.normalize(\"/some/path/namespace/manifest.json\"); // normalize for windows\n\tconst dotLibraryFsPath = path.normalize(\"/some/path/namespace/morenamespace/.library\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({\n\t\tcontent: {\n\t\t\t\"sap.app\": {\n\t\t\t\tid: \"mani-pony\"\n\t\t\t}\n\t\t},\n\t\tfsPath: manifestFsPath\n\t});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {name: {_: \"dot-pony\"}}\n\t\t},\n\t\tfsPath: dotLibraryFsPath\n\t});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst err = await t.throwsAsync(libraryFormatter.getNamespace());\n\n\tt.deepEqual(err.message,\n\t\t`Failed to detect namespace for project library.e: ` +\n\t\t`Found a manifest.json on a higher directory level than the .library file. ` +\n\t\t`It should be on the same or a lower level. ` +\n\t\t`Note that a manifest.json on a lower level will be ignored.\\n` +\n\t\t`  manifest.json path: ${manifestFsPath}\\n` +\n\t\t`  is higher than\\n` +\n\t\t`  .library path: ${dotLibraryFsPath}`,\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"getNamespace: from .library with maven placeholder\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").rejects(\"No manifest aint' here\");\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {name: {_: \"${mvn-pony}\"}}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/mvn-unicorn/.library\") // normalize for windows\n\t});\n\tconst resolveMavenPlaceholderStub =\n\t\tsinon.stub(libraryFormatter, \"resolveMavenPlaceholder\").resolves(\"mvn-unicorn\");\n\tconst getSourceBasePathStub = sinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst res = await libraryFormatter.getNamespace();\n\n\tt.deepEqual(resolveMavenPlaceholderStub.getCall(0).args[0], \"${mvn-pony}\",\n\t\t\"resolveMavenPlaceholder called with correct argument\");\n\tt.deepEqual(getSourceBasePathStub.getCall(0).args[0], true,\n\t\t\"getSourceBasePath called with correct argument\");\n\tt.deepEqual(res, \"mvn-unicorn\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespace: from .library with not matching file path\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").rejects(\"No manifest aint' here\");\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {name: {_: \"mvn-pony\"}}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/different/namespace/.library\") // normalize for windows\n\t});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst err = await t.throwsAsync(libraryFormatter.getNamespace());\n\n\tt.deepEqual(err.message, `Detected namespace \"mvn-pony\" does not match detected directory structure ` +\n\t\t`\"different/namespace\" for project library.e`,\n\t\"Rejected with correct error message\");\n});\n\ntest(\"getNamespace: from library.js\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({});\n\tsinon.stub(libraryFormatter, \"getLibraryJsPath\").resolves(path.normalize(\"/some/path/my/namespace/library.js\"));\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst res = await libraryFormatter.getNamespace();\n\tt.deepEqual(res, \"my/namespace\", \"Returned correct namespace\");\n});\n\ntest.serial(\"getNamespace: from project root level library.js\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst log = require(\"@ui5/logger\");\n\tconst loggerInstance = log.getLogger(\"types:library:LibraryFormatter\");\n\n\tmock(\"@ui5/logger\", {\n\t\tgetLogger: () => loggerInstance\n\t});\n\tmock.reRequire(\"@ui5/logger\");\n\tconst loggerSpy = sinon.spy(loggerInstance, \"verbose\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({});\n\tsinon.stub(libraryFormatter, \"getLibraryJsPath\").resolves(path.normalize(\"/some/path/library.js\"));\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\tconst err = await t.throwsAsync(libraryFormatter.getNamespace());\n\n\tt.deepEqual(err.message,\n\t\t\"Failed to detect namespace or namespace is empty for project library.e. Check verbose log for details.\",\n\t\t\"Rejected with correct error message\");\n\n\tconst logCalls = loggerSpy.getCalls().map((call) => call.args[0]);\n\tt.true(logCalls.includes(\n\t\t\"Namespace resolution from library.js file path failed for project library.e: \" +\n\t\t\"Found library.js file in root directory. \" +\n\t\t\"Expected it to be in namespace directory.\"),\n\t\"should contain message for root level library.js\");\n\n\tmock.stop(\"@ui5/logger\");\n});\n\ntest(\"getNamespace: neither manifest nor .library or library.js path contain it\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({});\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({});\n\tsinon.stub(libraryFormatter, \"getLibraryJsPath\").rejects(new Error(\"Not found bla\"));\n\tconst err = await t.throwsAsync(libraryFormatter.getNamespace());\n\tt.deepEqual(err.message,\n\t\t\"Failed to detect namespace or namespace is empty for project library.e. Check verbose log for details.\",\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"getNamespace: maven placeholder resolution fails\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getManifest\").resolves({\n\t\tcontent: {\n\t\t\t\"sap.app\": {\n\t\t\t\tid: \"${mvn-pony}\"\n\t\t\t}\n\t\t},\n\t\tfsPath: path.normalize(\"/some/path/not/used\") // normalize for windows\n\t});\n\tconst resolveMavenPlaceholderStub =\n\t\tsinon.stub(libraryFormatter, \"resolveMavenPlaceholder\")\n\t\t\t.rejects(new Error(\"because squirrel\"));\n\tconst err = await t.throwsAsync(libraryFormatter.getNamespace());\n\tt.deepEqual(resolveMavenPlaceholderStub.getCall(0).args[0], \"${mvn-pony}\",\n\t\t\"resolveMavenPlaceholder called with correct argument\");\n\tt.deepEqual(err.message,\n\t\t\"Failed to resolve namespace maven placeholder of project library.e: because squirrel\",\n\t\t\"Rejected with correct error message\");\n});\n\ntest(\"getManifest: reads correctly\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst {content, fsPath} = await libraryFormatter.getManifest();\n\tt.deepEqual(content._version, \"1.1.0\", \"manifest.json content has been read\");\n\tconst expectedPath = path.join(libraryEPath, \"src\", \"library\", \"e\", \"manifest.json\");\n\tt.deepEqual(fsPath, expectedPath, \"Correct manifest.json path returned\");\n});\n\ntest.serial(\"getManifest: invalid JSON\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, undefined, \"pony\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(libraryFormatter.getManifest());\n\tt.deepEqual(error.message,\n\t\t\"Failed to read manifest.json for project library.e: \" +\n\t\t\"Unexpected token p in JSON at position 0\",\n\t\t\"Rejected with correct error message\");\n\tt.deepEqual(readFileStub.callCount, 1, \"fs.read got called once\");\n\tconst expectedPath = path.join(libraryEPath, \"src\", \"library\", \"e\", \"manifest.json\");\n\tt.deepEqual(readFileStub.getCall(0).args[0], expectedPath, \"fs.read got called with the correct argument\");\n});\n\ntest.serial(\"getManifest: fs read error\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, new Error(\"EPON: Pony Error\"));\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(libraryFormatter.getManifest());\n\tt.deepEqual(error.message,\n\t\t\"Failed to read manifest.json for project library.e: \" +\n\t\t\"EPON: Pony Error\",\n\t\t\"Rejected with correct error message\");\n\tt.deepEqual(readFileStub.callCount, 1, \"fs.read got called once\");\n\tconst expectedPath = path.join(libraryEPath, \"src\", \"library\", \"e\", \"manifest.json\");\n\tt.deepEqual(readFileStub.getCall(0).args[0], expectedPath, \"fs.read got called with the correct argument\");\n});\n\ntest.serial(\"getManifest: multiple manifest.json files\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tmock(\"globby\", function(name) {\n\t\tt.deepEqual(name, \"**/manifest.json\", \"Glob for .library files\");\n\t\treturn Promise.resolve([\"folder1/.library\", \"folder2/.library\"]);\n\t});\n\tmock.reRequire(\"globby\");\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tconst error = await t.throwsAsync(libraryFormatter.getManifest());\n\tt.deepEqual(error.message, \"Found multiple (2) manifest.json files for project library.e\",\n\t\t\"Rejected with correct error message\");\n\tmock.stop(\"globby\");\n});\n\n\ntest.serial(\"getManifest: result is cached\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst readFileStub = sinon.stub(fs, \"readFile\").callsArgWithAsync(1, undefined,\n\t\t`{\"pony\": \"no unicorn\"}`);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\n\tconst expectedPath = path.join(libraryEPath, \"src\", \"library\", \"e\", \"manifest.json\");\n\tconst {content, fsPath} = await libraryFormatter.getManifest();\n\n\tt.deepEqual(readFileStub.callCount, 1, \"fs.read got called exactly once (and then cached)\");\n\tt.deepEqual(content, {pony: \"no unicorn\"}, \"Correct result on first call\");\n\tt.deepEqual(fsPath, expectedPath, \"Correct manifest.json path returned on first call\");\n\tconst {content: content2, fsPath: fsPath2} = await libraryFormatter.getManifest(); // normalize for windows\n\tt.deepEqual(content2, {pony: \"no unicorn\"}, \"Correct result on second call\");\n\tt.deepEqual(fsPath2, expectedPath, \"Correct manifest.json path returned on second call\");\n});\n\ntest(\"getNamespaceFromFsPath: fsPath w/ trailing slash + base path w/ trailing slash\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\n\tconst fsPath = \"/some/path/my/namespace/\";\n\tconst res = libraryFormatter.getNamespaceFromFsPath(fsPath);\n\tt.deepEqual(res, \"my/namespace\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromFsPath: fsPath w/o trailing slash + base path w/ trailing slash\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\n\tconst fsPath = \"/some/path/my/namespace\";\n\tconst res = libraryFormatter.getNamespaceFromFsPath(fsPath);\n\tt.deepEqual(res, \"my/namespace\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromFsPath: fsPath w/ trailing slash + base path w/o trailing slash\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path\");\n\n\tconst fsPath = \"/some/path/my/namespace/\";\n\tconst res = libraryFormatter.getNamespaceFromFsPath(fsPath);\n\tt.deepEqual(res, \"my/namespace\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromFsPath: fsPath w/o trailing slash + base path w/o trailing slash\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path\");\n\n\tconst fsPath = \"/some/path/my/namespace\";\n\tconst res = libraryFormatter.getNamespaceFromFsPath(fsPath);\n\tt.deepEqual(res, \"my/namespace\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromFsPath: equal paths: fsPath w/ trailing slash + base path w/ trailing slash\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\n\tconst fsPath = \"/some/path/\";\n\tconst res = libraryFormatter.getNamespaceFromFsPath(fsPath);\n\tt.deepEqual(res, \"\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromFsPath: equal paths: fsPath w/o trailing slash + base path w/ trailing slash\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path/\");\n\n\tconst fsPath = \"/some/path\";\n\tconst res = libraryFormatter.getNamespaceFromFsPath(fsPath);\n\tt.deepEqual(res, \"\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromFsPath: equal paths: fsPath w/ trailing slash + base path w/o trailing slash\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path\");\n\n\tconst fsPath = \"/some/path/\";\n\tconst res = libraryFormatter.getNamespaceFromFsPath(fsPath);\n\tt.deepEqual(res, \"\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromFsPath: equal paths: fsPath w/o trailing slash + base path w/o trailing slash\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path\");\n\n\tconst fsPath = \"/some/path\";\n\tconst res = libraryFormatter.getNamespaceFromFsPath(fsPath);\n\tt.deepEqual(res, \"\", \"Returned correct namespace\");\n});\n\ntest(\"getNamespaceFromFsPath: fsPath is not based on base path\", async (t) => {\n\tconst myProject = clone(libraryETree);\n\tmyProject.resources.pathMappings = {\n\t\t\"/resources/\": myProject.resources.configuration.paths.src\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project: myProject});\n\tsinon.stub(libraryFormatter, \"getSourceBasePath\").returns(\"/some/path\");\n\n\tconst fsPath = \"/some/different/path\";\n\tconst err = t.throws(() => libraryFormatter.getNamespaceFromFsPath(fsPath));\n\tt.deepEqual(err.message, `Given file system path /some/different/path is not based on source base ` +\n\t\t`path /some/path.`,\n\t\"Threw with correct error message\");\n});\n\ntest.serial(\"getPreloadExcludesFromDotLibrary: No excludes\", async (t) => {\n\tconst log = {\n\t\tverbose: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"types:library:LibraryFormatter\").returns(log);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst project = {\n\t\tmetadata: {\n\t\t\tname: \"test\"\n\t\t}\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project});\n\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {library: {}},\n\t\tfsPath: \"/path/to/.library\"\n\t});\n\n\tconst excludes = await libraryFormatter.getPreloadExcludesFromDotLibrary();\n\n\tt.is(excludes, null, \"getPreloadExcludesFromDotLibrary should return 'null' when there are no excludes\");\n\n\tt.is(log.verbose.callCount, 1, \"log.verbose should be called once\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"No preload excludes found in .library of project test at /path/to/.library\"\n\t]);\n});\n\ntest.serial(\"getPreloadExcludesFromDotLibrary: One exclude\", async (t) => {\n\tconst log = {\n\t\tverbose: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"types:library:LibraryFormatter\").returns(log);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst project = {\n\t\tmetadata: {\n\t\t\tname: \"test\"\n\t\t}\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project});\n\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {\n\t\t\t\tappData: {\n\t\t\t\t\tpackaging: {\n\t\t\t\t\t\t\"all-in-one\": {\n\t\t\t\t\t\t\texclude: {\n\t\t\t\t\t\t\t\t$: {\n\t\t\t\t\t\t\t\t\tname: \"test/exclude/**\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfsPath: \"/path/to/.library\"\n\t});\n\n\tconst excludes = await libraryFormatter.getPreloadExcludesFromDotLibrary();\n\n\tt.deepEqual(excludes, [\"test/exclude/**\"],\n\t\t\"getPreloadExcludesFromDotLibrary should return array with excludes\");\n\n\tt.is(log.verbose.callCount, 1, \"log.verbose should be called once\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Found 1 preload excludes in .library file of project test at /path/to/.library\"\n\t]);\n});\n\ntest.serial(\"getPreloadExcludesFromDotLibrary: Multiple excludes\", async (t) => {\n\tconst log = {\n\t\tverbose: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"types:library:LibraryFormatter\").returns(log);\n\n\tconst LibraryFormatter = mock.reRequire(\"../../../../lib/types/library/LibraryFormatter\");\n\n\tconst project = {\n\t\tmetadata: {\n\t\t\tname: \"test\"\n\t\t}\n\t};\n\n\tconst libraryFormatter = new LibraryFormatter({project});\n\n\tsinon.stub(libraryFormatter, \"getDotLibrary\").resolves({\n\t\tcontent: {\n\t\t\tlibrary: {\n\t\t\t\tappData: {\n\t\t\t\t\tpackaging: {\n\t\t\t\t\t\t\"all-in-one\": {\n\t\t\t\t\t\t\texclude: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$: {\n\t\t\t\t\t\t\t\t\t\tname: \"test/exclude1/**\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$: {\n\t\t\t\t\t\t\t\t\t\tname: \"test/exclude2/**\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$: {\n\t\t\t\t\t\t\t\t\t\tname: \"test/exclude3/**\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfsPath: \"/path/to/.library\"\n\t});\n\n\tconst excludes = await libraryFormatter.getPreloadExcludesFromDotLibrary();\n\n\tt.deepEqual(excludes, [\n\t\t\"test/exclude1/**\",\n\t\t\"test/exclude2/**\",\n\t\t\"test/exclude3/**\"\n\t], \"getPreloadExcludesFromDotLibrary should return array with excludes\");\n\n\tt.is(log.verbose.callCount, 1, \"log.verbose should be called once\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Found 3 preload excludes in .library file of project test at /path/to/.library\"\n\t]);\n});\n",
    "test/lib/types/themeLibrary/ThemeLibraryBuilder.js": "const test = require(\"ava\");\n\nconst ThemeLibraryBuilder = require(\"../../../../lib/types/themeLibrary/ThemeLibraryBuilder\");\n\ntest(\"tasks\", async (t) => {\n\tconst themeLibraryBuilder = new ThemeLibraryBuilder({\n\t\tresourceCollections: {\n\t\t\tworkspace: {\n\t\t\t\tbyGlob: async () => {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbuildContext: {\n\t\t\tisRootProject: () => {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\tproject: {\n\t\t\tmetadata: {\n\t\t\t\tname: \"name\",\n\t\t\t\tcopyright: \"copyright\"\n\t\t\t},\n\t\t\ttype: \"type\"\n\t\t},\n\t\tparentLogger: {\n\t\t\tcreateSubLogger: () => {\n\t\t\t\treturn {\n\t\t\t\t\tcreateTaskLogger: () => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\taddWork: () => undefined,\n\t\t\t\t\t\t\tstartWork: () => undefined,\n\t\t\t\t\t\t\tcompleteWork: () => undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\ttaskUtil: {\n\t\t\tisRootProject: () => {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t});\n\n\tconst taskNames = Object.keys(themeLibraryBuilder.tasks);\n\tt.deepEqual(taskNames, [\n\t\t\"replaceCopyright\",\n\t\t\"replaceVersion\",\n\t\t\"buildThemes\",\n\t\t\"generateThemeDesignerResources\",\n\t\t\"generateResourcesJson\",\n\t], \"Expected tasks have been added\");\n\n\tawait themeLibraryBuilder.build(taskNames);\n});\n",
    "lib/builder/BuildContext.js": "const ProjectBuildContext = require(\"./ProjectBuildContext\");\n\n/**\n * Context of a build process\n *\n * @private\n * @memberof module:@ui5/builder.builder\n */\nclass BuildContext {\n\tconstructor({rootProject}) {\n\t\tif (!rootProject) {\n\t\t\tthrow new Error(`Missing parameter 'rootProject'`);\n\t\t}\n\t\tthis.rootProject = rootProject;\n\t\tthis.projectBuildContexts = [];\n\t}\n\n\tgetRootProject() {\n\t\treturn this.rootProject;\n\t}\n\n\tcreateProjectContext({project, resources}) {\n\t\tconst projectBuildContext = new ProjectBuildContext({\n\t\t\tbuildContext: this,\n\t\t\tproject,\n\t\t\tresources\n\t\t});\n\t\tthis.projectBuildContexts.push(projectBuildContext);\n\t\treturn projectBuildContext;\n\t}\n\n\tasync executeCleanupTasks() {\n\t\tawait Promise.all(this.projectBuildContexts.map((ctx) => {\n\t\t\treturn ctx.executeCleanupTasks();\n\t\t}));\n\t}\n}\n\nmodule.exports = BuildContext;\n",
    "lib/builder/ProjectBuildContext.js": "const ResourceTagCollection = require(\"@ui5/fs\").ResourceTagCollection;\n\nconst STANDARD_TAGS = Object.freeze({\n\tOmitFromBuildResult: \"ui5:OmitFromBuildResult\",\n\tIsBundle: \"ui5:IsBundle\"\n});\n\n/**\n * Build context of a single project. Always part of an overall\n * [Build Context]{@link module:@ui5/builder.builder.BuildContext}\n *\n * @private\n * @memberof module:@ui5/builder.builder\n */\nclass ProjectBuildContext {\n\tconstructor({buildContext, project, resources}) {\n\t\tif (!buildContext || !project || !resources) {\n\t\t\tthrow new Error(`One or more mandatory parameters are missing`);\n\t\t}\n\t\tthis._buildContext = buildContext;\n\t\tthis._project = project;\n\t\t// this.resources = resources;\n\t\tthis.queues = {\n\t\t\tcleanup: []\n\t\t};\n\n\t\tthis.STANDARD_TAGS = STANDARD_TAGS;\n\n\t\tthis._resourceTagCollection = new ResourceTagCollection({\n\t\t\tallowedTags: Object.values(this.STANDARD_TAGS)\n\t\t});\n\t}\n\n\tisRootProject() {\n\t\treturn this._project === this._buildContext.getRootProject();\n\t}\n\n\tregisterCleanupTask(callback) {\n\t\tthis.queues.cleanup.push(callback);\n\t}\n\n\tasync executeCleanupTasks() {\n\t\tawait Promise.all(this.queues.cleanup.map((callback) => {\n\t\t\treturn callback();\n\t\t}));\n\t}\n\n\tgetResourceTagCollection() {\n\t\treturn this._resourceTagCollection;\n\t}\n}\n\nmodule.exports = ProjectBuildContext;\n",
    "lib/builder/builder.js": "const {promisify} = require(\"util\");\nconst rimraf = promisify(require(\"rimraf\"));\nconst log = require(\"@ui5/logger\").getGroupLogger(\"builder:builder\");\nconst resourceFactory = require(\"@ui5/fs\").resourceFactory;\nconst MemAdapter = require(\"@ui5/fs\").adapters.Memory;\nconst typeRepository = require(\"../types/typeRepository\");\nconst taskRepository = require(\"../tasks/taskRepository\");\nconst BuildContext = require(\"./BuildContext\");\n\n\n// Set of tasks for development\nconst devTasks = [\n\t\"replaceCopyright\",\n\t\"replaceVersion\",\n\t\"buildThemes\"\n];\n\n/**\n * Calculates the elapsed build time and returns a prettified output\n *\n * @private\n * @param {Array} startTime Array provided by <code>process.hrtime()</code>\n * @returns {string} Difference between now and the provided time array as formatted string\n */\nfunction getElapsedTime(startTime) {\n\tconst prettyHrtime = require(\"pretty-hrtime\");\n\tconst timeDiff = process.hrtime(startTime);\n\treturn prettyHrtime(timeDiff);\n}\n\n/**\n * Creates the list of tasks to be executed by the build process\n *\n * Sets specific tasks to be disabled by default, these tasks need to be included explicitly.\n * Based on the selected build mode (dev|selfContained|preload), different tasks are enabled.\n * Tasks can be enabled or disabled. The wildcard <code>*</code> is also supported and affects all tasks.\n *\n * @private\n * @param {object} parameters\n * @param {boolean} parameters.dev Sets development mode, which only runs essential tasks\n * @param {boolean} parameters.selfContained\n *\t\t\tTrue if a the build should be self-contained or false for prelead build bundles\n * @param {boolean} parameters.jsdoc True if a JSDoc build should be executed\n * @param {Array} parameters.includedTasks Task list to be included from build\n * @param {Array} parameters.excludedTasks Task list to be excluded from build\n * @returns {Array} Return a task list for the builder\n */\nfunction composeTaskList({dev, selfContained, jsdoc, includedTasks, excludedTasks}) {\n\tconst definedTasks = taskRepository.getAllTaskNames();\n\tlet selectedTasks = definedTasks.reduce((list, key) => {\n\t\tlist[key] = true;\n\t\treturn list;\n\t}, {});\n\n\t// Exclude non default tasks\n\tselectedTasks.generateManifestBundle = false;\n\tselectedTasks.generateStandaloneAppBundle = false;\n\tselectedTasks.transformBootstrapHtml = false;\n\tselectedTasks.generateJsdoc = false;\n\tselectedTasks.executeJsdocSdkTransformation = false;\n\tselectedTasks.generateCachebusterInfo = false;\n\tselectedTasks.generateApiIndex = false;\n\tselectedTasks.generateThemeDesignerResources = false;\n\n\t// Disable generateResourcesJson due to performance.\n\t// When executed it analyzes each module's AST and therefore\n\t// takes up much time (~10% more)\n\tselectedTasks.generateResourcesJson = false;\n\n\tif (selfContained) {\n\t\t// No preloads, bundle only\n\t\tselectedTasks.generateComponentPreload = false;\n\t\tselectedTasks.generateStandaloneAppBundle = true;\n\t\tselectedTasks.transformBootstrapHtml = true;\n\t\tselectedTasks.generateLibraryPreload = false;\n\t}\n\n\t// TODO 3.0: exclude generateVersionInfo if not --all is used\n\n\tif (jsdoc) {\n\t\t// Include JSDoc tasks\n\t\tselectedTasks.generateJsdoc = true;\n\t\tselectedTasks.executeJsdocSdkTransformation = true;\n\t\tselectedTasks.generateApiIndex = true;\n\n\t\t// Include theme build as required for SDK\n\t\tselectedTasks.buildThemes = true;\n\n\t\t// Exclude all tasks not relevant to JSDoc generation\n\t\tselectedTasks.replaceCopyright = false;\n\t\tselectedTasks.replaceVersion = false;\n\t\tselectedTasks.generateComponentPreload = false;\n\t\tselectedTasks.generateLibraryPreload = false;\n\t\tselectedTasks.generateLibraryManifest = false;\n\t\tselectedTasks.createDebugFiles = false;\n\t\tselectedTasks.uglify = false;\n\t\tselectedTasks.generateFlexChangesBundle = false;\n\t\tselectedTasks.generateManifestBundle = false;\n\t}\n\n\t// Only run essential tasks in development mode, it is not desired to run time consuming tasks during development.\n\tif (dev) {\n\t\t// Overwrite all other tasks with noop promise\n\t\tObject.keys(selectedTasks).forEach((key) => {\n\t\t\tif (devTasks.indexOf(key) === -1) {\n\t\t\t\tselectedTasks[key] = false;\n\t\t\t}\n\t\t});\n\t}\n\n\t// Exclude tasks\n\tfor (let i = 0; i < excludedTasks.length; i++) {\n\t\tconst taskName = excludedTasks[i];\n\t\tif (taskName === \"*\") {\n\t\t\tObject.keys(selectedTasks).forEach((sKey) => {\n\t\t\t\tselectedTasks[sKey] = false;\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tif (selectedTasks[taskName] === true) {\n\t\t\tselectedTasks[taskName] = false;\n\t\t} else if (typeof selectedTasks[taskName] === \"undefined\") {\n\t\t\tlog.warn(`Unable to exclude task '${taskName}': Task is unknown`);\n\t\t}\n\t}\n\n\t// Include tasks\n\tfor (let i = 0; i < includedTasks.length; i++) {\n\t\tconst taskName = includedTasks[i];\n\t\tif (taskName === \"*\") {\n\t\t\tObject.keys(selectedTasks).forEach((sKey) => {\n\t\t\t\tselectedTasks[sKey] = true;\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tif (selectedTasks[taskName] === false) {\n\t\t\tselectedTasks[taskName] = true;\n\t\t} else if (typeof selectedTasks[taskName] === \"undefined\") {\n\t\t\tlog.warn(`Unable to include task '${taskName}': Task is unknown`);\n\t\t}\n\t}\n\n\t// Filter only for tasks that will be executed\n\tselectedTasks = Object.keys(selectedTasks).filter((task) => selectedTasks[task]);\n\n\treturn selectedTasks;\n}\n\nasync function executeCleanupTasks(buildContext) {\n\tlog.info(\"Executing cleanup tasks...\");\n\tawait buildContext.executeCleanupTasks();\n}\n\nfunction registerCleanupSigHooks(buildContext) {\n\tfunction createListener(exitCode) {\n\t\treturn function() {\n\t\t\t// Asynchronously cleanup resources, then exit\n\t\t\texecuteCleanupTasks(buildContext).then(() => {\n\t\t\t\tprocess.exit(exitCode);\n\t\t\t});\n\t\t};\n\t}\n\n\tconst processSignals = {\n\t\t\"SIGHUP\": createListener(128 + 1),\n\t\t\"SIGINT\": createListener(128 + 2),\n\t\t\"SIGTERM\": createListener(128 + 15),\n\t\t\"SIGBREAK\": createListener(128 + 21)\n\t};\n\n\tfor (const signal of Object.keys(processSignals)) {\n\t\tprocess.on(signal, processSignals[signal]);\n\t}\n\n\t// == TO BE DISCUSSED: Also cleanup for unhandled rejections and exceptions?\n\t// Add additional events like signals since they are registered on the process\n\t//\tevent emitter in a similar fashion\n\t// processSignals[\"unhandledRejection\"] = createListener(1);\n\t// process.once(\"unhandledRejection\", processSignals[\"unhandledRejection\"]);\n\t// processSignals[\"uncaughtException\"] = function(err, origin) {\n\t// \tconst fs = require(\"fs\");\n\t// \tfs.writeSync(\n\t// \t\tprocess.stderr.fd,\n\t// \t\t`Caught exception: ${err}\\n` +\n\t// \t\t`Exception origin: ${origin}`\n\t// \t);\n\t// \tcreateListener(1)();\n\t// };\n\t// process.once(\"uncaughtException\", processSignals[\"uncaughtException\"]);\n\n\treturn processSignals;\n}\n\nfunction deregisterCleanupSigHooks(signals) {\n\tfor (const signal of Object.keys(signals)) {\n\t\tprocess.removeListener(signal, signals[signal]);\n\t}\n}\n\n/**\n * Builder\n *\n * @public\n * @namespace\n * @alias module:@ui5/builder.builder\n */\nmodule.exports = {\n\t/**\n\t * Configures the project build and starts it.\n\t *\n\t * @public\n\t * @param {object} parameters Parameters\n\t * @param {object} parameters.tree Project tree as generated by the\n\t * \t\t\t\t\t\t\t\t\t[@ui5/project.normalizer]{@link module:@ui5/project.normalizer}\n\t * @param {string} parameters.destPath Target path\n\t * @param {boolean} [parameters.cleanDest=false] Decides whether project should clean the target path before build\n\t * @param {boolean} [parameters.buildDependencies=false] Decides whether project dependencies are built as well\n\t * @param {Array.<string|RegExp>} [parameters.includedDependencies=[]]\n\t *\t\t\tList of build dependencies to be included if buildDependencies is true\n\t * @param {Array.<string|RegExp>} [parameters.excludedDependencies=[]]\n\t *\t\t\tList of build dependencies to be excluded if buildDependencies is true.\n\t *\t\t\tIf the wildcard '*' is provided, only the included dependencies will be built.\n\t * @param {boolean} [parameters.dev=false]\n\t *\t\t\tDecides whether a development build should be activated (skips non-essential and time-intensive tasks)\n\t * @param {boolean} [parameters.selfContained=false] Flag to activate self contained build\n\t * @param {boolean} [parameters.jsdoc=false] Flag to activate JSDoc build\n\t * @param {Array.<string>} [parameters.includedTasks=[]] List of tasks to be included\n\t * @param {Array.<string>} [parameters.excludedTasks=[]] List of tasks to be excluded.\n\t * \t\t\t\t\t\t\tIf the wildcard '*' is provided, only the included tasks will be executed.\n\t * @param {Array.<string>} [parameters.devExcludeProject=[]] List of projects to be excluded from development build\n\t * @returns {Promise} Promise resolving to <code>undefined</code> once build has finished\n\t */\n\tasync build({\n\t\ttree, destPath, cleanDest = false,\n\t\tbuildDependencies = false, includedDependencies = [], excludedDependencies = [],\n\t\tdev = false, selfContained = false, jsdoc = false,\n\t\tincludedTasks = [], excludedTasks = [], devExcludeProject = []\n\t}) {\n\t\tconst startTime = process.hrtime();\n\t\tlog.info(`Building project ${tree.metadata.name}` + (buildDependencies ? \"\" : \" not\") +\n\t\t\t\" including dependencies...\" + (dev ? \" [dev mode]\" : \"\"));\n\t\tlog.verbose(`Building to ${destPath}...`);\n\n\t\tconst selectedTasks = composeTaskList({dev, selfContained, jsdoc, includedTasks, excludedTasks});\n\n\t\tconst fsTarget = resourceFactory.createAdapter({\n\t\t\tfsBasePath: destPath,\n\t\t\tvirBasePath: \"/\"\n\t\t});\n\n\t\tconst buildContext = new BuildContext({rootProject: tree});\n\t\tconst cleanupSigHooks = registerCleanupSigHooks(buildContext);\n\n\t\tconst projects = {}; // Unique project index to prevent building the same project multiple times\n\t\tconst projectWriters = {}; // Collection of memory adapters of already built libraries\n\t\tfunction projectFilter(project) {\n\t\t\tfunction projectMatchesAny(deps) {\n\t\t\t\treturn deps.some((dep) => dep instanceof RegExp ?\n\t\t\t\t\tdep.test(project.metadata.name) : dep === project.metadata.name);\n\t\t\t}\n\n\t\t\t// if everything is included, this overrules exclude lists\n\t\t\tif (includedDependencies.includes(\"*\")) return true;\n\t\t\tlet test = !excludedDependencies.includes(\"*\"); // exclude everything?\n\n\t\t\tif (test && projectMatchesAny(excludedDependencies)) {\n\t\t\t\ttest = false;\n\t\t\t}\n\t\t\tif (!test && projectMatchesAny(includedDependencies)) {\n\t\t\t\ttest = true;\n\t\t\t}\n\n\t\t\treturn test;\n\t\t}\n\n\t\tconst projectCountMarker = {};\n\t\tfunction projectCount(project, count = 0) {\n\t\t\tif (buildDependencies) {\n\t\t\t\tcount = project.dependencies.filter(projectFilter).reduce((depCount, depProject) => {\n\t\t\t\t\treturn projectCount(depProject, depCount);\n\t\t\t\t}, count);\n\t\t\t}\n\t\t\tif (!projectCountMarker[project.metadata.name]) {\n\t\t\t\tcount++;\n\t\t\t\tprojectCountMarker[project.metadata.name] = true;\n\t\t\t}\n\t\t\treturn count;\n\t\t}\n\t\tconst buildLogger = log.createTaskLogger(\"🛠 \", projectCount(tree));\n\n\t\tfunction buildProject(project) {\n\t\t\tlet depPromise;\n\t\t\tlet projectTasks = selectedTasks;\n\n\t\t\t// Build dependencies in sequence as it is far easier to detect issues and reduces\n\t\t\t// side effects or other issues such as too many open files\n\t\t\tif (buildDependencies) {\n\t\t\t\tdepPromise = project.dependencies.filter(projectFilter).reduce(function(p, depProject) {\n\t\t\t\t\treturn p.then(() => buildProject(depProject));\n\t\t\t\t}, Promise.resolve());\n\t\t\t} else {\n\t\t\t\tdepPromise = Promise.resolve();\n\t\t\t}\n\n\t\t\t// Build the project after all dependencies have been built\n\t\t\treturn depPromise.then(() => {\n\t\t\t\tif (projects[project.metadata.name]) {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t} else {\n\t\t\t\t\tprojects[project.metadata.name] = true;\n\t\t\t\t}\n\t\t\t\tbuildLogger.startWork(`Building project ${project.metadata.name}`);\n\n\t\t\t\tconst projectType = typeRepository.getType(project.type);\n\t\t\t\tconst resourceCollections = resourceFactory.createCollectionsForTree(project, {\n\t\t\t\t\tvirtualReaders: projectWriters,\n\t\t\t\t\tgetVirtualBasePathPrefix: function({project, virBasePath}) {\n\t\t\t\t\t\tif (project.type === \"application\" && project.metadata.namespace) {\n\t\t\t\t\t\t\treturn \"/resources/\" + project.metadata.namespace;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tgetProjectExcludes: function(project) {\n\t\t\t\t\t\tif (project.builder && project.builder.resources) {\n\t\t\t\t\t\t\treturn project.builder.resources.excludes;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst writer = new MemAdapter({\n\t\t\t\t\tvirBasePath: \"/\"\n\t\t\t\t});\n\t\t\t\t// Store project writer as virtual reader for parent projects\n\t\t\t\t//\tso they can access the build results of this project\n\t\t\t\tprojectWriters[project.metadata.name] = writer;\n\n\t\t\t\t// TODO: Add getter for writer of DuplexColection\n\t\t\t\tconst workspace = resourceFactory.createWorkspace({\n\t\t\t\t\tvirBasePath: \"/\",\n\t\t\t\t\twriter,\n\t\t\t\t\treader: resourceCollections.source,\n\t\t\t\t\tname: project.metadata.name\n\t\t\t\t});\n\n\t\t\t\tconst projectContext = buildContext.createProjectContext({\n\t\t\t\t\tproject, // TODO 2.0: Add project facade object/instance here\n\t\t\t\t\tresources: {\n\t\t\t\t\t\tworkspace,\n\t\t\t\t\t\tdependencies: resourceCollections.dependencies\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst TaskUtil = require(\"../tasks/TaskUtil\");\n\t\t\t\tconst taskUtil = new TaskUtil({\n\t\t\t\t\tprojectBuildContext: projectContext\n\t\t\t\t});\n\n\t\t\t\tif (dev && devExcludeProject.indexOf(project.metadata.name) !== -1) {\n\t\t\t\t\tprojectTasks = composeTaskList({dev: false, selfContained, includedTasks, excludedTasks});\n\t\t\t\t}\n\n\t\t\t\treturn projectType.build({\n\t\t\t\t\tresourceCollections: {\n\t\t\t\t\t\tworkspace,\n\t\t\t\t\t\tdependencies: resourceCollections.dependencies\n\t\t\t\t\t},\n\t\t\t\t\ttasks: projectTasks,\n\t\t\t\t\tproject,\n\t\t\t\t\tparentLogger: log,\n\t\t\t\t\ttaskUtil\n\t\t\t\t}).then(() => {\n\t\t\t\t\tlog.verbose(\"Finished building project %s. Writing out files...\", project.metadata.name);\n\t\t\t\t\tbuildLogger.completeWork(1);\n\n\t\t\t\t\treturn workspace.byGlob(\"/**/*.*\").then((resources) => {\n\t\t\t\t\t\tconst tagCollection = projectContext.getResourceTagCollection();\n\t\t\t\t\t\treturn Promise.all(resources.map((resource) => {\n\t\t\t\t\t\t\tif (tagCollection.getTag(resource, projectContext.STANDARD_TAGS.OmitFromBuildResult)) {\n\t\t\t\t\t\t\t\tlog.verbose(`Skipping write of resource tagged as \"OmitFromBuildResult\": ` +\n\t\t\t\t\t\t\t\t\tresource.getPath());\n\t\t\t\t\t\t\t\treturn; // Skip target write for this resource\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (projectContext.isRootProject() && project.type === \"application\" &&\n\t\t\t\t\t\t\t\t\tproject.metadata.namespace) {\n\t\t\t\t\t\t\t\t// Root-application projects only: Remove namespace prefix if given\n\t\t\t\t\t\t\t\tresource.setPath(resource.getPath().replace(\n\t\t\t\t\t\t\t\t\tnew RegExp(`^/resources/${project.metadata.namespace}`), \"\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn fsTarget.write(resource);\n\t\t\t\t\t\t}));\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tif (cleanDest) {\n\t\t\t\tawait rimraf(destPath);\n\t\t\t}\n\t\t\tawait buildProject(tree);\n\t\t\tlog.info(`Build succeeded in ${getElapsedTime(startTime)}`);\n\t\t} catch (err) {\n\t\t\tlog.error(`Build failed in ${getElapsedTime(startTime)}`);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tderegisterCleanupSigHooks(cleanupSigHooks);\n\t\t\tawait executeCleanupTasks(buildContext);\n\t\t}\n\t}\n};\n\n// Export local function for testing only\n/* istanbul ignore else */\nif (process.env.NODE_ENV === \"test\") {\n\tmodule.exports._composeTaskList = composeTaskList;\n}\n",
    "lib/lbt/analyzer/ComponentAnalyzer.js": "/**\n * Analyzes a UI5 Component to collect dependency information.\n *\n * Tries to find a manifest.json in the same package. If it is found and if\n * it is a valid JSON, an \"sap.ui5\" section is searched and evaluated in the following way\n *  - any library dependency is added as a dependency to the library.js module\n *    of that library. If the library dependency is modelled as 'lazy', the\n *    module dependency will be added as 'conditional'\n *  - any component dependency is added as a dependency to the Component.js module\n *    of that component. If the Component dependency is modeled as 'lazy', the\n *    module dependency will be added as 'conditional'\n *  - for each configured UI5 module for which a type is configured, a module\n *    dependency to that type is added\n *  - for each route that contains a view name, a module dependency to that view will be\n *    added\n * TODO component usages have to be handled\n *\n * This class can handle multiple concurrent analysis calls, it has no instance state\n * other than the pool (which is readonly).\n */\n\"use strict\";\n\nconst ModuleName = require(\"../utils/ModuleName\");\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:analyzer:ComponentAnalyzer\");\n\n// ---------------------------------------------------------------------------------------------------------\n\nfunction each(obj, fn) {\n\tif ( obj ) {\n\t\tObject.keys(obj).forEach(\n\t\t\t(key) => fn(obj[key], key, obj)\n\t\t);\n\t}\n}\n\n/**\n * Analyzes the manifest for a Component.js to find more dependencies.\n *\n * @since 1.47.0\n * @private\n */\nclass ComponentAnalyzer {\n\tconstructor(pool) {\n\t\tthis._pool = pool;\n\t}\n\n\tasync analyze(resource, info) {\n\t\t// ignore base class for components\n\t\tif ( resource.name === \"sap/ui/core/Component.js\" ) {\n\t\t\treturn info;\n\t\t}\n\n\t\tconst manifestName = resource.name.replace(/Component\\.js$/, \"manifest.json\");\n\t\ttry {\n\t\t\tconst manifestResource = await this._pool.findResource(manifestName).catch(() => null);\n\t\t\tif ( manifestResource ) {\n\t\t\t\tconst fileContent = await manifestResource.buffer();\n\t\t\t\tthis._analyzeManifest( JSON.parse(fileContent.toString()), info );\n\t\t\t} else {\n\t\t\t\tlog.verbose(\"No manifest found for '%s', skipping analysis\", resource.name);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlog.error(\"an error occurred while analyzing component %s (ignored)\", resource.name, err.stack);\n\t\t}\n\n\t\treturn info;\n\t}\n\n\t/**\n\t * Evaluates a manifest after it has been read and parsed\n\t * and adds any newly found dependencies to the given info object.\n\t *\n\t * @param {object} manifest JSON with app descriptor structure\n\t * @param {ModuleInfo} info ModuleInfo object that should be enriched\n\t * @returns {ModuleInfo} ModuleInfo object that should be enriched\n\t * @private\n\t */\n\t_analyzeManifest( manifest, info ) {\n\t\tconst sapApp = (manifest && manifest[\"sap.app\"]) || {};\n\t\tconst ui5 = (manifest && manifest[\"sap.ui5\"]) || {};\n\n\t\tif ( ui5.resources && ui5.resources.css ) {\n\t\t\t// TODO how to handle CSS dependencies?\n\t\t}\n\n\t\tif ( ui5.resources && ui5.resources.js ) {\n\t\t\t// TODO how to handle JS dependencies (they are URLs, not module names)\n\t\t}\n\n\t\tif ( ui5.rootView ) {\n\t\t\tlet rootView;\n\t\t\tif ( typeof ui5.rootView === \"string\" ) {\n\t\t\t\trootView = {\n\t\t\t\t\tviewName: ui5.rootView,\n\t\t\t\t\ttype: \"XML\"\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\trootView = ui5.rootView;\n\t\t\t}\n\t\t\tconst module = ModuleName.fromUI5LegacyName(\n\t\t\t\trootView.viewName,\n\t\t\t\t\".view.\" + rootView.type.toLowerCase() );\n\t\t\tlog.verbose(\"adding root view dependency \", module);\n\t\t\tinfo.addDependency( module );\n\t\t}\n\n\t\teach( ui5.dependencies && ui5.dependencies.libs, (options, lib) => {\n\t\t\tconst module = ModuleName.fromUI5LegacyName(lib, \"/library.js\");\n\t\t\tlog.verbose(\"adding library dependency \", module, options.lazy || false);\n\t\t\tinfo.addDependency( module, options.lazy ); // lazy -> conditional dependency\n\t\t});\n\n\t\teach( ui5.dependencies && ui5.dependencies.components, (options, component) => {\n\t\t\tconst module = ModuleName.fromUI5LegacyName(component, \"/Component.js\");\n\t\t\tlog.verbose(\"adding component dependency \", module, options.lazy || false);\n\t\t\tinfo.addDependency( module, options.lazy ); // lazy -> conditional dependency\n\t\t});\n\n\t\t// TODO usages\n\n\t\t// See sap/ui/core/Component._createManifestModelConfigurations\n\t\teach( ui5.models, (options, model) => {\n\t\t\tlet modelType;\n\t\t\tif ( options.type ) {\n\t\t\t\tmodelType = options.type;\n\t\t\t} else if ( options.dataSource ) {\n\t\t\t\tconst oDataSource = sapApp.dataSources && sapApp.dataSources[options.dataSource];\n\t\t\t\tif (!oDataSource) {\n\t\t\t\t\tlog.warn(`Provided dataSource \"${options.dataSource}\" for model \"${model}\" does not exist.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// default dataSource type is OData\n\t\t\t\tconst dataSourceType = oDataSource.type || \"OData\";\n\t\t\t\tlet odataVersion;\n\t\t\t\tswitch (dataSourceType) {\n\t\t\t\tcase \"OData\":\n\t\t\t\t\todataVersion = oDataSource.settings && oDataSource.settings.odataVersion;\n\t\t\t\t\tif (odataVersion === \"4.0\") {\n\t\t\t\t\t\tmodelType = \"sap.ui.model.odata.v4.ODataModel\";\n\t\t\t\t\t} else if (!odataVersion || odataVersion === \"2.0\") {\n\t\t\t\t\t\t// Default if no version is specified\n\t\t\t\t\t\tmodelType = \"sap.ui.model.odata.v2.ODataModel\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.warn(`Provided OData version \"${odataVersion}\" in ` +\n\t\t\t\t\t\t\t`dataSource \"${options.dataSource}\" for model \"${model}\" is unknown. ` +\n\t\t\t\t\t\t\t`You might be using an outdated version of the UI5 Tooling.`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"JSON\":\n\t\t\t\t\tmodelType = \"sap.ui.model.json.JSONModel\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"XML\":\n\t\t\t\t\tmodelType = \"sap.ui.model.xml.XMLModel\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// for custom dataSource types, the class should already be specified in the sap.ui5 models config\n\t\t\t\t\tlog.warn(`Unknown dataSource type \"${dataSourceType}\" defined for model \"${model}\". ` +\n\t\t\t\t\t\t`Please configure a \"type\" in the model config.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.warn(`Neither a type nor a dataSource has been defined for model \"${model}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst module = ModuleName.fromUI5LegacyName( modelType );\n\t\t\tlog.verbose(\"derived model implementation dependency \", module);\n\t\t\tinfo.addDependency(module);\n\t\t});\n\n\t\tconst routing = ui5.routing;\n\t\tif ( routing ) {\n\t\t\tconst routingConfig = routing.config || {};\n\n\t\t\t// See sap/ui/core/UIComponent#init\n\t\t\tif (routing.routes) {\n\t\t\t\tconst routerClassName = routingConfig.routerClass || \"sap.ui.core.routing.Router\";\n\t\t\t\tconst routerClassModule = ModuleName.fromUI5LegacyName(routerClassName);\n\t\t\t\tlog.verbose(`adding router dependency '${routerClassModule}'`);\n\t\t\t\tinfo.addDependency(routerClassModule);\n\t\t\t} else if (routing.targets) {\n\t\t\t\tconst targetsModule = routingConfig.targetsClass || \"sap/ui/core/routing/Targets.js\";\n\t\t\t\tlog.verbose(`adding routing targets dependency '${targetsModule}'`);\n\t\t\t\tinfo.addDependency(targetsModule);\n\n\t\t\t\tconst viewsModule = \"sap/ui/core/routing/Views.js\";\n\t\t\t\tlog.verbose(`adding routing views dependency '${viewsModule}'`);\n\t\t\t\tinfo.addDependency(viewsModule);\n\t\t\t}\n\n\t\t\tif (routing.targets) {\n\t\t\t\tfor (const targetName of Object.keys(routing.targets)) {\n\t\t\t\t\tconst target = routing.targets[targetName];\n\t\t\t\t\tif (target && target.viewName) {\n\t\t\t\t\t\t// merge target config with default config\n\t\t\t\t\t\tconst config = Object.assign({}, routing.config, target);\n\t\t\t\t\t\tconst module = ModuleName.fromUI5LegacyName(\n\t\t\t\t\t\t\t(config.viewPath ? config.viewPath + \".\" : \"\") +\n\t\t\t\t\t\t\tconfig.viewName, \".view.\" + config.viewType.toLowerCase() );\n\t\t\t\t\t\tlog.verbose(\"converting routing target '%s' to view dependency '%s'\", targetName, module);\n\t\t\t\t\t\t// TODO make this a conditional dependency, depending on the route pattern?\n\t\t\t\t\t\tinfo.addDependency(module);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn info;\n\t}\n}\n\nmodule.exports = ComponentAnalyzer;\n",
    "lib/lbt/analyzer/analyzeLibraryJS.js": "\"use strict\";\nconst esprima = require(\"esprima\");\nconst {Syntax} = esprima;\nconst {getPropertyKey, isMethodCall, isIdentifier, getStringArray} = require(\"../utils/ASTUtils\");\nconst VisitorKeys = require(\"estraverse\").VisitorKeys;\n\nconst CALL__SAP_UI_GETCORE = [\"sap\", \"ui\", \"getCore\"];\n\n/*\n * Static Code Analyzer that extracts library information from the sap.ui.getCore().initLibrary()\n * call in a library.js module.\n */\nasync function analyze(resource) {\n\tconst libInfo = {\n\t\tnoLibraryCSS: false,\n\t\ttypes: [],\n\t\tcontrols: [],\n\t\telements: [],\n\t\tinterfaces: []\n\t};\n\n\tfunction visit(node) {\n\t\tif ( node.type == Syntax.CallExpression &&\n\t\t\t\tnode.callee.type === Syntax.MemberExpression &&\n\t\t\t\tisMethodCall(node.callee.object, CALL__SAP_UI_GETCORE) &&\n\t\t\t\tisIdentifier(node.callee.property, \"initLibrary\") &&\n\t\t\t\tnode.arguments.length === 1 &&\n\t\t\t\tnode.arguments[0].type === Syntax.ObjectExpression ) {\n\t\t\tnode.arguments[0].properties.forEach( (prop) => {\n\t\t\t\tconst key = getPropertyKey(prop);\n\t\t\t\tconst value = prop.value;\n\t\t\t\tif ( key === \"noLibraryCSS\" &&\n\t\t\t\t\t\t(value.type === Syntax.Literal && typeof value.value === \"boolean\") ) {\n\t\t\t\t\tlibInfo.noLibraryCSS = value.value;\n\t\t\t\t} else if ( key === \"types\" && value.type == Syntax.ArrayExpression ) {\n\t\t\t\t\tlibInfo.types = getStringArray(value, true);\n\t\t\t\t} else if ( key === \"interfaces\" && value.type == Syntax.ArrayExpression ) {\n\t\t\t\t\tlibInfo.interfaces = getStringArray(value, true);\n\t\t\t\t} else if ( key === \"controls\" && value.type == Syntax.ArrayExpression ) {\n\t\t\t\t\tlibInfo.controls = getStringArray(value, true);\n\t\t\t\t} else if ( key === \"elements\" && value.type == Syntax.ArrayExpression ) {\n\t\t\t\t\tlibInfo.elements = getStringArray(value, true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn true; // abort, we're done\n\t\t}\n\n\t\tfor ( const key of VisitorKeys[node.type] ) {\n\t\t\tconst child = node[key];\n\t\t\tif ( Array.isArray(child) ) {\n\t\t\t\tif ( child.some(visit) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else if ( child ) {\n\t\t\t\tif ( visit(child) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tconst code = await resource.getBuffer();\n\tvisit( esprima.parseScript(code.toString()) );\n\n\treturn libInfo;\n}\n\n/**\n * Creates a new analyzer and executes it on the given resource.\n *\n * If the resources exists and can be parsed as JavaScript and if an sap.ui.getCore().initLibrary()\n * call is found in the code, then the following information will be set:\n * <ul>\n * <li>noLibraryCSS: false when the noLibraryCSS property had been set in the initLibrary info object)</li>\n * <li>types: string array with the names of the types contained in the library</li>\n * <li>controls: string array with the names of the controls defined in the library</li>\n * <li>elements: string array with the names of the elements defined in the library</li>\n * <li>interfaces: string array with the names of the interfaces defined in the library</li>\n * </ul>\n *\n * Note: only the first initLibrary() call that is found with a DFS on the AST, will be evaluated.\n *\n * @param {module:@ui5/fs.Resource} resource library.js resource whose content should be analyzed\n * @returns {Promise<object>} A Promise on the extract info object\n */\nmodule.exports = function(resource) {\n\tif ( resource == null ) {\n\t\treturn Promise.resolve({});\n\t}\n\treturn analyze(resource);\n};\n",
    "lib/lbt/bundle/AutoSplitter.js": "\"use strict\";\n\nconst terser = require(\"terser\");\nconst {pd} = require(\"pretty-data\");\n\nconst ModuleName = require(\"../utils/ModuleName\");\nconst {SectionType} = require(\"./BundleDefinition\");\nconst escapePropertiesFile = require(\"../utils/escapePropertiesFile\");\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:bundle:AutoSplitter\");\n\nconst copyrightCommentsPattern = /copyright|\\(c\\)(?:[0-9]+|\\s+[0-9A-za-z])|released under|license|\\u00a9/i;\nconst xmlHtmlPrePattern = /<(?:\\w+:)?pre\\b/;\n\n/**\n *\n * @author Frank Weigel\n * @since 1.27.1\n * @private\n */\nclass AutoSplitter {\n\t/**\n\t * Used to split resources\n\t *\n\t * @param {ResourcePool} pool\n\t * @param {Resolver} resolver\n\t */\n\tconstructor(pool, resolver) {\n\t\tthis.pool = pool;\n\t\tthis.resolver = resolver;\n\t\tthis.optimizeXMLViews = false;\n\t}\n\n\t// TODO refactor JSMergedModuleBuilder(Ext) so that it can be used with a NullWriter to collect all resource sizes\n\t// this would avoid the redundant compression code in this class\n\t/**\n\t * Runs the split operation\n\t *\n\t * @param {object} moduleDef\n\t * @param {object} options\n\t * @returns {Promise<Array>}\n\t */\n\tasync run(moduleDef, options) {\n\t\toptions = options || {};\n\t\tconst numberOfParts = options.numberOfParts;\n\t\tlet totalSize = 0;\n\t\tconst moduleSizes = Object.create(null);\n\t\tthis.optimize = !!options.optimize;\n\n\t\t// ---- resolve module definition\n\t\tconst resolvedModule = await this.resolver.resolve(moduleDef);\n\t\t// ---- calculate overall size of merged module\n\n\t\tif ( moduleDef.configuration ) {\n\t\t\ttotalSize += 1024; // just a rough estimate\n\t\t}\n\n\t\tconst promises = [];\n\n\t\tresolvedModule.sections.forEach( (section) => {\n\t\t\tswitch ( section.mode ) {\n\t\t\tcase SectionType.Provided:\n\t\t\t\t// provided modules don't contribute to the final size\n\t\t\t\tbreak;\n\t\t\tcase SectionType.Raw:\n\t\t\tcase SectionType.Preload:\n\t\t\t\tsection.modules.forEach( (module) => {\n\t\t\t\t\tpromises.push(\n\t\t\t\t\t\tthis._calcMinSize(module).then( (size) => {\n\t\t\t\t\t\t\ttotalSize += size;\n\t\t\t\t\t\t\tmoduleSizes[module] = size;\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase SectionType.Require:\n\t\t\t\tsection.modules.forEach( (module) => {\n\t\t\t\t\ttotalSize += \"sap.ui.requireSync('');\".length + ModuleName.toRequireJSName(module).length;\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(promises);\n\n\t\tconst partSize = Math.floor(totalSize / numberOfParts);\n\t\tlog.verbose(\"total size of modules %d (chars), target size for each of the %d parts: %d (chars)\",\n\t\t\ttotalSize, numberOfParts, partSize);\n\n\t\t// ---- create a separate module definition for each part\n\t\tconst splittedModules = [];\n\t\tlet moduleNameWithPart = moduleDef.name;\n\t\tif ( !/__part__/.test(moduleNameWithPart) ) {\n\t\t\tmoduleNameWithPart = ModuleName.toRequireJSName(moduleNameWithPart) + \"-__part__.js\";\n\t\t}\n\t\t// vars = Object.create(null);\n\n\t\tlet part = 0;\n\t\ttotalSize = 0;\n\t\tlet currentModule = {\n\t\t\tname: moduleNameWithPart.replace(/__part__/, part),\n\t\t\tsections: []\n\t\t};\n\t\t// vars.put(\"part\",\tInteger.toString(part));\n\t\t// currentModule.setName((ModuleName) ModuleNamePattern.resolvePlaceholders(moduleNameWithPart, vars));\n\t\tsplittedModules.push(currentModule);\n\t\tif ( moduleDef.configuration ) {\n\t\t\tcurrentModule.configuration = moduleDef.configuration;\n\t\t\ttotalSize += 1024; // TODO calculate a real size?\n\t\t}\n\n\t\tresolvedModule.sections.forEach( (section) => {\n\t\t\tlet currentSection;\n\t\t\tswitch ( section.mode ) {\n\t\t\tcase SectionType.Provided:\n\t\t\t\t// 'provided' sections are no longer needed in a fully resolved module\n\t\t\t\tbreak;\n\t\t\tcase SectionType.Raw:\n\t\t\t\t// raw sections are always copied as a whole\n\t\t\t\tcurrentSection = {\n\t\t\t\t\tmode: SectionType.Raw,\n\t\t\t\t\tfilters: []\n\t\t\t\t};\n\t\t\t\tcurrentSection.declareRawModules = section.sectionDefinition.declareRawModules;\n\t\t\t\tcurrentSection.sort = section.sectionDefinition.sort;\n\t\t\t\tcurrentModule.sections.push( currentSection );\n\t\t\t\tsection.modules.forEach( (module) => {\n\t\t\t\t\tcurrentSection.filters.push(module);\n\t\t\t\t\ttotalSize += moduleSizes[module];\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase SectionType.Preload:\n\t\t\t\t// NODE_TODO: sort by copyright:\n\t\t\t\t// sequence = section.modules.slice();\n\t\t\t\t// jsBuilder.beforeWriteFunctionPreloadSection((List<ModuleName>) sequence);\n\t\t\t\tcurrentSection = {\n\t\t\t\t\tmode: SectionType.Preload,\n\t\t\t\t\tfilters: []\n\t\t\t\t};\n\t\t\t\tcurrentSection.name = section.name;\n\t\t\t\tcurrentModule.sections.push( currentSection );\n\t\t\t\tsection.modules.forEach( (module) => {\n\t\t\t\t\tconst moduleSize = moduleSizes[module];\n\t\t\t\t\tif ( part + 1 < numberOfParts && totalSize + moduleSize / 2 > partSize ) {\n\t\t\t\t\t\tpart++;\n\t\t\t\t\t\t// start a new module\n\t\t\t\t\t\ttotalSize = 0;\n\t\t\t\t\t\tcurrentModule = {\n\t\t\t\t\t\t\tname: moduleNameWithPart.replace(/__part__/, part),\n\t\t\t\t\t\t\tsections: []\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// vars.put(\"part\",\tInteger.toString(part));\n\t\t\t\t\t\t// currentModule.setName(\n\t\t\t\t\t\t//     (ModuleName) ModuleNamePattern.resolvePlaceholders(moduleNameWithPart, vars));\n\t\t\t\t\t\tsplittedModules.push(currentModule);\n\t\t\t\t\t\tcurrentSection = {\n\t\t\t\t\t\t\tname: section.name,\n\t\t\t\t\t\t\tmode: SectionType.Preload,\n\t\t\t\t\t\t\tfilters: []\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcurrentModule.sections.push( currentSection );\n\t\t\t\t\t}\n\t\t\t\t\t// add module to current section\n\t\t\t\t\tcurrentSection.filters.push(module);\n\t\t\t\t\ttotalSize += moduleSize;\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase SectionType.Require:\n\t\t\t\tcurrentSection = {\n\t\t\t\t\tmode: SectionType.Require,\n\t\t\t\t\tfilters: []\n\t\t\t\t};\n\t\t\t\tcurrentModule.sections.push( currentSection );\n\t\t\t\tsection.modules.forEach( (module) => {\n\t\t\t\t\tcurrentSection.filters.push( module );\n\t\t\t\t\ttotalSize += 21 + ModuleName.toRequireJSName(module).length;\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tlog.verbose(\"splitted modules: %s\", splittedModules);\n\t\treturn splittedModules;\n\t}\n\n\tasync _calcMinSize(module) {\n\t\tconst resource = await this.pool.findResourceWithInfo(module);\n\t\tif ( resource != null ) {\n\t\t\tif ( resource.info && resource.info.compressedSize &&\n\t\t\t\t\tresource.info.compressedSize !== resource.info.size ) {\n\t\t\t\treturn resource.info.compressedSize;\n\t\t\t}\n\n\t\t\tif ( /\\.js$/.test(module) ) {\n\t\t\t\t// console.log(\"determining compressed size for %s\", module);\n\t\t\t\tlet fileContent = await resource.buffer();\n\t\t\t\tif ( this.optimize ) {\n\t\t\t\t\t// console.log(\"uglify %s start\", module);\n\t\t\t\t\tconst result = await terser.minify({\n\t\t\t\t\t\t[resource.name]: String(fileContent)\n\t\t\t\t\t}, {\n\t\t\t\t\t\twarnings: false, // TODO configure?\n\t\t\t\t\t\tcompress: false, // TODO configure?\n\t\t\t\t\t\toutput: {\n\t\t\t\t\t\t\tcomments: copyrightCommentsPattern,\n\t\t\t\t\t\t\twrap_func_args: false\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// , outFileName: resource.name\n\t\t\t\t\t\t// , outSourceMap: true\n\t\t\t\t\t});\n\t\t\t\t\t// console.log(\"uglify %s end\", module);\n\t\t\t\t\tfileContent = result.code;\n\t\t\t\t}\n\t\t\t\t// trace.debug(\"analyzed %s:%d%n\", module, mw.getTargetLength());\n\t\t\t\treturn fileContent.length;\n\t\t\t} else if ( /\\.properties$/.test(module) ) {\n\t\t\t\t/* NODE-TODO minimize *.properties\n\t\t\t\tProperties props = new Properties();\n\t\t\t\tprops.load(in);\n\t\t\t\tin.close();\n\t\t\t\tWriter out = new StringWriter();\n\t\t\t\tprops.store(out, \"\");\n\t\t\t\treturn out.toString().length();\n\t\t\t\t*/\n\n\t\t\t\t// Since AutoSplitter is also used when splitting non-project resources (e.g. dependencies)\n\t\t\t\t// *.properties files should be escaped if encoding option is specified\n\t\t\t\tconst fileContent = await escapePropertiesFile(resource);\n\n\t\t\t\treturn fileContent.length;\n\t\t\t} else if ( this.optimizeXMLViews && /\\.view.xml$/.test(module) ) {\n\t\t\t\t// needs to be activated when it gets activated in JSMergedModuleBuilderExt\n\t\t\t\tlet fileContent = await resource.buffer();\n\t\t\t\tif ( this.optimize ) {\n\t\t\t\t\t// For XML we use the pretty data\n\t\t\t\t\t// Do not minify if XML(View) contains an <*:pre> tag because whitespace of\n\t\t\t\t\t//\tHTML <pre> should be preserved (should only happen rarely)\n\t\t\t\t\tif (!xmlHtmlPrePattern.test(fileContent.toString())) {\n\t\t\t\t\t\tfileContent = pd.xmlmin(fileContent.toString(), false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn fileContent.length;\n\t\t\t}\n\n\t\t\t// if there is no precompiled information about the resource, just determine its length\n\t\t\tif ( !resource.info && /\\.(js|json|xml)$/.test(module) ) {\n\t\t\t\tconst fileContent = await resource.buffer();\n\t\t\t\treturn fileContent.length;\n\t\t\t}\n\t\t}\n\n\t\treturn resource && resource.info && resource.info.size ? resource.info.size : 0;\n\t}\n\n\t/* NODE-TODO debug resources\n\tprivate URL findResource(ModuleName name) {\n\t\tURL result = null;\n\t\tif ( debugMode ) {\n\t\t\tModuleName debugName = ModuleName.getDebugName(name);\n\t\t\tif ( debugName != null ) {\n\t\t\t\tresult = pool.findResource(debugName);\n\t\t\t}\n\t\t}\n\t\tif ( result == null ) {\n\t\t\tresult = pool.findResource(name);\n\t\t}\n\t\treturn result;\n\t} */\n}\n\nmodule.exports = AutoSplitter;\n",
    "lib/lbt/utils/escapePropertiesFile.js": "const nonAsciiEscaper = require(\"../../processors/nonAsciiEscaper\");\n\n/**\n * Can be used to escape *.properties files.\n *\n * Input encoding is read from project configuration.\n * In case the resource belongs to no project (e.g. bundler is used standalone) the default is \"ISO-8859-1\".\n *\n * @private\n * @param {Resource} resource the resource for which the content will be escaped\n * @returns {Promise<string>} resolves with the escaped string content of the given Resource\n */\nmodule.exports = async function(resource) {\n\tconst project = resource.getProject();\n\tlet propertiesFileSourceEncoding = project &&\n\t\t\tproject.resources &&\n\t\t\tproject.resources.configuration &&\n\t\t\tproject.resources.configuration.propertiesFileSourceEncoding;\n\n\tif (!propertiesFileSourceEncoding) {\n\t\tif (project && [\"0.1\", \"1.0\", \"1.1\"].includes(project.specVersion)) {\n\t\t\t// default encoding to \"ISO-8859-1\" for old specVersions\n\t\t\tpropertiesFileSourceEncoding = \"ISO-8859-1\";\n\t\t} else {\n\t\t\t// default encoding to \"UTF-8\" for all projects starting with specVersion 2.0\n\t\t\tpropertiesFileSourceEncoding = \"UTF-8\";\n\t\t}\n\t}\n\tconst encoding = nonAsciiEscaper.getEncodingFromAlias(propertiesFileSourceEncoding);\n\tawait nonAsciiEscaper({\n\t\tresources: [resource.resource],\n\t\toptions: {\n\t\t\tencoding\n\t\t}\n\t});\n\n\tconst fileContent = await resource.buffer();\n\n\treturn fileContent.toString();\n};\n",
    "lib/processors/bootstrapHtmlTransformer.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:processors:bootstrapHtmlTransformer\");\nconst cheerio = require(\"cheerio\");\n\n/**\n * Transforms the UI5 bootstrap of a HTML resource files.\n *\n * @module builder/processors/bootstrapHtmlTransformer\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.Resource[]} parameters.resources List of resources to be processed\n * @param {object} parameters.options Options\n * @param {string} parameters.options.src Bootstrap \"src\" that should be used\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with the cloned resources\n */\nmodule.exports = function({resources, options: {src}}) {\n\tasync function processResource(resource) {\n\t\tconst content = await resource.getString();\n\t\tconst $ = cheerio.load(content);\n\t\tconst bootstrapScript = $(\"script#sap-ui-bootstrap\");\n\t\tif (bootstrapScript.length === 1) {\n\t\t\tbootstrapScript.attr(\"src\", src);\n\t\t\tresource.setString($.html());\n\t\t} else if (bootstrapScript.length > 1) {\n\t\t\tlog.warn(\"Skipping bootstrap transformation. \" +\n\t\t\t\t\"Found multiple bootstrap script tags with id=sap-ui-bootstrap.\");\n\t\t} else {\n\t\t\tlog.warn(\"Skipping bootstrap transformation. \" +\n\t\t\t\t\"Could not find bootstrap script tag with id=sap-ui-bootstrap.\");\n\t\t}\n\t\treturn resource;\n\t}\n\n\treturn Promise.all(resources.map(processResource));\n};\n",
    "lib/processors/jsdoc/apiIndexGenerator.js": "const resourceFactory = require(\"@ui5/fs\").resourceFactory;\nconst createIndex = require(\"./lib/createIndexFiles\");\n\n/**\n * Compiles API index resources from all <code>api.json</code> resources available in the given test resources directory\n * as created by the [sdkTransformer]{@link module:@ui5/builder.processors.sdkTransformer} processor.\n * The resulting index resources (e.g. <code>api-index.json</code>,  <code>api-index-deprecated.json</code>,\n * <code>api-index-experimental.json</code> and <code>api-index-since.json</code>) are mainly to be used in the SDK.\n *\n * @public\n * @alias module:@ui5/builder.processors.apiIndexGenerator\n * @param {object} parameters Parameters\n * @param {string} parameters.versionInfoPath Path to <code>sap-ui-version.json</code> resource\n * @param {string} parameters.testResourcesRootPath Path to <code>/test-resources</code> root directory in the\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\tgiven fs\n * @param {string} parameters.targetApiIndexPath Path to create the generated API index JSON resource for\n * @param {string} parameters.targetApiIndexDeprecatedPath Path to create the generated API index \"deprecated\" JSON\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresource for\n * @param {string} parameters.targetApiIndexExperimentalPath Path to create the generated API index \"experimental\" JSON\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresource for\n * @param {string} parameters.targetApiIndexSincePath Path to create the generated API index \"since\" JSON resource for\n * @param {fs|module:@ui5/fs.fsInterface} parameters.fs Node fs or\n * \t\t\t\tcustom [fs interface]{@link module:resources/module:@ui5/fs.fsInterface} to use\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with created resources <code>api-index.json</code>,\n * <code>api-index-deprecated.json</code>, <code>api-index-experimental.json</code> and\n * <code>api-index-since.json</code> (names depend on the supplied paths)\n */\nconst apiIndexGenerator = async function({\n\tversionInfoPath, testResourcesRootPath, targetApiIndexPath, targetApiIndexDeprecatedPath,\n\ttargetApiIndexExperimentalPath, targetApiIndexSincePath, fs\n} = {}) {\n\tif (!versionInfoPath || !testResourcesRootPath || !targetApiIndexPath || !targetApiIndexDeprecatedPath ||\n\t\t\t!targetApiIndexExperimentalPath || !targetApiIndexSincePath || !fs) {\n\t\tthrow new Error(\"[apiIndexGenerator]: One or more mandatory parameters not provided\");\n\t}\n\n\tconst resourceMap = await createIndex(versionInfoPath, testResourcesRootPath, targetApiIndexPath,\n\t\ttargetApiIndexDeprecatedPath, targetApiIndexExperimentalPath, targetApiIndexSincePath, {\n\t\t\tfs,\n\t\t\treturnOutputFiles: true\n\t\t});\n\n\treturn Object.keys(resourceMap).map((resPath) => {\n\t\treturn resourceFactory.createResource({\n\t\t\tpath: resPath,\n\t\t\tstring: resourceMap[resPath]\n\t\t});\n\t});\n};\n\nmodule.exports = apiIndexGenerator;\n",
    "lib/processors/jsdoc/sdkTransformer.js": "const resourceFactory = require(\"@ui5/fs\").resourceFactory;\nconst transformer = require(\"./lib/transformApiJson\");\n\n/**\n * Transform api.json as created by [jsdocGenerator]{@link module:@ui5/builder.processors.jsdocGenerator}\n * for usage in a UI5 SDK\n *\n * @public\n * @alias module:@ui5/builder.processors.sdkTransformer\n * @param {object} parameters Parameters\n * @param {string} parameters.apiJsonPath Path to the projects api.json file as created by\n *\t\t\t\t[jsdocGenerator]{@link module:@ui5/builder.processors.jsdoc.jsdocGenerator}\n * @param {string} parameters.dotLibraryPath Path to the projects .library file\n * @param {string[]} parameters.dependencyApiJsonPaths List of paths to the api.json files of all dependencies of\n *\t\t\t\tthe project as created by [jsdocGenerator]{@link module:@ui5/builder.processors.jsdoc.jsdocGenerator}\n * @param {string} parameters.targetApiJsonPath Path to create the new, transformed api.json resource for\n * @param {fs|module:@ui5/fs.fsInterface} parameters.fs Node fs or\n * \t\t\t\tcustom [fs interface]{@link module:resources/module:@ui5/fs.fsInterface} to use\n *\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with created resources\n */\nconst sdkTransformer = async function({\n\tapiJsonPath, dotLibraryPath, dependencyApiJsonPaths, targetApiJsonPath, fs} = {}\n) {\n\tif (!apiJsonPath || !dotLibraryPath || !targetApiJsonPath || !dependencyApiJsonPaths || !fs) {\n\t\tthrow new Error(\"[sdkTransformer]: One or more mandatory parameters not provided\");\n\t}\n\tconst fakeTargetPath = \"/ignore/this/path/resource/will/be/returned\";\n\tconst apiJsonContent = await transformer(apiJsonPath, fakeTargetPath, dotLibraryPath, dependencyApiJsonPaths, \"\", {\n\t\tfs,\n\t\treturnOutputFiles: true\n\t});\n\treturn [resourceFactory.createResource({\n\t\tpath: targetApiJsonPath,\n\t\tstring: apiJsonContent\n\t})];\n};\n\nmodule.exports = sdkTransformer;\n",
    "lib/processors/manifestCreator.js": "\"use strict\";\n\nconst posixPath = require(\"path\").posix;\nconst {SemVer: Version} = require(\"semver\");\nconst log = require(\"@ui5/logger\").getLogger(\"builder:processors:manifestCreator\");\nconst EvoResource = require(\"@ui5/fs\").Resource;\nconst xml2js = require(\"xml2js\");\nconst analyzeLibraryJS = require(\"../lbt/analyzer/analyzeLibraryJS\");\n\n/*\n * A single parse instance to be used by all invocations (TODO check reentrance capa of xml2js)\n */\nconst parser = new xml2js.Parser({\n\t// explicitChildren: true,\n\tpreserveChildrenOrder: true,\n\txmlns: true\n});\n\n// const APP_DESCRIPTOR_V3 = new Version(\"1.2.0\");\nconst APP_DESCRIPTOR_V3_SECTION_SAP_APP = new Version(\"1.2.0\");\nconst APP_DESCRIPTOR_V3_OTHER_SECTIONS = new Version(\"1.1.0\");\nconst APP_DESCRIPTOR_V5 = new Version(\"1.4.0\");\nconst APP_DESCRIPTOR_V10 = new Version(\"1.9.0\");\nconst APP_DESCRIPTOR_V22 = new Version(\"1.21.0\");\n\n// namespaces used in .library files\nconst XMLNS_UILIB = \"http://www.sap.com/sap.ui.library.xsd\";\nconst XMLNS_OWNERSHIP = \"http://www.sap.com/ui5/buildext/ownership\";\nconst XMLNS_MANIFEST = \"http://www.sap.com/ui5/buildext/manifest\";\nconst XMLNS_THIRDPARTY = \"http://www.sap.com/ui5/buildext/thirdparty\";\n\nfunction getAttribute(node, attr) {\n\treturn (node.$ && node.$[attr] && node.$[attr].value) || null;\n}\n\nfunction getBooleanAttribute(node, attr) {\n\treturn getAttribute(node, attr) === \"true\";\n}\n\nfunction findChild(node, tagName, namespaceURI) {\n\tif ( node &&\n\t\t\tArray.isArray(node[tagName]) &&\n\t\t\tnode[tagName].length > 0 &&\n\t\t\t(namespaceURI == null || (node[tagName][0].$ns && node[tagName][0].$ns.uri === namespaceURI)) ) {\n\t\treturn node[tagName][0];\n\t}\n}\n\nfunction findChildren(node, tagName, namespaceURI) {\n\tconst children = node && node[tagName];\n\tif ( Array.isArray(children) ) {\n\t\treturn children.filter((child) => (namespaceURI == null || (child.$ns && child.$ns.uri === namespaceURI)));\n\t}\n\treturn [];\n}\n\nfunction getChildTextContent(node, tagName, defaultValue) {\n\tconst child = findChild(node, tagName);\n\treturn child ? (child._ || \"\") : defaultValue;\n}\n\nclass Dependency {\n\tconstructor(xml) {\n\t\tthis.xml = xml;\n\t}\n\n\tgetLibraryName() {\n\t\treturn getChildTextContent(this.xml, \"libraryName\");\n\t}\n\n\tgetVersion() {\n\t\treturn getChildTextContent(this.xml, \"version\");\n\t}\n\n\tisLazy() {\n\t\treturn \"true\" === getChildTextContent(this.xml, \"lazy\");\n\t}\n}\n\nclass Library {\n\tconstructor(xml) {\n\t\tthis.xml = xml;\n\t}\n\n\tgetVersion() {\n\t\treturn getChildTextContent(this.xml, \"version\");\n\t}\n\n\tgetName() {\n\t\treturn getChildTextContent(this.xml, \"name\");\n\t}\n\n\tgetTitle() {\n\t\treturn getChildTextContent(this.xml, \"title\");\n\t}\n\n\tgetDocumentation() {\n\t\treturn getChildTextContent(this.xml, \"documentation\");\n\t}\n\n\tgetDependencies() {\n\t\tconst container = findChild(this.xml, \"dependencies\");\n\t\tconst deps = findChildren(container, \"dependency\") || [];\n\t\treturn deps.map((dep) => new Dependency(dep));\n\t}\n\n\tgetAppData(tagName, namespace) {\n\t\tconst appData = findChild(this.xml, \"appData\", XMLNS_UILIB);\n\t\treturn findChild(appData, tagName, namespace);\n\t}\n\n\tstatic async from(resource) {\n\t\tconst content = await resource.getString();\n\t\treturn new Promise( (resolve, reject) => {\n\t\t\tparser.parseString(content, (err, xml) => {\n\t\t\t\tif ( err ) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(new Library(xml.library));\n\t\t\t});\n\t\t});\n\t}\n}\n\n\nclass LibraryBundle {\n\t/**\n\t *\n\t * @param {string} prefix\n\t * @param {module:@ui5/fs.Resource[]} resources\n\t */\n\tconstructor(prefix, resources) {\n\t\tthis.prefix = prefix;\n\t\tthis.resources = resources.filter((res) => res.getPath().startsWith(prefix));\n\t}\n\n\t/**\n\t *\n\t * @param {string} name\n\t * @returns {module:@ui5/fs.Resource}\n\t */\n\tfindResource(name) {\n\t\treturn this.resources.find((res) => res.getPath() === this.prefix + name);\n\t}\n\n\t/**\n\t *\n\t * @param {RegExp} pattern\n\t * @returns {module:@ui5/fs.Resource[]}\n\t */\n\tgetResources(pattern) {\n\t\treturn this.resources.filter((res) => pattern == null || pattern.test(res.getPath()));\n\t}\n}\n\n/*\n * Creates the library manifest.json file for a UILibrary.\n */\nasync function createManifest(libraryResource, libBundle, descriptorVersion, _include3rdParty) {\n\t// create a Library wrapper around the .library XML\n\tconst library = await Library.from(libraryResource);\n\n\t// collect information from library.js file\n\tconst libraryJSInfo = await analyzeLibraryJS(libBundle.findResource(\"library.js\"));\n\tconst includeSupportedLocalesInformation = descriptorVersion.compare(APP_DESCRIPTOR_V22) >= 0;\n\t/**\n\t * cache for supported locales\n\t *\n\t * @see createI18nSection\n\t */\n\tconst i18nToSupportedLocales = new Map();\n\n\tconst manifestAppData = library.getAppData(\"manifest\", XMLNS_MANIFEST);\n\tconst sapFioriAppData = findChild(manifestAppData, \"sap.fiori\");\n\n\tfunction sectionVersion(candidateVersion) {\n\t\t// _version property for nested sections became optional with AppDescriptor V5\n\t\tif ( descriptorVersion.compare(APP_DESCRIPTOR_V5) < 0 ) {\n\t\t\treturn candidateVersion.toString();\n\t\t}\n\t\t// return undefined\n\t}\n\n\tfunction createSapApp() {\n\t\tfunction hasManifest(componentPath, libraryPathPrefix) {\n\t\t\tconst manifestPath = componentPath + \"/manifest.json\";\n\n\t\t\tconst manifestResource = libBundle.findResource(manifestPath.substring(libraryPathPrefix.length));\n\t\t\tif ( manifestResource == null ) {\n\t\t\t\tlog.verbose(\"  component has no accompanying manifest.json, don't list it as 'embedded'\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tfunction findEmbeddedComponents() {\n\t\t\tconst result = [];\n\t\t\tconst prefix = posixPath.dirname(libraryResource.getPath()) + \"/\";\n\t\t\tconst components = libBundle.getResources(/^\\/(?:[^/]+\\/)*Component\\.js$/);\n\t\t\tfor (const comp of components) {\n\t\t\t\tconst componentPath = posixPath.dirname(comp.getPath());\n\t\t\t\tlog.verbose(\"checking component at %s\", componentPath);\n\t\t\t\tif ( componentPath.startsWith(prefix) && hasManifest(componentPath, prefix) ) {\n\t\t\t\t\tresult.push( componentPath.substring(prefix.length) );\n\t\t\t\t} else if ( prefix === \"/resources/sap/apf/\" ) {\n\t\t\t\t\tlog.verbose(\"Package %s contains both '*.library' and 'Component.js'. \" +\n\t\t\t\t\t\t\"This is a known issue but can't be solved due to backward compatibility.\", componentPath);\n\t\t\t\t} else if ( prefix === (componentPath + \"/\") && prefix !== \"/resources/sap/ui/core/\" ) {\n\t\t\t\t\tlog.error(\"Package %s contains both '*.library' and 'Component.js'. \" +\n\t\t\t\t\t\t\"This is not supported by manifests, therefore the component won't be \" +\n\t\t\t\t\t\t\"listed in the library's manifest.\", componentPath);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result.sort();\n\t\t}\n\n\t\tfunction isValid(version) {\n\t\t\treturn version && version !== \"@version@\" && version !== \"${version}\";\n\t\t}\n\n\t\tfunction getProjectVersion() {\n\t\t\tconst project = libraryResource._project;\n\t\t\tif ( project ) {\n\t\t\t\treturn project.version;\n\t\t\t}\n\t\t}\n\n\t\tfunction getLibraryTitle() {\n\t\t\tif ( library.getTitle() ) {\n\t\t\t\treturn library.getTitle();\n\t\t\t}\n\t\t\tif ( library.getDocumentation() ) {\n\t\t\t\tlet desc = library.getDocumentation();\n\t\t\t\t// remove all tags\n\t\t\t\tdesc = desc.replace(/\\\\s+/g, \" \").replace(/<\\/?[a-zA-Z][a-zA-Z0-9_$.]*(\\s[^>]*)>/g, \"\");\n\t\t\t\t// extract summary (first sentence)\n\t\t\t\tconst m = /^([\\w\\W]+?[.;!?])[^a-zA-Z0-9_$]/.exec(desc);\n\t\t\t\treturn m ? m[1] : desc;\n\t\t\t}\n\t\t\treturn library.getName();\n\t\t}\n\n\t\tfunction getDefaultACH() {\n\t\t\tconst ownership = library.getAppData(\"ownership\", XMLNS_OWNERSHIP);\n\t\t\tfor (const comp of findChildren(ownership, \"component\")) {\n\t\t\t\tif ( comp._ ) {\n\t\t\t\t\treturn comp._;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction offline() {\n\t\t\tlet result = sapFioriAppData == null ? true : false;\n\t\t\tconst offlineElement = findChild(manifestAppData, \"offline\");\n\t\t\tif ( offlineElement ) {\n\t\t\t\tresult = offlineElement._ === \"true\";\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction sourceTemplate() {\n\t\t\tconst sourceTemplateElement = findChild(manifestAppData, \"sourceTemplate\");\n\t\t\tif ( sourceTemplateElement ) {\n\t\t\t\treturn {\n\t\t\t\t\t\"id\": getChildTextContent(sourceTemplateElement, \"id\"),\n\t\t\t\t\t\"version\": getChildTextContent(sourceTemplateElement, \"version\")\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tfunction openSourceComponents() {\n\t\t\tconst embeddedOSComponents = new Set();\n\t\t\tconst osComponents = [];\n\t\t\tfor (const osCompElem of findChildren(manifestAppData, \"openSourceComponent\")) {\n\t\t\t\tconst name = getAttribute(osCompElem, \"name\");\n\t\t\t\tconst packagedWithMySelf = getBooleanAttribute(osCompElem, \"packagedWithMySelf\");\n\t\t\t\tosComponents.push({\n\t\t\t\t\tname: name,\n\t\t\t\t\tpackagedWithMySelf,\n\t\t\t\t\tversion: packagedWithMySelf ? getAttribute(osCompElem, \"version\") : undefined\n\t\t\t\t});\n\t\t\t\tif ( packagedWithMySelf ) {\n\t\t\t\t\tembeddedOSComponents.add(name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( _include3rdParty ) {\n\t\t\t\t// also merge all thirdparty libs, but only with the name - version info is not available\n\t\t\t\t// only merge in if no lib with the same name has been declared already\n\t\t\t\tconst thirdpartyAppData = library.getAppData(\"thirdparty\", XMLNS_THIRDPARTY);\n\t\t\t\tfor (const thirdPartyElem of findChildren(thirdpartyAppData, \"lib\")) {\n\t\t\t\t\tconst osCompName = getAttribute(thirdPartyElem, \"name\");\n\t\t\t\t\tif ( !embeddedOSComponents.has(osCompName) ) {\n\t\t\t\t\t\tembeddedOSComponents.add(osCompName);\n\t\t\t\t\t\tosComponents.push({\n\t\t\t\t\t\t\tname: osCompName,\n\t\t\t\t\t\t\tpackagedWithMySelf: true,\n\t\t\t\t\t\t\tversion: getAttribute(thirdPartyElem, \"version\") || \"0.0.0\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn osComponents.length > 0 ? osComponents : undefined;\n\t\t}\n\t\tconst i18nText = getChildTextContent(manifestAppData, \"i18n\");\n\t\tlet i18n;\n\t\tif (typeof i18nText === \"string\") {\n\t\t\ti18n = createI18nSection(i18nText, i18nToSupportedLocales);\n\t\t\tlog.verbose(`sap.app/i18n taken from .library appData: '%s'`, i18nText);\n\t\t}\n\t\tconst sapApp = {\n\t\t\t_version: sectionVersion(APP_DESCRIPTOR_V3_SECTION_SAP_APP),\n\t\t\tid: library.getName(),\n\t\t\ttype: \"library\",\n\t\t\tembeds: findEmbeddedComponents(),\n\t\t\ti18n,\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: isValid(library.getVersion()) ? library.getVersion() : getProjectVersion()\n\t\t\t},\n\t\t\ttitle: getLibraryTitle(),\n\t\t\tdescription: library.getDocumentation(),\n\t\t\tach: getDefaultACH(), // optional, might be undefined\n\t\t\tresources: \"resources.json\",\n\t\t\toffline: offline(),\n\t\t\tsourceTemplate: sourceTemplate(),\n\t\t\topenSourceComponents: openSourceComponents()\n\t\t};\n\n\t\tlog.verbose(\"  sap.app/id taken from .library: '%s'\", sapApp.id);\n\t\tlog.verbose(\"  sap.app/embeds determined from resources: '%s'\", sapApp.embeds);\n\t\tlog.verbose(\"  sap.app/i18n taken from .library appData: '%s'\", sapApp.i18n);\n\t\tlog.verbose(\"  sap.app/ach taken from .library appData/ownership: '%s'\", sapApp.ach);\n\n\t\treturn sapApp;\n\t}\n\n\tfunction createSapUi() {\n\t\tfunction deviceTypes() {\n\t\t\tconst deviceTypesElement = findChild(manifestAppData, \"deviceTypes\");\n\t\t\tif ( deviceTypesElement ) {\n\t\t\t\treturn {\n\t\t\t\t\tdesktop: getBooleanAttribute(deviceTypesElement, \"desktop\"),\n\t\t\t\t\ttablet: getBooleanAttribute(deviceTypesElement, \"tablet\"),\n\t\t\t\t\tphone: getBooleanAttribute(deviceTypesElement, \"phone\"),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tfunction collectThemes() {\n\t\t\tconst themes = {};\n\n\t\t\t// find theme resources and determine theme names from their paths\n\t\t\tlibBundle.getResources(/(?:[^/]+\\/)*themes\\//).forEach((res) => {\n\t\t\t\tconst match = /\\/themes\\/([^/]+)\\//.exec(res.getPath());\n\t\t\t\tif ( match ) {\n\t\t\t\t\tthemes[match[1]] = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// merge with supporteTheme info from .library file\n\t\t\tconst elems = findChildren(manifestAppData, \"supportedTheme\");\n\t\t\tif ( elems ) {\n\t\t\t\telems.forEach((elem) => {\n\t\t\t\t\tif ( elem._ ) {\n\t\t\t\t\t\tthemes[elem._];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn Object.keys(themes).sort();\n\t\t}\n\n\t\tconst sapUi = {\n\t\t\t_version: sectionVersion(APP_DESCRIPTOR_V3_OTHER_SECTIONS),\n\t\t\ttechnology: \"UI5\",\n\t\t\tdeviceTypes: deviceTypes(),\n\t\t\tsupportedThemes: collectThemes()\n\t\t};\n\n\t\tlog.verbose(\"  sap.ui/supportedThemes determined from resources: '%s'\", sapUi.supportedThemes);\n\n\t\treturn sapUi;\n\t}\n\n\tfunction createSapUI5() {\n\t\tfunction getUI5Version() {\n\t\t\tconst dummy = new Dependency({\n\t\t\t\tlibraryName: [{\n\t\t\t\t\t_: \"sap.ui.core\"\n\t\t\t\t}]\n\t\t\t});\n\t\t\treturn normalizeVersion(getVersion(dummy));\n\t\t}\n\n\t\tfunction dependencies() {\n\t\t\tconst dependencies = {\n\t\t\t\tminUI5Version: getUI5Version(),\n\t\t\t\tlibs: {\n\t\t\t\t}\n\t\t\t};\n\t\t\tif ( library.getDependencies() != null ) {\n\t\t\t\tfor (const dep of library.getDependencies()) {\n\t\t\t\t\tdependencies.libs[dep.getLibraryName()] = {\n\t\t\t\t\t\tminVersion: getVersion(dep),\n\t\t\t\t\t\tlazy: dep.isLazy() || undefined // suppress default (false)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tlog.verbose(\"  sap.ui5/dependencies/libs determined from .library dependencies: '%s'\", dependencies.libs);\n\t\t\treturn dependencies;\n\t\t}\n\n\t\tfunction contentDensities() {\n\t\t\tconst contentDensitiesElement = findChild(manifestAppData, \"contentDensities\");\n\t\t\tif ( contentDensitiesElement != null ) {\n\t\t\t\tconst contentDensities = {\n\t\t\t\t\tcozy: getBooleanAttribute(contentDensitiesElement, \"cozy\"),\n\t\t\t\t\tcompact: getBooleanAttribute(contentDensitiesElement, \"compact\")\n\t\t\t\t};\n\t\t\t\tlog.verbose(\"  sap.ui5/contentDensities property taken from .library appData: '%s'\", contentDensities);\n\t\t\t\treturn contentDensities;\n\t\t\t}\n\t\t}\n\n\t\tfunction createLibraryMetadata() {\n\t\t\tif ( descriptorVersion.compare(APP_DESCRIPTOR_V10) < 0 ) {\n\t\t\t\tlog.verbose(\"  target descriptor version %s: skipping sap.ui5/library information\",\n\t\t\t\t\tdescriptorVersion);\n\t\t\t}\n\n\t\t\tlog.verbose(\"  target descriptor version %s: include sap.ui5/library information\", descriptorVersion);\n\n\t\t\tconst sapUi5AppData = findChild(manifestAppData, \"sap.ui5\");\n\t\t\tconst libraryAppData = findChild(sapUi5AppData, \"library\");\n\n\t\t\t// i18n:\n\t\t\t// - from .library/appData/manifest/sap.ui5/library/i18n\n\t\t\t// - from library resources (if \"messagebundle.properties\" exists)\n\t\t\tfunction i18n() {\n\t\t\t\tlet i18n = getChildTextContent(libraryAppData, \"i18n\");\n\t\t\t\tif ( typeof i18n === \"string\") {\n\t\t\t\t\tif ( i18n === \"false\" ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if ( i18n === \"true\" ) {\n\t\t\t\t\t\ti18n = \"messagebundle.properties\";\n\t\t\t\t\t}\n\t\t\t\t\t// log.verbose(\"  sap.ui5/library/i18n property taken from .library appData: '%s'\", library.i18n);\n\t\t\t\t} else {\n\t\t\t\t\tif ( libBundle.findResource(\"messagebundle.properties\") != null ) {\n\t\t\t\t\t\t// log.verbose(\"  sap.ui5/library/i18n property determined from resources: '%s'\", library.i18n);\n\t\t\t\t\t\ti18n = \"messagebundle.properties\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// i18n not defined and no messagebundle.properties\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn createI18nSection(i18n, i18nToSupportedLocales);\n\t\t\t}\n\n\t\t\t// css:\n\t\t\t// - from .library/appData/manifest/sap.ui5/library/css\n\t\t\t// - from library.js/initLibrary/noLibraryCSS\n\t\t\tfunction css() {\n\t\t\t\tconst cssElement = findChild(libraryAppData, \"css\");\n\t\t\t\tif ( cssElement != null ) {\n\t\t\t\t\tconst css = cssElement._;\n\t\t\t\t\tif ( css === \"false\" ) {\n\t\t\t\t\t\tlog.verbose(\"  sap.ui5/library/css property taken from .library appData: '%s'\", false);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else if ( libraryJSInfo.noLibraryCSS ) {\n\t\t\t\t\tlog.verbose(\"  sap.ui5/library/css property extracted from library.js: '%s'\", false);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// content\n\t\t\t// - from library.js/initLibrary/ (types|elements|controls|interfaces)\n\t\t\tfunction content() {\n\t\t\t\tconst libraryJS = libraryJSInfo;\n\t\t\t\tif ( libraryJS.controls || libraryJS.elements || libraryJS.interfaces || libraryJS.types ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcontrols: libraryJS.controls,\n\t\t\t\t\t\telements: libraryJS.elements,\n\t\t\t\t\t\ttypes: libraryJS.types,\n\t\t\t\t\t\tinterfaces: libraryJS.interfaces\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ti18n: i18n(),\n\t\t\t\tcss: css(),\n\t\t\t\tcontent: content()\n\t\t\t};\n\t\t}\n\n\t\tconst sapUI5 = {\n\t\t\t_version: sectionVersion(APP_DESCRIPTOR_V3_OTHER_SECTIONS),\n\t\t\tdependencies: dependencies(),\n\t\t\tcontentDensities: contentDensities(),\n\t\t\tlibrary: createLibraryMetadata()\n\t\t};\n\n\t\treturn sapUI5;\n\t}\n\n\t/**\n\t * Creates an i18n section:\n\t * - either using bundleUrl and supportedLocales\n\t * - or the i18n String\n\t *\n\t * @param {string} i18n bundle url, e.g. \"messagebundle.properties\"\n\t * @param {Map<string, Set<string>>} i18nToSupportedLocales cache to determine the supportedLocales only once\n\t * @returns {{bundleUrl: string, supportedLocales: string[]}|null|string} json structure with bundleUrl and\n\t *   supportedLocales or the i18n String if not a \".properties\" file.\n\t *   <code>null</code> if given i18n String is <code>null</code>\n\t */\n\tfunction createI18nSection(i18n, i18nToSupportedLocales) {\n\t\tif (i18n === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!i18n.endsWith(\".properties\")) {\n\t\t\treturn i18n;\n\t\t}\n\n\t\t// if the supported locales information should not be included use i18n text\n\t\tif (!includeSupportedLocalesInformation) {\n\t\t\treturn i18n;\n\t\t}\n\n\t\tlet supportedLocales = i18nToSupportedLocales.get(i18n);\n\n\t\tif (!supportedLocales) {\n\t\t\tsupportedLocales = new Set();\n\n\t\t\tif (libBundle.findResource(i18n) != null) {\n\t\t\t\tsupportedLocales.add(\"\");\n\t\t\t}\n\t\t\tconst i18nPathPrefix = i18n.substring(0, i18n.length - \".properties\".length) + \"_\";\n\t\t\t// e.g. i18n/i18n_\n\n\t\t\tlibBundle.getResources().forEach((resource) => {\n\t\t\t\tconst resPath = resource.getPath();\n\t\t\t\t// e.g. sap/ui/mine/i18n/i18n_en.properties\n\t\t\t\tconst indexOfI18nPathPrefix = resPath.lastIndexOf(i18nPathPrefix);\n\t\t\t\tif (resPath.endsWith(\".properties\") && indexOfI18nPathPrefix >= 0) {\n\t\t\t\t\tconst i18nPath = resPath.substring(indexOfI18nPathPrefix + i18nPathPrefix.length,\n\t\t\t\t\t\tresPath.length - \".properties\".length);\n\t\t\t\t\tif (!i18nPath.includes(\".\")) {\n\t\t\t\t\t\tsupportedLocales.add(i18nPath.replace(/_/g, \"-\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\ti18nToSupportedLocales.set(i18n, supportedLocales);\n\t\t}\n\n\t\tconst supportedLocalesArray = Array.from(supportedLocales);\n\t\tsupportedLocalesArray.sort();\n\t\treturn {\n\t\t\tbundleUrl: i18n,\n\t\t\tsupportedLocales: supportedLocalesArray\n\t\t};\n\t}\n\n\tfunction createSapFiori() {\n\t\t// collect registrationIds if present\n\t\tfunction registrationIds() {\n\t\t\tconst ids = [];\n\t\t\tfor (const regid of findChildren(sapFioriAppData, \"registrationId\")) {\n\t\t\t\tids.push(regid._);\n\t\t\t}\n\t\t\treturn ids.length > 0 ? ids : undefined;\n\t\t}\n\n\t\tif ( sapFioriAppData != null ) {\n\t\t\treturn {\n\t\t\t\t_version: sectionVersion(APP_DESCRIPTOR_V3_OTHER_SECTIONS),\n\t\t\t\tregistrationIds: registrationIds(),\n\t\t\t\tarcheType: getChildTextContent(sapFioriAppData, \"archeType\", \"reuseComponent\")\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction createSapPlatformABAP() {\n\t\tconst sapPlatformABAPElement = findChild(manifestAppData, \"sap.platform.abap\");\n\t\tif ( sapPlatformABAPElement ) {\n\t\t\treturn {\n\t\t\t\t_version: sectionVersion(APP_DESCRIPTOR_V3_OTHER_SECTIONS),\n\t\t\t\turi: getChildTextContent(sapPlatformABAPElement, \"uri\")\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction createSapPlatformHCP() {\n\t\tconst sapPlatformHCPElement = findChild(manifestAppData, \"sap.platform.hcp\");\n\t\tif ( sapPlatformHCPElement ) {\n\t\t\treturn {\n\t\t\t\t_version: sectionVersion(APP_DESCRIPTOR_V3_OTHER_SECTIONS),\n\t\t\t\turi: getChildTextContent(sapPlatformHCPElement, \"uri\")\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction normalizeVersion(version) {\n\t\tif ( version == null ) {\n\t\t\treturn version;\n\t\t}\n\t\tconst v = new Version(version);\n\t\treturn v.major + \".\" + v.minor;\n\t}\n\n\tfunction getVersion(dependency) {\n\t\tconst version = dependency.getVersion();\n\t\tif ( version != null ) {\n\t\t\treturn version;\n\t\t}\n\n\t\tfunction hasName(entity) {\n\t\t\treturn entity.metadata && entity.metadata.name === dependency.getLibraryName();\n\t\t}\n\n\t\tconst project = libraryResource._project;\n\t\tif ( project ) {\n\t\t\tif ( Array.isArray(project.dependencies) ) {\n\t\t\t\tconst lib = project.dependencies.find(hasName);\n\t\t\t\tif ( lib ) {\n\t\t\t\t\treturn lib.version;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasName(project) ) {\n\t\t\t\treturn project.version;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`Couldn't find version for library '${dependency.getLibraryName()}', project dependency missing?`);\n\t}\n\n\treturn {\n\t\t\"_version\": descriptorVersion.toString(),\n\t\t\"sap.app\": createSapApp(),\n\t\t\"sap.ui\": createSapUi(),\n\t\t\"sap.ui5\": createSapUI5(),\n\t\t\"sap.fiori\": createSapFiori(),\n\t\t\"sap.platform.abap\": createSapPlatformABAP(),\n\t\t\"sap.platform.hcp\": createSapPlatformHCP()\n\t};\n}\n\nmodule.exports = function({libraryResource, resources, options}) {\n\t// merge options with defaults\n\toptions = Object.assign({\n\t\tdescriptorVersion: APP_DESCRIPTOR_V22, // TODO change this to type string instead of a semver object\n\t\tinclude3rdParty: true,\n\t\tprettyPrint: true\n\t}, options);\n\n\tconst resourcePathPrefix = libraryResource.getPath().slice(0, -\".library\".length);\n\tconst libBundle = new LibraryBundle(resourcePathPrefix, resources);\n\n\t// check whether a manifest exists already\n\tconst manifestResource = libBundle.findResource(\"manifest.json\");\n\tif ( manifestResource != null ) {\n\t\tlog.verbose(\"Library manifest already exists at '%s', skipping generation\", manifestResource.getPath());\n\t\treturn Promise.resolve(null); // a fulfillment of null indicates that no manifest has been created\n\t}\n\n\treturn createManifest(libraryResource, libBundle, options.descriptorVersion, options.include3rdParty)\n\t\t.then((manifest) => {\n\t\t\treturn new EvoResource({\n\t\t\t\tpath: resourcePathPrefix + \"manifest.json\",\n\t\t\t\tstring: JSON.stringify(manifest, null, options.prettyPrint ? \"  \" : undefined)\n\t\t\t});\n\t\t});\n};\n",
    "lib/processors/nonAsciiEscaper.js": "const escapeUnicode = require(\"escape-unicode\");\n\n/**\n * @see https://en.wikipedia.org/wiki/ASCII\n * ascii contains 128 characters.\n * its char codes reach from 0 to 127.\n * @type {number}\n */\nconst CHAR_CODE_OF_LAST_ASCII_CHARACTER = 127;\n\n// use memoization for escapeUnicode function for performance\nconst memoizeEscapeUnicodeMap = {};\nconst memoizeEscapeUnicode = function(sChar) {\n\tif (memoizeEscapeUnicodeMap[sChar]) {\n\t\treturn memoizeEscapeUnicodeMap[sChar];\n\t}\n\tmemoizeEscapeUnicodeMap[sChar] = escapeUnicode(sChar);\n\treturn memoizeEscapeUnicodeMap[sChar];\n};\n\n/**\n * Escapes non ASCII characters with unicode escape sequences.\n *\n * @see https://en.wikipedia.org/wiki/ASCII\n * @see https://tools.ietf.org/html/rfc5137#section-6.1\n *\n *\n * @param {string} string input string with non ascii characters, e.g. L♥VE\n * @returns {{string: (string), modified: boolean}} output string with all non ascii\n * characters being escaped by unicode sequence, e.g. L\\u2665VE\n */\nconst escapeNonAscii = function(string) {\n\tlet result = \"\";\n\tlet modified = false;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\t\t// check for non ascii characters (characters which have a char code\n\t\t// greater than the ascii character code range)\n\t\tif (string.charCodeAt(i) > CHAR_CODE_OF_LAST_ASCII_CHARACTER) {\n\t\t\tresult += memoizeEscapeUnicode(char);\n\t\t\tmodified = true;\n\t\t} else {\n\t\t\tresult += char;\n\t\t}\n\t}\n\treturn {\n\t\tmodified,\n\t\tstring: result\n\t};\n};\n\n/**\n * Escapes non ASCII characters with unicode escape sequences.\n *\n * @example\n * const encoding = nonAsciiEscaper.getEncodingFromAlias(\"ISO-8859-1\");\n * nonAsciiEscaper({resources, options: {encoding}});\n *\n *\n * @public\n * @alias module:@ui5/builder.processors.nonAsciiEscaper\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.Resource[]} parameters.resources List of resources to be processed\n * @param {object} [parameters.options] Options\n * @param {string} [parameters.options.encoding=\"utf8\"] resource file encoding\n *   ({@link https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings Node.js character encodings}).\n *   Use #getEncodingFromAlias to get the encoding string\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with the processed resources\n */\nasync function nonAsciiEscaper({resources, options: {encoding}}) {\n\tencoding = encoding || \"utf8\";\n\n\tasync function processResource(resource) {\n\t\tconst resourceString = (await resource.getBuffer()).toString(encoding);\n\t\tconst escaped = escapeNonAscii(resourceString);\n\t\t// only modify the resource's string if it was changed\n\t\tif (escaped.modified) {\n\t\t\tresource.setString(escaped.string);\n\t\t}\n\t\treturn resource;\n\t}\n\n\treturn Promise.all(resources.map(processResource));\n}\n\nconst encodingMap = {\n\t\"UTF-8\": \"utf8\",\n\t\"ISO-8859-1\": \"latin1\",\n};\n\n/**\n * Provides a mapping from user-friendly encoding name (alias) such as \"UTF-8\" and \"ISO-8859-1\" to node\n * specific encoding name such as \"utf8\" or \"latin1\". Simplifies usage of nonAsciiEscaper encoding option\n * such that it can be used standalone without the respective task (e.g. in Splitter, Bundler and related projects).\n *\n * @public\n * @alias module:@ui5/builder.processors.nonAsciiEscaper․getEncodingFromAlias\n * @param {string} encoding encoding labels: \"UTF-8\" and \"ISO-8859-1\"\n * @returns {string} node.js character encoding string, e.g. utf8 and latin1\n */\nnonAsciiEscaper.getEncodingFromAlias = function(encoding) {\n\tif (!encodingMap[encoding]) {\n\t\tthrow new Error(\n\t\t\t`Encoding \"${encoding}\" is not supported. Only ${Object.keys(encodingMap).join(\", \")} are allowed values` );\n\t}\n\treturn encodingMap[encoding];\n};\n\nmodule.exports = nonAsciiEscaper;\n",
    "lib/processors/resourceListCreator.js": "\"use strict\";\n\nconst log = require(\"@ui5/logger\").getLogger(\"builder:processors:resourceListCreator\");\nconst ResourceCollector = require(\"../lbt/resources/ResourceCollector\");\nconst LocatorResourcePool = require(\"../lbt/resources/LocatorResourcePool\");\nconst ResourceInfo = require(\"../lbt/resources/ResourceInfo\");\n\nconst EvoResource = require(\"@ui5/fs\").Resource;\n\n/**\n * List of resource patterns that describe all debug resources.\n *\n * @since 1.29.1\n */\nconst DEFAULT_DEBUG_RESOURCES_FILTER = [\n\t\"**/*-dbg.js\",\n\t\"**/*-dbg.controller.js\",\n\t\"**/*-dbg.designtime.js\",\n\t\"**/*-dbg.support.js\",\n\t\"**/*-dbg.view.js\",\n\t\"**/*-dbg.fragment.js\",\n\t\"**/*-dbg.css\",\n\t\"**/*.js.map\"\n];\n\n/**\n * List of resource patterns that describe bundled resources.\n *\n * @since 1.29.1\n */\nconst DEFAULT_BUNDLE_RESOURCES_FILTER = [\n\t\"**/Component-preload.js\",\n\t\"**/library-preload.js\",\n\t\"**/library-preload-dbg.js\",\n\t\"**/library-preload.json\",\n\t\"**/library-h2-preload.js\",\n\t\"**/designtime/library-preload.designtime.js\",\n\t\"**/library-preload.support.js\",\n\t\"**/library-all.js\",\n\t\"**/library-all-dbg.js\"\n];\n\n/**\n * List of resource patterns that describe all designtime resources.\n *\n * @since 1.31.0\n */\nconst DEFAULT_DESIGNTIME_RESOURCES_FILTER = [\n\t\"**/designtime/*\",\n\t\"**/*.designtime.js\",\n\t\"**/*.control\",\n\t\"**/*.interface\",\n\t\"**/*.type\",\n\t\"**/themes/*/*.less\",\n\t\"**/library.templates.xml\",\n\t\"**/library.dependencies.xml\",\n\t\"**/library.dependencies.json\"\n];\n\n/**\n * List of resource patterns that describe all support (assistant) resources.\n *\n * @since 1.53.0\n */\nconst DEFAULT_SUPPORT_RESOURCES_FILTER = [\n\t\"**/*.support.js\"\n];\n\n/**\n * Hard coded debug bundle, to trigger separate analysis for this filename\n * because sap-ui-core.js and sap-ui-core-dbg.js have different includes\n *\n * @type {string[]}\n */\nconst DEBUG_BUNDLES = [\n\t\"sap-ui-core-dbg.js\",\n\t\"sap-ui-core-nojQuery-dbg.js\"\n];\n\n/**\n * Creates and adds resources.json entry (itself) to the list.\n *\n * Retrieves the string content of the overall result and returns it.\n *\n * @param {ResourceInfoList} list resources list\n * @param {string} prefix\n * @returns {string} new content with resources.json entry\n */\nfunction makeResourcesJSON(list, prefix) {\n\t// having the file size entry part of the file is a bit like the chicken egg scenario\n\t// you can't change the value of the file size without changing the file size\n\t// so this part here tries to cope with that.\n\n\t// try to add resources.json entry with previous size of the list string.\n\t// get the content to be added (resources.json entry)\n\t// modify the size of the entry from the calculated one\n\n\tlet contentString = JSON.stringify(list, null, \"\\t\");\n\tconst resourcesJson = new ResourceInfo(prefix + \"resources.json\");\n\t// initial size\n\tresourcesJson.size = Buffer.from(contentString).byteLength;\n\tlist.add(resourcesJson);\n\n\tcontentString = JSON.stringify(list, null, \"\\t\");\n\n\tlet newLength = Buffer.from(contentString).byteLength;\n\n\t// Adjust size until it is correct\n\t// This entry's size depends on the file size which depends on this entry's size,...\n\t// Updating the number of the size in the content might influence the size of the file itself\n\t// This is deterministic because e.g. in the content -> <code>\"size\": 1000</code> has the same\n\t// amount of bytes as <code>\"size\": 9999</code> the difference might only come for:\n\t// * adding the initial entry of resources.json\n\t// * changes when the number of digits of the number changes, e.g. 100 -> 1000\n\twhile (resourcesJson.size !== newLength) {\n\t\tresourcesJson.size = newLength;\n\t\tlist.add(resourcesJson);\n\t\tcontentString = JSON.stringify(list, null, \"\\t\");\n\t\tnewLength = Buffer.from(contentString).byteLength;\n\t}\n\treturn contentString;\n}\n\n/**\n * Creates resources.json files\n *\n * @private\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.Resource[]} parameters.resources List of resources\n * @param {module:@ui5/fs.Resource[]} [parameters.dependencyResources=[]] List of dependency resources\n * @param {object} [parameters.options] Options\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with the resources.json resources\n */\nmodule.exports = async function({resources, dependencyResources = [], options}) {\n\toptions = Object.assign({\n\t\tfailOnOrphans: false,\n\t\texternalResources: undefined,\n\t\tdebugResources: DEFAULT_DEBUG_RESOURCES_FILTER,\n\t\tmergedResources: DEFAULT_BUNDLE_RESOURCES_FILTER,\n\t\tdesigntimeResources: DEFAULT_DESIGNTIME_RESOURCES_FILTER,\n\t\tsupportResources: DEFAULT_SUPPORT_RESOURCES_FILTER,\n\t\tdebugBundles: DEBUG_BUNDLES\n\t}, options);\n\n\tconst pool = new LocatorResourcePool();\n\tawait pool.prepare( resources );\n\tawait pool.prepare( dependencyResources );\n\n\tconst collector = new ResourceCollector(pool);\n\tconst visitPromises = resources.map((resource) => collector.visitResource(resource));\n\n\tawait Promise.all(visitPromises);\n\tlog.verbose(`\tfound ${collector.resources.size} resources`);\n\n\t// determine additional information for the found resources\n\tif ( options && options.externalResources ) {\n\t\tcollector.setExternalResources(options.externalResources);\n\t}\n\n\tawait collector.determineResourceDetails({\n\t\tpool,\n\t\tdebugResources: options.debugResources,\n\t\tmergedResources: options.mergedResources,\n\t\tdesigntimeResources: options.designtimeResources,\n\t\tsupportResources: options.supportResources,\n\t\tdebugBundles: options.debugBundles\n\t});\n\n\t// group resources by components and create ResourceInfoLists\n\tcollector.groupResourcesByComponents();\n\n\tconst resourceLists = [];\n\n\t// write out resources.json files\n\tfor (const [prefix, list] of collector.components.entries()) {\n\t\tlog.verbose(`\twriting '${prefix}resources.json'`);\n\n\t\tconst contentString = makeResourcesJSON(list, prefix);\n\n\t\tresourceLists.push(new EvoResource({\n\t\t\tpath: `/resources/${prefix}resources.json`,\n\t\t\tstring: contentString\n\t\t}));\n\t}\n\tfor (const [prefix, list] of collector.themePackages.entries()) {\n\t\tlog.verbose(`\twriting '${prefix}resources.json'`);\n\n\t\tconst contentString = makeResourcesJSON(list, prefix);\n\n\t\tresourceLists.push(new EvoResource({\n\t\t\tpath: `/resources/${prefix}resources.json`,\n\t\t\tstring: contentString\n\t\t}));\n\t}\n\tconst unassigned = collector.resources;\n\tif ( unassigned.size > 0 && options.failOnOrphans ) {\n\t\tlog.error(`resources.json generation failed because of unassigned resources: ${[...unassigned].join(\", \")}`);\n\t\tthrow new Error(\n\t\t\t`resources.json generation failed with error: There are ${unassigned.size} ` +\n\t\t\t`resources which could not be assigned to components.`);\n\t}\n\n\treturn resourceLists;\n};\n",
    "lib/processors/uglifier.js": "const terser = require(\"terser\");\n/**\n * Preserve comments which contain:\n * <ul>\n *  <li>copyright notice</li>\n *  <li>license terms</li>\n *  <li>\"@ui5-bundle\"</li>\n *  <li>\"@ui5-bundle-raw-include\"</li>\n * </ul>\n *\n * @type {RegExp}\n */\nconst copyrightCommentsAndBundleCommentPattern = /copyright|\\(c\\)(?:[0-9]+|\\s+[0-9A-za-z])|released under|license|\\u00a9|^@ui5-bundle-raw-include |^@ui5-bundle /i;\n\n/**\n * Minifies the supplied resources.\n *\n * @public\n * @alias module:@ui5/builder.processors.uglifier\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.Resource[]} parameters.resources List of resources to be processed\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with uglified resources\n */\nmodule.exports = function({resources}) {\n\treturn Promise.all(resources.map(async (resource) => {\n\t\tconst code = await resource.getString();\n\t\ttry {\n\t\t\tconst result = await terser.minify({\n\t\t\t\t[resource.getPath()]: code\n\t\t\t}, {\n\t\t\t\toutput: {\n\t\t\t\t\tcomments: copyrightCommentsAndBundleCommentPattern,\n\t\t\t\t\twrap_func_args: false\n\t\t\t\t},\n\t\t\t\tcompress: false\n\t\t\t});\n\t\t\tresource.setString(result.code);\n\t\t\treturn resource;\n\t\t} catch (err) {\n\t\t\tthrow new Error(\n\t\t\t\t`Uglification failed with error: ${err.message} in file ${err.filename} ` +\n\t\t\t\t`(line ${err.line}, col ${err.col}, pos ${err.pos})`);\n\t\t}\n\t}));\n};\n",
    "lib/processors/versionInfoGenerator.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:processors:versionInfoGenerator\");\nconst resourceFactory = require(\"@ui5/fs\").resourceFactory;\nconst posixPath = require(\"path\").posix;\n\nfunction pad(v) {\n\treturn String(v).padStart(2, \"0\");\n}\nfunction getTimestamp() {\n\tconst date = new Date();\n\tconst year = date.getFullYear();\n\tconst month = pad(date.getMonth() + 1);\n\tconst day = pad(date.getDate());\n\tconst hours = pad(date.getHours());\n\tconst minutes = pad(date.getMinutes());\n\t// yyyyMMddHHmm\n\treturn year + month + day + hours + minutes;\n}\n\n/**\n * Manifest libraries as defined in the manifest.json file\n *\n * @typedef {object<string, {lazy: boolean}>} ManifestLibraries\n *\n * sample:\n * <pre>\n * {\n * \t\"sap.chart\": {\n * \t\t\"lazy\": true\n * \t},\n * \t\"sap.f\": { }\n * }\n * </pre>\n */\n\n/**\n * Extracted information from a manifest's <code>sap.app</code> and <code>sap.ui5</code> sections.\n *\n * @typedef {object} ManifestInfo\n *\n * @property {string} id The library name, e.g. \"lib.x\"\n * @property {string} embeddedBy the library this component is embedded in, e.g. \"lib.x\"\n * @property {string[]} embeds the embedded component names, e.g. [\"lib.x.sub\"]\n * @property {ManifestLibraries} libs the dependencies, e.g. {\"sap.chart\":{\"lazy\": true}, \"sap.f\":{}}\n */\n\n\n/**\n * Processes manifest resource and extracts information.\n *\n * @param {module:@ui5/fs.Resource} manifestResource\n * @returns {Promise<ManifestInfo>}\n */\nconst processManifest = async (manifestResource) => {\n\tconst manifestContent = await manifestResource.getString();\n\tconst manifestObject = JSON.parse(manifestContent);\n\tconst manifestInfo = {};\n\n\t// sap.ui5/dependencies is used for the \"manifestHints/libs\"\n\tif (manifestObject[\"sap.ui5\"]) {\n\t\tconst manifestDependencies = manifestObject[\"sap.ui5\"][\"dependencies\"];\n\t\tif (manifestDependencies && manifestDependencies.libs) {\n\t\t\tconst libs = {};\n\t\t\tfor (const [libKey, libValue] of Object.entries(manifestDependencies.libs)) {\n\t\t\t\tlibs[libKey] = {};\n\t\t\t\tif (libValue.lazy) {\n\t\t\t\t\tlibs[libKey].lazy = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmanifestInfo.libs = libs;\n\t\t}\n\t}\n\n\t// sap.app/embeds, sap.app/embeddedBy and sap.app/id is used for \"components\"\n\tif (manifestObject[\"sap.app\"]) {\n\t\tconst manifestEmbeds = manifestObject[\"sap.app\"][\"embeds\"];\n\t\tmanifestInfo.embeds = manifestEmbeds;\n\n\t\tconst manifestEmbeddedBy = manifestObject[\"sap.app\"][\"embeddedBy\"];\n\t\tmanifestInfo.embeddedBy = manifestEmbeddedBy;\n\n\t\tconst id = manifestObject[\"sap.app\"][\"id\"];\n\t\tmanifestInfo.id = id;\n\t}\n\treturn manifestInfo;\n};\n\n/**\n * Checks if a component (componentPath) is bundled with the library (embeddedBy)\n *\n * @param {string} embeddedBy e.g. \"../\"\n * @param {string} componentPath e.g. \"lib/x/sub\"\n * @param {string} libraryPathPrefix e.g. \"lib/x\"\n * @returns {boolean} whether or not this component is bundled with the library\n */\nconst isBundledWithLibrary = (embeddedBy, componentPath, libraryPathPrefix) => {\n\tif (typeof embeddedBy === \"undefined\") {\n\t\tlog.verbose(\"  component doesn't declare 'sap.app/embeddedBy', don't list it as 'embedded'\");\n\t\treturn false;\n\t}\n\tif (typeof embeddedBy !== \"string\") {\n\t\tlog.error(\n\t\t\t\"  component '%s': property 'sap.app/embeddedBy' is of type '%s' (expected 'string'), \" +\n\t\t\t\"it won't be listed as 'embedded'\", componentPath, typeof embeddedBy\n\t\t);\n\t\treturn false;\n\t}\n\tif ( !embeddedBy.length ) {\n\t\tlog.error(\n\t\t\t\"  component '%s': property 'sap.app/embeddedBy' has an empty string value (which is invalid), \" +\n\t\t\t\"it won't be listed as 'embedded'\", componentPath\n\t\t);\n\t\treturn false;\n\t}\n\tlet resolvedEmbeddedBy = posixPath.resolve(componentPath, embeddedBy);\n\tif ( resolvedEmbeddedBy && !resolvedEmbeddedBy.endsWith(\"/\") ) {\n\t\tresolvedEmbeddedBy = resolvedEmbeddedBy + \"/\";\n\t}\n\tif ( libraryPathPrefix === resolvedEmbeddedBy ) {\n\t\tlog.verbose(\"  component's 'sap.app/embeddedBy' property points to library, list it as 'embedded'\");\n\t\treturn true;\n\t} else {\n\t\tlog.verbose(\n\t\t\t\"  component's 'sap.app/embeddedBy' points to '%s', don't list it as 'embedded'\", resolvedEmbeddedBy\n\t\t);\n\t\treturn false;\n\t}\n};\n\n/**\n * Retrieves the manifest path of a subcomponent\n *\n * @param {string} filePath path to the manifest, e.g. \"lib/x/manifest.json\"\n * @param {string} subPath relative sub path, e.g. \"sub\"\n * @returns {string} manifest path, e.g. \"lib/x/sub/manifest.json\"\n */\nconst getManifestPath = (filePath, subPath) => {\n\treturn posixPath.resolve(posixPath.dirname(filePath), subPath, \"manifest.json\");\n};\n\n/**\n * Represents dependency information for a library.\n * Dependencies can be retrieved using <code>#getResolvedLibraries</code>\n * and with that are resolved recursively\n */\nclass DependencyInfo {\n\t/**\n\t *\n\t * @param {ManifestLibraries} libs\n\t * @param {string} name library name, e.g. \"lib.x\"\n\t */\n\tconstructor(libs, name) {\n\t\tthis.libs = libs;\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * Add library to libsResolved and if already present\n\t * merge lazy property\n\t *\n\t * @param {string} libName library name, e.g. \"lib.x\"\n\t * @param {boolean} lazy\n\t * @returns {{lazy: boolean}} the added library\n\t */\n\taddResolvedLibDependency(libName, lazy) {\n\t\tlet alreadyResolved = this._libsResolved[libName];\n\t\tif (!alreadyResolved) {\n\t\t\talreadyResolved = Object.create(null);\n\t\t\tif (lazy) {\n\t\t\t\talreadyResolved.lazy = true;\n\t\t\t}\n\t\t\tthis._libsResolved[libName] = alreadyResolved;\n\t\t} else {\n\t\t\t// siblings if sibling is eager only if one other sibling eager\n\t\t\talreadyResolved.lazy = alreadyResolved.lazy && lazy;\n\t\t}\n\t\treturn alreadyResolved;\n\t}\n\n\t/**\n\t * Resolves dependencies recursively and retrieves them with\n\t * - resolved siblings a lazy and a eager dependency becomes eager\n\t * - resolved children become lazy if their parent is lazy\n\t *\n\t * @param {Map<string,DependencyInfo>} dependencyInfoMap\n\t * @returns {ManifestLibraries} resolved libraries\n\t */\n\tgetResolvedLibraries(dependencyInfoMap) {\n\t\tif (!this._libsResolved) {\n\t\t\t// early set if there is a potential cycle\n\t\t\tthis._libsResolved = Object.create(null);\n\t\t\tif (!this.libs) {\n\t\t\t\treturn this._libsResolved;\n\t\t\t}\n\t\t\tfor (const [libName, libValue] of Object.entries(this.libs)) {\n\t\t\t\tconst lazy = libValue.lazy;\n\t\t\t\tconst dependencyInfoObjectAdded = this.addResolvedLibDependency(libName, lazy);\n\t\t\t\tconst dependencyInfo = dependencyInfoMap.get(libName);\n\t\t\t\tif (dependencyInfo) {\n\t\t\t\t\tconst childLibsResolved = dependencyInfo.getResolvedLibraries(dependencyInfoMap);\n\n\t\t\t\t\t// children if parent is lazy children become lazy\n\t\t\t\t\tfor (const [resolvedLibName, resolvedLib] of Object.entries(childLibsResolved)) {\n\t\t\t\t\t\tthis.addResolvedLibDependency(resolvedLibName,\n\t\t\t\t\t\t\tresolvedLib.lazy || dependencyInfoObjectAdded.lazy);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlog.info(`Cannot find dependency '${libName}' `+\n\t\t\t\t\t\t`defined in the manifest.json or .library file of project '${this.name}'. ` +\n\t\t\t\t\t\t\"This might prevent some UI5 runtime performance optimizations from taking effect. \" +\n\t\t\t\t\t\t\"Please double check your project's dependency configuration.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._libsResolved;\n\t}\n}\n\n\n/**\n * Sorts the keys of a given object\n *\n * @param {object} obj the object\n * @returns {object} the object with sorted keys\n */\nconst sortObjectKeys = (obj) => {\n\tconst sortedObject = {};\n\tconst keys = Object.keys(obj);\n\tkeys.sort();\n\tkeys.forEach((key) => {\n\t\tsortedObject[key] = obj[key];\n\t});\n\treturn sortedObject;\n};\n\n/**\n * Builds the manifestHints object from the dependencyInfo\n *\n * @param {DependencyInfo} dependencyInfo\n * @param {Map<string, DependencyInfo>} dependencyInfoMap\n * @returns {{dependencies: {libs: ManifestLibraries}}} manifestHints\n */\nconst getManifestHints = (dependencyInfo, dependencyInfoMap) => {\n\tif (dependencyInfo) {\n\t\tconst libsResolved = dependencyInfo.getResolvedLibraries(dependencyInfoMap);\n\t\tif (libsResolved && Object.keys(libsResolved).length) {\n\t\t\treturn {\n\t\t\t\tdependencies: {\n\t\t\t\t\tlibs: sortObjectKeys(libsResolved)\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n};\n\n/**\n * Common type for Library and Component\n * embeds and bundled components make only sense for library\n *\n * @typedef {object} ArtifactInfo\n * @property {string} componentName The library name, e.g. \"lib.x\"\n * @property {Set<string>} bundledComponents The embedded components which have an embeddedBy reference to the library\n * @property {DependencyInfo} dependencyInfo The dependency info object\n * @property {ArtifactInfo[]} embeds The embedded artifact infos\n */\n\n\n/**\n * Processes the manifest and creates a ManifestInfo and an ArtifactInfo.\n *\n * @param {module:@ui5/fs.Resource} libraryManifest\n * @param {string} [name] library name, if not provided using the ManifestInfo's id\n * @returns {Promise<{manifestInfo: ManifestInfo, libraryArtifactInfo: ArtifactInfo}>}\n */\nasync function processManifestAndGetArtifactInfo(libraryManifest, name) {\n\tconst manifestInfo = await processManifest(libraryManifest);\n\tname = name || manifestInfo.id;\n\tconst libraryArtifactInfo = Object.create(null);\n\tlibraryArtifactInfo.componentName = name;\n\tlibraryArtifactInfo.dependencyInfo = new DependencyInfo(manifestInfo.libs, name);\n\treturn {manifestInfo, libraryArtifactInfo};\n}\n\n/**\n * Processes the library info and fills the maps <code>dependencyInfoMap</code> and <code>embeddedInfoMap</code>.\n *\n * @param {LibraryInfo} libraryInfo\n * @returns {Promise<ArtifactInfo|undefined>}\n */\nconst processLibraryInfo = async (libraryInfo) => {\n\tif (!libraryInfo.libraryManifest) {\n\t\tlog.verbose(\n\t\t\t`Cannot add meta information for library '${libraryInfo.name}'. The manifest.json file cannot be found`);\n\t\treturn;\n\t}\n\n\tconst {manifestInfo, libraryArtifactInfo} =\n\t\tawait processManifestAndGetArtifactInfo(libraryInfo.libraryManifest, libraryInfo.name);\n\n\tconst bundledComponents = new Set();\n\tlibraryArtifactInfo.bundledComponents = bundledComponents;\n\n\tconst embeds = manifestInfo.embeds||[]; // e.g. [\"sub\"]\n\t// filter only embedded manifests\n\tconst embeddedPaths = embeds.map((embed) => {\n\t\treturn getManifestPath(libraryInfo.libraryManifest.getPath(), embed);\n\t});\n\t// e.g. manifest resource with lib/x/sub/manifest.json\n\tlet embeddedManifests = libraryInfo.embeddedManifests || [];\n\tembeddedManifests = embeddedManifests.filter((manifestResource) => {\n\t\treturn embeddedPaths.includes(manifestResource.getPath());\n\t});\n\n\t// get all embedded manifests\n\tconst embeddedManifestPromises = embeddedManifests.map(async (embeddedManifest) => {\n\t\tconst {manifestInfo: embeddedManifestInfo, libraryArtifactInfo: embeddedArtifactInfo} =\n\t\t\tawait processManifestAndGetArtifactInfo(embeddedManifest);\n\n\t\tconst componentName = embeddedManifestInfo.id;\n\n\t\tconst embeddedManifestDirName = posixPath.dirname(embeddedManifest.getPath());\n\t\tconst libraryManifestDirName = posixPath.dirname(libraryInfo.libraryManifest.getPath());\n\n\t\tif (isBundledWithLibrary(embeddedManifestInfo.embeddedBy, embeddedManifestDirName,\n\t\t\tlibraryManifestDirName + \"/\")) {\n\t\t\tbundledComponents.add(componentName);\n\t\t}\n\t\treturn embeddedArtifactInfo;\n\t});\n\n\tconst embeddedArtifactInfos = await Promise.all(embeddedManifestPromises);\n\tlibraryArtifactInfo.embeds = embeddedArtifactInfos;\n\n\treturn libraryArtifactInfo;\n};\n\n/**\n * Library Info\n *\n * contains information about the name and the version of the library and its manifest, as well as the nested manifests.\n *\n * @typedef {object} LibraryInfo\n * @property {string} name The library name, e.g. \"lib.x\"\n * @property {string} version The library version, e.g. \"1.0.0\"\n * @property {module:@ui5/fs.Resource} libraryManifest library manifest resource,\n *  e.g. resource with path \"lib/x/manifest.json\"\n * @property {module:@ui5/fs.Resource[]} embeddedManifests list of embedded manifest resources,\n *  e.g. resource with path \"lib/x/sub/manifest.json\"\n * @public\n */\n\n/**\n * Creates sap-ui-version.json.\n *\n * @public\n * @alias module:@ui5/builder.processors.versionInfoGenerator\n * @param {object} parameters Parameters\n * @param {object} parameters.options Options\n * @param {string} parameters.options.rootProjectName Name of the root project\n * @param {string} parameters.options.rootProjectVersion Version of the root project\n * @param {LibraryInfo[]} parameters.options.libraryInfos Array of objects representing libraries,\n *  e.g. <pre>\n *   {\n *      name: \"lib.x\",\n *      version: \"1.0.0\",\n *      libraryManifest: module:@ui5/fs.Resource,\n *      embeddedManifests: module:@ui5/fs.Resource[]\n *   }\n * </pre>\n * @returns {Promise<module:@ui5/fs.Resource[]>} Promise resolving with an array containing the versionInfo resource\n */\n\nmodule.exports = async function({options}) {\n\tif (!options.rootProjectName || options.rootProjectVersion === undefined || options.libraryInfos === undefined) {\n\t\tthrow new Error(\"[versionInfoGenerator]: Missing options parameters\");\n\t}\n\n\tconst buildTimestamp = getTimestamp();\n\n\t/**\n\t * componentName to dependency info\n\t *\n\t * @type {Map<string, DependencyInfo>}\n\t */\n\tconst dependencyInfoMap = new Map();\n\n\n\t// process library infos\n\tconst libraryInfosProcessPromises = options.libraryInfos.map((libraryInfo) => {\n\t\treturn processLibraryInfo(libraryInfo);\n\t});\n\n\tlet artifactInfos = await Promise.all(libraryInfosProcessPromises);\n\tartifactInfos = artifactInfos.filter(Boolean);\n\n\t// fill dependencyInfoMap\n\tartifactInfos.forEach((artifactInfo) => {\n\t\tdependencyInfoMap.set(artifactInfo.componentName, artifactInfo.dependencyInfo);\n\t});\n\n\n\tconst libraries = options.libraryInfos.map((libraryInfo) => {\n\t\tconst library = {\n\t\t\tname: libraryInfo.name,\n\t\t\tversion: libraryInfo.version,\n\t\t\tbuildTimestamp: buildTimestamp,\n\t\t\tscmRevision: \"\"// TODO: insert current library scm revision here\n\t\t};\n\n\t\tconst dependencyInfo = dependencyInfoMap.get(libraryInfo.name);\n\t\tconst manifestHints = getManifestHints(dependencyInfo, dependencyInfoMap);\n\t\tif (manifestHints) {\n\t\t\tlibrary.manifestHints = manifestHints;\n\t\t}\n\t\treturn library;\n\t});\n\n\t// sort libraries alphabetically\n\tlibraries.sort((a, b) => {\n\t\treturn a.name.localeCompare(b.name);\n\t});\n\n\t// components\n\tlet components;\n\tartifactInfos.forEach((artifactInfo) => {\n\t\tartifactInfo.embeds.forEach((embeddedArtifactInfo) => {\n\t\t\tconst componentObject = {};\n\t\t\tconst bundledComponents = artifactInfo.bundledComponents;\n\t\t\tconst componentName = embeddedArtifactInfo.componentName;\n\t\t\tif (!bundledComponents.has(componentName)) {\n\t\t\t\tcomponentObject.hasOwnPreload = true;\n\t\t\t}\n\t\t\tcomponentObject.library = artifactInfo.componentName;\n\n\t\t\tconst manifestHints = getManifestHints(embeddedArtifactInfo.dependencyInfo, dependencyInfoMap);\n\t\t\tif (manifestHints) {\n\t\t\t\tcomponentObject.manifestHints = manifestHints;\n\t\t\t}\n\n\t\t\tcomponents = components || {};\n\t\t\tcomponents[componentName] = componentObject;\n\t\t});\n\t});\n\n\t// sort components alphabetically\n\tcomponents = components && sortObjectKeys(components);\n\n\tconst versionJson = {\n\t\tname: options.rootProjectName,\n\t\tversion: options.rootProjectVersion, // TODO: insert current application version here\n\t\tbuildTimestamp: buildTimestamp,\n\t\tscmRevision: \"\", // TODO: insert current application scm revision here\n\t\t// gav: \"\", // TODO: insert current application id + version here\n\t\tlibraries,\n\t\tcomponents\n\t};\n\n\treturn [resourceFactory.createResource({\n\t\tpath: \"/resources/sap-ui-version.json\",\n\t\tstring: JSON.stringify(versionJson, null, \"\\t\")\n\t})];\n};\n",
    "lib/tasks/buildThemes.js": "const path = require(\"path\");\nconst themeBuilder = require(\"../processors/themeBuilder\");\nconst ReaderCollectionPrioritized = require(\"@ui5/fs\").ReaderCollectionPrioritized;\nconst fsInterface = require(\"@ui5/fs\").fsInterface;\nconst log = require(\"@ui5/logger\").getLogger(\"builder:tasks:buildThemes\");\n\n/**\n * Task to build a library theme.\n *\n * @public\n * @alias module:@ui5/builder.tasks.buildThemes\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.projectName Project name\n * @param {string} parameters.options.inputPattern Search pattern for *.less files to be built\n * @param {string} [parameters.options.librariesPattern] Search pattern for .library files\n * @param {string} [parameters.options.themesPattern] Search pattern for sap.ui.core theme folders\n * @param {boolean} [parameters.options.compress=true]\n * @param {boolean} [parameters.options.cssVariables=false]\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({\n\tworkspace, dependencies,\n\toptions: {\n\t\tprojectName, inputPattern, librariesPattern, themesPattern, compress, cssVariables\n\t}\n}) {\n\tconst combo = new ReaderCollectionPrioritized({\n\t\tname: `theme - prioritize workspace over dependencies: ${projectName}`,\n\t\treaders: [workspace, dependencies]\n\t});\n\n\tcompress = compress === undefined ? true : compress;\n\n\tconst pAllResources = workspace.byGlob(inputPattern);\n\tlet pAvailableLibraries;\n\tlet pAvailableThemes;\n\tif (librariesPattern) {\n\t\t// If a librariesPattern is given\n\t\t//\twe will use it to reduce the set of libraries a theme will be built for\n\t\tpAvailableLibraries = combo.byGlob(librariesPattern);\n\t}\n\tif (themesPattern) {\n\t\t// If a themesPattern is given\n\t\t//\twe will use it to reduce the set of themes that will be built\n\t\tpAvailableThemes = combo.byGlob(themesPattern, {nodir: false});\n\t}\n\n\t/* Don't try to build themes for libraries that are not available\n\t(maybe replace this with something more aware of which dependencies are optional and therefore\n\t\tlegitimately missing and which not (fault case))\n\t\t*/\n\tlet availableLibraries;\n\tif (pAvailableLibraries) {\n\t\tavailableLibraries = (await pAvailableLibraries).map((resource) => {\n\t\t\treturn resource.getPath().replace(/[^/]*\\.library/i, \"\");\n\t\t});\n\t}\n\tlet availableThemes;\n\tif (pAvailableThemes) {\n\t\tavailableThemes = (await pAvailableThemes)\n\t\t\t.filter((resource) => resource.getStatInfo().isDirectory())\n\t\t\t.map((resource) => {\n\t\t\t\treturn path.basename(resource.getPath());\n\t\t\t});\n\t}\n\n\tlet allResources = await pAllResources;\n\n\tconst isAvailable = function(resource) {\n\t\tlet libraryAvailable = false;\n\t\tlet themeAvailable = false;\n\t\tconst resourcePath = resource.getPath();\n\t\tconst themeName = path.basename(path.dirname(resourcePath));\n\n\t\tif (!availableLibraries || availableLibraries.length === 0) {\n\t\t\tlibraryAvailable = true; // If no libraries are found, build themes for all libraries\n\t\t} else {\n\t\t\tfor (let i = availableLibraries.length - 1; i >= 0; i--) {\n\t\t\t\tif (resourcePath.startsWith(availableLibraries[i])) {\n\t\t\t\t\tlibraryAvailable = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!availableThemes || availableThemes.length === 0) {\n\t\t\tthemeAvailable = true; // If no themes are found, build all themes\n\t\t} else {\n\t\t\tthemeAvailable = availableThemes.includes(themeName);\n\t\t}\n\n\t\tif (log.isLevelEnabled(\"verbose\")) {\n\t\t\tif (!libraryAvailable) {\n\t\t\t\tlog.verbose(`Skipping ${resourcePath}: Library is not available`);\n\t\t\t}\n\t\t\tif (!themeAvailable) {\n\t\t\t\tlog.verbose(`Skipping ${resourcePath}: sap.ui.core theme '${themeName}' is not available. ` +\n\t\t\t\t\"If you experience missing themes, check whether you have added the corresponding theme \" +\n\t\t\t\t\"library to your projects dependencies and make sure that your custom themes contain \" +\n\t\t\t\t\"resources for the sap.ui.core namespace.\");\n\t\t\t}\n\t\t}\n\n\t\t// Only build if library and theme are available\n\t\treturn libraryAvailable && themeAvailable;\n\t};\n\n\tif (availableLibraries || availableThemes) {\n\t\tif (log.isLevelEnabled(\"verbose\")) {\n\t\t\tlog.verbose(\"Filtering themes to be built:\");\n\t\t\tif (availableLibraries) {\n\t\t\t\tlog.verbose(`Available libraries: ${availableLibraries.join(\", \")}`);\n\t\t\t}\n\t\t\tif (availableThemes) {\n\t\t\t\tlog.verbose(`Available sap.ui.core themes: ${availableThemes.join(\", \")}`);\n\t\t\t}\n\t\t}\n\t\tallResources = allResources.filter(isAvailable);\n\t}\n\n\tconst processedResources = await themeBuilder({\n\t\tresources: allResources,\n\t\tfs: fsInterface(combo),\n\t\toptions: {\n\t\t\tcompress,\n\t\t\tcssVariables: !!cssVariables\n\t\t}\n\t});\n\n\tawait Promise.all(processedResources.map((resource) => {\n\t\treturn workspace.write(resource);\n\t}));\n};\n",
    "lib/tasks/bundlers/generateComponentPreload.js": "const path = require(\"path\");\nconst moduleBundler = require(\"../../processors/bundlers/moduleBundler\");\nconst log = require(\"@ui5/logger\").getLogger(\"builder:tasks:bundlers:generateComponentPreload\");\nconst ReaderCollectionPrioritized = require(\"@ui5/fs\").ReaderCollectionPrioritized;\nconst {negateFilters} = require(\"../../lbt/resources/ResourceFilterList\");\n\n/**\n * Task to for application bundling.\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateComponentPreload\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {module:@ui5/builder.tasks.TaskUtil|object} [parameters.taskUtil] TaskUtil\n * @param {object} parameters.options Options\n * @param {string} parameters.options.projectName Project name\n * @param {string[]} [parameters.options.excludes=[]] List of modules declared as glob patterns (resource name patterns)\n * that should be excluded.\n * A pattern ending with a slash '/' will, similarly to the use of a single '*' or double '**' asterisk,\n * denote an arbitrary number of characters or folder names.\n * Re-includes should be marked with a leading exclamation mark '!'. The order of filters is relevant; a later\n * inclusion overrides an earlier exclusion, and vice versa.\n * @param {string[]} [parameters.options.paths] Array of paths (or glob patterns) for component files\n * @param {string[]} [parameters.options.namespaces] Array of component namespaces\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = function({\n\tworkspace, dependencies, taskUtil, options: {projectName, paths, namespaces, excludes = []}\n}) {\n\tconst combo = new ReaderCollectionPrioritized({\n\t\tname: `generateComponentPreload - prioritize workspace over dependencies: ${projectName}`,\n\t\treaders: [workspace, dependencies]\n\t});\n\n\t// TODO 3.0: Limit to workspace resources?\n\treturn combo.byGlob(\"/resources/**/*.{js,json,xml,html,properties,library}\")\n\t\t.then(async (resources) => {\n\t\t\tlet allNamespaces = [];\n\t\t\tif (paths) {\n\t\t\t\tallNamespaces = await Promise.all(paths.map(async (componentPath) => {\n\t\t\t\t\tconst globPath = \"/resources/\" + componentPath;\n\t\t\t\t\tlog.verbose(`Globbing for Components directories with configured path ${globPath}...`);\n\t\t\t\t\tconst components = await combo.byGlob(globPath); // TODO 3.0: Limit to workspace resources?\n\t\t\t\t\treturn components.map((component) => {\n\t\t\t\t\t\tconst compDir = path.dirname(component.getPath()).replace(/^\\/resources\\//i, \"\");\n\t\t\t\t\t\tlog.verbose(`Found component namespace ${compDir}`);\n\t\t\t\t\t\treturn compDir;\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}\n\t\t\tif (namespaces) {\n\t\t\t\tallNamespaces.push(...namespaces);\n\t\t\t}\n\n\t\t\tallNamespaces = Array.prototype.concat.apply([], allNamespaces);\n\t\t\t// As this task is often called with a single namespace, also check\n\t\t\t//\tfor bad calls like \"namespaces: [undefined]\"\n\t\t\tif (!allNamespaces || !allNamespaces.length || !allNamespaces[0]) {\n\t\t\t\tthrow new Error(\"generateComponentPreload: No component namespace(s) \" +\n\t\t\t\t\t`found for project: ${projectName}`);\n\t\t\t}\n\n\t\t\tconst allFilterExcludes = negateFilters(excludes);\n\t\t\tconst unusedFilterExcludes = new Set(allFilterExcludes);\n\n\t\t\tconst bundleDefinitions = allNamespaces.map((namespace) => {\n\t\t\t\tconst filters = [\n\t\t\t\t\t`${namespace}/`,\n\t\t\t\t\t`${namespace}/**/manifest.json`,\n\t\t\t\t\t`${namespace}/changes/changes-bundle.json`,\n\t\t\t\t\t`${namespace}/changes/flexibility-bundle.json`,\n\t\t\t\t\t`!${namespace}/test/`\n\t\t\t\t];\n\n\t\t\t\t// Add configured excludes for namespace\n\t\t\t\tallFilterExcludes.forEach((filterExclude) => {\n\t\t\t\t\t// Allow all excludes (!) and limit re-includes (+) to the component namespace\n\t\t\t\t\tif (filterExclude.startsWith(\"!\") || filterExclude.startsWith(`+${namespace}/`)) {\n\t\t\t\t\t\tfilters.push(filterExclude);\n\t\t\t\t\t\tunusedFilterExcludes.delete(filterExclude);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Exclude other namespaces at the end of filter list to override potential re-includes\n\t\t\t\t// from \"excludes\" config\n\t\t\t\tallNamespaces.forEach((ns) => {\n\t\t\t\t\tif (ns !== namespace && ns.startsWith(`${namespace}/`)) {\n\t\t\t\t\t\tfilters.push(`!${ns}/`);\n\t\t\t\t\t\t// Explicitly exclude manifest.json files of subcomponents since the general exclude above this\n\t\t\t\t\t\t// comment only applies to the configured default file types, which do not include \".json\"\n\t\t\t\t\t\tfilters.push(`!${ns}/**/manifest.json`);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn {\n\t\t\t\t\tname: `${namespace}/Component-preload.js`,\n\t\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\t\".js\",\n\t\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\t\".properties\"\n\t\t\t\t\t],\n\t\t\t\t\tsections: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\t\tfilters: filters,\n\t\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t\t\trenderer: false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tif (unusedFilterExcludes.size > 0) {\n\t\t\t\tunusedFilterExcludes.forEach((filterExclude) => {\n\t\t\t\t\tlog.warn(\n\t\t\t\t\t\t`Configured preload exclude contains invalid re-include: !${filterExclude.substr(1)}. ` +\n\t\t\t\t\t\t`Re-includes must start with a component namespace (${allNamespaces.join(\" or \")})`\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn Promise.all(bundleDefinitions.map((bundleDefinition) => {\n\t\t\t\tlog.verbose(`Generating ${bundleDefinition.name}...`);\n\t\t\t\treturn moduleBundler({\n\t\t\t\t\tresources,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tbundleDefinition,\n\t\t\t\t\t\tbundleOptions: {\n\t\t\t\t\t\t\tignoreMissingModules: true,\n\t\t\t\t\t\t\toptimize: true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}));\n\t\t})\n\t\t.then((processedResources) => {\n\t\t\treturn Promise.all(processedResources.map((resource) => {\n\t\t\t\tif (taskUtil) {\n\t\t\t\t\ttaskUtil.setTag(resource[0], taskUtil.STANDARD_TAGS.IsBundle);\n\t\t\t\t}\n\t\t\t\treturn workspace.write(resource[0]);\n\t\t\t}));\n\t\t});\n};\n",
    "lib/tasks/bundlers/generateFlexChangesBundle.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:tasks:bundlers:generateFlexChangesBundle\");\nconst flexChangesBundler = require(\"../../processors/bundlers/flexChangesBundler\");\n\n/**\n * Task to create changesBundle.json file containing all changes stored in the /changes folder for easier consumption\n * at runtime.\n * If a change bundle is created, \"sap.ui.fl\" is added as a dependency to the manifest.json if not already present -\n * if the dependency is already listed but lazy-loaded, lazy loading is disabled.\n * If minUI5Version >= 1.73 flexibility-bundle.json will be create.\n * If there are control variants and minUI5Version < 1.73 build will break and throw an error.\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateFlexChangesBundle\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/builder.tasks.TaskUtil|object} [parameters.taskUtil] TaskUtil\n * @param {object} [parameters.options] Options\n * @param {string} [parameters.options.namespace] Application Namespace\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({workspace, taskUtil, options: {namespace}}) {\n\t// Use the given namespace if available, otherwise use no namespace\n\t// (e.g. in case no manifest.json is present)\n\tlet pathPrefix = \"\";\n\tif (namespace) {\n\t\tpathPrefix = `/resources/${namespace}`;\n\t}\n\n\tfunction updateJson(data) {\n\t\t// ensure the existence of the libs section in the dependencies\n\t\tdata[\"sap.ui5\"] = data[\"sap.ui5\"] || {};\n\t\tdata[\"sap.ui5\"].dependencies = data[\"sap.ui5\"].dependencies || {};\n\t\tconst mLibs = data[\"sap.ui5\"].dependencies.libs = data[\"sap.ui5\"].dependencies.libs || {};\n\n\t\tif (mLibs[\"sap.ui.fl\"]) {\n\t\t\tlog.verbose(\"sap.ui.fl found in manifest.json\");\n\t\t\tif (mLibs[\"sap.ui.fl\"].lazy) {\n\t\t\t\tlog.verbose(\"sap.ui.fl 'lazy' attribute found in manifest.json, setting it to false...\");\n\t\t\t\tmLibs[\"sap.ui.fl\"].lazy = false;\n\t\t\t}\n\t\t} else {\n\t\t\tlog.verbose(\"sap.ui.fl not found in manifest.json, inserting it...\");\n\t\t\tmLibs[\"sap.ui.fl\"] = {};\n\t\t}\n\t}\n\n\tasync function updateFLdependency() {\n\t\tconst manifestResource = await workspace.byPath(`${pathPrefix}/manifest.json`);\n\t\tconst manifestContent = JSON.parse(await manifestResource.getString());\n\n\t\tupdateJson(manifestContent);\n\t\tmanifestResource.setString(JSON.stringify(manifestContent, null, \"\\t\"));\n\n\t\tawait workspace.write(manifestResource);\n\t}\n\n\tasync function readManifestMinUI5Version() {\n\t\tconst manifestResource = await workspace.byPath(`${pathPrefix}/manifest.json`);\n\t\tconst manifestContent = JSON.parse(await manifestResource.getString());\n\n\t\tmanifestContent[\"sap.ui5\"] = manifestContent[\"sap.ui5\"] || {};\n\t\tmanifestContent[\"sap.ui5\"].dependencies = manifestContent[\"sap.ui5\"].dependencies || {};\n\t\treturn manifestContent[\"sap.ui5\"].dependencies.minUI5Version =\n\t\t\tmanifestContent[\"sap.ui5\"].dependencies.minUI5Version || \"\";\n\t}\n\n\tlog.verbose(\"Collecting flexibility changes\");\n\tconst allResources = await workspace.byGlob(\n\t\t`${pathPrefix}/changes/*.{change,variant,ctrl_variant,ctrl_variant_change,ctrl_variant_management_change}`);\n\tif (allResources.length > 0) {\n\t\tconst version = await readManifestMinUI5Version();\n\t\tlet hasFlexBundleVersion = false;\n\t\tif (parseFloat(version) >= 1.73) {\n\t\t\thasFlexBundleVersion = true;\n\t\t}\n\t\tconst processedResources = await flexChangesBundler({\n\t\t\tresources: allResources,\n\t\t\toptions: {\n\t\t\t\tpathPrefix,\n\t\t\t\thasFlexBundleVersion\n\t\t\t}\n\t\t});\n\t\tawait Promise.all(processedResources.map((resource) => {\n\t\t\tlog.verbose(\"Writing flexibility changes bundle\");\n\t\t\treturn workspace.write(resource);\n\t\t}));\n\t\t// Add the sap.ui.fl dependency if a bundle has been created\n\t\tif (processedResources.length > 0) {\n\t\t\tawait updateFLdependency();\n\t\t}\n\n\t\t// Do not write bundled source files to build result\n\t\tif (taskUtil) {\n\t\t\tallResources.forEach((resource) => {\n\t\t\t\ttaskUtil.setTag(resource, taskUtil.STANDARD_TAGS.OmitFromBuildResult);\n\t\t\t});\n\t\t}\n\t}\n};\n",
    "lib/tasks/bundlers/generateManifestBundle.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:tasks:bundlers:generateManifestBundle\");\nconst manifestBundler = require(\"../../processors/bundlers/manifestBundler\");\nconst DESCRIPTOR = \"manifest.json\";\nconst PROPERTIES_EXT = \".properties\";\nconst BUNDLE_NAME = \"manifest-bundle.zip\";\n\n/**\n *\n * @public\n * @typedef {object} ManifestBundlerOptions\n * @property {string} projectName Project Name\n * @property {string} namespace Namespace\n */\n\n/**\n * Task for manifestBundler.\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateManifestBundle\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {ManifestBundlerOptions} parameters.options Options\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({workspace, options = {}}) {\n\tconst {projectName, namespace} = options;\n\tif (!projectName || !namespace) {\n\t\tthrow new Error(\"[generateManifestBundle]: One or more mandatory options not provided\");\n\t}\n\n\tconst allResources = await workspace.byGlob(`/resources/${namespace}/**/{${DESCRIPTOR},*${PROPERTIES_EXT}}`);\n\tif (allResources.length === 0) {\n\t\tlog.verbose(`Could not find a \"${DESCRIPTOR}\" file for project ${projectName}, ` +\n\t\t\t`creation of \"${BUNDLE_NAME}\" is skipped!`);\n\t\treturn;\n\t}\n\n\tconst processedResources = await manifestBundler({\n\t\tresources: allResources,\n\t\toptions: {\n\t\t\tdescriptor: DESCRIPTOR,\n\t\t\tpropertiesExtension: PROPERTIES_EXT,\n\t\t\tbundleName: BUNDLE_NAME,\n\t\t\tnamespace\n\t\t}\n\t});\n\n\tawait Promise.all(processedResources.map((resource) => {\n\t\treturn workspace.write(resource);\n\t}));\n};\n",
    "lib/tasks/bundlers/generateStandaloneAppBundle.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:tasks:bundlers:generateStandaloneAppBundle\");\nconst moduleBundler = require(\"../../processors/bundlers/moduleBundler\");\n\nfunction getBundleDefinition(config) {\n\tconst bundleDefinition = {\n\t\tname: config.name,\n\t\tdefaultFileTypes: [\n\t\t\t\".js\",\n\t\t\t\".control.xml\",\n\t\t\t\".fragment.html\",\n\t\t\t\".fragment.json\",\n\t\t\t\".fragment.xml\",\n\t\t\t\".view.html\",\n\t\t\t\".view.json\",\n\t\t\t\".view.xml\",\n\t\t\t\".properties\"\n\t\t],\n\t\tsections: []\n\t};\n\n\t// add raw section\n\tbundleDefinition.sections.push({\n\t\t// include all 'raw' modules that are needed for the UI5 loader\n\t\tmode: \"raw\",\n\t\tfilters: config.filters,\n\t\tresolve: true, // dependencies for raw modules are taken from shims in .library files\n\t\tsort: true, // topological sort on raw modules is mandatory\n\t\tdeclareModules: false\n\t});\n\n\t// preload section is only relevant for sap-ui-custom.js\n\tif (config.preloadSection) {\n\t\tbundleDefinition.sections.push({\n\t\t\tmode: \"preload\",\n\t\t\tfilters: [\n\t\t\t\t`${config.namespace || \"\"}/`,\n\t\t\t\t`${config.namespace || \"\"}/**/manifest.json`,\n\t\t\t\t`${config.namespace || \"\"}/changes/changes-bundle.json`,\n\t\t\t\t`${config.namespace || \"\"}/changes/flexibility-bundle.json`,\n\t\t\t\t`!${config.namespace || \"\"}/test/`,\n\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t],\n\t\t\tresolve: true,\n\t\t\tresolveConditional: true,\n\t\t\trenderer: true\n\t\t});\n\t}\n\n\tbundleDefinition.sections.push({\n\t\tmode: \"require\",\n\t\tfilters: [\n\t\t\t\"sap/ui/core/Core.js\"\n\t\t]\n\t});\n\n\treturn bundleDefinition;\n}\n\n/**\n * Task for bundling standalone applications.\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateStandaloneAppBundle\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {module:@ui5/builder.tasks.TaskUtil|object} [parameters.taskUtil] TaskUtil\n * @param {object} parameters.options Options\n * @param {string} parameters.options.projectName Project name\n * @param {string} [parameters.options.namespace] Project namespace\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({workspace, dependencies, taskUtil, options: {projectName, namespace}}) {\n\tif (!namespace) {\n\t\tlog.warn(`Namespace of project ${projectName} is not known. Self contained bundling is currently ` +\n\t\t\t`unable to generate complete bundles for such projects.`);\n\t}\n\n\t// If an application does not have a namespace, its resources are located at the root. Otherwise in /resources\n\t// For dependencies, we do not want to search in their test-resources\n\tconst results = await Promise.all([\n\t\tworkspace.byGlob(\"/**/*.{js,json,xml,html,properties,library}\"),\n\t\tdependencies.byGlob(\"/resources/**/*.{js,json,xml,html,properties,library}\")\n\t]);\n\tconst resources = Array.prototype.concat.apply([], results);\n\n\tconst isEvo = resources.find((resource) => {\n\t\treturn resource.getPath() === \"/resources/ui5loader.js\";\n\t});\n\tlet filters;\n\tif (isEvo) {\n\t\tfilters = [\"ui5loader-autoconfig.js\"];\n\t} else {\n\t\tfilters = [\"jquery.sap.global.js\"];\n\t}\n\n\tawait Promise.all([\n\t\tmoduleBundler({\n\t\t\tresources,\n\t\t\toptions: {\n\t\t\t\tbundleDefinition: getBundleDefinition({\n\t\t\t\t\tname: \"sap-ui-custom.js\",\n\t\t\t\t\tfilters,\n\t\t\t\t\tnamespace,\n\t\t\t\t\tpreloadSection: true\n\t\t\t\t})\n\t\t\t}\n\t\t}),\n\t\tmoduleBundler({\n\t\t\tresources,\n\t\t\toptions: {\n\t\t\t\tbundleDefinition: getBundleDefinition({\n\t\t\t\t\tname: \"sap-ui-custom-dbg.js\",\n\t\t\t\t\tfilters,\n\t\t\t\t\tnamespace\n\t\t\t\t}),\n\t\t\t\tbundleOptions: {\n\t\t\t\t\toptimize: false\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t]).then((results) => {\n\t\tconst bundles = Array.prototype.concat.apply([], results);\n\t\treturn Promise.all(bundles.map((resource) => {\n\t\t\tif (taskUtil) {\n\t\t\t\ttaskUtil.setTag(resource, taskUtil.STANDARD_TAGS.IsBundle);\n\t\t\t}\n\t\t\treturn workspace.write(resource);\n\t\t}));\n\t});\n};\n",
    "lib/tasks/createDebugFiles.js": "const dbg = require(\"../processors/debugFileCreator\");\nconst fsInterface = require(\"@ui5/fs\").fsInterface;\n\n/**\n * Task to create dbg files.\n *\n * @public\n * @alias module:@ui5/builder.tasks.createDebugFiles\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.pattern Pattern to locate the files to be processed\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({workspace, options: {pattern}}) {\n\tlet allResources;\n\tif (workspace.byGlobSource) { // API only available on duplex collections\n\t\tallResources = await workspace.byGlobSource(pattern);\n\t} else {\n\t\tallResources = await workspace.byGlob(pattern);\n\t}\n\treturn dbg({\n\t\tfs: fsInterface(workspace),\n\t\tresources: allResources\n\t}).then((processedResources) => {\n\t\treturn Promise.all(processedResources.map((resource) => {\n\t\t\treturn workspace.write(resource);\n\t\t}));\n\t});\n};\n",
    "lib/tasks/escapeNonAsciiCharacters.js": "const nonAsciiEscaper = require(\"../processors/nonAsciiEscaper\");\n\n/**\n * Task to escape non ascii characters in properties files resources.\n *\n * @public\n * @alias module:@ui5/builder.tasks.escapeNonAsciiCharacters\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.pattern Glob pattern to locate the files to be processed\n * @param {string} parameters.options.encoding source file encoding either \"UTF-8\" or \"ISO-8859-1\"\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({workspace, options: {pattern, encoding}}) {\n\tif (!encoding) {\n\t\tthrow new Error(\"[escapeNonAsciiCharacters] Mandatory option 'encoding' not provided\");\n\t}\n\n\tconst allResources = await workspace.byGlob(pattern);\n\n\tconst processedResources = await nonAsciiEscaper({\n\t\tresources: allResources,\n\t\toptions: {\n\t\t\tencoding: nonAsciiEscaper.getEncodingFromAlias(encoding)\n\t\t}\n\t});\n\n\tawait Promise.all(processedResources.map((resource) => workspace.write(resource)));\n};\n",
    "lib/tasks/generateResourcesJson.js": "\"use strict\";\n\nconst resourceListCreator = require(\"../processors/resourceListCreator\");\n\nconst DEFAULT_EXCLUDES = [\n\t/*\n\t * exclude mac metadata files\n\t */\n\t\"!**/.DS_Store\",\n\t/*\n\t * sap-ui-version.json is not part of the resources\n\t */\n\t\"!/resources/sap-ui-version.json\"\n];\n\nfunction getCreatorOptions(projectName) {\n\tconst creatorOptions = {};\n\t// TODO: Move configuration into ui5.yaml\n\tif ( projectName === \"sap.ui.core\" ) {\n\t\tObject.assign(creatorOptions, {\n\t\t\texternalResources: {\n\t\t\t\t\"sap/ui/core\": [\n\t\t\t\t\t\"*\",\n\t\t\t\t\t\"sap/base/\",\n\t\t\t\t\t\"sap/ui/\"\n\t\t\t\t]\n\t\t\t},\n\t\t\tmergedResourcesFilters: [\n\t\t\t\t\"jquery-sap*.js\",\n\t\t\t\t\"sap-ui-core*.js\",\n\t\t\t\t\"**/Component-preload.js\",\n\t\t\t\t\"**/library-preload.js\",\n\t\t\t\t\"**/library-preload-dbg.js\",\n\t\t\t\t\"**/library-preload.json\",\n\t\t\t\t\"**/library-all.js\",\n\t\t\t\t\"**/library-all-dbg.js\",\n\t\t\t\t\"**/designtime/library-preload.designtime.js\",\n\t\t\t\t\"**/library-preload.support.js\"\n\t\t\t]\n\t\t});\n\t} else if ( projectName === \"sap.ui.integration\" ) {\n\t\tObject.assign(creatorOptions, {\n\t\t\texternalResources: {\n\t\t\t\t\"sap/ui/integration\": [\n\t\t\t\t\t\"sap-ui-integration*.js\",\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\treturn creatorOptions;\n}\n\n/**\n * Task for creating a resources.json file, describing all productive build resources.\n *\n * <p>\n * The detailed structure can be found in the documentation:\n * {@link https://openui5.hana.ondemand.com/#topic/adcbcf8b50924556ab3f321fcd9353ea}\n * </p>\n *\n * <p>\n * Not supported in combination with task {@link module:@ui5/builder.tasks.generateStandaloneAppBundle}.\n * Therefore it is also not supported in combination with self-contained build.\n * </p>\n *\n * @example <caption>sample resources.json</caption>\n * const resourcesJson = {\n * \t\"_version\": \"1.1.0\",\n * \t\"resources\": [\n * \t\t{\n * \t\t\t\"name\": \"Component-preload.js\",\n * \t\t\t\"module\": \"application/mine/Component-preload.js\",\n * \t\t\t\"size\": 3746,\n * \t\t\t\"merged\": true,\n * \t\t\t\"included\": [\n * \t\t\t\t\"application/mine/Component.js\",\n * \t\t\t\t\"application/mine/changes/coding/MyExtension.js\",\n * \t\t\t\t\"application/mine/changes/flexibility-bundle.json\",\n * \t\t\t\t\"application/mine/changes/fragments/MyFragment.fragment.xml\",\n * \t\t\t\t\"application/mine/manifest.json\"\n * \t\t\t]\n * \t\t},\n * \t\t{\n * \t\t\t\"name\": \"resources.json\",\n * \t\t\t\"size\": 1870\n * \t\t},\n * \t\t{\n * \t\t\t\"name\": \"rules/Button-dbg.support.js\",\n * \t\t\t\"module\": \"application/mine/rules/Button.support.js\",\n * \t\t\t\"size\": 211,\n * \t\t\t\"format\": \"raw\",\n * \t\t\t\"isDebug\": true,\n * \t\t\t\"required\": [\n * \t\t\t\t\"application/mine/library.js\",\n * \t\t\t\t\"sap/ui/core/Control.js\"\n * \t\t\t],\n * \t\t\t\"condRequired\": [\n * \t\t\t\t\"application/mine/changeHandler/SplitButton.js\",\n * \t\t\t\t\"sap/ui/core/format/DateFormat.js\"\n * \t\t\t],\n * \t\t\t\"dynRequired\": true,\n * \t\t\t\"support\": true\n * \t\t}\n * \t]\n * };\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateResourcesJson\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} [parameters.dependencies] Reader or Collection to read dependency files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.projectName Project name\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({workspace, dependencies, options: {projectName}}) {\n\tconst resources = await workspace.byGlob([\"/resources/**/*.*\"].concat(DEFAULT_EXCLUDES));\n\n\t// TODO 3.0: Make dependencies parameter mandatory\n\tlet dependencyResources;\n\tif (dependencies) {\n\t\tdependencyResources =\n\t\t\tawait dependencies.byGlob(\"/resources/**/*.{js,json,xml,html,properties,library}\");\n\t}\n\n\tconst resourceLists = await resourceListCreator({\n\t\tresources,\n\t\tdependencyResources,\n\t\toptions: getCreatorOptions(projectName),\n\t});\n\tawait Promise.all(\n\t\tresourceLists.map((resourceList) => workspace.write(resourceList))\n\t);\n};\n",
    "lib/tasks/generateThemeDesignerResources.js": "const posixPath = require(\"path\").posix;\nconst log = require(\"@ui5/logger\").getLogger(\"builder:tasks:generateThemeDesignerResources\");\nconst libraryLessGenerator = require(\"../processors/libraryLessGenerator\");\nconst {ReaderCollectionPrioritized, Resource, fsInterface} = require(\"@ui5/fs\");\n\nfunction generateLibraryDotTheming({namespace, version, hasThemes}) {\n\tconst dotTheming = {\n\t\tsEntity: \"Library\",\n\t\tsId: namespace,\n\t\tsVersion: version\n\t};\n\n\tif (namespace === \"sap/ui/core\") {\n\t\tdotTheming.aFiles = [\n\t\t\t\"library\",\n\t\t\t\"global\", // Additional entry compared to UI5 root .theming\n\t\t\t\"css_variables\",\n\t\t];\n\t}\n\tif (!hasThemes) {\n\t\t// Set ignore flag when there are no themes at all\n\t\t// This is important in case a library used to contain themes that have been removed\n\t\t// in a later version of the library.\n\t\tdotTheming.bIgnore = true;\n\t}\n\n\treturn new Resource({\n\t\tpath: `/resources/${namespace}/.theming`,\n\t\tstring: JSON.stringify(dotTheming, null, 2)\n\t});\n}\n\nasync function generateThemeDotTheming({workspace, combo, themeFolder}) {\n\tconst themeName = posixPath.basename(themeFolder);\n\tconst libraryMatchPattern = /^\\/resources\\/(.*)\\/themes\\/[^/]*$/i;\n\tconst libraryMatch = libraryMatchPattern.exec(themeFolder);\n\tlet libraryName;\n\tif (libraryMatch) {\n\t\tlibraryName = libraryMatch[1].replace(/\\//g, \".\");\n\t} else {\n\t\tthrow new Error(`Failed to extract library name from theme folder path: ${themeFolder}`);\n\t}\n\n\tconst dotThemingTargetPath = posixPath.join(themeFolder, \".theming\");\n\tif (libraryName === \"sap.ui.core\") {\n\t\t// sap.ui.core should always have a .theming file for all themes\n\n\t\tif (await workspace.byPath(dotThemingTargetPath)) {\n\t\t\t// .theming file present, skip further processing\n\t\t\treturn;\n\t\t} else {\n\t\t\tthrow new Error(`.theming file for theme ${themeName} missing in sap.ui.core library source`);\n\t\t}\n\t}\n\n\tlet newDotThemingResource;\n\tconst coreDotThemingResource = await combo.byPath(`/resources/sap/ui/core/themes/${themeName}/.theming`);\n\n\tif (coreDotThemingResource) {\n\t\t// Copy .theming file from core\n\t\tnewDotThemingResource = await coreDotThemingResource.clone();\n\t\tnewDotThemingResource.setPath(dotThemingTargetPath);\n\t} else {\n\t\t// No core .theming file found for this theme => Generate a .theming file\n\t\tconst dotTheming = {\n\t\t\tsEntity: \"Theme\",\n\t\t\tsId: themeName,\n\t\t\tsVendor: \"SAP\"\n\t\t};\n\n\t\tif (themeName !== \"base\") {\n\t\t\tdotTheming.oExtends = \"base\";\n\t\t}\n\n\t\tnewDotThemingResource = new Resource({\n\t\t\tpath: dotThemingTargetPath,\n\t\t\tstring: JSON.stringify(dotTheming, null, 2)\n\t\t});\n\t}\n\treturn newDotThemingResource;\n}\n\n/**\n * Generates resources required for integration with the SAP Theme Designer.\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateThemeDesignerResources\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.projectName Project name\n * @param {string} parameters.options.version Project version\n * @param {string} [parameters.options.namespace] If the project is of type <code>library</code>, provide its namespace.\n * Omit for type <code>theme-library</code>\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({workspace, dependencies, options: {projectName, version, namespace}}) {\n\t// Skip sap.ui.documentation since it is not intended to be available in SAP Theme Designer to create custom themes\n\tif (namespace === \"sap/ui/documentation\") {\n\t\treturn;\n\t}\n\n\tlet librarySourceLessPattern;\n\tif (namespace) {\n\t\t// In case of a library only check for themes directly below the namespace\n\t\tlibrarySourceLessPattern = `/resources/${namespace}/themes/*/library.source.less`;\n\t} else {\n\t\t// In case of a theme-library check for all \"themes\"\n\t\tlibrarySourceLessPattern = `/resources/**/themes/*/library.source.less`;\n\t}\n\n\tconst librarySourceLessResources = await workspace.byGlob(librarySourceLessPattern);\n\n\tconst hasThemes = librarySourceLessResources.length > 0;\n\n\t// library .theming file\n\t// Only for type \"library\". Type \"theme-library\" does not provide a namespace\n\t// Also needs to be created in case a library does not have any themes (see bIgnore flag)\n\tif (namespace) {\n\t\tlog.verbose(`Generating .theming for namespace ${namespace}`);\n\t\tconst libraryDotThemingResource = generateLibraryDotTheming({\n\t\t\tnamespace,\n\t\t\tversion,\n\t\t\thasThemes\n\t\t});\n\t\tawait workspace.write(libraryDotThemingResource);\n\t}\n\n\tif (!hasThemes) {\n\t\t// Skip further processing as there are no themes\n\t\treturn;\n\t}\n\n\tconst combo = new ReaderCollectionPrioritized({\n\t\tname: `generateThemeDesignerResources - prioritize workspace over dependencies: ${projectName}`,\n\t\treaders: [workspace, dependencies]\n\t});\n\n\t// theme .theming files\n\tconst themeDotThemingFiles = await Promise.all(\n\t\tlibrarySourceLessResources.map((librarySourceLess) => {\n\t\t\tconst themeFolder = posixPath.dirname(librarySourceLess.getPath());\n\t\t\tlog.verbose(`Generating .theming for theme ${themeFolder}`);\n\t\t\treturn generateThemeDotTheming({\n\t\t\t\tworkspace, combo, themeFolder\n\t\t\t});\n\t\t})\n\t);\n\tawait Promise.all(\n\t\tthemeDotThemingFiles.map(async (resource) => {\n\t\t\tif (resource) {\n\t\t\t\tawait workspace.write(resource);\n\t\t\t}\n\t\t})\n\t);\n\n\t// library.less files\n\tconst libraryLessResources = await libraryLessGenerator({\n\t\tresources: librarySourceLessResources,\n\t\tfs: fsInterface(combo),\n\t});\n\tawait Promise.all(\n\t\tlibraryLessResources.map((resource) => workspace.write(resource))\n\t);\n};\n",
    "lib/tasks/generateVersionInfo.js": "const versionInfoGenerator = require(\"../processors/versionInfoGenerator\");\n\nconst MANIFEST_JSON = \"manifest.json\";\n\n/**\n * Task to create sap-ui-version.json\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateVersionInfo\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.pattern Glob pattern for .library resources\n * @param {object} parameters.options.rootProject DuplexCollection to read and write files\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async ({workspace, dependencies, options: {rootProject, pattern}}) => {\n\tconst resources = await dependencies.byGlob(pattern);\n\n\tconst libraryInfosPromises = resources.map((dotLibResource) => {\n\t\tconst namespace = dotLibResource._project.metadata.namespace;\n\t\t// pass all required resources to the processor\n\t\t// the processor will then filter\n\t\treturn dependencies.byGlob(`/resources/${namespace}/**/${MANIFEST_JSON}`).then((manifestResources) => {\n\t\t\tconst libraryManifest = manifestResources.find((manifestResource) => {\n\t\t\t\treturn manifestResource.getPath() === `/resources/${namespace}/${MANIFEST_JSON}`;\n\t\t\t});\n\t\t\tconst embeddedManifests =\n\t\t\t\tmanifestResources.filter((manifestResource) => manifestResource !== libraryManifest);\n\t\t\treturn {\n\t\t\t\tlibraryManifest,\n\t\t\t\tembeddedManifests,\n\t\t\t\tname: dotLibResource._project.metadata.name,\n\t\t\t\tversion: dotLibResource._project.version\n\t\t\t};\n\t\t});\n\t});\n\tconst libraryInfos = await Promise.all(libraryInfosPromises);\n\n\tconst [versionInfoResource] = await versionInfoGenerator({\n\t\toptions: {\n\t\t\trootProjectName: rootProject.metadata.name,\n\t\t\trootProjectVersion: rootProject.version,\n\t\t\tlibraryInfos\n\t\t}\n\t});\n\treturn workspace.write(versionInfoResource);\n};\n",
    "lib/tasks/jsdoc/executeJsdocSdkTransformation.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:tasks:jsdoc:executeJsdocSdkTransformation\");\nconst ReaderCollectionPrioritized = require(\"@ui5/fs\").ReaderCollectionPrioritized;\nconst fsInterface = require(\"@ui5/fs\").fsInterface;\nconst sdkTransformer = require(\"../../processors/jsdoc/sdkTransformer\");\n\n/**\n * Task to transform the api.json file as created by the\n * [generateJsdoc]{@link module:@ui5/builder.tasks.generateJsdoc} task into a pre-processed api.json\n * file suitable for the SDK.\n *\n * @public\n * @alias module:@ui5/builder.tasks.executeJsdocSdkTransformation\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {object} parameters.options Options\n * @param {string|Array} parameters.options.dotLibraryPattern Pattern to locate the .library resource to be processed\n * @param {string} parameters.options.projectName Project name\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nconst executeJsdocSdkTransformation = async function(\n\t{workspace, dependencies, options: {projectName, dotLibraryPattern}} = {}\n) {\n\tif (!projectName || !dotLibraryPattern) {\n\t\tthrow new Error(\"[executeJsdocSdkTransformation]: One or more mandatory options not provided\");\n\t}\n\n\tconst [apiJsons, dotLibraries, depApiJsons] = await Promise.all([\n\t\tworkspace.byGlob(\"/test-resources/**/designtime/api.json\"),\n\t\tworkspace.byGlob(dotLibraryPattern),\n\t\tdependencies.byGlob(\"/test-resources/**/designtime/api.json\")\n\t]);\n\tif (!apiJsons.length) {\n\t\tlog.info(`Failed to locate api.json resource for project ${projectName}. ` +\n\t\t\t`Skipping SDK Transformation...`);\n\t\treturn;\n\t} else if (apiJsons.length > 1) {\n\t\tthrow new Error(`[executeJsdocSdkTransformation]: Found more than one api.json resources for project ` +\n\t\t\t`${projectName}.`);\n\t}\n\tif (!dotLibraries.length) {\n\t\tthrow new Error(`[executeJsdocSdkTransformation]: Failed to locate .library resource for project ` +\n\t\t\t`${projectName}.`);\n\t} else if (dotLibraries.length > 1) {\n\t\tthrow new Error(`[executeJsdocSdkTransformation]: Found more than one .library resources for project ` +\n\t\t\t`${projectName}.`);\n\t}\n\n\tconst combo = new ReaderCollectionPrioritized({\n\t\tname: `executeJsdocSdkTransformation - custom workspace + dependencies FS: ${projectName}`,\n\t\treaders: [workspace, dependencies]\n\t});\n\n\tconst apiJsonPath = apiJsons[0].getPath();\n\tconst dotLibraryPath = dotLibraries[0].getPath();\n\tconst dependencyApiJsonPaths = depApiJsons.map((res) => {\n\t\treturn res.getPath();\n\t});\n\n\t// Target path is typically \"/test-resources/${options.namespace}/designtime/apiref/api.json\"\n\tconst targetApiJsonPath = apiJsonPath.replace(/\\/api\\.json$/i, \"/apiref/api.json\");\n\n\tconst createdResources = await sdkTransformer({\n\t\tapiJsonPath,\n\t\tdotLibraryPath,\n\t\tdependencyApiJsonPaths,\n\t\ttargetApiJsonPath,\n\t\tfs: fsInterface(combo)\n\t});\n\n\tawait Promise.all(createdResources.map((resource) => {\n\t\treturn workspace.write(resource);\n\t}));\n};\n\nmodule.exports = executeJsdocSdkTransformation;\n",
    "lib/tasks/jsdoc/generateApiIndex.js": "const ui5Fs = require(\"@ui5/fs\");\nconst ReaderCollectionPrioritized = ui5Fs.ReaderCollectionPrioritized;\nconst fsInterface = ui5Fs.fsInterface;\nconst apiIndexGenerator = require(\"../../processors/jsdoc/apiIndexGenerator\");\n\n/**\n * Compiles an api-index.json resource from all available api.json resources as created by the\n * [executeJsdocSdkTransformation]{@link module:@ui5/builder.tasks.executeJsdocSdkTransformation} task.\n * The resulting api-index.json resource is mainly to be used in the SDK.\n *\n * @public\n * @alias module:@ui5/builder.tasks.generateApiIndex\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {module:@ui5/fs.AbstractReader} parameters.dependencies Reader or Collection to read dependency files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.projectName Project name\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({\n\tworkspace,\n\tdependencies,\n\toptions: {projectName}\n}) {\n\tconst combo = new ReaderCollectionPrioritized({\n\t\tname: `generateApiIndex - workspace + dependencies: ${projectName}`,\n\t\treaders: [workspace, dependencies]\n\t});\n\n\tconst versionInfoPath = \"/resources/sap-ui-version.json\";\n\tconst testResourcesRootPath = \"/test-resources\";\n\tconst targetApiIndexPath = \"/docs/api/api-index.json\";\n\tconst targetApiIndexDeprecatedPath = \"/docs/api/api-index-deprecated.json\";\n\tconst targetApiIndexExperimentalPath = \"/docs/api/api-index-experimental.json\";\n\tconst targetApiIndexSincePath = \"/docs/api/api-index-since.json\";\n\n\tconst createdResources = await apiIndexGenerator({\n\t\tversionInfoPath,\n\t\ttestResourcesRootPath,\n\t\ttargetApiIndexPath,\n\t\ttargetApiIndexDeprecatedPath,\n\t\ttargetApiIndexExperimentalPath,\n\t\ttargetApiIndexSincePath,\n\t\tfs: fsInterface(combo),\n\t});\n\n\tawait Promise.all(createdResources.map((resource) => {\n\t\treturn workspace.write(resource);\n\t}));\n};\n",
    "lib/tasks/transformBootstrapHtml.js": "const log = require(\"@ui5/logger\").getLogger(\"builder:tasks:transformBootstrapHtml\");\nconst bootstrapHtmlTransformer = require(\"../processors/bootstrapHtmlTransformer\");\n\n/**\n * Task for transforming the application bootstrap HTML file.\n *\n * @module builder/tasks/transformBootstrapHtml\n * @param {object} parameters Parameters\n * @param {module:@ui5/fs.DuplexCollection} parameters.workspace DuplexCollection to read and write files\n * @param {object} parameters.options Options\n * @param {string} parameters.options.projectName Project name\n * @param {string} [parameters.options.namespace] Project namespace\n * @returns {Promise<undefined>} Promise resolving with <code>undefined</code> once data has been written\n */\nmodule.exports = async function({workspace, options: {projectName, namespace}}) {\n\tlet indexPath;\n\tif (namespace) {\n\t\tindexPath = `/resources/${namespace}/index.html`;\n\t} else {\n\t\tindexPath = \"/index.html\";\n\t}\n\tconst resource = await workspace.byPath(indexPath);\n\tif (!resource) {\n\t\tlog.warn(`Skipping bootstrap transformation due to missing index.html in project \"${projectName}\".`);\n\t\treturn;\n\t}\n\tconst processedResources = await bootstrapHtmlTransformer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tsrc: \"resources/sap-ui-custom.js\"\n\t\t}\n\t});\n\tawait Promise.all(processedResources.map((resource) => workspace.write(resource)));\n};\n",
    "test/fixtures/lbt/modules/es6-syntax.js": "sap.ui.define([\n\t'static/module1'\n], (m1) => { // using an arrow function for the module factory\n\n\tsap.ui.require(['static/module2'], function() {\n\t\tsap.ui.require(['static/module3'], function() {});\n\t\tsap.ui.require('no-dependency/module1'); // probing API does not introduce a dependency\n\t});\n\n\t// using an arrow function for the require callback\n\tsap.ui.require([], () => {\n\t\tsap.ui.require(['static/module4'], function() {\n\t\t});\n\t});\n\n\t// default value in array destructuring\n\tlet [exp1 = sap.ui.require(['conditional/module1'], function(){})] = [];\n\n\t// default value in object destructuring\n\tlet {exp2 = sap.ui.require(['conditional/module2'], function(){})} = {};\n\n\t// dependency embedded in a template\n\tlet exp3 = `Some text with an embedded dependency ${sap.ui.require(['static/module5'], function(){})} and further text`;\n\n\t// dependency embedded in a tagged template\n\tlet exp4 = html`Some text with an embedded dependency ${sap.ui.require(['static/module6'], function(){})} and further text`;\n\n\t// IIAFE (an immediately invoked arrow function expression)\n\t((() => {\n\t\tsap.ui.require(['static/module7'], function(){});\n\t})());\n\n\t// a not immediately executed arrow function\n\tlet helper = (() => {\n\t\tsap.ui.require(['conditional/module3'], function(){});\n\t});\n\n\t// async / await\n\tconst myFunction = async function() {\n\t\tawait Promise.resolve();\n\t};\n\n});\n",
    "test/lib/lbt/analyzer/XMLTemplateAnalyzer.js": "const test = require(\"ava\");\nconst XMLTemplateAnalyzer = require(\"../../../../lib/lbt/analyzer/XMLTemplateAnalyzer\");\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\nconst sinon = require(\"sinon\");\n\nconst mock = require(\"mock-require\");\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\n\nconst fakeMockPool = {\n\tfindResource: () => Promise.resolve()\n};\n\ntest(\"integration: Analysis of an xml view\", async (t) => {\n\tconst xml = `<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:m=\"sap.m\" xmlns:l=\"sap.ui.layout\"\n\t\tcontrollerName=\"myController\">\n\t\t\t<l:HorizontalLayout id=\"layout\">\n\t\t\t\t<m:Button text=\"Button 1\" id=\"button1\" />\n\t\t\t\t<m:Button text=\"Button 2\" id=\"button2\" />\n\t\t\t\t<m:Button text=\"Button 3\" id=\"button3\" />\n\t\t\t\t<m:Button />\n\t\t\t</l:HorizontalLayout>\n\t\t</mvc:View>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzer(fakeMockPool);\n\tawait analyzer.analyzeView(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/mvc/XMLView.js\",\n\t\t\t\"myController.controller.js\",\n\t\t\t\"sap/ui/layout/HorizontalLayout.js\",\n\t\t\t\"sap/m/Button.js\"\n\t\t], \"Dependencies should come from the XML template\");\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/mvc/XMLView.js\"),\n\t\t\"Implicit dependency should be added since an XMLView is analyzed\");\n});\n\ntest(\"integration: Analysis of an xml view with data binding in properties\", async (t) => {\n\tconst xml = `<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\"\n\t\tcontrollerName=\"myController\">\n\t\t\t<core:ComponentContainer async=\"true\" name=\"{/component}\" />\n\t\t</mvc:View>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzer(fakeMockPool);\n\tawait analyzer.analyzeView(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/mvc/XMLView.js\",\n\t\t\t\"myController.controller.js\",\n\t\t\t\"sap/ui/core/ComponentContainer.js\"\n\t\t], \"Dependencies should come from the XML template\");\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/mvc/XMLView.js\"),\n\t\t\"Implicit dependency should be added since an XMLView is analyzed\");\n});\n\ntest.serial(\"integration: Analysis of an xml view with core:require from databinding\", async (t) => {\n\tconst logger = require(\"@ui5/logger\");\n\tconst errorLogStub = sinon.stub();\n\tconst myLoggerInstance = {\n\t\terror: errorLogStub\n\t};\n\tsinon.stub(logger, \"getLogger\").returns(myLoggerInstance);\n\tconst XMLTemplateAnalyzerWithStubbedLogger = mock.reRequire(\"../../../../lib/lbt/analyzer/XMLTemplateAnalyzer\");\n\n\tconst xml = `<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\"\n\tcontrollerName=\"my.lib.theController\"\n\t>\n\t\t<HBox>\n\t\t\t<template:with path=\"entitySet>$Type\" var=\"entityType\">\n\t\t\t\t<template:if test=\"{myCtx>myActions}\">\n\t\t\t\t</template:if>\n\t\t\t</template:with>\n\t\t</HBox>\n\t\t<HBox>\n\t\t\t<Button\n\t\t\t\t\tcore:require=\"{= '{Handler: \\\\'' + \\${myActions>handlerModule} + '\\\\'}'}\"\n\t\t\t\t\tid=\"myID\"\n\t\t\t\t\ttext=\"{myAction>text}\"\n\t\t\t\t\tpress=\"myMethod\"\n\t\t\t\t/>\n\t\t</HBox>\n\t</mvc:View>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzerWithStubbedLogger(fakeMockPool);\n\tawait analyzer.analyzeView(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/mvc/XMLView.js\",\n\t\t\t\"my/lib/theController.controller.js\",\n\t\t\t\"sap/m/HBox.js\",\n\t\t\t\"sap/m/Button.js\"\n\t\t], \"Dependencies should come from the XML template\");\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/mvc/XMLView.js\"),\n\t\t\"Implicit dependency should be added since an XMLView is analyzed\");\n\tt.true(\n\t\t!moduleInfo.isConditionalDependency(\"sap/m/Button.js\") &&\n\t\t!moduleInfo.isImplicitDependency(\"sap/m/Button.js\"),\n\t\t\"A control outside of template:if should become a strict dependency\");\n\n\tt.is(errorLogStub.callCount, 1, \"should be called 1 time\");\n\tt.deepEqual(errorLogStub.getCall(0).args, [\n\t\t\"Ignoring core:require: '%s' can't be parsed on Node %s:%s\",\n\t\t\"{= '{Handler: \\\\'' + ${myActions>handlerModule} + '\\\\'}'}\",\n\t\t\"sap.m\",\n\t\t\"Button\"\n\t], \"should be called with expected args\");\n});\n\ntest.serial(\"integration: Analysis of an xml view with core:require from databinding in template\", async (t) => {\n\tconst logger = require(\"@ui5/logger\");\n\tconst verboseLogStub = sinon.stub();\n\tconst myLoggerInstance = {\n\t\tverbose: verboseLogStub\n\t};\n\tsinon.stub(logger, \"getLogger\").returns(myLoggerInstance);\n\tconst XMLTemplateAnalyzerWithStubbedLogger = mock.reRequire(\"../../../../lib/lbt/analyzer/XMLTemplateAnalyzer\");\n\n\tconst xml = `<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\"\n\t>\n\t\t<template:with path=\"entitySet>$Type\" var=\"entityType\">\n\t\t\t<template:if test=\"{myCtx>myActions}\">\n\t\t\t\t<template:repeat list=\"{myCtx>myActions}\" var=\"myAction\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcore:require=\"{= '{Handler: \\\\'' + \\${myActions > handlerModule} + '\\\\'}'}\"\n\t\t\t\t\t\tid=\"myID\"\n\t\t\t\t\t\ttext=\"{myAction>text}\"\n\t\t\t\t\t\tpress=\"myMethod\"\n\t\t\t\t\t/>\n\t\t\t\t</template:repeat>\n\t\t\t</template:if>\n\t\t</template:with>\n\t</mvc:View>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzerWithStubbedLogger(fakeMockPool);\n\tawait analyzer.analyzeView(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/mvc/XMLView.js\",\n\t\t\t\"sap/m/Button.js\"\n\t\t], \"Dependencies should come from the XML template\");\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/mvc/XMLView.js\"),\n\t\t\"Implicit dependency should be added since an XMLView is analyzed\");\n\tt.true(moduleInfo.isConditionalDependency(\"sap/m/Button.js\"),\n\t\t\"A control within template:if or template:repeat should become a conditional dependency\");\n\n\tt.is(verboseLogStub.callCount, 1, \"should be called 1 time\");\n\tt.deepEqual(verboseLogStub.getCall(0).args, [\n\t\t\"Ignoring core:require: '%s' on Node %s:%s contains an expression binding and is within a 'template' Node\",\n\t\t\"{= '{Handler: \\\\'' + ${myActions > handlerModule} + '\\\\'}'}\",\n\t\t\"sap.m\",\n\t\t\"Button\"\n\t], \"should be called with expected args\");\n});\n\ntest.serial(\"integration: Analysis of an xml view with core:require from expression binding in template\", async (t) => {\n\tconst logger = require(\"@ui5/logger\");\n\tconst verboseLogStub = sinon.stub();\n\tconst myLoggerInstance = {\n\t\tverbose: verboseLogStub\n\t};\n\tsinon.stub(logger, \"getLogger\").returns(myLoggerInstance);\n\tconst XMLTemplateAnalyzerWithStubbedLogger = mock.reRequire(\"../../../../lib/lbt/analyzer/XMLTemplateAnalyzer\");\n\n\tconst xml = `<mvc:View\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\"\n\t>\n\t\t<template:if test=\"{myCtx>myActions}\">\n\t\t\t<Button\n\t\t\t\tcore:require=\"{= 'foo': true}\"\n\t\t\t\tid=\"myID\"\n\t\t\t\ttext=\"{myAction>text}\"\n\t\t\t\tpress=\"myMethod\"\n\t\t\t/>\n\t\t</template:if>\n\t</mvc:View>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzerWithStubbedLogger(fakeMockPool);\n\tawait analyzer.analyzeView(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/mvc/XMLView.js\",\n\t\t\t\"sap/m/Button.js\"\n\t\t], \"Dependencies should come from the XML template\");\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/mvc/XMLView.js\"),\n\t\t\"Implicit dependency should be added since an XMLView is analyzed\");\n\tt.true(moduleInfo.isConditionalDependency(\"sap/m/Button.js\"),\n\t\t\"A control within template:if should become a conditional dependency\");\n\n\tt.is(verboseLogStub.callCount, 1, \"should be called 1 time\");\n\tt.deepEqual(verboseLogStub.getCall(0).args, [\n\t\t\"Ignoring core:require: '%s' on Node %s:%s contains an expression binding and is within a 'template' Node\",\n\t\t\"{= 'foo': true}\",\n\t\t\"sap.m\",\n\t\t\"Button\"\n\t], \"should be called with expected args\");\n});\n\ntest(\"integration: Analysis of an xml view with core:require\", async (t) => {\n\tconst xml = `<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\"\n\t\tcontrollerName=\"myController\"\n\t\tcore:require=\"{\n\t\t\tFoo:'sap/ui/Foo',\n\t\t\tBar:'myApp/Bar'\n\t\t}\">\n\n\t\t\t<Button core:require=\"{Toast:'sap/m/MessageToast'}\" text=\"Show Toast\" press=\"Toast.show(\\${$source>text})\"/>\n\n\t\t</mvc:View>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzer(fakeMockPool);\n\tawait analyzer.analyzeView(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/mvc/XMLView.js\",\n\t\t\t\"myController.controller.js\",\n\t\t\t\"sap/ui/Foo.js\",\n\t\t\t\"myApp/Bar.js\",\n\t\t\t\"sap/m/MessageToast.js\",\n\t\t\t\"sap/m/Button.js\"\n\t\t], \"Dependencies should come from the XML template\");\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/mvc/XMLView.js\"),\n\t\t\"Implicit dependency should be added since an XMLView is analyzed\");\n});\n\ntest(\"integration: Analysis of an xml view with core:require (invalid module name)\", async (t) => {\n\tconst xml = `<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\"\n\t\tcontrollerName=\"myController\"\n\t\tcore:require=\"{\n\t\t\tFoo: { 'bar': true },\n\t\t\tBar: 123\n\t\t}\">\n\n\t\t\t<Button core:require=\"{ Toast: '' }\" text=\"Show Toast\" press=\"Toast.show(\\${$source>text})\"/>\n\n\t\t</mvc:View>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzer(fakeMockPool);\n\tawait analyzer.analyzeView(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/mvc/XMLView.js\",\n\t\t\t\"myController.controller.js\",\n\t\t\t\"sap/m/Button.js\"\n\t\t], \"Dependencies should come from the XML template\");\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/mvc/XMLView.js\"),\n\t\t\"Implicit dependency should be added since an XMLView is analyzed\");\n});\n\ntest(\"integration: Analysis of an xml view with core:require (missing comma, parsing error)\", async (t) => {\n\tconst xml = `<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\"\n\t\tcontrollerName=\"myController\"\n\t\tcore:require=\"{\n\t\t\tFoo:'sap/ui/Foo'\n\t\t\tBar:'myApp/Bar'\n\t\t}\">\n\n\t\t\t<Button core:require=\"this can't be parsed\" text=\"Show Toast\" press=\"Toast.show(\\${$source>text})\"/>\n\n\t\t</mvc:View>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzer(fakeMockPool);\n\tawait analyzer.analyzeView(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/mvc/XMLView.js\",\n\t\t\t\"myController.controller.js\",\n\t\t\t\"sap/m/Button.js\"\n\t\t], \"Dependencies should come from the XML template\");\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/mvc/XMLView.js\"),\n\t\t\"Implicit dependency should be added since an XMLView is analyzed\");\n});\n\ntest(\"integration: Analysis of an xml fragment\", async (t) => {\n\tconst xml = `<HBox xmlns:m=\"sap.m\" xmlns:l=\"sap.ui.layout\" controllerName=\"myController\">\n\t\t\t<items>\n\t\t\t\t<l:HorizontalLayout id=\"layout\">\n\t\t\t\t\t<m:Button text=\"Button 1\" id=\"button1\" />\n\t\t\t\t\t<m:Button text=\"Button 2\" id=\"button2\" />\n\t\t\t\t\t<m:Button text=\"Button 3\" id=\"button3\" />\n\t\t\t\t</l:HorizontalLayout>\n\t\t\t</items>\n\t\t</HBox>`;\n\n\tconst moduleInfo = new ModuleInfo();\n\n\tconst analyzer = new XMLTemplateAnalyzer(fakeMockPool);\n\tawait analyzer.analyzeFragment(xml, moduleInfo);\n\tt.deepEqual(moduleInfo.dependencies,\n\t\t[\n\t\t\t\"sap/ui/core/Fragment.js\",\n\t\t\t\"sap/ui/layout/HorizontalLayout.js\",\n\t\t\t\"sap/m/Button.js\"\n\t\t]);\n\tt.true(moduleInfo.isImplicitDependency(\"sap/ui/core/Fragment.js\"),\n\t\t\"Implicit dependency should be added since a fragment is analyzed\");\n});\n\ntest(\"integration: Analysis of an empty xml view\", async (t) => {\n\tconst xml = \"\";\n\n\tconst moduleInfo = new ModuleInfo(\"empty.xml\");\n\n\tconst analyzer = new XMLTemplateAnalyzer(fakeMockPool);\n\n\tawait t.throwsAsync(analyzer.analyzeView(xml, moduleInfo), {\n\t\tmessage: \"Invalid empty XML document: empty.xml\"\n\t}, \"Should throw an error for empty XML views\");\n});\n\ntest(\"_addDependency: self reference\", (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {},\n\t\tname: \"me\"\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new XMLTemplateAnalyzer();\n\tanalyzer.info = moduleInfo;\n\tanalyzer._addDependency(\"me\");\n\tt.false(stubAddDependency.called, \"addDependency was not called\");\n});\n\ntest(\"_addDependency: add dependency\", (t) => {\n\tconst moduleInfo = {\n\t\taddDependency: function() {},\n\t\tname: \"me\"\n\t};\n\tconst stubAddDependency = sinon.spy(moduleInfo, \"addDependency\");\n\n\tconst analyzer = new XMLTemplateAnalyzer();\n\tanalyzer.info = moduleInfo;\n\tanalyzer._addDependency(\"new\");\n\tt.true(stubAddDependency.calledOnce, \"addDependency was called\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"new\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyze: parseString error\", async (t) => {\n\tconst analyzer = new XMLTemplateAnalyzer();\n\tsinon.stub(analyzer._parser, \"parseString\").callsArgWith(1, new Error(\"my-error\"), \"result\");\n\n\tconst error = await t.throwsAsync(analyzer._analyze());\n\tt.deepEqual(error.message, \"my-error\");\n\tt.false(analyzer.busy, \"busy state is restored\");\n});\n\ntest(\"_analyze: call twice to simulate busy\", async (t) => {\n\tconst analyzer = new XMLTemplateAnalyzer();\n\tsinon.stub(analyzer._parser, \"parseString\").callsArgWith(1, false, \"parse-result\");\n\tsinon.stub(analyzer, \"_analyzeNode\").returns();\n\n\tconst moduleInfo = {\n\t\taddImplicitDependency: function() {}\n\t};\n\n\t// first call sets it to busy\n\tconst resultPromise = analyzer._analyze(null, moduleInfo, true);\n\n\t// second call fails since it is still busy\n\tconst error = t.throws(()=> {\n\t\tanalyzer._analyze(null, moduleInfo, true);\n\t});\n\tt.deepEqual(error.message, \"analyzer is busy\");\n\n\tawait resultPromise;\n\tt.false(analyzer.busy, \"busy state is reset after promise resolves\");\n});\n\ntest(\"_analyze: node\", async (t) => {\n\tconst analyzer = new XMLTemplateAnalyzer();\n\tsinon.stub(analyzer._parser, \"parseString\").callsArgWith(1, false, \"parse-result\");\n\tconst stubAnalyzeNode = sinon.stub(analyzer, \"_analyzeNode\").returns();\n\n\tconst moduleInfo = {\n\t\taddImplicitDependency: function() {}\n\t};\n\tconst stubAddImplicitDependency = sinon.spy(moduleInfo, \"addImplicitDependency\");\n\n\tawait analyzer._analyze(null, moduleInfo, true);\n\n\tt.true(stubAnalyzeNode.calledOnce, \"_analyzeNode was called\");\n\tt.deepEqual(stubAnalyzeNode.getCall(0).args[0], \"parse-result\",\n\t\t\"_analyzeNode should be called with the result\");\n\n\tt.true(stubAddImplicitDependency.calledOnce, \"addImplicitDependency was called once\");\n\tt.deepEqual(stubAddImplicitDependency.getCall(0).args[0], \"sap/ui/core/Fragment.js\",\n\t\t\"addImplicitDependency should be called with the dependency name\");\n});\n\ntest(\"_analyze: viewRootNode\", async (t) => {\n\tconst analyzer = new XMLTemplateAnalyzer();\n\tsinon.stub(analyzer._parser, \"parseString\").callsArgWith(1, false, \"parse-result\");\n\tconst stubAnalyzeViewRootNode = sinon.stub(analyzer, \"_analyzeViewRootNode\").returns();\n\n\n\tawait analyzer._analyze(null, null, false);\n\n\tt.true(stubAnalyzeViewRootNode.calledOnce, \"_analyzeViewRootNode was called\");\n\tt.deepEqual(stubAnalyzeViewRootNode.getCall(0).args[0], \"parse-result\",\n\t\t\"_analyzeViewRootNode should be called with the result\");\n});\n\n\ntest(\"_analyzeViewRootNode: process node\", async (t) => {\n\tconst analyzer = new XMLTemplateAnalyzer();\n\tanalyzer.info = {\n\t\taddImplicitDependency: function() {},\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddImplicitDependency = sinon.spy(analyzer.info, \"addImplicitDependency\");\n\tconst stubAddDependency = sinon.spy(analyzer.info, \"addDependency\");\n\n\tconst stubAnalyzeChildren = sinon.stub(analyzer, \"_analyzeChildren\").returns();\n\n\tconst node = {\n\t\t$: {\n\t\t\tcontrollerName: {\n\t\t\t\tvalue: \"myController\"\n\t\t\t},\n\t\t\tresourceBundleName: {\n\t\t\t\tvalue: \"myResourceBundleName\"\n\t\t\t}\n\t\t}\n\t};\n\tawait analyzer._analyzeViewRootNode(node);\n\n\tt.true(stubAnalyzeChildren.calledOnce, \"_analyzeChildren was called\");\n\tt.deepEqual(stubAnalyzeChildren.getCall(0).args[0], node,\n\t\t\"_analyzeChildren should be called with the result\");\n\n\tt.true(stubAddImplicitDependency.calledOnce, \"addImplicitDependency was called\");\n\tt.deepEqual(stubAddImplicitDependency.getCall(0).args[0], \"sap/ui/core/mvc/XMLView.js\",\n\t\t\"addImplicitDependency should be called with the dependency name\");\n\n\tt.deepEqual(stubAddDependency.callCount, 2, \"addDependency was called twice\");\n\tt.deepEqual(stubAddDependency.getCall(0).args[0], \"myController.controller.js\",\n\t\t\"addDependency should be called with the dependency name\");\n\tt.deepEqual(stubAddDependency.getCall(1).args[0], \"myResourceBundleName.properties\",\n\t\t\"addDependency should be called with the dependency name\");\n});\n\ntest(\"_analyzeCoreRequire: Catches error when attribute can't be parsed\", async (t) => {\n\tconst analyzer = new XMLTemplateAnalyzer();\n\tanalyzer.info = {\n\t\taddImplicitDependency: function() {},\n\t\taddDependency: function() {}\n\t};\n\tconst stubAddImplicitDependency = sinon.spy(analyzer.info, \"addImplicitDependency\");\n\tconst stubAddDependency = sinon.spy(analyzer.info, \"addDependency\");\n\n\tconst node = {\n\t\t$: {\n\t\t\t\"core:require\": {\n\t\t\t\tname: \"core:require\",\n\t\t\t\tprefix: \"core\",\n\t\t\t\tlocal: \"require\",\n\t\t\t\turi: \"sap.ui.core\",\n\t\t\t\tvalue: \"{= '{Handler: \\\\'' + ${action>handlerModule} + '\\\\'}'}\"\n\t\t\t}\n\t\t},\n\t\t$ns: {\n\t\t\tlocal: \"Button\"\n\t\t}\n\t};\n\tawait analyzer._analyzeCoreRequire(node);\n\n\tt.is(stubAddImplicitDependency.callCount, 0, \"addImplicitDependency was never called\");\n\tt.is(stubAddDependency.callCount, 0, \"addDependency was never called\");\n});\n",
    "test/lib/processors/bootstrapHtmlTransformer.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nlet bootstrapHtmlTransformer = require(\"../../../lib/processors/bootstrapHtmlTransformer\");\n\ntest.beforeEach((t) => {\n\t// Spying logger of processors/bootstrapHtmlTransformer\n\tconst log = require(\"@ui5/logger\");\n\tconst loggerInstance = log.getLogger(\"builder:processors:bootstrapHtmlTransformer\");\n\tmock(\"@ui5/logger\", {\n\t\tgetLogger: () => loggerInstance\n\t});\n\tmock.reRequire(\"@ui5/logger\");\n\tt.context.logWarnSpy = sinon.spy(loggerInstance, \"warn\");\n\n\t// Re-require tested module\n\tbootstrapHtmlTransformer = mock.reRequire(\"../../../lib/processors/bootstrapHtmlTransformer\");\n});\n\ntest.afterEach.always((t) => {\n\tmock.stop(\"@ui5/logger\");\n\tt.context.logWarnSpy.restore();\n});\n\ntest.serial(\"Replaces relative bootstrap src with bar.js\", async (t) => {\n\tt.plan(3);\n\n\tconst input = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<script id=\"sap-ui-bootstrap\" src=\"foo.js\">\n\t</script>\n</head>\n<body>\n</body>\n</html>`;\n\tconst expected = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<script id=\"sap-ui-bootstrap\" src=\"bar.js\">\n\t</script>\n</head>\n<body>\n</body>\n</html>`;\n\n\tconst resource = {\n\t\tgetString: () => Promise.resolve(input),\n\t\tsetString: (actual) => {\n\t\t\tt.deepEqual(actual, expected, \"Correct file content should be set\");\n\t\t}\n\t};\n\n\tconst processedResources = await bootstrapHtmlTransformer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tsrc: \"bar.js\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource], \"Input resource is returned\");\n\n\tt.true(t.context.logWarnSpy.notCalled, \"No warnings should be logged\");\n});\n\ntest.serial(\"Replaces absolute bootstrap src with bar.js\", async (t) => {\n\tt.plan(3);\n\n\tconst input = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<script id=\"sap-ui-bootstrap\" src=\"https://example.com/foo.js\">\n\t</script>\n</head>\n<body>\n</body>\n</html>`;\n\tconst expected = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<script id=\"sap-ui-bootstrap\" src=\"bar.js\">\n\t</script>\n</head>\n<body>\n</body>\n</html>`;\n\n\tconst resource = {\n\t\tgetString: () => Promise.resolve(input),\n\t\tsetString: (actual) => {\n\t\t\tt.deepEqual(actual, expected, \"Correct file content should be set\");\n\t\t}\n\t};\n\n\tconst processedResources = await bootstrapHtmlTransformer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tsrc: \"bar.js\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource], \"Input resource is returned\");\n\n\tt.true(t.context.logWarnSpy.notCalled, \"No warnings should be logged\");\n});\n\ntest.serial(\"Replaces bootstrap src of multiple resources\", async (t) => {\n\tt.plan(4);\n\n\tconst input = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<script id=\"sap-ui-bootstrap\" src=\"https://example.com/foo.js\">\n\t</script>\n</head>\n<body>\n</body>\n</html>`;\n\tconst expected = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<script id=\"sap-ui-bootstrap\" src=\"bar.js\">\n\t</script>\n</head>\n<body>\n</body>\n</html>`;\n\n\tconst resource = {\n\t\tgetString: () => Promise.resolve(input),\n\t\tsetString: (actual) => {\n\t\t\tt.deepEqual(actual, expected, \"Correct file content should be set\");\n\t\t}\n\t};\n\n\tconst processedResources = await bootstrapHtmlTransformer({\n\t\tresources: [resource, resource],\n\t\toptions: {\n\t\t\tsrc: \"bar.js\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource, resource], \"Input resources are returned\");\n\n\tt.true(t.context.logWarnSpy.notCalled, \"No warnings should be logged\");\n});\n\ntest.serial(\"Logs warning when bootstrap script can't be found due to missing ID\", async (t) => {\n\t// Processor should only detect script tags with id=sap-ui-bootstrap\n\t// even when a script with sap-ui-core.js could be found.\n\tconst input = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<script src=\"resources/sap-ui-core.js\">\n\t</script>\n</head>\n<body>\n</body>\n</html>`;\n\n\tconst resource = {\n\t\tgetString: () => Promise.resolve(input),\n\t\tsetString: (actual) => {\n\t\t\tt.fail(\"Resource should not be modified!\");\n\t\t}\n\t};\n\n\tconst processedResources = await bootstrapHtmlTransformer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tsrc: \"bar.js\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource], \"Input resource is returned\");\n\n\tt.deepEqual(t.context.logWarnSpy.callCount, 1, \"One warning should be logged\");\n\tt.true(\n\t\tt.context.logWarnSpy.calledWith(\n\t\t\t\"Skipping bootstrap transformation. Could not find bootstrap script tag with id=sap-ui-bootstrap.\"),\n\t\t\"Warning about missing bootstrap script tag should be logged\");\n});\n\ntest.serial(\"Logs warning when bootstrap script can't be found due to wrong tag\", async (t) => {\n\t// Processor should only detect script tags with id=sap-ui-bootstrap\n\t// even when a script with sap-ui-core.js could be found.\n\tconst input = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<div id=\"sap-ui-bootstrap\" src=\"bar.js\">\n\t</div>\n</head>\n<body>\n</body>\n</html>`;\n\n\tconst resource = {\n\t\tgetString: () => Promise.resolve(input),\n\t\tsetString: (actual) => {\n\t\t\tt.fail(\"Resource should not be modified!\");\n\t\t}\n\t};\n\n\tconst processedResources = await bootstrapHtmlTransformer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tsrc: \"bar.js\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource], \"Input resource is returned\");\n\n\tt.deepEqual(t.context.logWarnSpy.callCount, 1, \"One warning should be logged\");\n\tt.true(\n\t\tt.context.logWarnSpy.calledWith(\n\t\t\t\"Skipping bootstrap transformation. Could not find bootstrap script tag with id=sap-ui-bootstrap.\"),\n\t\t\"Warning about missing bootstrap script tag should be logged\");\n});\n\ntest.serial(\"Logs warning when input is not valid HTML\", async (t) => {\n\tconst input = `\nconsole.log(\"This is not HTML!\")`;\n\n\tconst resource = {\n\t\tgetString: () => Promise.resolve(input),\n\t\tsetString: (actual) => {\n\t\t\tt.fail(\"Resource should not be modified!\");\n\t\t}\n\t};\n\n\tconst processedResources = await bootstrapHtmlTransformer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tsrc: \"bar.js\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource], \"Input resource is returned\");\n\n\tt.deepEqual(t.context.logWarnSpy.callCount, 1, \"One warning should be logged\");\n\tt.true(\n\t\tt.context.logWarnSpy.calledWith(\n\t\t\t\"Skipping bootstrap transformation. Could not find bootstrap script tag with id=sap-ui-bootstrap.\"),\n\t\t\"Warning about missing bootstrap script tag should be logged\");\n});\n\ntest.serial(\"Logs warning when multiple bootstrap scripts are found\", async (t) => {\n\tconst input = `\n<!DOCTYPE html>\n<html>\n<head>\n\t<script id=\"sap-ui-bootstrap\" src=\"foo-1.js\">\n\t</script>\n\t<script id=\"sap-ui-bootstrap\" src=\"foo-2.js\">\n\t</script>\n</head>\n<body>\n</body>\n</html>`;\n\n\tconst resource = {\n\t\tgetString: () => Promise.resolve(input),\n\t\tsetString: (actual) => {\n\t\t\tt.fail(\"Resource should not be modified!\");\n\t\t}\n\t};\n\n\tconst processedResources = await bootstrapHtmlTransformer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tsrc: \"bar.js\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource], \"Input resource is returned\");\n\n\tt.deepEqual(t.context.logWarnSpy.callCount, 1, \"One warning should be logged\");\n\tt.true(\n\t\tt.context.logWarnSpy.calledWith(\n\t\t\t\"Skipping bootstrap transformation. Found multiple bootstrap script tags with id=sap-ui-bootstrap.\"),\n\t\t\"Warning about multiple bootstrap script tags should be logged\");\n});\n",
    "test/lib/processors/bundlers/moduleBundler.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\ntest.beforeEach((t) => {\n\tt.context.log = {\n\t\tverbose: sinon.stub(),\n\t\tisLevelEnabled: sinon.stub().returns(false)\n\t};\n\tconst logger = require(\"@ui5/logger\");\n\tsinon.stub(logger, \"getLogger\").withArgs(\"builder:processors:bundlers:moduleBundler\").returns(t.context.log);\n\n\tt.context.pool = {\n\t\tprepare: sinon.stub().resolves()\n\t};\n\tt.context.LocatorResourcePool = sinon.stub().returns(t.context.pool);\n\tmock(\"../../../../lib/lbt/resources/LocatorResourcePool\", t.context.LocatorResourcePool);\n\n\tt.context.Resource = sinon.stub();\n\tmock(\"@ui5/fs\", {\n\t\tResource: t.context.Resource\n\t});\n\n\tt.context.builder = {\n\t\tcreateBundle: sinon.stub().resolves([])\n\t};\n\tt.context.BundleBuilder = sinon.stub().returns(t.context.builder);\n\tmock(\"../../../../lib/lbt/bundle/Builder\", t.context.BundleBuilder);\n\n\tconst processor = mock.reRequire(\"../../../../lib/processors/bundlers/moduleBundler\");\n\tt.context.processor = processor;\n});\n\ntest.afterEach.always(() => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"Builder returns single bundle\", async (t) => {\n\tconst {processor, Resource, LocatorResourcePool, pool, BundleBuilder, builder, log} = t.context;\n\n\tconst resources = [];\n\tconst bundleDefinition = {\n\t\t\"some\": \"definition\"\n\t};\n\tconst bundleOptions = {\n\t\t\"some\": \"option\"\n\t};\n\n\tconst createdBundle = {\n\t\tname: \"BundleName.js\",\n\t\tcontent: \"Bundle Content\",\n\t\tbundleInfo: {\n\t\t\t\"Bundle\": \"Info\"\n\t\t}\n\t};\n\n\tbuilder.createBundle.resolves(createdBundle);\n\n\tconst expectedOutputResource = {\n\t\t\"output\": \"resource\"\n\t};\n\tResource.returns(expectedOutputResource);\n\n\tconst outputResources = await processor({\n\t\tresources,\n\t\toptions: {\n\t\t\tbundleDefinition,\n\t\t\tbundleOptions\n\t\t}\n\t});\n\n\tt.deepEqual(outputResources, [expectedOutputResource]);\n\tt.is(outputResources[0], expectedOutputResource);\n\n\tt.is(LocatorResourcePool.callCount, 1, \"LocatorResourcePool should be created once\");\n\tt.true(LocatorResourcePool.calledWithNew());\n\tt.deepEqual(LocatorResourcePool.getCall(0).args, [\n\t\t{\n\t\t\tignoreMissingModules: undefined // not defined in bundleOptions\n\t\t}\n\t], \"LocatorResourcePool should be called with expected args\");\n\n\tt.is(BundleBuilder.callCount, 1, \"BundleBuilder should be created once\");\n\tt.true(BundleBuilder.calledWithNew());\n\tt.is(BundleBuilder.getCall(0).args.length, 1);\n\tt.is(BundleBuilder.getCall(0).args[0], pool, \"LocatorResourcePool should be called with pool\");\n\n\tt.is(pool.prepare.callCount, 1, \"pool.prepare should be called once\");\n\tt.is(pool.prepare.getCall(0).args.length, 1);\n\tt.is(pool.prepare.getCall(0).args[0], resources, \"pool.prepare should be called with resources\");\n\n\tt.is(builder.createBundle.callCount, 1, \"builder.createBundle should be called once\");\n\tt.is(builder.createBundle.getCall(0).args.length, 2);\n\tt.is(builder.createBundle.getCall(0).args[0], bundleDefinition,\n\t\t\"builder.createBundle should be called with bundleDefinition\");\n\tt.is(builder.createBundle.getCall(0).args[1], bundleOptions,\n\t\t\"builder.createBundle should be called with bundleOptions\");\n\tt.true(builder.createBundle.calledAfter(pool.prepare),\n\t\t\"builder.createBundle should be called before pool.prepare\");\n\n\tt.is(Resource.callCount, 1, \"One resource should be created\");\n\tt.true(Resource.calledWithNew());\n\tt.deepEqual(Resource.getCall(0).args, [\n\t\t{\n\t\t\tpath: \"/resources/BundleName.js\",\n\t\t\tstring: \"Bundle Content\"\n\t\t}\n\t], \"Resource should be called with expected args\");\n\n\tt.is(log.verbose.callCount, 0, \"log.verbose is not called when verbose level is not enabled\");\n});\n\ntest.serial(\"Builder returns multiple bundles\", async (t) => {\n\tconst {processor, Resource, LocatorResourcePool, pool, BundleBuilder, builder, log} = t.context;\n\n\tconst resources = [];\n\tconst bundleDefinition = {\n\t\t\"some\": \"definition\"\n\t};\n\tconst bundleOptions = {\n\t\t\"some\": \"option\"\n\t};\n\n\tconst createdBundles = [\n\t\t{\n\t\t\tname: \"BundleName1.js\",\n\t\t\tcontent: \"Bundle Content 1\",\n\t\t\tbundleInfo: {\n\t\t\t\t\"Bundle\": \"Info 1\"\n\t\t\t}\n\t\t},\n\t\tundefined, // Empty bundle\n\t\t{\n\t\t\tname: \"BundleName2.js\",\n\t\t\tcontent: \"Bundle Content 2\",\n\t\t\tbundleInfo: {\n\t\t\t\t\"Bundle\": \"Info 2\"\n\t\t\t}\n\t\t},\n\t\tundefined // Empty bundle\n\t];\n\n\tbuilder.createBundle.resolves(createdBundles);\n\n\tconst expectedOutputResources = [\n\t\t{\n\t\t\t\"output\": \"resource 1\"\n\t\t},\n\t\tundefined,\n\t\t{\n\t\t\t\"output\": \"resource 2\"\n\t\t},\n\t\tundefined\n\t];\n\tResource.onFirstCall().returns(expectedOutputResources[0]);\n\tResource.onSecondCall().returns(expectedOutputResources[2]);\n\n\tconst outputResources = await processor({\n\t\tresources,\n\t\toptions: {\n\t\t\tbundleDefinition,\n\t\t\tbundleOptions\n\t\t}\n\t});\n\n\tt.deepEqual(outputResources, expectedOutputResources);\n\tt.is(outputResources[0], expectedOutputResources[0]);\n\tt.is(outputResources[1], expectedOutputResources[1]);\n\tt.is(outputResources[2], expectedOutputResources[2]);\n\n\tt.is(LocatorResourcePool.callCount, 1, \"LocatorResourcePool should be created once\");\n\tt.true(LocatorResourcePool.calledWithNew());\n\tt.deepEqual(LocatorResourcePool.getCall(0).args, [\n\t\t{\n\t\t\tignoreMissingModules: undefined // not defined in bundleOptions\n\t\t}\n\t], \"LocatorResourcePool should be called with expected args\");\n\n\tt.is(BundleBuilder.callCount, 1, \"BundleBuilder should be created once\");\n\tt.true(BundleBuilder.calledWithNew());\n\tt.is(BundleBuilder.getCall(0).args.length, 1);\n\tt.is(BundleBuilder.getCall(0).args[0], pool, \"LocatorResourcePool should be called with pool\");\n\n\tt.is(pool.prepare.callCount, 1, \"pool.prepare should be called once\");\n\tt.is(pool.prepare.getCall(0).args.length, 1);\n\tt.is(pool.prepare.getCall(0).args[0], resources, \"pool.prepare should be called with resources\");\n\n\tt.is(builder.createBundle.callCount, 1, \"builder.createBundle should be called once\");\n\tt.is(builder.createBundle.getCall(0).args.length, 2);\n\tt.is(builder.createBundle.getCall(0).args[0], bundleDefinition,\n\t\t\"builder.createBundle should be called with bundleDefinition\");\n\tt.is(builder.createBundle.getCall(0).args[1], bundleOptions,\n\t\t\"builder.createBundle should be called with bundleOptions\");\n\tt.true(builder.createBundle.calledAfter(pool.prepare),\n\t\t\"builder.createBundle should be called before pool.prepare\");\n\n\tt.is(Resource.callCount, 2, \"Two resources should be created\");\n\tt.true(Resource.calledWithNew());\n\tt.deepEqual(Resource.getCall(0).args, [\n\t\t{\n\t\t\tpath: \"/resources/BundleName1.js\",\n\t\t\tstring: \"Bundle Content 1\"\n\t\t}\n\t], \"Resource should be called with expected args\");\n\tt.deepEqual(Resource.getCall(1).args, [\n\t\t{\n\t\t\tpath: \"/resources/BundleName2.js\",\n\t\t\tstring: \"Bundle Content 2\"\n\t\t}\n\t], \"Resource should be called with expected args\");\n\n\tt.is(log.verbose.callCount, 0, \"log.verbose is not called when verbose level is not enabled\");\n});\n\ntest.serial(\"bundleOptions default\", async (t) => {\n\tconst {processor, Resource, LocatorResourcePool, pool, BundleBuilder, builder, log} = t.context;\n\n\tconst resources = [];\n\tconst bundleDefinition = {\n\t\t\"some\": \"definition\"\n\t};\n\n\tconst createdBundle = {\n\t\tname: \"BundleName.js\",\n\t\tcontent: \"Bundle Content\",\n\t\tbundleInfo: {\n\t\t\t\"Bundle\": \"Info\"\n\t\t}\n\t};\n\n\tbuilder.createBundle.resolves(createdBundle);\n\n\tconst expectedOutputResource = {\n\t\t\"output\": \"resource\"\n\t};\n\tResource.returns(expectedOutputResource);\n\n\tconst outputResources = await processor({\n\t\tresources,\n\t\toptions: {\n\t\t\tbundleDefinition\n\t\t}\n\t});\n\n\tt.deepEqual(outputResources, [expectedOutputResource]);\n\tt.is(outputResources[0], expectedOutputResource);\n\n\tt.is(LocatorResourcePool.callCount, 1, \"LocatorResourcePool should be created once\");\n\tt.true(LocatorResourcePool.calledWithNew());\n\tt.deepEqual(LocatorResourcePool.getCall(0).args, [\n\t\t{\n\t\t\tignoreMissingModules: undefined // not defined in bundleOptions\n\t\t}\n\t], \"LocatorResourcePool should be called with expected args\");\n\n\tt.is(BundleBuilder.callCount, 1, \"BundleBuilder should be created once\");\n\tt.true(BundleBuilder.calledWithNew());\n\tt.is(BundleBuilder.getCall(0).args.length, 1);\n\tt.is(BundleBuilder.getCall(0).args[0], pool, \"LocatorResourcePool should be called with pool\");\n\n\tt.is(pool.prepare.callCount, 1, \"pool.prepare should be called once\");\n\tt.is(pool.prepare.getCall(0).args.length, 1);\n\tt.is(pool.prepare.getCall(0).args[0], resources, \"pool.prepare should be called with resources\");\n\n\tt.is(builder.createBundle.callCount, 1, \"builder.createBundle should be called once\");\n\tt.is(builder.createBundle.getCall(0).args.length, 2);\n\tt.is(builder.createBundle.getCall(0).args[0], bundleDefinition,\n\t\t\"builder.createBundle should be called with bundleDefinition\");\n\tt.deepEqual(builder.createBundle.getCall(0).args[1], {optimize: true}, // default bundleOptions\n\t\t\"builder.createBundle should be called with bundleOptions\");\n\tt.true(builder.createBundle.calledAfter(pool.prepare),\n\t\t\"builder.createBundle should be called before pool.prepare\");\n\n\tt.is(Resource.callCount, 1, \"One resource should be created\");\n\tt.true(Resource.calledWithNew());\n\tt.deepEqual(Resource.getCall(0).args, [\n\t\t{\n\t\t\tpath: \"/resources/BundleName.js\",\n\t\t\tstring: \"Bundle Content\"\n\t\t}\n\t], \"Resource should be called with expected args\");\n\n\tt.is(log.verbose.callCount, 0, \"log.verbose is not called when verbose level is not enabled\");\n});\n\ntest.serial(\"Passes ignoreMissingModules bundleOption to LocatorResourcePool\", async (t) => {\n\tconst {processor, Resource, LocatorResourcePool, pool, BundleBuilder, builder, log} = t.context;\n\n\tconst resources = [];\n\tconst bundleDefinition = {\n\t\t\"some\": \"definition\"\n\t};\n\tconst bundleOptions = {\n\t\tignoreMissingModules: \"foo\"\n\t};\n\n\tconst createdBundle = {\n\t\tname: \"BundleName.js\",\n\t\tcontent: \"Bundle Content\",\n\t\tbundleInfo: {\n\t\t\t\"Bundle\": \"Info\"\n\t\t}\n\t};\n\n\tbuilder.createBundle.resolves(createdBundle);\n\n\tconst expectedOutputResource = {\n\t\t\"output\": \"resource\"\n\t};\n\tResource.returns(expectedOutputResource);\n\n\tconst outputResources = await processor({\n\t\tresources,\n\t\toptions: {\n\t\t\tbundleDefinition,\n\t\t\tbundleOptions\n\t\t}\n\t});\n\n\tt.deepEqual(outputResources, [expectedOutputResource]);\n\tt.is(outputResources[0], expectedOutputResource);\n\n\tt.is(LocatorResourcePool.callCount, 1, \"LocatorResourcePool should be created once\");\n\tt.true(LocatorResourcePool.calledWithNew());\n\tt.deepEqual(LocatorResourcePool.getCall(0).args, [\n\t\t{\n\t\t\tignoreMissingModules: \"foo\" // as defined in bundleOptions\n\t\t}\n\t], \"LocatorResourcePool should be called with expected args\");\n\n\tt.is(BundleBuilder.callCount, 1, \"BundleBuilder should be created once\");\n\tt.true(BundleBuilder.calledWithNew());\n\tt.is(BundleBuilder.getCall(0).args.length, 1);\n\tt.is(BundleBuilder.getCall(0).args[0], pool, \"LocatorResourcePool should be called with pool\");\n\n\tt.is(pool.prepare.callCount, 1, \"pool.prepare should be called once\");\n\tt.is(pool.prepare.getCall(0).args.length, 1);\n\tt.is(pool.prepare.getCall(0).args[0], resources, \"pool.prepare should be called with resources\");\n\n\tt.is(builder.createBundle.callCount, 1, \"builder.createBundle should be called once\");\n\tt.is(builder.createBundle.getCall(0).args.length, 2);\n\tt.is(builder.createBundle.getCall(0).args[0], bundleDefinition,\n\t\t\"builder.createBundle should be called with bundleDefinition\");\n\tt.is(builder.createBundle.getCall(0).args[1], bundleOptions,\n\t\t\"builder.createBundle should be called with bundleOptions\");\n\tt.true(builder.createBundle.calledAfter(pool.prepare),\n\t\t\"builder.createBundle should be called before pool.prepare\");\n\n\tt.is(Resource.callCount, 1, \"One resource should be created\");\n\tt.true(Resource.calledWithNew());\n\tt.deepEqual(Resource.getCall(0).args, [\n\t\t{\n\t\t\tpath: \"/resources/BundleName.js\",\n\t\t\tstring: \"Bundle Content\"\n\t\t}\n\t], \"Resource should be called with expected args\");\n\n\tt.is(log.verbose.callCount, 0, \"log.verbose is not called when verbose level is not enabled\");\n});\n\ntest.serial(\"Verbose Logging\", async (t) => {\n\tconst {processor, Resource, builder, log} = t.context;\n\n\tconst resources = [];\n\tconst bundleDefinition = {\n\t\t\"some\": \"definition\"\n\t};\n\tconst bundleOptions = {\n\t\t\"some\": \"option\"\n\t};\n\n\tconst createdBundle = {\n\t\tname: \"Bundle Name\",\n\t\tcontent: \"Bundle Content\",\n\t\tbundleInfo: {\n\t\t\t\"Bundle\": \"Info\"\n\t\t}\n\t};\n\n\tbuilder.createBundle.resolves(createdBundle);\n\n\tconst expectedOutputResource = {\n\t\t\"output\": \"resource\"\n\t};\n\tResource.returns(expectedOutputResource);\n\n\tlog.isLevelEnabled.returns(true);\n\n\tawait processor({\n\t\tresources,\n\t\toptions: {\n\t\t\tbundleDefinition,\n\t\t\tbundleOptions\n\t\t}\n\t});\n\n\tt.is(log.isLevelEnabled.callCount, 1);\n\tt.deepEqual(log.isLevelEnabled.getCall(0).args, [\"verbose\"]);\n\n\tt.is(log.verbose.callCount, 3, \"log.verbose is called 3 times when verbose level is enabled\");\n\n\tt.deepEqual(log.verbose.getCall(0).args, [\"Generating bundle:\"]);\n\tt.deepEqual(log.verbose.getCall(1).args, [\"bundleDefinition: \" + JSON.stringify(bundleDefinition, null, 2)]);\n\tt.deepEqual(log.verbose.getCall(2).args, [\"bundleOptions: \" + JSON.stringify(bundleOptions, null, 2)]);\n});\n",
    "test/lib/processors/jsdoc/apiIndexGenerator.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst apiIndexGenerator = require(\"../../../../lib/processors/jsdoc/apiIndexGenerator\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\ntest.serial(\"apiIndexGenerator\", async (t) => {\n\tconst createApiIndexStub = sinon.stub().resolves({\n\t\t\"/some/path/api-index.json\": \"resource content A\",\n\t\t\"/some/path/api-index-deprecated.json\": \"resource content B\",\n\t\t\"/some/path/api-index-experimental.json\": \"resource content C\",\n\t\t\"/some/path/api-index-since.json\": \"resource content D\"\n\t});\n\tmock(\"../../../../lib/processors/jsdoc/lib/createIndexFiles\", createApiIndexStub);\n\tconst createResourceStub = sinon.stub(require(\"@ui5/fs\").resourceFactory, \"createResource\")\n\t\t.onCall(0).returns(\"result resource A\")\n\t\t.onCall(1).returns(\"result resource B\")\n\t\t.onCall(2).returns(\"result resource C\")\n\t\t.onCall(3).returns(\"result resource D\");\n\n\tconst apiIndexGenerator = mock.reRequire(\"../../../../lib/processors/jsdoc/apiIndexGenerator\");\n\n\tconst res = await apiIndexGenerator({\n\t\tversionInfoPath: \"/some/path/sap-ui-version.json\",\n\t\ttestResourcesRootPath: \"/some/test-resources/path\",\n\t\ttargetApiIndexPath: \"/some/path/api-index.json\",\n\t\ttargetApiIndexDeprecatedPath: \"/some/path/api-index-deprecated.json\",\n\t\ttargetApiIndexExperimentalPath: \"/some/path/api-index-experimental.json\",\n\t\ttargetApiIndexSincePath: \"/some/path/api-index-since.json\",\n\t\tfs: \"custom fs\"\n\t});\n\n\tt.deepEqual(res.length, 4, \"Returned one resource\");\n\tt.deepEqual(res[0], \"result resource A\", \"Returned correct resource\");\n\tt.deepEqual(res[1], \"result resource B\", \"Returned correct resource\");\n\tt.deepEqual(res[2], \"result resource C\", \"Returned correct resource\");\n\tt.deepEqual(res[3], \"result resource D\", \"Returned correct resource\");\n\n\tt.deepEqual(createApiIndexStub.callCount, 1, \"createIndexFiles called once\");\n\tt.deepEqual(createApiIndexStub.getCall(0).args[0], \"/some/path/sap-ui-version.json\",\n\t\t\"createIndexFiles called with correct argument #1\");\n\tt.deepEqual(createApiIndexStub.getCall(0).args[1], \"/some/test-resources/path\",\n\t\t\"createIndexFiles called with correct argument #2\");\n\tt.deepEqual(createApiIndexStub.getCall(0).args[2], \"/some/path/api-index.json\",\n\t\t\"createIndexFiles called with correct argument #3\");\n\tt.deepEqual(createApiIndexStub.getCall(0).args[3], \"/some/path/api-index-deprecated.json\",\n\t\t\"createIndexFiles called with correct argument #4\");\n\tt.deepEqual(createApiIndexStub.getCall(0).args[4], \"/some/path/api-index-experimental.json\",\n\t\t\"createIndexFiles called with correct argument #5\");\n\tt.deepEqual(createApiIndexStub.getCall(0).args[5], \"/some/path/api-index-since.json\",\n\t\t\"createIndexFiles called with correct argument #6\");\n\tt.deepEqual(createApiIndexStub.getCall(0).args[6], {\n\t\tfs: \"custom fs\",\n\t\treturnOutputFiles: true\n\t}, \"createIndexFiles called with correct argument #7\");\n\n\tt.deepEqual(createResourceStub.callCount, 4, \"createResource called once\");\n\tt.deepEqual(createResourceStub.getCall(0).args[0], {\n\t\tpath: \"/some/path/api-index.json\",\n\t\tstring: \"resource content A\"\n\t}, \"createResource called with correct arguments for resource 1\");\n\tt.deepEqual(createResourceStub.getCall(1).args[0], {\n\t\tpath: \"/some/path/api-index-deprecated.json\",\n\t\tstring: \"resource content B\"\n\t}, \"createResource called with correct arguments for resource 2\");\n\tt.deepEqual(createResourceStub.getCall(2).args[0], {\n\t\tpath: \"/some/path/api-index-experimental.json\",\n\t\tstring: \"resource content C\"\n\t}, \"createResource called with correct arguments for resource 3\");\n\tt.deepEqual(createResourceStub.getCall(3).args[0], {\n\t\tpath: \"/some/path/api-index-since.json\",\n\t\tstring: \"resource content D\"\n\t}, \"createResource called with correct arguments for resource 4\");\n\n\tmock.stop(\"../../../../lib/processors/jsdoc/lib/createIndexFiles\");\n});\n\ntest(\"apiIndexGenerator missing parameters\", async (t) => {\n\tconst error = await t.throwsAsync(apiIndexGenerator());\n\tt.deepEqual(error.message, \"[apiIndexGenerator]: One or more mandatory parameters not provided\",\n\t\t\"Correct error message thrown\");\n});\n",
    "test/lib/processors/jsdoc/jsdocGenerator.js": "const path = require(\"path\");\nconst test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst jsdocGenerator = require(\"../../../../lib/processors/jsdoc/jsdocGenerator\");\n\ntest(\"generateJsdocConfig\", async (t) => {\n\tconst res = await jsdocGenerator._generateJsdocConfig({\n\t\tsourcePath: \"/some/source/path\",\n\t\ttargetPath: \"/some/target/path\",\n\t\ttmpPath: \"/some/tm\\\\p/path\",\n\t\tnamespace: \"some/namespace\",\n\t\tprojectName: \"some.namespace\",\n\t\tversion: \"1.0.0\",\n\t\tvariants: [\"apijson\"]\n\t});\n\n\tconst jsdocGeneratorPath = path.resolve(__dirname, \"..\", \"..\", \"..\", \"..\", \"lib\", \"processors\",\n\t\t\"jsdoc\");\n\n\tconst backslashRegex = /\\\\/g;\n\n\tconst pluginPath = path.join(jsdocGeneratorPath, \"lib\", \"ui5\", \"plugin.js\")\n\t\t.replace(backslashRegex, \"\\\\\\\\\");\n\tconst templatePath = path.join(jsdocGeneratorPath, \"lib\", \"ui5\", \"template\")\n\t\t.replace(backslashRegex, \"\\\\\\\\\");\n\tconst destinationPath = path.join(\"/\", \"some\", \"tm\\\\p\", \"path\")\n\t\t.replace(backslashRegex, \"\\\\\\\\\");\n\tconst jsapiFilePath = path.join(\"/\", \"some\", \"target\", \"path\", \"libraries\", \"some.namespace.js\")\n\t\t.replace(backslashRegex, \"\\\\\\\\\");\n\tconst apiJsonFolderPath = path.join(\"/\", \"some\", \"tm\\\\p\", \"path\", \"dependency-apis\")\n\t\t.replace(backslashRegex, \"\\\\\\\\\");\n\tconst apiJsonFilePath =\n\t\tpath.join(\"/\", \"some\", \"target\", \"path\", \"test-resources\", \"some\", \"namespace\", \"designtime\", \"api.json\")\n\t\t\t.replace(backslashRegex, \"\\\\\\\\\");\n\n\n\tt.deepEqual(res, `{\n\t\t\"plugins\": [\"${pluginPath}\"],\n\t\t\"opts\": {\n\t\t\t\"recurse\": true,\n\t\t\t\"lenient\": true,\n\t\t\t\"template\": \"${templatePath}\",\n\t\t\t\"ui5\": {\n\t\t\t\t\"saveSymbols\": true\n\t\t\t},\n\t\t\t\"destination\": \"${destinationPath}\"\n\t\t},\n\t\t\"templates\": {\n\t\t\t\"ui5\": {\n\t\t\t\t\"variants\": [\"apijson\"],\n\t\t\t\t\"version\": \"1.0.0\",\n\t\t\t\t\"jsapiFile\": \"${jsapiFilePath}\",\n\t\t\t\t\"apiJsonFolder\": \"${apiJsonFolderPath}\",\n\t\t\t\t\"apiJsonFile\": \"${apiJsonFilePath}\"\n\t\t\t}\n\t\t}\n\t}`, \"Correct config generated\");\n});\n\ntest.serial(\"writeJsdocConfig\", async (t) => {\n\tmock(\"graceful-fs\", {\n\t\twriteFile: (configPath, configContent, callback) => {\n\t\t\tt.deepEqual(configPath, path.join(\"/\", \"some\", \"path\", \"jsdoc-config.json\"),\n\t\t\t\t\"Correct config path supplied\");\n\t\t\tt.deepEqual(configContent, \"some config\", \"Correct config content supplied\");\n\t\t\tcallback();\n\t\t}\n\t});\n\tmock.reRequire(\"graceful-fs\");\n\n\t// Re-require tested module\n\tconst jsdocGenerator = mock.reRequire(\"../../../../lib/processors/jsdoc/jsdocGenerator\");\n\tconst res = await jsdocGenerator._writeJsdocConfig(\"/some/path\", \"some config\");\n\n\tt.deepEqual(res, path.join(\"/\", \"some\", \"path\", \"jsdoc-config.json\"), \"Correct config path returned\");\n\n\tmock.stop(\"graceful-fs\");\n});\n\ntest.serial(\"buildJsdoc\", async (t) => {\n\tconst childProcess = require(\"child_process\");\n\tlet exitCode = 0;\n\tconst cpStub = sinon.stub(childProcess, \"spawn\").returns({\n\t\ton: (event, callback) => {\n\t\t\tcallback(exitCode);\n\t\t}\n\t});\n\tconst jsdocGenerator = mock.reRequire(\"../../../../lib/processors/jsdoc/jsdocGenerator\");\n\n\tawait jsdocGenerator._buildJsdoc({\n\t\tsourcePath: \"/some/path\",\n\t\tconfigPath: \"/some/config/path/jsdoc-config.json\"\n\t});\n\tt.deepEqual(cpStub.callCount, 1, \"Spawn got called\");\n\n\tconst firstCallArgs = cpStub.getCall(0).args;\n\tt.deepEqual(firstCallArgs[0], \"node\", \"Spawn got called with correct process argument\");\n\tt.deepEqual(firstCallArgs[1], [\n\t\tpath.resolve(__dirname, \"..\", \"..\", \"..\", \"..\", \"node_modules\", \"jsdoc\", \"jsdoc.js\"),\n\t\t\"-c\",\n\t\t\"/some/config/path/jsdoc-config.json\",\n\t\t\"--verbose\",\n\t\t\"/some/path\"\n\t], \"Spawn got called with correct arguments\");\n\n\n\t// Re-execute with exit code 1\n\texitCode = 1;\n\tawait t.notThrowsAsync(jsdocGenerator._buildJsdoc({\n\t\tsourcePath: \"/some/path\",\n\t\tconfigPath: \"/some/config/path/jsdoc-config.json\"\n\t}));\n\n\t// Re-execute with exit code 2\n\texitCode = 2;\n\tconst error = await t.throwsAsync(jsdocGenerator._buildJsdoc({\n\t\tsourcePath: \"/some/path\",\n\t\tconfigPath: \"/some/config/path/jsdoc-config.json\"\n\t}));\n\tt.deepEqual(error.message, \"JSDoc child process closed with code 2\");\n});\n\ntest.serial(\"jsdocGenerator\", async (t) => {\n\tconst generateJsdocConfigStub = sinon.stub(jsdocGenerator, \"_generateJsdocConfig\").resolves(\"some config\");\n\tconst writeJsdocConfigStub = sinon.stub(jsdocGenerator, \"_writeJsdocConfig\").resolves(\"/some/config/path\");\n\tconst buildJsdocStub = sinon.stub(jsdocGenerator, \"_buildJsdoc\").resolves();\n\tconst byPathStub = sinon.stub().resolves(\"some resource\");\n\tconst createAdapterStub = sinon.stub(require(\"@ui5/fs\").resourceFactory, \"createAdapter\").returns({\n\t\tbyPath: byPathStub\n\t});\n\n\tconst res = await jsdocGenerator({\n\t\tsourcePath: \"/some/source/path\",\n\t\ttargetPath: \"/some/target/path\",\n\t\ttmpPath: \"/some/tmp/path\",\n\t\toptions: {\n\t\t\tprojectName: \"some.project.name\",\n\t\t\tnamespace: \"some/project/name\",\n\t\t\tversion: \"1.0.0\"\n\t\t}\n\t});\n\n\tt.deepEqual(res.length, 1, \"Returned 1 resource\");\n\tt.deepEqual(res[0], \"some resource\", \"Returned 1 resource\");\n\n\tt.deepEqual(generateJsdocConfigStub.callCount, 1, \"generateJsdocConfig called once\");\n\tt.deepEqual(generateJsdocConfigStub.getCall(0).args[0], {\n\t\ttargetPath: \"/some/target/path\",\n\t\ttmpPath: \"/some/tmp/path\",\n\t\tnamespace: \"some/project/name\",\n\t\tprojectName: \"some.project.name\",\n\t\tversion: \"1.0.0\",\n\t\tvariants: [\"apijson\"]\n\t}, \"generateJsdocConfig called with correct arguments\");\n\n\tt.deepEqual(writeJsdocConfigStub.callCount, 1, \"writeJsdocConfig called once\");\n\tt.deepEqual(writeJsdocConfigStub.getCall(0).args[0], \"/some/tmp/path\",\n\t\t\"writeJsdocConfig called with correct tmpPath argument\");\n\tt.deepEqual(writeJsdocConfigStub.getCall(0).args[1], \"some config\",\n\t\t\"writeJsdocConfig called with correct config argument\");\n\n\tt.deepEqual(buildJsdocStub.callCount, 1, \"buildJsdoc called once\");\n\tt.deepEqual(buildJsdocStub.getCall(0).args[0], {\n\t\tsourcePath: \"/some/source/path\",\n\t\tconfigPath: \"/some/config/path\"\n\t}, \"buildJsdoc called with correct arguments\");\n\n\tt.deepEqual(createAdapterStub.getCall(0).args[0], {\n\t\tfsBasePath: \"/some/target/path\",\n\t\tvirBasePath: \"/\"\n\t}, \"createAdapter called with correct arguments\");\n\tt.deepEqual(byPathStub.getCall(0).args[0], \"/test-resources/some/project/name/designtime/api.json\",\n\t\t\"byPath called with correct path for api.json\");\n\n\n\t/* Test branch: empty variants array*/\n\tawait jsdocGenerator({\n\t\tsourcePath: \"/some/source/path\",\n\t\ttargetPath: \"/some/target/path\",\n\t\ttmpPath: \"/some/tmp/path\",\n\t\toptions: {\n\t\t\tprojectName: \"some.project.name\",\n\t\t\tnamespace: \"some/project/name\",\n\t\t\tversion: \"1.0.0\",\n\t\t\tvariants: []\n\t\t}\n\t});\n\n\tt.deepEqual(generateJsdocConfigStub.getCall(1).args[0].variants, [\"apijson\"],\n\t\t\"generateJsdocConfig called with correct variants arguments\");\n\n\n\t/* Test branch: variants array set + sdkBuild requested*/\n\tawait jsdocGenerator({\n\t\tsourcePath: \"/some/source/path\",\n\t\ttargetPath: \"/some/target/path\",\n\t\ttmpPath: \"/some/tmp/path\",\n\t\toptions: {\n\t\t\tprojectName: \"some.project.name\",\n\t\t\tnamespace: \"some/project/name\",\n\t\t\tversion: \"1.0.0\",\n\t\t\tvariants: [\"pony\"],\n\t\t\tsdkBuild: true\n\t\t}\n\t});\n\n\tt.deepEqual(generateJsdocConfigStub.getCall(2).args[0].variants, [\"pony\"],\n\t\t\"generateJsdocConfig called with correct variants arguments\");\n\n\tsinon.restore();\n});\n\ntest(\"jsdocGenerator missing parameters\", async (t) => {\n\tawait t.throwsAsync(jsdocGenerator(), {\n\t\tinstanceOf: TypeError\n\t}, \"TypeError thrown\");\n});\n",
    "test/lib/processors/jsdoc/sdkTransformer.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst sdkTransformer = require(\"../../../../lib/processors/jsdoc/sdkTransformer\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\ntest.serial(\"sdkTransformer\", async (t) => {\n\tconst transformerStub = sinon.stub().resolves(\"api.json content\");\n\tmock(\"../../../../lib/processors/jsdoc/lib/transformApiJson\", transformerStub);\n\tconst createResourceStub = sinon.stub(require(\"@ui5/fs\").resourceFactory, \"createResource\")\n\t\t.returns(\"result resource\");\n\n\tconst sdkTransformer = mock.reRequire(\"../../../../lib/processors/jsdoc/sdkTransformer\");\n\n\tconst res = await sdkTransformer({\n\t\tapiJsonPath: \"/some/path/api.json\",\n\t\tdotLibraryPath: \"/some/path/.library\",\n\t\ttargetApiJsonPath: \"/some/other/path/api.json\",\n\t\tdependencyApiJsonPaths: [\n\t\t\t\"/some/path/x/api.json\",\n\t\t\t\"/some/path/y/api.json\"\n\t\t],\n\t\tfs: \"custom fs\"\n\t});\n\n\tt.deepEqual(res.length, 1, \"Returned one resource\");\n\tt.deepEqual(res[0], \"result resource\", \"Returned one resource\");\n\n\tt.deepEqual(transformerStub.callCount, 1, \"generateJsdocConfig called once\");\n\tt.deepEqual(transformerStub.getCall(0).args[0], \"/some/path/api.json\",\n\t\t\"transform-apijson-for-sdk called with correct argument #1\");\n\tt.deepEqual(transformerStub.getCall(0).args[1], \"/ignore/this/path/resource/will/be/returned\",\n\t\t\"transform-apijson-for-sdk called with correct argument #2\");\n\tt.deepEqual(transformerStub.getCall(0).args[2], \"/some/path/.library\",\n\t\t\"transform-apijson-for-sdk called with correct argument #3\");\n\tt.deepEqual(transformerStub.getCall(0).args[3], [\n\t\t\"/some/path/x/api.json\",\n\t\t\"/some/path/y/api.json\"\n\t], \"transform-apijson-for-sdk called with correct argument #4\");\n\tt.deepEqual(transformerStub.getCall(0).args[4], \"\",\n\t\t\"transform-apijson-for-sdk called with correct argument #5\");\n\tt.deepEqual(transformerStub.getCall(0).args[5], {\n\t\tfs: \"custom fs\",\n\t\treturnOutputFiles: true\n\t}, \"transform-apijson-for-sdk called with correct argument #6\");\n\n\tt.deepEqual(createResourceStub.callCount, 1, \"createResource called once\");\n\tt.deepEqual(createResourceStub.getCall(0).args[0], {\n\t\tpath: \"/some/other/path/api.json\",\n\t\tstring: \"api.json content\"\n\t}, \"createResource called with correct arguments\");\n\n\tmock.stop(\"../../../../lib/processors/jsdoc/lib/transformApiJson\");\n});\n\ntest(\"sdkTransformer missing parameters\", async (t) => {\n\tconst error = await t.throwsAsync(sdkTransformer());\n\tt.deepEqual(error.message, \"[sdkTransformer]: One or more mandatory parameters not provided\",\n\t\t\"Correct error message thrown\");\n});\n",
    "test/lib/processors/stringReplacer.js": "const test = require(\"ava\");\nconst {Readable} = require(\"stream\");\nconst stringReplacer = require(\"../../../lib/processors/stringReplacer\");\n\nconst getStringFromStream = (stream) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst buffers = [];\n\t\tstream.on(\"data\", (data) => {\n\t\t\tbuffers.push(data);\n\t\t});\n\t\tstream.on(\"error\", (err) => {\n\t\t\treject(err);\n\t\t});\n\t\tstream.on(\"end\", () => {\n\t\t\tconst buffer = Buffer.concat(buffers);\n\t\t\tresolve(buffer.toString());\n\t\t});\n\t});\n};\n\ntest.serial(\"Replaces string pattern from resource stream\", async (t) => {\n\tconst input = `foo bar foo`;\n\tconst expected = `foo foo foo`;\n\n\tlet output;\n\n\tconst resource = {\n\t\tgetStream: () => {\n\t\t\tconst stream = new Readable();\n\t\t\tstream.push(Buffer.from(input));\n\t\t\tstream.push(null);\n\t\t\treturn stream;\n\t\t},\n\t\tsetStream: (outputStream) => {\n\t\t\toutput = getStringFromStream(outputStream);\n\t\t}\n\t};\n\n\tconst processedResources = await stringReplacer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tpattern: \"bar\",\n\t\t\treplacement: \"foo\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource], \"Input resource is returned\");\n\tt.deepEqual(await output, expected, \"Correct file content should be set\");\n});\n\n// Skip test in Node v8 as unicode handling of streams seems to be broken\ntest[\n\tprocess.version.startsWith(\"v8.\") ? \"skip\" : \"serial\"\n](\"Correctly processes utf8 characters within separate chunks\", async (t) => {\n\tconst utf8string = \"Κυ\";\n\tconst expected = utf8string;\n\n\tlet output;\n\n\tconst resource = {\n\t\tgetStream: () => {\n\t\t\tconst stream = new Readable();\n\t\t\tconst utf8stringAsBuffer = Buffer.from(utf8string, \"utf8\");\n\t\t\t// Pushing each byte separately makes content unreadable\n\t\t\t// if stream encoding is not set to utf8\n\t\t\t// This might happen when reading large files with utf8 characters\n\t\t\tstream.push(Buffer.from([utf8stringAsBuffer[0]]));\n\t\t\tstream.push(Buffer.from([utf8stringAsBuffer[1]]));\n\t\t\tstream.push(Buffer.from([utf8stringAsBuffer[2]]));\n\t\t\tstream.push(Buffer.from([utf8stringAsBuffer[3]]));\n\t\t\tstream.push(null);\n\t\t\treturn stream;\n\t\t},\n\t\tsetStream: (outputStream) => {\n\t\t\toutput = getStringFromStream(outputStream);\n\t\t}\n\t};\n\n\tconst processedResources = await stringReplacer({\n\t\tresources: [resource],\n\t\toptions: {\n\t\t\tpattern: \"n/a\",\n\t\t\treplacement: \"n/a\"\n\t\t}\n\t});\n\n\tt.deepEqual(processedResources, [resource], \"Input resource is returned\");\n\tt.deepEqual(await output, expected, \"Correct file content should be set\");\n});\n",
    "test/lib/processors/themeBuilder.js": "const test = require(\"ava\");\n\nconst resourceFactory = require(\"@ui5/fs\").resourceFactory;\nconst fsInterface = require(\"@ui5/fs\").fsInterface;\n\nconst themeBuilderProcessor = require(\"../../../lib/processors/themeBuilder\");\nconst ThemeBuilder = require(\"../../../lib/processors/themeBuilder\").ThemeBuilder;\n\nfunction prepareResources({library} = {}) {\n\tconst input =\n`@someColor: black;\n.someClass {\n\tcolor: @someColor;\n\tpadding: 1px 2px 3px 4px;\n}`;\n\n\tconst memoryAdapter = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\n\tlet lessFilePath;\n\tif (library === false) {\n\t\tlessFilePath = \"/resources/foo.less\";\n\t} else {\n\t\tlessFilePath = \"/resources/sap/ui/foo/themes/base/library.source.less\";\n\t}\n\n\tconst resource = resourceFactory.createResource({\n\t\tpath: lessFilePath,\n\t\tstring: input\n\t});\n\n\tmemoryAdapter.write(resource);\n\n\treturn {\n\t\tresource,\n\t\tmemoryAdapter\n\t};\n}\n\nfunction getExpectedResults({compress, library, cssVariables}) {\n\tconst result = {};\n\tif (compress) {\n\t\tresult.css =\n`.someClass{color:#000;padding:1px 2px 3px 4px}`;\n\n\t\tresult.cssRtl =\n`.someClass{color:#000;padding:1px 4px 3px 2px}`;\n\t\tresult.json = `{\"someColor\":\"#000\"}`;\n\t} else {\n\t\tresult.css =\n`.someClass {\n  color: #000000;\n  padding: 1px 2px 3px 4px;\n}\n`;\n\n\t\tresult.cssRtl =\n`.someClass {\n  color: #000000;\n  padding: 1px 4px 3px 2px;\n}\n`;\n\n\t\tresult.json =\n`{\n\t\"someColor\": \"#000000\"\n}`;\n\t}\n\n\tif (library !== false) {\n\t\tresult.css +=\n`\n/* Inline theming parameters */\n#sap-ui-theme-sap\\\\.ui\\\\.foo{background-image:url('data:text/plain;utf-8,%7B%22someColor%22%3A%22%23` +\n`${compress ? \"000\" : \"000000\"}%22%7D')}\n`;\n\t\tresult.cssRtl +=\n`\n/* Inline theming parameters */\n#sap-ui-theme-sap\\\\.ui\\\\.foo{background-image:url('data:text/plain;utf-8,%7B%22someColor%22%3A%22%23` +\n`${compress ? \"000\" : \"000000\"}%22%7D')}\n`;\n\t}\n\n\tif (cssVariables) {\n\t\tresult.cssVariablesSource =\n`@someColor: #000000;\n\n:root {\n--someColor: @someColor;\n}\n`;\n\t\tresult.cssVariables =\n`:root {\n  --someColor: #000000;\n}\n\n/* Inline theming parameters */\n#sap-ui-theme-sap\\\\.ui\\\\.foo{background-image:url('data:text/plain;utf-8,%7B%22someColor%22%3A%22%23000000%22%7D')}\n`;\n\t\tresult.cssSkeleton =\n`.someClass {\n  color: var(--someColor);\n  padding: 1px 2px 3px 4px;\n}\n`;\n\t\tresult.cssSkeletonRtl =\n`.someClass {\n  color: var(--someColor);\n  padding: 1px 4px 3px 2px;\n}\n`;\n\t}\n\n\treturn result;\n}\n\ntest(\"Processor: Builds a less file (default options)\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources();\n\n\tconst [cssResource, cssRtlResource, jsonResource] = await themeBuilderProcessor({\n\t\tresources: [resource],\n\t\tfs: fsInterface(memoryAdapter)\n\t});\n\n\tconst expected = getExpectedResults({compress: false});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n\n\tt.is(cssResource.getPath(), \"/resources/sap/ui/foo/themes/base/library.css\", \"CSS resource path should be correct\");\n\tt.is(cssRtlResource.getPath(), \"/resources/sap/ui/foo/themes/base/library-RTL.css\",\n\t\t\"Right-to-left CSS resource path should be correct\");\n\tt.is(jsonResource.getPath(), \"/resources/sap/ui/foo/themes/base/library-parameters.json\",\n\t\t\"JSON resource path should be correct\");\n});\n\ntest(\"Processor: Builds a less file (compress = true)\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources();\n\n\tconst [cssResource, cssRtlResource, jsonResource] = await themeBuilderProcessor({\n\t\tresources: [resource],\n\t\tfs: fsInterface(memoryAdapter),\n\t\toptions: {\n\t\t\tcompress: true\n\t\t}\n\t});\n\n\tconst expected = getExpectedResults({compress: true});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n});\n\ntest(\"Processor: Builds a less file (compress = false)\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources();\n\n\tconst [cssResource, cssRtlResource, jsonResource] = await themeBuilderProcessor({\n\t\tresources: [resource],\n\t\tfs: fsInterface(memoryAdapter),\n\t\toptions: {\n\t\t\tcompress: false\n\t\t}\n\t});\n\n\tconst expected = getExpectedResults({compress: false});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n});\n\ntest(\"Processor: Builds a less file (no library)\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources({library: false});\n\n\tconst [cssResource, cssRtlResource, jsonResource] = await themeBuilderProcessor({\n\t\tresources: [resource],\n\t\tfs: fsInterface(memoryAdapter),\n\t\toptions: {\n\t\t\tcompress: false\n\t\t}\n\t});\n\n\tconst expected = getExpectedResults({compress: false, library: false});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n});\n\ntest(\"ThemeBuilder: Builds a less file\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources();\n\n\tconst themeBuilder = new ThemeBuilder({fs: fsInterface(memoryAdapter)});\n\n\tconst [cssResource, cssRtlResource, jsonResource] = await themeBuilder.build([resource]);\n\n\tconst expected = getExpectedResults({compress: false});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n});\n\ntest(\"ThemeBuilder: Builds a less file (compress = true)\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources();\n\n\tconst themeBuilder = new ThemeBuilder({fs: fsInterface(memoryAdapter)});\n\n\tconst [cssResource, cssRtlResource, jsonResource] = await themeBuilder.build([resource], {\n\t\tcompress: true\n\t});\n\n\tconst expected = getExpectedResults({compress: true});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n});\n\ntest(\"ThemeBuilder: Builds a less file (compress = false)\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources();\n\n\tconst themeBuilder = new ThemeBuilder({fs: fsInterface(memoryAdapter)});\n\n\tconst [cssResource, cssRtlResource, jsonResource] = await themeBuilder.build([resource], {\n\t\tcompress: false\n\t});\n\n\tconst expected = getExpectedResults({compress: false});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n});\n\ntest(\"ThemeBuilder: Builds a less file (no library)\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources({library: false});\n\n\tconst themeBuilder = new ThemeBuilder({fs: fsInterface(memoryAdapter)});\n\n\tconst [cssResource, cssRtlResource, jsonResource] = await themeBuilder.build([resource], {\n\t\tcompress: false\n\t});\n\n\tconst expected = getExpectedResults({compress: false, library: false});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n});\n\ntest(\"Processor: Builds a less file (cssVariables = true)\", async (t) => {\n\tconst {resource, memoryAdapter} = prepareResources();\n\n\tconst [\n\t\tcssResource,\n\t\tcssRtlResource,\n\t\tjsonResource,\n\t\tcssVariablesSourceResource,\n\t\tcssVariablesResource,\n\t\tcssSkeletonResource,\n\t\tcssSkeletonRtlResource\n\t] = await themeBuilderProcessor({\n\t\tresources: [resource],\n\t\tfs: fsInterface(memoryAdapter),\n\t\toptions: {\n\t\t\tcssVariables: true\n\t\t}\n\t});\n\n\tconst expected = getExpectedResults({cssVariables: true});\n\tt.is(await cssResource.getString(), expected.css, \"CSS should be correct\");\n\tt.is(await cssRtlResource.getString(), expected.cssRtl, \"Right-to-left CSS should be correct\");\n\tt.is(await jsonResource.getString(), expected.json, \"JSON should be correct\");\n\tt.is(await cssVariablesSourceResource.getString(), expected.cssVariablesSource,\n\t\t\"CSS Variables source should be correct\");\n\tt.is(await cssVariablesResource.getString(), expected.cssVariables,\n\t\t\"CSS Variables should be correct\");\n\tt.is(await cssSkeletonResource.getString(), expected.cssSkeleton,\n\t\t\"Skeleton CSS should be correct\");\n\tt.is(await cssSkeletonRtlResource.getString(), expected.cssSkeletonRtl,\n\t\t\"Right-to-left skeleton CSS should be correct\");\n\n\tt.is(cssResource.getPath(), \"/resources/sap/ui/foo/themes/base/library.css\",\n\t\t\"CSS resource path should be correct\");\n\tt.is(cssRtlResource.getPath(), \"/resources/sap/ui/foo/themes/base/library-RTL.css\",\n\t\t\"Right-to-left CSS resource path should be correct\");\n\tt.is(jsonResource.getPath(), \"/resources/sap/ui/foo/themes/base/library-parameters.json\",\n\t\t\"JSON resource path should be correct\");\n\tt.is(cssVariablesSourceResource.getPath(), \"/resources/sap/ui/foo/themes/base/css_variables.source.less\",\n\t\t\"CSS Variables source path should be correct\");\n\tt.is(cssVariablesResource.getPath(), \"/resources/sap/ui/foo/themes/base/css_variables.css\",\n\t\t\"CSS Variables resource path should be correct\");\n\tt.is(cssSkeletonResource.getPath(), \"/resources/sap/ui/foo/themes/base/library_skeleton.css\",\n\t\t\"Skeleton CSS resource path should be correct\");\n\tt.is(cssSkeletonRtlResource.getPath(), \"/resources/sap/ui/foo/themes/base/library_skeleton-RTL.css\",\n\t\t\"Right-to-left skeleton CSS resource path should be correct\");\n});\n",
    "test/lib/tasks/bundlers/generateComponentPreload.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst logger = require(\"@ui5/logger\");\n\ntest.beforeEach((t) => {\n\tt.context.log = {\n\t\twarn: sinon.stub(),\n\t\tverbose: sinon.stub(),\n\t\terror: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"builder:tasks:bundlers:generateComponentPreload\").returns(t.context.log);\n\n\tt.context.workspace = {\n\t\tbyGlob: sinon.stub().resolves([]),\n\t\twrite: sinon.stub().resolves()\n\t};\n\tt.context.dependencies = {};\n\tt.context.comboByGlob = sinon.stub().resolves([]);\n\n\tt.context.ReaderCollectionPrioritizedStub = sinon.stub();\n\tt.context.ReaderCollectionPrioritizedStub.returns({\n\t\tbyGlob: t.context.comboByGlob\n\t});\n\tmock(\"@ui5/fs\", {\n\t\tReaderCollectionPrioritized: t.context.ReaderCollectionPrioritizedStub\n\t});\n\n\tt.context.moduleBundlerStub = sinon.stub().resolves([{\"fake\": \"resource\"}]);\n\tmock(\"../../../../lib/processors/bundlers/moduleBundler\", t.context.moduleBundlerStub);\n\n\tt.context.generateComponentPreload = mock.reRequire(\"../../../../lib/tasks/bundlers/generateComponentPreload\");\n});\n\ntest.afterEach.always(() => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"generateComponentPreload - one namespace\", async (t) => {\n\tconst {\n\t\tgenerateComponentPreload, moduleBundlerStub, ReaderCollectionPrioritizedStub,\n\t\tworkspace, dependencies, comboByGlob\n\t} = t.context;\n\n\tconst resources = [\n\t\t{\"fake\": \"resource\"}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tawait generateComponentPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Application\",\n\t\t\tnamespaces: [\"my/app\"]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 1, \"moduleBundler should have been called once\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\".js\",\n\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\".properties\"\n\t\t\t\t],\n\t\t\t\tname: \"my/app/Component-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/app/\",\n\t\t\t\t\t\t\t\"my/app/**/manifest.json\",\n\t\t\t\t\t\t\t\"my/app/changes/changes-bundle.json\",\n\t\t\t\t\t\t\t\"my/app/changes/flexibility-bundle.json\",\n\t\t\t\t\t\t\t\"!my/app/test/\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\n\tt.is(comboByGlob.callCount, 1,\n\t\t\"combo.byGlob should have been called once\");\n\tt.deepEqual(comboByGlob.getCall(0).args, [\"/resources/**/*.{js,json,xml,html,properties,library}\"],\n\t\t\"combo.byGlob should have been called with expected pattern\");\n\n\tt.is(ReaderCollectionPrioritizedStub.callCount, 1,\n\t\t\"ReaderCollectionPrioritized should have been called once\");\n\tt.true(ReaderCollectionPrioritizedStub.calledWithNew(),\n\t\t\"ReaderCollectionPrioritized should have been called with 'new'\");\n\n\tconst bundleResources = await moduleBundlerStub.getCall(0).returnValue;\n\tt.is(workspace.write.callCount, 1,\n\t\t\"workspace.write should have been called once\");\n\tt.deepEqual(workspace.write.getCall(0).args, [bundleResources[0]],\n\t\t\"workspace.write should have been called with expected args\");\n\tt.is(workspace.write.getCall(0).args[0], bundleResources[0],\n\t\t\"workspace.write should have been called with exact resource returned by moduleBundler\");\n});\n\ntest.serial(\"generateComponentPreload - one namespace - excludes\", async (t) => {\n\tconst {\n\t\tgenerateComponentPreload, moduleBundlerStub, ReaderCollectionPrioritizedStub,\n\t\tworkspace, dependencies, comboByGlob\n\t} = t.context;\n\n\tconst resources = [\n\t\t{\"fake\": \"resource\"}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tawait generateComponentPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Application\",\n\t\t\tnamespaces: [\"my/app\"],\n\t\t\texcludes: [\n\t\t\t\t\"my/app/thirdparty/\",\n\t\t\t\t\"!my/app/thirdparty/NotExcluded.js\"\n\t\t\t]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 1, \"moduleBundler should have been called once\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\".js\",\n\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\".properties\"\n\t\t\t\t],\n\t\t\t\tname: \"my/app/Component-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/app/\",\n\t\t\t\t\t\t\t\"my/app/**/manifest.json\",\n\t\t\t\t\t\t\t\"my/app/changes/changes-bundle.json\",\n\t\t\t\t\t\t\t\"my/app/changes/flexibility-bundle.json\",\n\t\t\t\t\t\t\t\"!my/app/test/\",\n\t\t\t\t\t\t\t\"!my/app/thirdparty/\",\n\t\t\t\t\t\t\t\"+my/app/thirdparty/NotExcluded.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\n\tt.is(comboByGlob.callCount, 1,\n\t\t\"combo.byGlob should have been called once\");\n\tt.deepEqual(comboByGlob.getCall(0).args, [\"/resources/**/*.{js,json,xml,html,properties,library}\"],\n\t\t\"combo.byGlob should have been called with expected pattern\");\n\n\tt.is(ReaderCollectionPrioritizedStub.callCount, 1,\n\t\t\"ReaderCollectionPrioritized should have been called once\");\n\tt.true(ReaderCollectionPrioritizedStub.calledWithNew(),\n\t\t\"ReaderCollectionPrioritized should have been called with 'new'\");\n\n\tconst bundleResources = await moduleBundlerStub.getCall(0).returnValue;\n\tt.is(workspace.write.callCount, 1,\n\t\t\"workspace.write should have been called once\");\n\tt.deepEqual(workspace.write.getCall(0).args, [bundleResources[0]],\n\t\t\"workspace.write should have been called with expected args\");\n\tt.is(workspace.write.getCall(0).args[0], bundleResources[0],\n\t\t\"workspace.write should have been called with exact resource returned by moduleBundler\");\n});\n\ntest.serial(\"generateComponentPreload - one namespace - excludes w/o namespace\", async (t) => {\n\tconst {\n\t\tgenerateComponentPreload, moduleBundlerStub, ReaderCollectionPrioritizedStub,\n\t\tworkspace, dependencies, comboByGlob\n\t} = t.context;\n\n\tconst resources = [\n\t\t{\"fake\": \"resource\"}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tawait generateComponentPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Application\",\n\t\t\tnamespaces: [\"my/app\"],\n\t\t\texcludes: [\n\t\t\t\t\"thirdparty/\",\n\t\t\t\t\"!thirdparty/NotExcluded.js\"\n\t\t\t]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 1, \"moduleBundler should have been called once\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\".js\",\n\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\".properties\"\n\t\t\t\t],\n\t\t\t\tname: \"my/app/Component-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/app/\",\n\t\t\t\t\t\t\t\"my/app/**/manifest.json\",\n\t\t\t\t\t\t\t\"my/app/changes/changes-bundle.json\",\n\t\t\t\t\t\t\t\"my/app/changes/flexibility-bundle.json\",\n\t\t\t\t\t\t\t\"!my/app/test/\",\n\t\t\t\t\t\t\t\"!thirdparty/\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\n\tt.is(comboByGlob.callCount, 1,\n\t\t\"combo.byGlob should have been called once\");\n\tt.deepEqual(comboByGlob.getCall(0).args, [\"/resources/**/*.{js,json,xml,html,properties,library}\"],\n\t\t\"combo.byGlob should have been called with expected pattern\");\n\n\tt.is(ReaderCollectionPrioritizedStub.callCount, 1,\n\t\t\"ReaderCollectionPrioritized should have been called once\");\n\tt.true(ReaderCollectionPrioritizedStub.calledWithNew(),\n\t\t\"ReaderCollectionPrioritized should have been called with 'new'\");\n\n\tconst bundleResources = await moduleBundlerStub.getCall(0).returnValue;\n\tt.is(workspace.write.callCount, 1,\n\t\t\"workspace.write should have been called once\");\n\tt.deepEqual(workspace.write.getCall(0).args, [bundleResources[0]],\n\t\t\"workspace.write should have been called with expected args\");\n\tt.is(workspace.write.getCall(0).args[0], bundleResources[0],\n\t\t\"workspace.write should have been called with exact resource returned by moduleBundler\");\n});\n\ntest.serial(\"generateComponentPreload - multiple namespaces - excludes\", async (t) => {\n\tconst {\n\t\tgenerateComponentPreload, moduleBundlerStub, ReaderCollectionPrioritizedStub,\n\t\tworkspace, dependencies, comboByGlob\n\t} = t.context;\n\n\tconst resources = [\n\t\t{\"fake\": \"resource\"}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tawait generateComponentPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Application\",\n\t\t\tnamespaces: [\n\t\t\t\t\"my/app1\",\n\t\t\t\t\"my/app2\"\n\t\t\t],\n\t\t\texcludes: [\n\t\t\t\t\"my/app1/thirdparty1/\",\n\t\t\t\t\"!my/app1/thirdparty1/NotExcluded.js\",\n\t\t\t\t\"my/app2/thirdparty2/\",\n\t\t\t\t\"!my/app2/thirdparty2/NotExcluded.js\"\n\t\t\t]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 2, \"moduleBundler should have been called twice\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\".js\",\n\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\".properties\"\n\t\t\t\t],\n\t\t\t\tname: \"my/app1/Component-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/app1/\",\n\t\t\t\t\t\t\t\"my/app1/**/manifest.json\",\n\t\t\t\t\t\t\t\"my/app1/changes/changes-bundle.json\",\n\t\t\t\t\t\t\t\"my/app1/changes/flexibility-bundle.json\",\n\t\t\t\t\t\t\t\"!my/app1/test/\",\n\t\t\t\t\t\t\t\"!my/app1/thirdparty1/\",\n\t\t\t\t\t\t\t\"+my/app1/thirdparty1/NotExcluded.js\",\n\t\t\t\t\t\t\t\"!my/app2/thirdparty2/\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(1).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\".js\",\n\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\".properties\"\n\t\t\t\t],\n\t\t\t\tname: \"my/app2/Component-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/app2/\",\n\t\t\t\t\t\t\t\"my/app2/**/manifest.json\",\n\t\t\t\t\t\t\t\"my/app2/changes/changes-bundle.json\",\n\t\t\t\t\t\t\t\"my/app2/changes/flexibility-bundle.json\",\n\t\t\t\t\t\t\t\"!my/app2/test/\",\n\t\t\t\t\t\t\t\"!my/app1/thirdparty1/\",\n\t\t\t\t\t\t\t\"!my/app2/thirdparty2/\",\n\t\t\t\t\t\t\t\"+my/app2/thirdparty2/NotExcluded.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\n\tt.is(comboByGlob.callCount, 1,\n\t\t\"combo.byGlob should have been called once\");\n\tt.deepEqual(comboByGlob.getCall(0).args, [\"/resources/**/*.{js,json,xml,html,properties,library}\"],\n\t\t\"combo.byGlob should have been called with expected pattern\");\n\n\tt.is(ReaderCollectionPrioritizedStub.callCount, 1,\n\t\t\"ReaderCollectionPrioritized should have been called once\");\n\tt.true(ReaderCollectionPrioritizedStub.calledWithNew(),\n\t\t\"ReaderCollectionPrioritized should have been called with 'new'\");\n\n\tconst bundleResources1 = await moduleBundlerStub.getCall(0).returnValue;\n\tconst bundleResources2 = await moduleBundlerStub.getCall(1).returnValue;\n\tt.is(workspace.write.callCount, 2,\n\t\t\"workspace.write should have been called twice\");\n\tt.deepEqual(workspace.write.getCall(0).args, [bundleResources1[0]],\n\t\t\"workspace.write should have been called with expected args\");\n\tt.is(workspace.write.getCall(0).args[0], bundleResources1[0],\n\t\t\"workspace.write should have been called with exact resource returned by moduleBundler\");\n\tt.deepEqual(workspace.write.getCall(1).args, [bundleResources2[0]],\n\t\t\"workspace.write should have been called with expected args\");\n\tt.is(workspace.write.getCall(1).args[0], bundleResources2[0],\n\t\t\"workspace.write should have been called with exact resource returned by moduleBundler\");\n});\n\ntest.serial(\"generateComponentPreload - one namespace - invalid exclude\", async (t) => {\n\tconst {\n\t\tgenerateComponentPreload,\n\t\tworkspace, dependencies, comboByGlob,\n\t\tlog\n\t} = t.context;\n\n\tconst resources = [\n\t\t{\"fake\": \"resource\"}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tawait generateComponentPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Application\",\n\t\t\tnamespaces: [\"my/app\"],\n\t\t\texcludes: [\n\t\t\t\t\"!**/\" // re-include outside of namespace is not allowed\n\t\t\t]\n\t\t}\n\t});\n\n\tt.is(log.warn.callCount, 1, \"log.warn should be called once\");\n\tt.deepEqual(log.warn.getCall(0).args, [\n\t\t\"Configured preload exclude contains invalid re-include: !**/. \" +\n\t\t\"Re-includes must start with a component namespace (my/app)\"\n\t]);\n\n\tt.is(log.verbose.callCount, 1, \"log.verbose should be called once\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Generating my/app/Component-preload.js...\"\n\t]);\n\n\tt.is(log.error.callCount, 0, \"log.error should not be called\");\n});\n\ntest.serial(\"generateComponentPreload - nested namespaces - excludes\", async (t) => {\n\tconst {\n\t\tgenerateComponentPreload, moduleBundlerStub,\n\t\tworkspace, dependencies, comboByGlob,\n\t\tlog\n\t} = t.context;\n\n\tconst resources = [\n\t\t{\"fake\": \"resource\"}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tawait generateComponentPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Application\",\n\t\t\tnamespaces: [\n\t\t\t\t\"my/project/component1\",\n\t\t\t\t\"my/project\",\n\t\t\t\t\"my/project/component2\",\n\t\t\t],\n\t\t\texcludes: [\n\t\t\t\t\"my/project/component1/foo/\",\n\t\t\t\t\"!my/project/test/\",\n\t\t\t\t\"!my/project/component2/*.html\",\n\n\t\t\t\t// Invalid, should cause a warning\n\t\t\t\t\"!invalid/namespace/\"\n\t\t\t]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 3, \"moduleBundler should have been called 3 times\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\".js\",\n\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\".properties\"\n\t\t\t\t],\n\t\t\t\tname: \"my/project/component1/Component-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/project/component1/\",\n\t\t\t\t\t\t\t\"my/project/component1/**/manifest.json\",\n\t\t\t\t\t\t\t\"my/project/component1/changes/changes-bundle.json\",\n\t\t\t\t\t\t\t\"my/project/component1/changes/flexibility-bundle.json\",\n\t\t\t\t\t\t\t\"!my/project/component1/test/\",\n\n\t\t\t\t\t\t\t// via excludes config\n\t\t\t\t\t\t\t\"!my/project/component1/foo/\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(1).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\".js\",\n\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\".properties\"\n\t\t\t\t],\n\t\t\t\tname: \"my/project/Component-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/project/\",\n\t\t\t\t\t\t\t\"my/project/**/manifest.json\",\n\t\t\t\t\t\t\t\"my/project/changes/changes-bundle.json\",\n\t\t\t\t\t\t\t\"my/project/changes/flexibility-bundle.json\",\n\t\t\t\t\t\t\t\"!my/project/test/\",\n\n\t\t\t\t\t\t\t// via excludes config\n\t\t\t\t\t\t\t\"!my/project/component1/foo/\",\n\t\t\t\t\t\t\t\"+my/project/test/\",\n\t\t\t\t\t\t\t\"+my/project/component2/*.html\",\n\n\t\t\t\t\t\t\t// sub-namespaces are excluded\n\t\t\t\t\t\t\t\"!my/project/component1/\",\n\t\t\t\t\t\t\t\"!my/project/component1/**/manifest.json\",\n\t\t\t\t\t\t\t\"!my/project/component2/\",\n\t\t\t\t\t\t\t\"!my/project/component2/**/manifest.json\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(2).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tdefaultFileTypes: [\n\t\t\t\t\t\".js\",\n\t\t\t\t\t\".control.xml\",\n\t\t\t\t\t\".fragment.html\",\n\t\t\t\t\t\".fragment.json\",\n\t\t\t\t\t\".fragment.xml\",\n\t\t\t\t\t\".view.html\",\n\t\t\t\t\t\".view.json\",\n\t\t\t\t\t\".view.xml\",\n\t\t\t\t\t\".properties\"\n\t\t\t\t],\n\t\t\t\tname: \"my/project/component2/Component-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/project/component2/\",\n\t\t\t\t\t\t\t\"my/project/component2/**/manifest.json\",\n\t\t\t\t\t\t\t\"my/project/component2/changes/changes-bundle.json\",\n\t\t\t\t\t\t\t\"my/project/component2/changes/flexibility-bundle.json\",\n\t\t\t\t\t\t\t\"!my/project/component2/test/\",\n\n\t\t\t\t\t\t\t// via excludes config\n\t\t\t\t\t\t\t\"!my/project/component1/foo/\",\n\t\t\t\t\t\t\t\"+my/project/component2/*.html\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\n\tt.is(log.warn.callCount, 1, \"log.warn should be called once\");\n\tt.deepEqual(log.warn.getCall(0).args, [\n\t\t\"Configured preload exclude contains invalid re-include: !invalid/namespace/. \" +\n\t\t\"Re-includes must start with a component namespace \" +\n\t\t\"(my/project/component1 or my/project or my/project/component2)\"\n\t]);\n\n\tt.is(log.verbose.callCount, 3, \"log.verbose should be called once\");\n\tt.deepEqual(log.verbose.getCall(0).args, [\n\t\t\"Generating my/project/component1/Component-preload.js...\"\n\t]);\n\tt.deepEqual(log.verbose.getCall(1).args, [\n\t\t\"Generating my/project/Component-preload.js...\"\n\t]);\n\tt.deepEqual(log.verbose.getCall(2).args, [\n\t\t\"Generating my/project/component2/Component-preload.js...\"\n\t]);\n\tt.is(log.error.callCount, 0, \"log.error should not be called\");\n});\n",
    "test/lib/tasks/bundlers/generateLibraryPreload.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst logger = require(\"@ui5/logger\");\n\ntest.beforeEach((t) => {\n\tt.context.log = {\n\t\twarn: sinon.stub(),\n\t\tverbose: sinon.stub(),\n\t\terror: sinon.stub()\n\t};\n\tsinon.stub(logger, \"getLogger\").withArgs(\"builder:tasks:bundlers:generateLibraryPreload\").returns(t.context.log);\n\n\tt.context.workspace = {\n\t\tbyGlob: sinon.stub().resolves([]),\n\t\twrite: sinon.stub().resolves()\n\t};\n\tt.context.dependencies = {};\n\tt.context.comboByGlob = sinon.stub().resolves([]);\n\n\tt.context.ReaderCollectionPrioritizedStub = sinon.stub();\n\tt.context.ReaderCollectionPrioritizedStub.returns({\n\t\tbyGlob: t.context.comboByGlob\n\t});\n\tmock(\"@ui5/fs\", {\n\t\tReaderCollectionPrioritized: t.context.ReaderCollectionPrioritizedStub\n\t});\n\n\tt.context.moduleBundlerStub = sinon.stub().resolves([]);\n\tmock(\"../../../../lib/processors/bundlers/moduleBundler\", t.context.moduleBundlerStub);\n\n\tt.context.generateLibraryPreload = mock.reRequire(\"../../../../lib/tasks/bundlers/generateLibraryPreload\");\n});\n\ntest.afterEach.always(() => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"generateLibraryPreload\", async (t) => {\n\tconst {\n\t\tgenerateLibraryPreload, moduleBundlerStub, ReaderCollectionPrioritizedStub,\n\t\tworkspace, dependencies, comboByGlob\n\t} = t.context;\n\n\tconst resources = [\n\t\t{getPath: sinon.stub().returns(\"/resources/my/lib/.library\")}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tworkspace.byGlob.resolves([\n\t\t{getPath: sinon.stub().returns(\"/resources/my/lib/.library\")}\n\t]);\n\n\tawait generateLibraryPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Library\"\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 3, \"moduleBundler should have been called 3 times\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"my/lib/library-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/lib/\",\n\t\t\t\t\t\t\t\"my/lib/**/manifest.json\",\n\t\t\t\t\t\t\t\"!my/lib/*-preload.js\",\n\t\t\t\t\t\t\t\"!my/lib/designtime/\",\n\t\t\t\t\t\t\t\"!my/lib/**/*.designtime.js\",\n\t\t\t\t\t\t\t\"!my/lib/**/*.support.js\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: true,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(1).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"my/lib/designtime/library-preload.designtime.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/lib/**/*.designtime.js\",\n\t\t\t\t\t\t\t\"my/lib/designtime/\",\n\t\t\t\t\t\t\t\"!my/lib/**/*-preload.designtime.js\",\n\t\t\t\t\t\t\t\"!my/lib/designtime/**/*.properties\",\n\t\t\t\t\t\t\t\"!my/lib/designtime/**/*.svg\",\n\t\t\t\t\t\t\t\"!my/lib/designtime/**/*.xml\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true,\n\t\t\t\tskipIfEmpty: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(2).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"my/lib/library-preload.support.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/lib/**/*.support.js\",\n\t\t\t\t\t\t\t\"!my/lib/**/*-preload.support.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: false,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true,\n\t\t\t\tskipIfEmpty: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\n\tt.is(workspace.byGlob.callCount, 1,\n\t\t\"workspace.byGlob should have been called once\");\n\tt.deepEqual(workspace.byGlob.getCall(0).args, [\"/resources/**/.library\"],\n\t\t\"workspace.byGlob should have been called with expected pattern\");\n\n\tt.is(ReaderCollectionPrioritizedStub.callCount, 1,\n\t\t\"ReaderCollectionPrioritized should have been called once\");\n\tt.true(ReaderCollectionPrioritizedStub.calledWithNew(),\n\t\t\"ReaderCollectionPrioritized should have been called with 'new'\");\n});\n\ntest.serial(\"generateLibraryPreload for sap.ui.core (w/o ui5loader.js)\", async (t) => {\n\tconst {\n\t\tgenerateLibraryPreload, moduleBundlerStub, ReaderCollectionPrioritizedStub,\n\t\tworkspace, dependencies, comboByGlob\n\t} = t.context;\n\n\tconst resources = [\n\t\t{getPath: sinon.stub().returns(\"/resources/sap/ui/core/.library\")},\n\t\t{getPath: sinon.stub().returns(\"/resources/sap-ui-core.js\")}\n\t];\n\tconst filteredResources = [resources[0]]; // without sap-ui-core.js\n\tcomboByGlob.resolves(resources);\n\n\tworkspace.byGlob.resolves([\n\t\t{getPath: sinon.stub().returns(\"/resources/sap/ui/core/.library\")}\n\t]);\n\n\tawait generateLibraryPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.core\",\n\t\t\t// Should be ignored for hardcoded sap.ui.core bundle configuration\n\t\t\texcludes: [\"sap/ui/core/**\"]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 7, \"moduleBundler should have been called 7 times\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap-ui-core.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"jquery.sap.global.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"raw\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t\tsort: true,\n\t\t\t\t\t\tdeclareModules: false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tresolve: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"require\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tdecorateBootstrapModule: true,\n\t\t\t\taddTryCatchRestartWrapper: true,\n\t\t\t\tusePredefineCalls: true\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(1).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap-ui-core-dbg.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"jquery.sap.global.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"raw\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t\tsort: true,\n\t\t\t\t\t\tdeclareModules: false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"require\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: false,\n\t\t\t\tdecorateBootstrapModule: false,\n\t\t\t\taddTryCatchRestartWrapper: false,\n\t\t\t\tusePredefineCalls: false\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(2).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap-ui-core-nojQuery.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"provided\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"jquery-ui-core.js\",\n\t\t\t\t\t\t\t\"jquery-ui-datepicker.js\",\n\t\t\t\t\t\t\t\"jquery-ui-position.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery/*\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jqueryui/*\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"jquery.sap.global.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"raw\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t\tsort: true,\n\t\t\t\t\t\tdeclareModules: false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tresolve: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"require\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tdecorateBootstrapModule: true,\n\t\t\t\taddTryCatchRestartWrapper: true,\n\t\t\t\tusePredefineCalls: true\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(3).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap-ui-core-nojQuery-dbg.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"provided\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"jquery-ui-core.js\",\n\t\t\t\t\t\t\t\"jquery-ui-datepicker.js\",\n\t\t\t\t\t\t\t\"jquery-ui-position.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery/*\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jqueryui/*\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"jquery.sap.global.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"raw\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t\tsort: true,\n\t\t\t\t\t\tdeclareModules: false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"require\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: false,\n\t\t\t\tdecorateBootstrapModule: false,\n\t\t\t\taddTryCatchRestartWrapper: false,\n\t\t\t\tusePredefineCalls: false\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(4).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap/ui/core/library-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"ui5loader-autoconfig.js\",\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"provided\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/\",\n\t\t\t\t\t\t\t\"sap/ui/core/**/manifest.json\",\n\t\t\t\t\t\t\t\"!sap/ui/core/*-preload.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/designtime/\",\n\t\t\t\t\t\t\t\"!sap/ui/core/**/*.designtime.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/**/*.support.js\",\n\n\t\t\t\t\t\t\t\"!sap/ui/core/cldr/\",\n\t\t\t\t\t\t\t\"*.js\",\n\t\t\t\t\t\t\t\"sap/base/\",\n\t\t\t\t\t\t\t\"sap/ui/base/\",\n\t\t\t\t\t\t\t\"sap/ui/dom/\",\n\t\t\t\t\t\t\t\"sap/ui/events/\",\n\t\t\t\t\t\t\t\"sap/ui/model/\",\n\t\t\t\t\t\t\t\"sap/ui/security/\",\n\t\t\t\t\t\t\t\"sap/ui/util/\",\n\t\t\t\t\t\t\t\"sap/ui/Global.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/crossroads.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/caja-html-sanitizer.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/hasher.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/signals.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery-mobile-custom.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jqueryui/jquery-ui-core.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jqueryui/jquery-ui-position.js\",\n\t\t\t\t\t\t\t\"!sap-ui-*.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/support/\",\n\t\t\t\t\t\t\t\"!sap/ui/core/plugin/DeclarativeSupport.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/plugin/LessSupport.js\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: true,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\n\tt.is(workspace.byGlob.callCount, 1,\n\t\t\"workspace.byGlob should have been called once\");\n\tt.deepEqual(workspace.byGlob.getCall(0).args, [\"/resources/**/.library\"],\n\t\t\"workspace.byGlob should have been called with expected pattern\");\n\n\tt.is(ReaderCollectionPrioritizedStub.callCount, 1,\n\t\t\"ReaderCollectionPrioritized should have been called once\");\n\tt.true(ReaderCollectionPrioritizedStub.calledWithNew(),\n\t\t\"ReaderCollectionPrioritized should have been called with 'new'\");\n});\n\n\ntest.serial(\"generateLibraryPreload for sap.ui.core (/w ui5loader.js)\", async (t) => {\n\tconst {\n\t\tgenerateLibraryPreload, moduleBundlerStub, ReaderCollectionPrioritizedStub,\n\t\tworkspace, dependencies, comboByGlob\n\t} = t.context;\n\n\tconst resources = [\n\t\t{getPath: sinon.stub().returns(\"/resources/sap/ui/core/.library\")},\n\t\t{getPath: sinon.stub().returns(\"/resources/ui5loader.js\")},\n\t\t{getPath: sinon.stub().returns(\"/resources/sap-ui-core.js\")}\n\t];\n\tconst filteredResources = [resources[0], resources[1]]; // without sap-ui-core.js\n\tcomboByGlob.resolves(resources);\n\n\tworkspace.byGlob.resolves([\n\t\t{getPath: sinon.stub().returns(\"/resources/sap/ui/core/.library\")}\n\t]);\n\n\tawait generateLibraryPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.core\",\n\t\t\t// Should be ignored for hardcoded sap.ui.core bundle configuration\n\t\t\texcludes: [\"sap/ui/core/**\"]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 7, \"moduleBundler should have been called 7 times\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap-ui-core.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"ui5loader-autoconfig.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"raw\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t\tsort: true,\n\t\t\t\t\t\tdeclareModules: false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tresolve: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"require\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tdecorateBootstrapModule: true,\n\t\t\t\taddTryCatchRestartWrapper: true,\n\t\t\t\tusePredefineCalls: true\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(1).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap-ui-core-dbg.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"ui5loader-autoconfig.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"raw\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t\tsort: true,\n\t\t\t\t\t\tdeclareModules: false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"require\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: false,\n\t\t\t\tdecorateBootstrapModule: false,\n\t\t\t\taddTryCatchRestartWrapper: false,\n\t\t\t\tusePredefineCalls: false\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(2).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap-ui-core-nojQuery.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"provided\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"jquery-ui-core.js\",\n\t\t\t\t\t\t\t\"jquery-ui-datepicker.js\",\n\t\t\t\t\t\t\t\"jquery-ui-position.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery/*\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jqueryui/*\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"ui5loader-autoconfig.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"raw\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t\tsort: true,\n\t\t\t\t\t\tdeclareModules: false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tresolve: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"require\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tdecorateBootstrapModule: true,\n\t\t\t\taddTryCatchRestartWrapper: true,\n\t\t\t\tusePredefineCalls: true\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(3).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap-ui-core-nojQuery-dbg.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"provided\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"jquery-ui-core.js\",\n\t\t\t\t\t\t\t\"jquery-ui-datepicker.js\",\n\t\t\t\t\t\t\t\"jquery-ui-position.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery/*\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jqueryui/*\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"ui5loader-autoconfig.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"raw\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t\tsort: true,\n\t\t\t\t\t\tdeclareModules: false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmode: \"require\",\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: false,\n\t\t\t\tdecorateBootstrapModule: false,\n\t\t\t\taddTryCatchRestartWrapper: false,\n\t\t\t\tusePredefineCalls: false\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(4).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap/ui/core/library-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"ui5loader-autoconfig.js\",\n\t\t\t\t\t\t\t\"sap/ui/core/Core.js\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"provided\",\n\t\t\t\t\t\tresolve: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/\",\n\t\t\t\t\t\t\t\"sap/ui/core/**/manifest.json\",\n\t\t\t\t\t\t\t\"!sap/ui/core/*-preload.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/designtime/\",\n\t\t\t\t\t\t\t\"!sap/ui/core/**/*.designtime.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/**/*.support.js\",\n\n\t\t\t\t\t\t\t\"!sap/ui/core/cldr/\",\n\t\t\t\t\t\t\t\"*.js\",\n\t\t\t\t\t\t\t\"sap/base/\",\n\t\t\t\t\t\t\t\"sap/ui/base/\",\n\t\t\t\t\t\t\t\"sap/ui/dom/\",\n\t\t\t\t\t\t\t\"sap/ui/events/\",\n\t\t\t\t\t\t\t\"sap/ui/model/\",\n\t\t\t\t\t\t\t\"sap/ui/security/\",\n\t\t\t\t\t\t\t\"sap/ui/util/\",\n\t\t\t\t\t\t\t\"sap/ui/Global.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/crossroads.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/caja-html-sanitizer.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/hasher.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/signals.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jquery-mobile-custom.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jqueryui/jquery-ui-core.js\",\n\t\t\t\t\t\t\t\"sap/ui/thirdparty/jqueryui/jquery-ui-position.js\",\n\t\t\t\t\t\t\t\"!sap-ui-*.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/support/\",\n\t\t\t\t\t\t\t\"!sap/ui/core/plugin/DeclarativeSupport.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/plugin/LessSupport.js\",\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: true,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(5).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap/ui/core/designtime/library-preload.designtime.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/**/*.designtime.js\",\n\t\t\t\t\t\t\t\"sap/ui/core/designtime/\",\n\t\t\t\t\t\t\t\"!sap/ui/core/**/*-preload.designtime.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/designtime/**/*.properties\",\n\t\t\t\t\t\t\t\"!sap/ui/core/designtime/**/*.svg\",\n\t\t\t\t\t\t\t\"!sap/ui/core/designtime/**/*.xml\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true,\n\t\t\t\tskipIfEmpty: true\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\tt.deepEqual(moduleBundlerStub.getCall(6).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"sap/ui/core/library-preload.support.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"sap/ui/core/**/*.support.js\",\n\t\t\t\t\t\t\t\"!sap/ui/core/**/*-preload.support.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: false,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: false,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true,\n\t\t\t\tskipIfEmpty: true\n\t\t\t}\n\t\t},\n\t\tresources: filteredResources\n\t}]);\n\n\tt.is(workspace.byGlob.callCount, 1,\n\t\t\"workspace.byGlob should have been called once\");\n\tt.deepEqual(workspace.byGlob.getCall(0).args, [\"/resources/**/.library\"],\n\t\t\"workspace.byGlob should have been called with expected pattern\");\n\n\tt.is(ReaderCollectionPrioritizedStub.callCount, 1,\n\t\t\"ReaderCollectionPrioritized should have been called once\");\n\tt.true(ReaderCollectionPrioritizedStub.calledWithNew(),\n\t\t\"ReaderCollectionPrioritized should have been called with 'new'\");\n});\n\ntest.serial(\"generateLibraryPreload with excludes\", async (t) => {\n\tconst {\n\t\tgenerateLibraryPreload, moduleBundlerStub, ReaderCollectionPrioritizedStub,\n\t\tworkspace, dependencies, comboByGlob\n\t} = t.context;\n\n\tconst resources = [\n\t\t{getPath: sinon.stub().returns(\"/resources/my/lib/.library\")}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tworkspace.byGlob.resolves([\n\t\t{getPath: sinon.stub().returns(\"/resources/my/lib/.library\")}\n\t]);\n\n\tawait generateLibraryPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Library\",\n\t\t\texcludes: [\n\t\t\t\t\"my/lib/thirdparty/\",\n\t\t\t\t\"!my/lib/thirdparty/NotExcluded.js\"\n\t\t\t]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 3, \"moduleBundler should have been called 3 times\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"my/lib/library-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/lib/\",\n\t\t\t\t\t\t\t\"my/lib/**/manifest.json\",\n\t\t\t\t\t\t\t\"!my/lib/*-preload.js\",\n\t\t\t\t\t\t\t\"!my/lib/designtime/\",\n\t\t\t\t\t\t\t\"!my/lib/**/*.designtime.js\",\n\t\t\t\t\t\t\t\"!my/lib/**/*.support.js\",\n\n\t\t\t\t\t\t\t// via excludes option\n\t\t\t\t\t\t\t\"!my/lib/thirdparty/\",\n\t\t\t\t\t\t\t\"+my/lib/thirdparty/NotExcluded.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: true,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\n\tt.is(workspace.byGlob.callCount, 1,\n\t\t\"workspace.byGlob should have been called once\");\n\tt.deepEqual(workspace.byGlob.getCall(0).args, [\"/resources/**/.library\"],\n\t\t\"workspace.byGlob should have been called with expected pattern\");\n\n\tt.is(ReaderCollectionPrioritizedStub.callCount, 1,\n\t\t\"ReaderCollectionPrioritized should have been called once\");\n\tt.true(ReaderCollectionPrioritizedStub.calledWithNew(),\n\t\t\"ReaderCollectionPrioritized should have been called with 'new'\");\n});\n\n\ntest.serial(\"generateLibraryPreload with invalid excludes\", async (t) => {\n\tconst {\n\t\tgenerateLibraryPreload, moduleBundlerStub,\n\t\tworkspace, dependencies, comboByGlob, log\n\t} = t.context;\n\n\tconst resources = [\n\t\t{getPath: sinon.stub().returns(\"/resources/my/lib/.library\")}\n\t];\n\tcomboByGlob.resolves(resources);\n\n\tworkspace.byGlob.resolves([\n\t\t{getPath: sinon.stub().returns(\"/resources/my/lib/.library\")}\n\t]);\n\n\tawait generateLibraryPreload({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Library\",\n\t\t\texcludes: [\n\t\t\t\t\"!**/foo/\",\n\t\t\t\t\"!my/other/lib/\"\n\t\t\t]\n\t\t}\n\t});\n\n\tt.is(moduleBundlerStub.callCount, 3, \"moduleBundler should have been called 3 times\");\n\tt.deepEqual(moduleBundlerStub.getCall(0).args, [{\n\t\toptions: {\n\t\t\tbundleDefinition: {\n\t\t\t\tname: \"my/lib/library-preload.js\",\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\"my/lib/\",\n\t\t\t\t\t\t\t\"my/lib/**/manifest.json\",\n\t\t\t\t\t\t\t\"!my/lib/*-preload.js\",\n\t\t\t\t\t\t\t\"!my/lib/designtime/\",\n\t\t\t\t\t\t\t\"!my/lib/**/*.designtime.js\",\n\t\t\t\t\t\t\t\"!my/lib/**/*.support.js\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\tmode: \"preload\",\n\t\t\t\t\t\trenderer: true,\n\t\t\t\t\t\tresolve: false,\n\t\t\t\t\t\tresolveConditional: false,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tbundleOptions: {\n\t\t\t\toptimize: true,\n\t\t\t\tusePredefineCalls: true,\n\t\t\t\tignoreMissingModules: true\n\t\t\t}\n\t\t},\n\t\tresources\n\t}]);\n\n\tt.is(log.warn.callCount, 2, \"log.warn should be called twice\");\n\tt.deepEqual(log.warn.getCall(0).args, [\n\t\t\"Configured preload exclude contains invalid re-include: !**/foo/. \" +\n\t\t\"Re-includes must start with the library's namespace my/lib\"\n\t]);\n\tt.deepEqual(log.warn.getCall(1).args, [\n\t\t\"Configured preload exclude contains invalid re-include: !my/other/lib/. \" +\n\t\t\"Re-includes must start with the library's namespace my/lib\"\n\t]);\n\n\tt.is(log.verbose.callCount, 0, \"log.verbose should not be called\");\n\tt.is(log.error.callCount, 0, \"log.error should not be called\");\n});\n",
    "test/lib/tasks/bundlers/generateManifestBundle.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\nconst chai = require(\"chai\");\nchai.use(require(\"chai-fs\"));\nconst generateManifestBundle = require(\"../../../../lib/tasks/bundlers/generateManifestBundle\");\n\ntest.serial(\"generateManifestBundle\", async (t) => {\n\tconst byGlobStub = sinon.stub().resolves([\"some resource\", \"some other resource\"]);\n\tconst writeStub = sinon.stub().resolves();\n\tconst workspace = {\n\t\tbyGlob: byGlobStub,\n\t\twrite: writeStub\n\t};\n\n\tconst manifestBundlerStub = sinon.stub().resolves([\"some new resource\", \"some other new resource\"]);\n\tmock(\"../../../../lib/processors/bundlers/manifestBundler\", manifestBundlerStub);\n\tconst generateManifestBundle = mock.reRequire(\"../../../../lib/tasks/bundlers/generateManifestBundle\");\n\n\n\tawait generateManifestBundle({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tprojectName: \"some project\",\n\t\t\tnamespace: \"some/project\"\n\t\t}\n\t});\n\tt.deepEqual(byGlobStub.callCount, 1, \"workspace.byGlob got called once\");\n\tt.deepEqual(byGlobStub.getCall(0).args[0], \"/resources/some/project/**/{manifest.json,*.properties}\",\n\t\t\"workspace.byGlob got called with the correct arguments\");\n\n\tt.deepEqual(manifestBundlerStub.callCount, 1, \"manifestBundler got called once\");\n\tt.deepEqual(manifestBundlerStub.getCall(0).args[0], {\n\t\tresources: [\"some resource\", \"some other resource\"],\n\t\toptions: {\n\t\t\tdescriptor: \"manifest.json\",\n\t\t\tpropertiesExtension: \".properties\",\n\t\t\tbundleName: \"manifest-bundle.zip\",\n\t\t\tnamespace: \"some/project\"\n\t\t}\n\t}, \"manifestBundler got called with the correct arguments\");\n\n\tt.deepEqual(writeStub.callCount, 2, \"workspace.write got called twice\");\n\tt.deepEqual(writeStub.getCall(0).args[0], \"some new resource\",\n\t\t\"workspace.write got called with the correct arguments\");\n\tt.deepEqual(writeStub.getCall(1).args[0], \"some other new resource\",\n\t\t\"workspace.write got called with the correct arguments\");\n\n\tmock.stop(\"../../../../lib/processors/bundlers/manifestBundler\");\n});\n\ntest.serial(\"generateManifestBundle with no resources\", async (t) => {\n\tconst byGlobStub = sinon.stub().resolves([]);\n\tconst workspace = {\n\t\tbyGlob: byGlobStub\n\t};\n\n\tconst manifestBundlerStub = sinon.stub().resolves([]);\n\tmock(\"../../../../lib/processors/bundlers/manifestBundler\", manifestBundlerStub);\n\tconst generateManifestBundle = mock.reRequire(\"../../../../lib/tasks/bundlers/generateManifestBundle\");\n\n\n\tawait generateManifestBundle({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tprojectName: \"some project\",\n\t\t\tnamespace: \"some/project\"\n\t\t}\n\t});\n\tt.deepEqual(byGlobStub.callCount, 1, \"workspace.byGlob got called once\");\n\tt.deepEqual(byGlobStub.getCall(0).args[0], \"/resources/some/project/**/{manifest.json,*.properties}\",\n\t\t\"workspace.byGlob got called with the correct arguments\");\n\n\tt.deepEqual(manifestBundlerStub.callCount, 0, \"manifestBundler not called\");\n\n\tmock.stop(\"../../../../lib/processors/bundlers/manifestBundler\");\n});\n\ntest(\"generateManifestBundle with missing parameters\", async (t) => {\n\tconst error = await t.throwsAsync(generateManifestBundle({}));\n\tt.deepEqual(error.message, \"[generateManifestBundle]: One or more mandatory options not provided\",\n\t\t\"Rejected with correct error message\");\n});\n",
    "test/lib/tasks/escapeNonAsciiCharacters.js": "const test = require(\"ava\");\n\nconst escapeNonAsciiCharacters = require(\"../../../lib/tasks/escapeNonAsciiCharacters\");\nconst ui5Fs = require(\"@ui5/fs\");\nconst resourceFactory = ui5Fs.resourceFactory;\nconst DuplexCollection = ui5Fs.DuplexCollection;\n\ntest(\"integration: escape non ascii characters (utf8, default)\", (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst workspace = new DuplexCollection({reader, writer});\n\n\tconst content = `welcome=Willkommen {0}. Bitte geben Sie einen neuen Kontakt ein:\nlastname=Nachname:\nfirstname=Vorname:\nstreet=Straße:♥\nzip=PLZ:\ncity=Ort:`;\n\n\tconst expected = `welcome=Willkommen {0}. Bitte geben Sie einen neuen Kontakt ein:\nlastname=Nachname:\nfirstname=Vorname:\nstreet=Stra\\\\u00dfe:\\\\u2665\nzip=PLZ:\ncity=Ort:`;\n\n\tconst resource = resourceFactory.createResource({\n\t\tpath: \"/i18n.properties\",\n\t\tstring: content\n\t});\n\n\treturn workspace.write(resource).then(() => {\n\t\treturn escapeNonAsciiCharacters({\n\t\t\tworkspace,\n\t\t\toptions: {\n\t\t\t\tencoding: \"UTF-8\",\n\t\t\t\tpattern: \"/**/*.properties\"\n\t\t\t}\n\t\t}).then(() => {\n\t\t\treturn writer.byPath(\"/i18n.properties\").then((resource) => {\n\t\t\t\tif (!resource) {\n\t\t\t\t\tt.fail(\"Could not find /i18n.properties in target\");\n\t\t\t\t} else {\n\t\t\t\t\treturn resource.getString();\n\t\t\t\t}\n\t\t\t});\n\t\t}).then((result) => {\n\t\t\treturn t.deepEqual(result, expected);\n\t\t});\n\t});\n});\n\ntest(\"integration: escape non ascii characters source encoding being (ISO-8859-1)\", (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst workspace = new DuplexCollection({reader, writer});\n\n\t// create buffer in ISO encoding\n\tconst content = Buffer.from(`welcome=Willkommen {0}. Bitte geben Sie einen neuen Kontakt ein:\nlastname=Nachname:\nfirstname=Vorname:\nstreet=Straße:\nzip=PLZ:\ncity=Ort:`, \"latin1\");\n\n\tconst expected = `welcome=Willkommen {0}. Bitte geben Sie einen neuen Kontakt ein:\nlastname=Nachname:\nfirstname=Vorname:\nstreet=Stra\\\\u00dfe:\nzip=PLZ:\ncity=Ort:`;\n\n\tconst resource = resourceFactory.createResource({\n\t\tpath: \"/i18n.properties\",\n\t\tbuffer: content\n\t});\n\n\treturn workspace.write(resource).then(() => {\n\t\treturn escapeNonAsciiCharacters({\n\t\t\tworkspace,\n\t\t\toptions: {\n\t\t\t\tencoding: \"ISO-8859-1\",\n\t\t\t\tpattern: \"/**/*.properties\"\n\t\t\t}\n\t\t}).then(() => {\n\t\t\treturn writer.byPath(\"/i18n.properties\").then((resource) => {\n\t\t\t\tif (!resource) {\n\t\t\t\t\tt.fail(\"Could not find /i18n.properties in target\");\n\t\t\t\t} else {\n\t\t\t\t\treturn resource.getString();\n\t\t\t\t}\n\t\t\t});\n\t\t}).then((result) => {\n\t\t\treturn t.deepEqual(result, expected);\n\t\t});\n\t});\n});\n\ntest(\"integration: escape non ascii characters source encoding being empty\", async (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst workspace = new DuplexCollection({reader, writer});\n\n\tconst error = await t.throwsAsync(escapeNonAsciiCharacters({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tencoding: \"\",\n\t\t\tpattern: \"/**/*.properties\"\n\t\t}\n\t}));\n\treturn t.is(error.message, \"[escapeNonAsciiCharacters] Mandatory option 'encoding' not provided\");\n});\n\ntest(\"integration: escape non ascii characters source encoding being UTF-16\", async (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst workspace = new DuplexCollection({reader, writer});\n\n\tconst error = await t.throwsAsync(escapeNonAsciiCharacters({\n\t\tworkspace,\n\t\toptions: {\n\t\t\tencoding: \"utf16le\",\n\t\t\tpattern: \"/**/*.properties\"\n\t\t}\n\t}));\n\treturn t.is(error.message, `Encoding \"utf16le\" is not supported. Only UTF-8, ISO-8859-1 are allowed values`);\n});\n",
    "test/lib/tasks/generateLibraryManifest.js": "const test = require(\"ava\");\n\nconst generateLibraryManifest = require(\"../../../lib/tasks/generateLibraryManifest\");\nconst path = require(\"path\");\nconst ui5Fs = require(\"@ui5/fs\");\nconst resourceFactory = ui5Fs.resourceFactory;\n\nfunction createWorkspace() {\n\treturn resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\",\n\t\tproject: {\n\t\t\tmetadata: {\n\t\t\t\tname: \"test.lib\"\n\t\t\t},\n\t\t\tversion: \"2.0.0\",\n\t\t\tdependencies: [\n\t\t\t\t{\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t\t},\n\t\t\t\t\tversion: \"1.0.0\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n}\n\nfunction createDependencies() {\n\treturn resourceFactory.createAdapter({\n\t\tfsBasePath: path.join(__dirname, \"..\", \"..\", \"fixtures\", \"sap.ui.core-evo\", \"main\", \"src\"),\n\t\tvirBasePath: \"/resources\"\n\t});\n}\n\nasync function assertCreatedManifest(t, oExpectedManifest) {\n\tconst {workspace, dependencies, resources} = t.context;\n\n\tawait Promise.all(resources.map((resource) => workspace.write(resource)));\n\n\tawait generateLibraryManifest({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\"\n\t\t}\n\t});\n\n\tconst resource = await workspace.byPath(\"/resources/test/lib/manifest.json\");\n\tif (!resource) {\n\t\tt.fail(\"Could not find /resources/test/lib/manifest.json in target\");\n\t\treturn;\n\t}\n\n\tconst buffer = await resource.getBuffer();\n\tt.deepEqual(JSON.parse(buffer), oExpectedManifest, \"Correct content\");\n}\n\ntest(\"integration: Library without i18n bundle file\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tawait assertCreatedManifest(t, {\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: \"2.0.0\",\n\t\t\t},\n\t\t\tdescription: \"Test Lib\",\n\t\t\tembeds: [],\n\t\t\tid: \"test.lib\",\n\t\t\toffline: true,\n\t\t\tresources: \"resources.json\",\n\t\t\ttitle: \"Test Lib\",\n\t\t\ttype: \"library\",\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\tsupportedThemes: [],\n\t\t\ttechnology: \"UI5\",\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\tdependencies: {\n\t\t\t\tlibs: {},\n\t\t\t\tminUI5Version: \"1.0\",\n\t\t\t},\n\t\t\tlibrary: {\n\t\t\t\ti18n: false,\n\t\t\t}\n\t\t},\n\t});\n});\n\ntest(\"integration: Library with i18n bundle file (messagebundle.properties)\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/messagebundle.properties\",\n\t\tstring: \"KEY=VALUE\",\n\t\tproject: t.context.workspace._project\n\t}));\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tawait assertCreatedManifest(t, {\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: \"2.0.0\",\n\t\t\t},\n\t\t\tdescription: \"Test Lib\",\n\t\t\tembeds: [],\n\t\t\tid: \"test.lib\",\n\t\t\toffline: true,\n\t\t\tresources: \"resources.json\",\n\t\t\ttitle: \"Test Lib\",\n\t\t\ttype: \"library\",\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\tsupportedThemes: [],\n\t\t\ttechnology: \"UI5\",\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\tdependencies: {\n\t\t\t\tlibs: {},\n\t\t\t\tminUI5Version: \"1.0\",\n\t\t\t},\n\t\t\tlibrary: {\n\t\t\t\ti18n: {\n\t\t\t\t\tbundleUrl: \"messagebundle.properties\",\n\t\t\t\t\tsupportedLocales: [\"\"]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n});\n\ntest(\"integration: Library with i18n=true declared in .library\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t\t<appData>\n\t\t\t\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t\t\t\t<sap.ui5>\n\t\t\t\t\t\t\t<library>\n\t\t\t\t\t\t\t\t<i18n>true</i18n>\n\t\t\t\t\t\t\t</library>\n\t\t\t\t\t\t</sap.ui5>\n\t\t\t\t\t</manifest>\n\t\t\t\t</appData>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/messagebundle.properties\",\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tawait assertCreatedManifest(t, {\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: \"2.0.0\",\n\t\t\t},\n\t\t\tdescription: \"Test Lib\",\n\t\t\tembeds: [],\n\t\t\tid: \"test.lib\",\n\t\t\toffline: true,\n\t\t\tresources: \"resources.json\",\n\t\t\ttitle: \"Test Lib\",\n\t\t\ttype: \"library\",\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\tsupportedThemes: [],\n\t\t\ttechnology: \"UI5\",\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\tdependencies: {\n\t\t\t\tlibs: {},\n\t\t\t\tminUI5Version: \"1.0\",\n\t\t\t},\n\t\t\tlibrary: {\n\t\t\t\ti18n: {\n\t\t\t\t\tbundleUrl: \"messagebundle.properties\",\n\t\t\t\t\tsupportedLocales: [\"\"]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n});\n\ntest(\"integration: Library with i18n=false declared in .library\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t\t<appData>\n\t\t\t\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t\t\t\t<sap.ui5>\n\t\t\t\t\t\t\t<library>\n\t\t\t\t\t\t\t\t<i18n>false</i18n>\n\t\t\t\t\t\t\t</library>\n\t\t\t\t\t\t</sap.ui5>\n\t\t\t\t\t</manifest>\n\t\t\t\t</appData>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tawait assertCreatedManifest(t, {\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: \"2.0.0\",\n\t\t\t},\n\t\t\tdescription: \"Test Lib\",\n\t\t\tembeds: [],\n\t\t\tid: \"test.lib\",\n\t\t\toffline: true,\n\t\t\tresources: \"resources.json\",\n\t\t\ttitle: \"Test Lib\",\n\t\t\ttype: \"library\",\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\tsupportedThemes: [],\n\t\t\ttechnology: \"UI5\",\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\tdependencies: {\n\t\t\t\tlibs: {},\n\t\t\t\tminUI5Version: \"1.0\",\n\t\t\t},\n\t\t\tlibrary: {\n\t\t\t\ti18n: false\n\t\t\t}\n\t\t},\n\t});\n});\n\ntest(\"integration: Library with i18n=foo.properties declared in .library\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t\t<appData>\n\t\t\t\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t\t\t\t<sap.ui5>\n\t\t\t\t\t\t\t<library>\n\t\t\t\t\t\t\t\t<i18n>foo.properties</i18n>\n\t\t\t\t\t\t\t</library>\n\t\t\t\t\t\t</sap.ui5>\n\t\t\t\t\t</manifest>\n\t\t\t\t</appData>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/foo.properties\",\n\t\tproject: t.context.workspace._project\n\t}));\n\tawait assertCreatedManifest(t, {\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: \"2.0.0\",\n\t\t\t},\n\t\t\tdescription: \"Test Lib\",\n\t\t\tembeds: [],\n\t\t\tid: \"test.lib\",\n\t\t\toffline: true,\n\t\t\tresources: \"resources.json\",\n\t\t\ttitle: \"Test Lib\",\n\t\t\ttype: \"library\",\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\tsupportedThemes: [],\n\t\t\ttechnology: \"UI5\",\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\tdependencies: {\n\t\t\t\tlibs: {},\n\t\t\t\tminUI5Version: \"1.0\",\n\t\t\t},\n\t\t\tlibrary: {\n\t\t\t\ti18n: {\n\t\t\t\t\tbundleUrl: \"foo.properties\",\n\t\t\t\t\tsupportedLocales: [\"\"]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n});\n\ntest(\"integration: Library with css=true declared in .library\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t\t<appData>\n\t\t\t\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t\t\t\t<sap.ui5>\n\t\t\t\t\t\t\t<library>\n\t\t\t\t\t\t\t\t<css>true</css>\n\t\t\t\t\t\t\t</library>\n\t\t\t\t\t\t</sap.ui5>\n\t\t\t\t\t</manifest>\n\t\t\t\t</appData>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tawait assertCreatedManifest(t, {\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: \"2.0.0\",\n\t\t\t},\n\t\t\tdescription: \"Test Lib\",\n\t\t\tembeds: [],\n\t\t\tid: \"test.lib\",\n\t\t\toffline: true,\n\t\t\tresources: \"resources.json\",\n\t\t\ttitle: \"Test Lib\",\n\t\t\ttype: \"library\",\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\tsupportedThemes: [],\n\t\t\ttechnology: \"UI5\",\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\tdependencies: {\n\t\t\t\tlibs: {},\n\t\t\t\tminUI5Version: \"1.0\",\n\t\t\t},\n\t\t\tlibrary: {\n\t\t\t\ti18n: false\n\t\t\t}\n\t\t},\n\t});\n});\n\ntest(\"integration: Library with css=false declared in .library\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t\t<appData>\n\t\t\t\t\t<manifest xmlns=\"http://www.sap.com/ui5/buildext/manifest\">\n\t\t\t\t\t\t<sap.ui5>\n\t\t\t\t\t\t\t<library>\n\t\t\t\t\t\t\t\t<css>false</css>\n\t\t\t\t\t\t\t</library>\n\t\t\t\t\t\t</sap.ui5>\n\t\t\t\t\t</manifest>\n\t\t\t\t</appData>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tawait assertCreatedManifest(t, {\n\t\t\"_version\": \"1.21.0\",\n\t\t\"sap.app\": {\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: \"2.0.0\",\n\t\t\t},\n\t\t\tdescription: \"Test Lib\",\n\t\t\tembeds: [],\n\t\t\tid: \"test.lib\",\n\t\t\toffline: true,\n\t\t\tresources: \"resources.json\",\n\t\t\ttitle: \"Test Lib\",\n\t\t\ttype: \"library\",\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\tsupportedThemes: [],\n\t\t\ttechnology: \"UI5\",\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\tdependencies: {\n\t\t\t\tlibs: {},\n\t\t\t\tminUI5Version: \"1.0\",\n\t\t\t},\n\t\t\tlibrary: {\n\t\t\t\ti18n: false,\n\t\t\t\tcss: false\n\t\t\t}\n\t\t},\n\t});\n});\n",
    "test/lib/tasks/generateResourcesJson.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\n\n\nconst ui5Fs = require(\"@ui5/fs\");\nconst resourceFactory = ui5Fs.resourceFactory;\n\nfunction createWorkspace() {\n\treturn resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\",\n\t\tproject: {\n\t\t\tmetadata: {\n\t\t\t\tname: \"test.lib\"\n\t\t\t},\n\t\t\tversion: \"2.0.0\",\n\t\t\tdependencies: [\n\t\t\t\t{\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t\t},\n\t\t\t\t\tversion: \"1.0.0\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n}\n\ntest.beforeEach((t) => {\n\tt.context.resourceListCreatorStub = sinon.stub();\n\tt.context.resourceListCreatorStub.returns(Promise.resolve([]));\n\tmock(\"../../../lib/processors/resourceListCreator\", t.context.resourceListCreatorStub);\n\n\tt.context.generateResourcesJson = mock.reRequire(\"../../../lib/tasks/generateResourcesJson\");\n});\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n\tmock.stopAll();\n});\n\ntest.serial(\"empty resources (sap.ui.core)\", async (t) => {\n\tconst {generateResourcesJson, resourceListCreatorStub} = t.context;\n\n\tconst result = await generateResourcesJson({\n\t\tworkspace: createWorkspace(),\n\t\tdependencies: undefined,\n\t\toptions: {\n\t\t\tprojectName: \"sap.ui.core\"\n\t\t}\n\t});\n\tt.deepEqual(result, undefined, \"no resources returned\");\n\tt.is(resourceListCreatorStub.callCount, 1);\n\tconst expectedOptions = {\n\t\texternalResources: {\n\t\t\t\"sap/ui/core\": [\n\t\t\t\t\"*\",\n\t\t\t\t\"sap/base/\",\n\t\t\t\t\"sap/ui/\"\n\t\t\t]\n\t\t},\n\t\tmergedResourcesFilters: [\n\t\t\t\"jquery-sap*.js\",\n\t\t\t\"sap-ui-core*.js\",\n\t\t\t\"**/Component-preload.js\",\n\t\t\t\"**/library-preload.js\",\n\t\t\t\"**/library-preload-dbg.js\",\n\t\t\t\"**/library-preload.json\",\n\t\t\t\"**/library-all.js\",\n\t\t\t\"**/library-all-dbg.js\",\n\t\t\t\"**/designtime/library-preload.designtime.js\",\n\t\t\t\"**/library-preload.support.js\"\n\t\t]\n\t};\n\tt.deepEqual(resourceListCreatorStub.getCall(0).args[0].options, expectedOptions, \"options match\");\n});\n\ntest.serial(\"empty resources (my.lib)\", async (t) => {\n\tconst generateResourcesJson = require(\"../../../lib/tasks/generateResourcesJson\");\n\n\tconst result = await generateResourcesJson({\n\t\tworkspace: createWorkspace(),\n\t\tdependencies: undefined,\n\t\toptions: {\n\t\t\tprojectName: \"my.lib\"\n\t\t}\n\t});\n\tt.deepEqual(result, undefined, \"no resources returned\");\n\tt.is(t.context.resourceListCreatorStub.callCount, 1);\n\tconst expectedOptions = {};\n\tt.deepEqual(t.context.resourceListCreatorStub.getCall(0).args[0].options, expectedOptions, \"options match\");\n});\n\ntest.serial(\"empty resources (my.lib with dependencies)\", async (t) => {\n\tconst generateResourcesJson = require(\"../../../lib/tasks/generateResourcesJson\");\n\n\tconst dependencyResources = [{\"dependency\": \"resources\"}];\n\tconst dependencies = {\n\t\tbyGlob: sinon.stub().resolves(dependencyResources)\n\t};\n\n\tconst result = await generateResourcesJson({\n\t\tworkspace: createWorkspace(),\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"my.lib\"\n\t\t}\n\t});\n\tt.deepEqual(result, undefined, \"no resources returned\");\n\tt.is(t.context.resourceListCreatorStub.callCount, 1);\n\tconst expectedOptions = {};\n\tt.deepEqual(t.context.resourceListCreatorStub.getCall(0).args[0].options, expectedOptions, \"options match\");\n\tt.is(t.context.resourceListCreatorStub.getCall(0).args[0].dependencyResources, dependencyResources,\n\t\t\"dependencyResources reference should be passed to resourceListCreator\");\n});\n",
    "test/lib/tasks/generateVersionInfo.js": "const test = require(\"ava\");\n\nlet generateVersionInfo = require(\"../../../lib/tasks/generateVersionInfo\");\nconst path = require(\"path\");\nconst ui5Fs = require(\"@ui5/fs\");\nconst resourceFactory = ui5Fs.resourceFactory;\nconst sinon = require(\"sinon\");\nconst mock = require(\"mock-require\");\nconst logger = require(\"@ui5/logger\");\n\nfunction createWorkspace() {\n\treturn resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\",\n\t\tproject: {\n\t\t\tmetadata: {\n\t\t\t\tname: \"test.lib\"\n\t\t\t},\n\t\t\tversion: \"2.0.0\",\n\t\t\tdependencies: [\n\t\t\t\t{\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tname: \"sap.ui.core\"\n\t\t\t\t\t},\n\t\t\t\t\tversion: \"1.0.0\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n}\n\nfunction createDependencies(oOptions = {\n\tvirBasePath: \"/resources\",\n\tfsBasePath: path.join(__dirname, \"..\", \"..\", \"fixtures\", \"sap.ui.core-evo\", \"main\", \"src\")\n}) {\n\toOptions = Object.assign(oOptions, {\n\t\tproject: {\n\t\t\tmetadata: {\n\t\t\t\tname: \"test.lib3\"\n\t\t\t},\n\t\t\tversion: \"3.0.0\"}\n\t});\n\treturn resourceFactory.createAdapter(oOptions);\n}\n\nasync function createOptions(t, options) {\n\tconst {workspace, dependencies, resources} = t.context;\n\n\tawait Promise.all(resources.map((resource) => workspace.write(resource)));\n\tconst oOptions = {\n\t\tworkspace,\n\t\tdependencies\n\t};\n\toOptions.options = options || {\n\t\tprojectName: \"Test Lib\",\n\t\tpattern: \"/**/*.js\",\n\t\trootProject: {\n\t\t\tmetadata: {\n\t\t\t\tname: \"myname\"\n\t\t\t},\n\t\t\tversion: \"1.33.7\"\n\t\t}\n\t};\n\treturn oOptions;\n}\n\nasync function assertCreatedVersionInfo(t, oExpectedVersionInfo, oOptions) {\n\tawait generateVersionInfo(oOptions);\n\n\tconst resource = await oOptions.workspace.byPath(\"/resources/sap-ui-version.json\");\n\tif (!resource) {\n\t\tt.fail(\"Could not find /resources/sap-ui-version.json in target\");\n\t\treturn;\n\t}\n\n\tconst buffer = await resource.getBuffer();\n\tconst currentVersionInfo = JSON.parse(buffer);\n\n\tt.is(currentVersionInfo.buildTimestamp.length, 12, \"Timestamp should have length of 12 (yyyyMMddHHmm)\");\n\n\tdelete currentVersionInfo.buildTimestamp; // removing to allow deep comparison\n\tcurrentVersionInfo.libraries.forEach((lib) => {\n\t\tt.is(lib.buildTimestamp.length, 12, \"Timestamp should have length of 12 (yyyyMMddHHmm)\");\n\t\tdelete lib.buildTimestamp; // removing to allow deep comparison\n\t});\n\n\tcurrentVersionInfo.libraries.sort((libraryA, libraryB) => {\n\t\treturn libraryA.name.localeCompare(libraryB.name);\n\t});\n\n\tt.deepEqual(currentVersionInfo, oExpectedVersionInfo, \"Correct content\");\n}\n\ntest.beforeEach((t) => {\n\tt.context.verboseLogStub = sinon.stub();\n\tt.context.errorLogStub = sinon.stub();\n\tt.context.warnLogStub = sinon.stub();\n\tt.context.infoLogStub = sinon.stub();\n\tsinon.stub(logger, \"getLogger\").returns({\n\t\tverbose: t.context.verboseLogStub,\n\t\terror: t.context.errorLogStub,\n\t\twarn: t.context.warnLogStub,\n\t\tinfo: t.context.infoLogStub,\n\t\tisLevelEnabled: () => true\n\t});\n\tmock.reRequire(\"../../../lib/processors/versionInfoGenerator\");\n\tgenerateVersionInfo = mock.reRequire(\"../../../lib/tasks/generateVersionInfo\");\n});\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.serial(\"integration: Library without i18n bundle file\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tconst oOptions = await createOptions(t);\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"test.lib3\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"version\": \"3.0.0\"\n\t\t}],\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t}, oOptions);\n\n\tt.is(t.context.verboseLogStub.callCount, 1);\n\tt.is(t.context.verboseLogStub.getCall(0).args[0],\n\t\t\"Cannot add meta information for library 'test.lib3'. The manifest.json file cannot be found\");\n});\n\ntest.serial(\"integration: Library without i18n bundle file failure\", async (t) => {\n\tt.context.workspace = createWorkspace();\n\tt.context.dependencies = createDependencies();\n\n\tt.context.resources = [];\n\tt.context.resources.push(resourceFactory.createResource({\n\t\tpath: \"/resources/test/lib/.library\",\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\n\t\t\t\t<name>test.lib</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Test Lib</documentation>\n\n\t\t\t</library>\n\t\t`,\n\t\tproject: t.context.workspace._project\n\t}));\n\n\tconst options = {\n\t\tprojectName: \"Test Lib\",\n\t\tpattern: \"/**/*.js\",\n\t\trootProject: {\n\t\t\tmetadata: {\n\t\t\t\tname: \"myname\"\n\t\t\t}\n\t\t}\n\t};\n\n\n\tconst oOptions = await createOptions(t, options);\n\tawait generateVersionInfo(oOptions).catch((error) => {\n\t\tt.is(error.message, \"[versionInfoGenerator]: Missing options parameters\");\n\t});\n});\n\n/**\n *\n * @param {string[]} names e.g. [\"lib\", \"a\"]\n * @returns {{metadata: {name, namespace}}}\n */\nconst createProjectMetadata = (names) => {\n\treturn {\n\t\tmetadata: {\n\t\t\tname: names.join(\".\"),\n\t\t\tnamespace: names.join(\"/\")\n\t\t}\n\t};\n};\n\n/**\n *\n * @param {module:@ui5/fs.DuplexCollection} dependencies\n * @param {module:@ui5/fs.resourceFactory} resourceFactory\n * @param {string[]} names e.g. [\"lib\", \"a\"]\n * @param {object[]} deps\n * @param {string[]} [embeds]\n * @param {string} [embeddedBy]\n * @returns {Promise<void>}\n */\nconst createManifestResource = async (dependencies, resourceFactory, names, deps, embeds, embeddedBy) => {\n\tconst content = {\n\t\t\"sap.app\": {\n\t\t\t\"id\": names.join(\".\"),\n\t\t\t\"embeds\": []\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"minUI5Version\": \"1.84\",\n\t\t\t\t\"libs\": {}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst libs = {};\n\tdeps.forEach((dep) => {\n\t\tlibs[dep.name] = {\n\t\t\t\"minVersion\": \"1.84.0\"\n\t\t};\n\t\tif (dep.lazy) {\n\t\t\tlibs[dep.name].lazy = true;\n\t\t}\n\t});\n\tcontent[\"sap.ui5\"][\"dependencies\"][\"libs\"] = libs;\n\tif (embeds !== undefined) {\n\t\tcontent[\"sap.app\"][\"embeds\"] = embeds;\n\t}\n\tif (embeddedBy !== undefined) {\n\t\tcontent[\"sap.app\"][\"embeddedBy\"] = embeddedBy;\n\t}\n\tawait dependencies.write(resourceFactory.createResource({\n\t\tpath: `/resources/${names.join(\"/\")}/manifest.json`,\n\t\tstring: JSON.stringify(content, null, 2),\n\t\tproject: createProjectMetadata(names)\n\t}));\n};\n\n/**\n * @param {module:@ui5/fs.DuplexCollection} dependencies\n * @param {module:@ui5/fs.resourceFactory} resourceFactory\n * @param {string[]} names e.g. [\"lib\", \"a\"]\n * @returns {Promise<void>}\n */\nasync function createDotLibrary(dependencies, resourceFactory, names) {\n\tawait dependencies.write(resourceFactory.createResource({\n\t\tpath: `/resources/${names.join(\"/\")}/.library`,\n\t\tstring: `\n\t\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t\t<library xmlns=\"http://www.sap.com/sap.ui.library.xsd\" >\n\t\t\t\t<name>${names.join(\".\")}</name>\n\t\t\t\t<vendor>SAP SE</vendor>\n\t\t\t\t<copyright></copyright>\n\t\t\t\t<version>2.0.0</version>\n\n\t\t\t\t<documentation>Library ${names.slice(1).join(\".\").toUpperCase()}</documentation>\n\t\t\t</library>\n\t\t`,\n\t\tproject: createProjectMetadata(names)\n\t}));\n}\n\n/**\n *\n * @param {module:@ui5/fs.DuplexCollection} dependencies\n * @param {module:@ui5/fs.resourceFactory} resourceFactory\n * @param {string[]} names e.g. [\"lib\", \"a\"]\n * @param {object[]} deps\n * @param {string[]} [embeds]\n */\nconst createResources = async (dependencies, resourceFactory, names, deps, embeds) => {\n\tawait createDotLibrary(dependencies, resourceFactory, names);\n\tawait createManifestResource(dependencies, resourceFactory, names, deps, embeds);\n};\n\ntest.serial(\"integration: sibling eager to lazy\", async (t) => {\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// input\n\t// lib.a => lib.b, lib.c\n\t// lib.b => lib.c (true)\n\t// lib.c =>\n\n\t// expected outcome\n\t// lib.a => lib.b, lib.c\n\t// lib.b => lib.c (true)\n\t// lib.c =>\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [{name: \"lib.b\"}, {name: \"lib.c\"}]);\n\n\t// lib.b\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"b\"], [{name: \"lib.c\", lazy: true}]);\n\n\t// lib.c\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"c\"], []);\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.b\": {},\n\t\t\t\t\t\t\"lib.c\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.b\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.c\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.c\",\n\t\t\t\"scmRevision\": \"\"\n\t\t}],\n\t}, oOptions);\n});\n\ntest.serial(\"integration: sibling lazy to eager\", async (t) => {\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// input\n\t// lib.a => lib.b, lib.c (true)\n\t// lib.b => lib.c\n\t// lib.c =>\n\n\t// expected outcome\n\t// lib.a => lib.b, lib.c\n\t// lib.b => lib.c\n\t// lib.c =>\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"],\n\t\t[{name: \"lib.b\"}, {name: \"lib.c\", lazy: true}]);\n\n\t// lib.b\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"b\"], [{name: \"lib.c\"}]);\n\n\t// lib.c\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"c\"], []);\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.b\": {},\n\t\t\t\t\t\t\"lib.c\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.b\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.c\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.c\",\n\t\t\t\"scmRevision\": \"\"\n\t\t}],\n\t}, oOptions);\n});\n\ntest.serial(\"integration: children eager to lazy\", async (t) => {\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// input\n\t// lib.a => lib.b\n\t// lib.b => lib.c (true)\n\t// lib.c =>\n\n\t// expected outcome\n\t// lib.a => lib.b, lib.c (true)\n\t// lib.b => lib.c (true)\n\t// lib.c =>\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"],\n\t\t[{name: \"lib.b\"}]);\n\n\t// lib.b\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"b\"],\n\t\t[{name: \"lib.c\", lazy: true}]);\n\n\t// lib.c\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"c\"], []);\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.b\": {},\n\t\t\t\t\t\t\"lib.c\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.b\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.c\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.c\",\n\t\t\t\"scmRevision\": \"\"\n\t\t}],\n\t}, oOptions);\n});\n\ntest.serial(\"integration: children lazy to eager\", async (t) => {\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// input\n\t// lib.a => lib.b (true)\n\t// lib.b => lib.c\n\t// lib.c =>\n\n\t// expected outcome\n\t// lib.a => lib.b (true), lib.c (true)\n\t// lib.b => lib.c\n\t// lib.c =>\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"],\n\t\t[{name: \"lib.b\", lazy: true}]);\n\n\t// lib.b\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"b\"],\n\t\t[{name: \"lib.c\"}]);\n\n\t// lib.c\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"c\"], []);\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.b\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"lib.c\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.b\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.c\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.c\",\n\t\t\t\"scmRevision\": \"\"\n\t\t}],\n\t}, oOptions);\n});\n\ntest.serial(\"integration: Library with dependencies and subcomponent complex scenario\", async (t) => {\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// input\n\t// lib.a => lib.b, lib.c\n\t// lib.b => lib.c (true)\n\t// lib.c => lib.d, lib.e (true)\n\t// lib.d => lib.e\n\t// lib.e =>\n\t// lib.a.sub.fold => lib.c\n\n\t// expected outcome\n\t// lib.a => lib.b, lib.c, lib.d, lib.e\n\t// lib.b => lib.c (true), lib.d (true), lib.e (true)\n\t// lib.c => lib.d, lib.e\n\t// lib.d => lib.e\n\t// lib.e =>\n\t// lib.a.sub.fold => lib.c, lib.d, lib.e\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tconst embeds = [\"sub/fold\"];\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [{name: \"lib.b\"}, {name: \"lib.c\"}], embeds);\n\t// sub\n\tawait createManifestResource(dependencies, resourceFactory, [\"lib\", \"a\", \"sub\", \"fold\"], [{name: \"lib.c\"}]);\n\n\t// lib.b\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"b\"], [{name: \"lib.c\", lazy: true}]);\n\n\t// lib.c\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"c\"], [{name: \"lib.d\"}, {name: \"lib.e\", lazy: true}]);\n\n\t// lib.d\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"d\"], [{name: \"lib.e\"}]);\n\n\t// lib.e\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"e\"], []);\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.b\": {},\n\t\t\t\t\t\t\"lib.c\": {},\n\t\t\t\t\t\t\"lib.d\": {},\n\t\t\t\t\t\t\"lib.e\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.b\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.c\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"lib.d\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"lib.e\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.c\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.d\": {},\n\t\t\t\t\t\t\"lib.e\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.d\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.e\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.e\",\n\t\t\t\"scmRevision\": \"\",\n\t\t}],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub.fold\": {\n\t\t\t\t\"hasOwnPreload\": true,\n\t\t\t\t\"library\": \"lib.a\",\n\t\t\t\t\"manifestHints\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\t\"lib.c\": {},\n\t\t\t\t\t\t\t\"lib.d\": {},\n\t\t\t\t\t\t\t\"lib.e\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t}, oOptions);\n});\n\ntest.serial(\"integration: Library with dependencies and subcomponent bigger scenario\", async (t) => {\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// input\n\t// lib.a => lib.b, lib.c\n\t// lib.b => lib.c (true)\n\t// lib.c => lib.d, lib.e (true)\n\t// lib.d => lib.e\n\t// lib.e =>\n\t// lib.a.sub.fold => lib.c\n\n\t// expected outcome\n\t// lib.a => lib.b, lib.c, lib.d, lib.e\n\t// lib.b => lib.c (true), lib.d (true), lib.e (true)\n\t// lib.c => lib.d, lib.e\n\t// lib.d => lib.e\n\t// lib.e =>\n\t// lib.a.sub.fold => lib.c, lib.d, lib.e\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tconst embeds = [\"sub/fold\"];\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [{name: \"lib.b\"}, {name: \"lib.c\"}], embeds);\n\t// sub\n\tawait createManifestResource(dependencies, resourceFactory, [\"lib\", \"a\", \"sub\", \"fold\"], [{name: \"lib.c\"}]);\n\n\t// lib.b\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"b\"], [{name: \"lib.c\", lazy: true}]);\n\n\t// lib.c\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"c\"], [{name: \"lib.d\"}, {name: \"lib.e\", lazy: true}]);\n\n\t// lib.d\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"d\"], [{name: \"lib.e\"}]);\n\n\t// lib.e\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"e\"], []);\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.b\": {},\n\t\t\t\t\t\t\"lib.c\": {},\n\t\t\t\t\t\t\"lib.d\": {},\n\t\t\t\t\t\t\"lib.e\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.b\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.c\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"lib.d\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"lib.e\": {\n\t\t\t\t\t\t\t\"lazy\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.c\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.d\": {},\n\t\t\t\t\t\t\"lib.e\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.d\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"lib.e\": {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"name\": \"lib.e\",\n\t\t\t\"scmRevision\": \"\",\n\t\t}],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub.fold\": {\n\t\t\t\t\"hasOwnPreload\": true,\n\t\t\t\t\"library\": \"lib.a\",\n\t\t\t\t\"manifestHints\": {\n\t\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\t\"lib.c\": {},\n\t\t\t\t\t\t\t\"lib.d\": {},\n\t\t\t\t\t\t\t\"lib.e\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t}, oOptions);\n});\n\ntest.serial(\"integration: Library without dependencies and embeds and embeddedBy\", async (t) => {\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tconst embeds = [\"sub/fold\"];\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [], embeds);\n\t// sub\n\tawait createManifestResource(dependencies, resourceFactory, [\"lib\", \"a\", \"sub\", \"fold\"], [],\n\t\tundefined, \"../../\");\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t}],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub.fold\": {\n\t\t\t\t\"library\": \"lib.a\"\n\t\t\t}\n\t\t},\n\t}, oOptions);\n});\n\ntest.serial(\"integration: Library without dependencies and embeddedBy undefined\", async (t) => {\n\tconst {verboseLogStub} = t.context;\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tconst embeds = [\"sub/fold\"];\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [], embeds);\n\t// sub\n\tawait createManifestResource(dependencies, resourceFactory, [\"lib\", \"a\", \"sub\", \"fold\"], [],\n\t\tundefined, undefined);\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t}],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub.fold\": {\n\t\t\t\t\"hasOwnPreload\": true,\n\t\t\t\t\"library\": \"lib.a\"\n\t\t\t}\n\t\t},\n\t}, oOptions);\n\n\tt.is(verboseLogStub.callCount, 1);\n\tt.is(verboseLogStub.firstCall.args[0],\n\t\t\"  component doesn't declare 'sap.app/embeddedBy', don't list it as 'embedded'\");\n});\n\ntest.serial(\"integration: Library without dependencies and embeddedBy not a string\", async (t) => {\n\tconst {errorLogStub} = t.context;\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tconst embeds = [\"sub/fold\"];\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [], embeds);\n\t// sub\n\tawait createManifestResource(dependencies, resourceFactory, [\"lib\", \"a\", \"sub\", \"fold\"], [],\n\t\tundefined, {});\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t}],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub.fold\": {\n\t\t\t\t\"hasOwnPreload\": true,\n\t\t\t\t\"library\": \"lib.a\"\n\t\t\t}\n\t\t},\n\t}, oOptions);\n\n\tt.is(errorLogStub.callCount, 1);\n\tt.is(errorLogStub.firstCall.args[0],\n\t\t\"  component '%s': property 'sap.app/embeddedBy' is of type '%s' (expected 'string'), \" +\n\t\t\"it won't be listed as 'embedded'\");\n});\n\ntest.serial(\"integration: Library without dependencies and embeddedBy empty string\", async (t) => {\n\tconst {errorLogStub} = t.context;\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tconst embeds = [\"sub/fold\"];\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [], embeds);\n\t// sub\n\tawait createManifestResource(dependencies, resourceFactory, [\"lib\", \"a\", \"sub\", \"fold\"], [],\n\t\tundefined, \"\");\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t}],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub.fold\": {\n\t\t\t\t\"hasOwnPreload\": true,\n\t\t\t\t\"library\": \"lib.a\"\n\t\t\t}\n\t\t},\n\t}, oOptions);\n\n\tt.is(errorLogStub.callCount, 1);\n\tt.is(errorLogStub.firstCall.args[0],\n\t\t\"  component '%s': property 'sap.app/embeddedBy' has an empty string value (which is invalid), \" +\n\t\t\"it won't be listed as 'embedded'\");\n});\n\ntest.serial(\"integration: Library without dependencies and embeddedBy path not correct\", async (t) => {\n\tconst {verboseLogStub} = t.context;\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tconst embeds = [\"sub/fold\"];\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [], embeds);\n\t// sub\n\tawait createManifestResource(dependencies, resourceFactory, [\"lib\", \"a\", \"sub\", \"fold\"], [],\n\t\tundefined, \"../\");\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t}],\n\t\t\"components\": {\n\t\t\t\"lib.a.sub.fold\": {\n\t\t\t\t\"hasOwnPreload\": true,\n\t\t\t\t\"library\": \"lib.a\"\n\t\t\t}\n\t\t},\n\t}, oOptions);\n\n\tt.is(verboseLogStub.callCount, 1);\n\tt.is(verboseLogStub.firstCall.args[0],\n\t\t\"  component's 'sap.app/embeddedBy' points to '%s', don't list it as 'embedded'\");\n});\n\ntest.serial(\"integration: Library with manifest with invalid dependency\", async (t) => {\n\tconst {infoLogStub} = t.context;\n\tconst workspace = createWorkspace();\n\n\tawait createDotLibrary(workspace, resourceFactory, [\"test\", \"lib\"]);\n\n\t// dependencies\n\tconst dependencies = createDependencies({virBasePath: \"/\"});\n\n\t// lib.a\n\tawait createResources(dependencies, resourceFactory, [\"lib\", \"a\"], [{name: \"non.existing\"}]);\n\n\n\tconst oOptions = {\n\t\toptions: {\n\t\t\tprojectName: \"Test Lib\",\n\t\t\tpattern: \"/resources/**/.library\",\n\t\t\trootProject: {\n\t\t\t\tmetadata: {\n\t\t\t\t\tname: \"myname\"\n\t\t\t\t},\n\t\t\t\tversion: \"1.33.7\"\n\t\t\t}\n\t\t},\n\t\tworkspace,\n\t\tdependencies\n\t};\n\tawait assertCreatedVersionInfo(t, {\n\t\t\"name\": \"myname\",\n\t\t\"scmRevision\": \"\",\n\t\t\"version\": \"1.33.7\",\n\t\t\"libraries\": [{\n\t\t\t\"name\": \"lib.a\",\n\t\t\t\"scmRevision\": \"\",\n\t\t\t\"manifestHints\": {\n\t\t\t\t\"dependencies\": {\n\t\t\t\t\t\"libs\": {\n\t\t\t\t\t\t\"non.existing\": {},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}],\n\t}, oOptions);\n\n\tt.is(infoLogStub.callCount, 1);\n\tt.is(infoLogStub.firstCall.args[0],\n\t\t\"Cannot find dependency 'non.existing' defined in the manifest.json or .library file of project 'lib.a'. \" +\n\t\t\"This might prevent some UI5 runtime performance optimizations from taking effect. \" +\n\t\t\"Please double check your project's dependency configuration.\");\n});\n",
    "test/lib/tasks/jsdoc/executeJsdocSdkTransformation.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\n\nconst mock = require(\"mock-require\");\n\nconst executeJsdocSdkTransformation = require(\"../../../../lib/tasks/jsdoc/executeJsdocSdkTransformation\");\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.serial(\"executeJsdocSdkTransformation\", async (t) => {\n\tt.plan(13);\n\tconst sdkTransformerStub = sinon.stub().resolves([\"resource A\", \"resource B\"]);\n\tconst fsInterfaceStub = sinon.stub().returns(\"custom fs\");\n\tmock(\"../../../../lib/processors/jsdoc/sdkTransformer\", sdkTransformerStub);\n\n\tclass ReaderCollectionPrioritizedStubClass {\n\t\tconstructor(parameters) {\n\t\t\tt.deepEqual(parameters, {\n\t\t\t\tname: \"executeJsdocSdkTransformation - custom workspace + dependencies FS: some.project\",\n\t\t\t\treaders: [workspace, dependencies]\n\t\t\t}, \"ReaderCollectionPrioritized got called with the correct arguments\");\n\t\t}\n\t}\n\n\tmock(\"@ui5/fs\", {\n\t\tReaderCollectionPrioritized: ReaderCollectionPrioritizedStubClass,\n\t\tfsInterface: fsInterfaceStub\n\t});\n\n\tconst executeJsdocSdkTransformation = mock.reRequire(\"../../../../lib/tasks/jsdoc/executeJsdocSdkTransformation\");\n\n\tconst writeStub = sinon.stub().resolves();\n\tconst byGlobWorkspaceStub = sinon.stub()\n\t\t.onFirstCall().resolves([{\n\t\t\tgetPath: () => \"workspace/api.json\"\n\t\t}])\n\t\t.onSecondCall().resolves([{\n\t\t\tgetPath: () => \"workspace/.library\"\n\t\t}]);\n\tconst workspace = {\n\t\twrite: writeStub,\n\t\tbyGlob: byGlobWorkspaceStub\n\t};\n\tconst byGlobDependenciesStub = sinon.stub().resolves()\n\t\t.resolves([{\n\t\t\tgetPath: () => \"depA/api.json\"\n\t\t}, {\n\t\t\tgetPath: () => \"depB/api.json\"\n\t\t}]);\n\tconst dependencies = {\n\t\tbyGlob: byGlobDependenciesStub\n\t};\n\tawait executeJsdocSdkTransformation({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"some.project\",\n\t\t\tdotLibraryPattern: \"some .library pattern\"\n\t\t}\n\t});\n\tt.deepEqual(byGlobWorkspaceStub.callCount, 2, \"workspace.byGlob got called twice\");\n\tt.deepEqual(byGlobWorkspaceStub.getCall(0).args[0], \"/test-resources/**/designtime/api.json\",\n\t\t\"first workspace.byGlob call with correct arguments\");\n\tt.deepEqual(byGlobWorkspaceStub.getCall(1).args[0], \"some .library pattern\",\n\t\t\"second workspace.byGlob call with correct arguments\");\n\n\tt.deepEqual(byGlobDependenciesStub.callCount, 1, \"dependencies.byGlob got called once\");\n\tt.deepEqual(byGlobDependenciesStub.getCall(0).args[0], \"/test-resources/**/designtime/api.json\",\n\t\t\"dependencies.byGlob got called with correct arguments\");\n\n\tt.deepEqual(fsInterfaceStub.callCount, 1, \"fsInterface got called once\");\n\tt.true(fsInterfaceStub.getCall(0).args[0] instanceof ReaderCollectionPrioritizedStubClass,\n\t\t\"fsInterface got called with an instance of ReaderCollectionPrioritizedStubClass\");\n\n\tt.deepEqual(sdkTransformerStub.callCount, 1, \"sdkTransformer processor got called once\");\n\tt.deepEqual(sdkTransformerStub.getCall(0).args[0], {\n\t\tapiJsonPath: \"workspace/api.json\",\n\t\tdotLibraryPath: \"workspace/.library\",\n\t\tdependencyApiJsonPaths: [\n\t\t\t\"depA/api.json\",\n\t\t\t\"depB/api.json\"\n\t\t],\n\t\ttargetApiJsonPath: \"workspace/apiref/api.json\",\n\t\tfs: \"custom fs\"\n\t}, \"sdkTransformer got called with correct arguments\");\n\n\tt.deepEqual(writeStub.callCount, 2, \"Write got called twice\");\n\tt.deepEqual(writeStub.getCall(0).args[0], \"resource A\", \"Write got called with correct arguments\");\n\tt.deepEqual(writeStub.getCall(1).args[0], \"resource B\", \"Write got called with correct arguments\");\n});\n\ntest(\"executeJsdocSdkTransformation with missing parameters\", async (t) => {\n\tawait t.throwsAsync(executeJsdocSdkTransformation(), {\n\t\tinstanceOf: TypeError\n\t}, \"TypeError thrown\");\n});\n\ntest.serial(\"executeJsdocSdkTransformation with missing project api.json (skips processing)\", async (t) => {\n\tconst logger = require(\"@ui5/logger\");\n\tconst infoLogStub = sinon.stub();\n\tconst myLoggerInstance = {\n\t\tinfo: infoLogStub\n\t};\n\tsinon.stub(logger, \"getLogger\").returns(myLoggerInstance);\n\tconst executeJsdocSdkTransformation = mock.reRequire(\"../../../../lib/tasks/jsdoc/executeJsdocSdkTransformation\");\n\n\tconst byGlobWorkspaceStub = sinon.stub()\n\t\t.onFirstCall().resolves([])\n\t\t.onSecondCall().resolves([{\n\t\t\tgetPath: () => \"workspace/.library\"\n\t\t}]);\n\tconst workspace = {\n\t\tbyGlob: byGlobWorkspaceStub\n\t};\n\tconst byGlobDependenciesStub = sinon.stub().resolves()\n\t\t.resolves([{\n\t\t\tgetPath: () => \"depA/api.json\"\n\t\t}, {\n\t\t\tgetPath: () => \"depB/api.json\"\n\t\t}]);\n\tconst dependencies = {\n\t\tbyGlob: byGlobDependenciesStub\n\t};\n\n\tawait executeJsdocSdkTransformation({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"some.project\",\n\t\t\tdotLibraryPattern: \"some .library pattern\"\n\t\t}\n\t});\n\n\tt.deepEqual(infoLogStub.callCount, 1, \"One message has been logged\");\n\tt.deepEqual(infoLogStub.getCall(0).args[0],\n\t\t\"Failed to locate api.json resource for project some.project. Skipping SDK Transformation...\",\n\t\t\"Correct message has been logged\");\n});\n\ntest(\"executeJsdocSdkTransformation too many project api.json resources\", async (t) => {\n\tconst byGlobWorkspaceStub = sinon.stub()\n\t\t.onFirstCall().resolves([{\n\t\t\tgetPath: () => \"workspace/a/api.json\"\n\t\t}, {\n\t\t\tgetPath: () => \"workspace/b/api.json\"\n\t\t}])\n\t\t.onSecondCall().resolves([{\n\t\t\tgetPath: () => \"workspace/a/.library\"\n\t\t}]);\n\tconst workspace = {\n\t\tbyGlob: byGlobWorkspaceStub\n\t};\n\tconst byGlobDependenciesStub = sinon.stub().resolves()\n\t\t.resolves([{\n\t\t\tgetPath: () => \"depA/api.json\"\n\t\t}, {\n\t\t\tgetPath: () => \"depB/api.json\"\n\t\t}]);\n\tconst dependencies = {\n\t\tbyGlob: byGlobDependenciesStub\n\t};\n\n\tconst error = await t.throwsAsync(executeJsdocSdkTransformation({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"some.project\",\n\t\t\tdotLibraryPattern: \"some .library pattern\"\n\t\t}\n\t}));\n\tt.deepEqual(error.message,\n\t\t\"[executeJsdocSdkTransformation]: Found more than one api.json resources for project some.project.\",\n\t\t\"Correct error message thrown\");\n});\n\ntest(\"executeJsdocSdkTransformation missing project .library\", async (t) => {\n\tconst byGlobWorkspaceStub = sinon.stub()\n\t\t.onFirstCall().resolves([{\n\t\t\tgetPath: () => \"workspace/api.json\"\n\t\t}])\n\t\t.onSecondCall().resolves([]);\n\tconst workspace = {\n\t\tbyGlob: byGlobWorkspaceStub\n\t};\n\tconst byGlobDependenciesStub = sinon.stub().resolves()\n\t\t.resolves([{\n\t\t\tgetPath: () => \"depA/api.json\"\n\t\t}, {\n\t\t\tgetPath: () => \"depB/api.json\"\n\t\t}]);\n\tconst dependencies = {\n\t\tbyGlob: byGlobDependenciesStub\n\t};\n\n\tconst error = await t.throwsAsync(executeJsdocSdkTransformation({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"some.project\",\n\t\t\tdotLibraryPattern: \"some .library pattern\"\n\t\t}\n\t}));\n\tt.deepEqual(error.message,\n\t\t\"[executeJsdocSdkTransformation]: Failed to locate .library resource for project some.project.\",\n\t\t\"Correct error message thrown\");\n});\n\ntest(\"executeJsdocSdkTransformation too many project .library resources\", async (t) => {\n\tconst byGlobWorkspaceStub = sinon.stub()\n\t\t.onFirstCall().resolves([{\n\t\t\tgetPath: () => \"workspace/a/api.json\"\n\t\t}])\n\t\t.onSecondCall().resolves([{\n\t\t\tgetPath: () => \"workspace/a/.library\"\n\t\t}, {\n\t\t\tgetPath: () => \"workspace/b/.library\"\n\t\t}]);\n\tconst workspace = {\n\t\tbyGlob: byGlobWorkspaceStub\n\t};\n\tconst byGlobDependenciesStub = sinon.stub().resolves()\n\t\t.resolves([{\n\t\t\tgetPath: () => \"depA/api.json\"\n\t\t}, {\n\t\t\tgetPath: () => \"depB/api.json\"\n\t\t}]);\n\tconst dependencies = {\n\t\tbyGlob: byGlobDependenciesStub\n\t};\n\n\tconst error = await t.throwsAsync(executeJsdocSdkTransformation({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"some.project\",\n\t\t\tdotLibraryPattern: \"some .library pattern\"\n\t\t}\n\t}));\n\tt.deepEqual(error.message,\n\t\t\"[executeJsdocSdkTransformation]: Found more than one .library resources for project some.project.\",\n\t\t\"Correct error message thrown\");\n});\n",
    "test/lib/tasks/jsdoc/generateApiIndex.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst ui5Fs = require(\"@ui5/fs\");\n\nconst mock = require(\"mock-require\");\n\nconst generateApiIndex = require(\"../../../../lib/tasks/jsdoc/generateApiIndex\");\n\ntest.afterEach.always((t) => {\n\tmock.stopAll();\n\tsinon.restore();\n});\n\ntest.serial(\"generateApiIndex\", async (t) => {\n\tconst apiIndexGeneratorStub = sinon.stub().resolves([\"resource A\", \"resource B\"]);\n\tconst fsInterfaceStub = sinon.stub(ui5Fs, \"fsInterface\").returns(\"custom fs\");\n\tmock(\"../../../../lib/processors/jsdoc/apiIndexGenerator\", apiIndexGeneratorStub);\n\n\tclass ReaderCollectionPrioritizedStubClass {\n\t\tconstructor(parameters) {\n\t\t\tt.deepEqual(parameters, {\n\t\t\t\tname: \"generateApiIndex - workspace + dependencies: some.project\",\n\t\t\t\treaders: [workspace, dependencies]\n\t\t\t}, \"ReaderCollectionPrioritized got called with the correct arguments\");\n\t\t}\n\t}\n\n\tmock(\"@ui5/fs\", {\n\t\tReaderCollectionPrioritized: ReaderCollectionPrioritizedStubClass,\n\t\tfsInterface: fsInterfaceStub\n\t});\n\tconst generateApiIndex = mock.reRequire(\"../../../../lib/tasks/jsdoc/generateApiIndex\");\n\n\tconst writeStub = sinon.stub().resolves();\n\tconst workspace = {\n\t\twrite: writeStub\n\t};\n\tconst dependencies = {};\n\tawait generateApiIndex({\n\t\tworkspace,\n\t\tdependencies,\n\t\toptions: {\n\t\t\tprojectName: \"some.project\"\n\t\t}\n\t});\n\n\tt.deepEqual(fsInterfaceStub.callCount, 1, \"fsInterface got called once\");\n\tt.true(fsInterfaceStub.getCall(0).args[0] instanceof ReaderCollectionPrioritizedStubClass,\n\t\t\"fsInterface got called with an instance of ReaderCollectionPrioritizedStubClass\");\n\n\tt.deepEqual(apiIndexGeneratorStub.callCount, 1, \"apiIndexGenerator processor got called once\");\n\tt.deepEqual(apiIndexGeneratorStub.getCall(0).args[0], {\n\t\tversionInfoPath: \"/resources/sap-ui-version.json\",\n\t\ttestResourcesRootPath: \"/test-resources\",\n\t\ttargetApiIndexPath: \"/docs/api/api-index.json\",\n\t\ttargetApiIndexDeprecatedPath: \"/docs/api/api-index-deprecated.json\",\n\t\ttargetApiIndexExperimentalPath: \"/docs/api/api-index-experimental.json\",\n\t\ttargetApiIndexSincePath: \"/docs/api/api-index-since.json\",\n\t\tfs: \"custom fs\"\n\t}, \"apiIndexGenerator got called with correct arguments\");\n\n\tt.deepEqual(writeStub.callCount, 2, \"Write got called twice\");\n\tt.deepEqual(writeStub.getCall(0).args[0], \"resource A\", \"Write got called with correct arguments\");\n\tt.deepEqual(writeStub.getCall(1).args[0], \"resource B\", \"Write got called with correct arguments\");\n});\n\ntest(\"generateApiIndex with missing parameters\", async (t) => {\n\tawait t.throwsAsync(generateApiIndex(), {\n\t\tinstanceOf: TypeError\n\t}, \"TypeError thrown\");\n});\n",
    "test/lib/tasks/jsdoc/generateJsdoc.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst fs = require(\"graceful-fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst mock = require(\"mock-require\");\n\nconst generateJsdoc = require(\"../../../../lib/tasks/jsdoc/generateJsdoc\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\ntest.serial(\"createTmpDir successful\", async (t) => {\n\tconst makeDirStub = sinon.stub().resolves();\n\tmock(\"make-dir\", makeDirStub);\n\n\tconst mkdtempStub = sinon.stub(fs, \"mkdtemp\").callsArgWithAsync(1, undefined, \"some/path\");\n\tconst generateJsdoc = mock.reRequire(\"../../../../lib/tasks/jsdoc/generateJsdoc\");\n\n\tconst res = await generateJsdoc._createTmpDir(\"som$e.nam3/space\"); // non alphanum characters get removed\n\n\tconst tmpRootPath = path.join(os.tmpdir(), \"ui5-tooling\");\n\n\tt.deepEqual(makeDirStub.callCount, 1, \"One directory got created\");\n\tt.deepEqual(makeDirStub.getCall(0).args[0], tmpRootPath, \"Correct tmp root dir got created\");\n\n\tt.deepEqual(mkdtempStub.callCount, 1, \"mkdtemp is called once\");\n\tt.deepEqual(mkdtempStub.getCall(0).args[0], path.join(tmpRootPath, \"jsdoc-somenam3space-\"));\n\tt.deepEqual(res, \"some/path\", \"Correct path returned\");\n\n\tmock.stop(\"make-dir\");\n});\n\ntest.serial(\"createTmpDir error\", async (t) => {\n\tconst makeDirStub = sinon.stub().resolves();\n\tmock(\"make-dir\", makeDirStub);\n\n\tconst mkdtempStub = sinon.stub(fs, \"mkdtemp\").callsArgWithAsync(1, new Error(\"Dir creation failed\"), \"some/path\");\n\tconst generateJsdoc = mock.reRequire(\"../../../../lib/tasks/jsdoc/generateJsdoc\");\n\n\tconst res = await t.throwsAsync(generateJsdoc._createTmpDir(\"some.namespace\"));\n\n\tconst tmpRootPath = path.join(os.tmpdir(), \"ui5-tooling\");\n\n\tt.deepEqual(makeDirStub.callCount, 1, \"One directory got created\");\n\tt.deepEqual(makeDirStub.getCall(0).args[0], tmpRootPath, \"Correct tmp root dir got created\");\n\n\tt.deepEqual(mkdtempStub.callCount, 1, \"mkdtemp is called once\");\n\tt.deepEqual(mkdtempStub.getCall(0).args[0], path.join(tmpRootPath, \"jsdoc-somenamespace-\"));\n\tt.deepEqual(res.message, \"Dir creation failed\", \"Dir creation failed\");\n\n\tmock.stop(\"make-dir\");\n});\n\ntest.serial(\"createTmpDirs\", async (t) => {\n\tconst makeDirStub = sinon.stub().resolves();\n\tmock(\"make-dir\", makeDirStub);\n\tconst rimrafStub = sinon.stub().resolves();\n\tmock(\"rimraf\", rimrafStub);\n\tconst generateJsdoc = mock.reRequire(\"../../../../lib/tasks/jsdoc/generateJsdoc\");\n\n\tconst createTmpDirStub = sinon.stub(generateJsdoc, \"_createTmpDir\")\n\t\t.resolves(path.join(\"/\", \"some\", \"path\"));\n\n\tconst res = await generateJsdoc._createTmpDirs(\"some.namespace\");\n\n\tt.deepEqual(createTmpDirStub.callCount, 1, \"creteTmpDir called once\");\n\tt.deepEqual(createTmpDirStub.getCall(0).args[0], \"some.namespace\", \"creteTmpDir called with correct argument\");\n\n\tt.deepEqual(makeDirStub.callCount, 3, \"Three directory got created\");\n\tt.deepEqual(makeDirStub.getCall(0).args[0], path.join(\"/\", \"some\", \"path\", \"src\"),\n\t\t\"Correct srcdir path got created\");\n\tt.deepEqual(makeDirStub.getCall(1).args[0], path.join(\"/\", \"some\", \"path\", \"target\"),\n\t\t\"Correct target dir path got created\");\n\tt.deepEqual(makeDirStub.getCall(2).args[0], path.join(\"/\", \"some\", \"path\", \"tmp\"),\n\t\t\"Correct tmp dir path got created\");\n\n\tt.deepEqual(res.sourcePath, path.join(\"/\", \"some\", \"path\", \"src\"), \"Correct temporary src dir path returned\");\n\tt.deepEqual(res.targetPath, path.join(\"/\", \"some\", \"path\", \"target\"), \"Correct temporary target dir path returned\");\n\tt.deepEqual(res.tmpPath, path.join(\"/\", \"some\", \"path\", \"tmp\"), \"Correct temporary tmp dir path returned\");\n\n\tres.cleanup();\n\tt.deepEqual(rimrafStub.callCount, 1, \"Cleanup callback: rimraf called once\");\n\tt.deepEqual(rimrafStub.getCall(0).args[0], path.join(\"/\", \"some\", \"path\"),\n\t\t\"Cleanup callback: rimraf called with correct path\");\n\n\tmock.stop(\"make-dir\");\n\tmock.stop(\"rimraf\");\n});\n\ntest.serial(\"writeResourcesToDir with byGlobSource\", async (t) => {\n\tconst writeStub = sinon.stub().resolves();\n\tconst createAdapterStub = sinon.stub(require(\"@ui5/fs\").resourceFactory, \"createAdapter\").returns({\n\t\twrite: writeStub\n\t});\n\n\tawait generateJsdoc._writeResourcesToDir({\n\t\tworkspace: {\n\t\t\t// stub byGlobSource\n\t\t\tbyGlobSource: (pattern) => {\n\t\t\t\tt.deepEqual(pattern, \"some pattern\", \"Glob with correct pattern\");\n\t\t\t\treturn Promise.resolve([\"resource A\", \"resource B\"]);\n\t\t\t}\n\t\t},\n\t\tpattern: \"some pattern\",\n\t\ttargetPath: path.join(\"/\", \"some\", \"target\", \"path\")\n\t});\n\n\tt.deepEqual(createAdapterStub.getCall(0).args[0], {\n\t\tfsBasePath: path.join(\"/\", \"some\", \"target\", \"path\"),\n\t\tvirBasePath: \"/resources/\"\n\t}, \"createAdapter called with correct arguments\");\n\n\tt.deepEqual(writeStub.callCount, 2, \"Write got called four times\");\n\tt.deepEqual(writeStub.getCall(0).args[0], \"resource A\", \"Write got called for resource A\");\n\tt.deepEqual(writeStub.getCall(1).args[0], \"resource B\", \"Write got called for resource B\");\n});\n\ntest.serial(\"writeResourcesToDir with byGlob\", async (t) => {\n\tconst writeStub = sinon.stub().resolves();\n\tconst createAdapterStub = sinon.stub(require(\"@ui5/fs\").resourceFactory, \"createAdapter\").returns({\n\t\twrite: writeStub\n\t});\n\n\tawait generateJsdoc._writeResourcesToDir({\n\t\tworkspace: {\n\t\t\tbyGlob: (pattern) => {\n\t\t\t\tt.deepEqual(pattern, \"some pattern\", \"Glob with correct pattern\");\n\t\t\t\treturn Promise.resolve([\"resource A\", \"resource B\"]);\n\t\t\t}\n\t\t},\n\t\tpattern: \"some pattern\",\n\t\ttargetPath: path.join(\"/\", \"some\", \"target\", \"path\")\n\t});\n\n\tt.deepEqual(createAdapterStub.getCall(0).args[0], {\n\t\tfsBasePath: path.join(\"/\", \"some\", \"target\", \"path\"),\n\t\tvirBasePath: \"/resources/\"\n\t}, \"createAdapter called with correct arguments\");\n\n\tt.deepEqual(writeStub.callCount, 2, \"Write got called four times\");\n\tt.deepEqual(writeStub.getCall(0).args[0], \"resource A\", \"Write got called for resource A\");\n\tt.deepEqual(writeStub.getCall(1).args[0], \"resource B\", \"Write got called for resource B\");\n});\n\ntest.serial(\"writeDependencyApisToDir with byGlob\", async (t) => {\n\tconst writeStub = sinon.stub().resolves();\n\tconst createAdapterStub = sinon.stub(require(\"@ui5/fs\").resourceFactory, \"createAdapter\").returns({\n\t\twrite: writeStub\n\t});\n\n\tconst setPathStubA = sinon.stub();\n\tconst setPathStubB = sinon.stub();\n\n\tconst cloneStubA = sinon.stub().resolves({\n\t\t// Cloned resource\n\t\tid: \"resource A\",\n\t\tsetPath: setPathStubA\n\t});\n\tconst cloneStubB = sinon.stub().resolves({\n\t\t// Cloned resource\n\t\tid: \"resource B\",\n\t\tsetPath: setPathStubB\n\t});\n\tconst initialResourceA = {\n\t\t// Globbed resource\n\t\tclone: cloneStubA\n\t};\n\tconst initialResourceB = {\n\t\t// Globbed resource\n\t\tclone: cloneStubB\n\t};\n\n\tawait generateJsdoc._writeDependencyApisToDir({\n\t\tdependencies: {\n\t\t\tbyGlob: (pattern) => {\n\t\t\t\tt.deepEqual(pattern, \"/test-resources/**/designtime/api.json\",\n\t\t\t\t\t\"Dependency api.json glob with correct pattern\");\n\t\t\t\treturn Promise.resolve([initialResourceA, initialResourceB]);\n\t\t\t}\n\t\t},\n\t\ttargetPath: path.join(\"/\", \"some\", \"target\", \"path\")\n\t});\n\n\tt.deepEqual(cloneStubA.callCount, 1, \"resource A got cloned once\");\n\tt.deepEqual(cloneStubB.callCount, 1, \"resource B got cloned once\");\n\n\tt.deepEqual(setPathStubA.callCount, 1, \"Path of cloned resource A got changed\");\n\tt.deepEqual(setPathStubA.getCall(0).args[0], \"/api-0.json\", \"Path of cloned resource A got changed correctly\");\n\n\tt.deepEqual(setPathStubB.callCount, 1, \"Path of cloned resource B got changed\");\n\tt.deepEqual(setPathStubB.getCall(0).args[0], \"/api-1.json\", \"Path of cloned resource B got changed correctly\");\n\n\tt.deepEqual(createAdapterStub.getCall(0).args[0], {\n\t\tfsBasePath: path.join(\"/\", \"some\", \"target\", \"path\"),\n\t\tvirBasePath: \"/\"\n\t}, \"createAdapter called with correct arguments\");\n\n\tt.deepEqual(writeStub.callCount, 2, \"Write got called four times\");\n\tt.deepEqual(writeStub.getCall(0).args[0].id, \"resource A\", \"Write got called for resource A\");\n\tt.deepEqual(writeStub.getCall(1).args[0].id, \"resource B\", \"Write got called for resource B\");\n});\n\ntest.serial(\"generateJsdoc\", async (t) => {\n\tconst jsdocGeneratorStub = sinon.stub().resolves([\"resource A\", \"resource B\"]);\n\tmock(\"../../../../lib/processors/jsdoc/jsdocGenerator\", jsdocGeneratorStub);\n\tconst generateJsdoc = mock.reRequire(\"../../../../lib/tasks/jsdoc/generateJsdoc\");\n\n\tconst cleanupStub = sinon.stub().resolves();\n\tconst createTmpDirsStub = sinon.stub(generateJsdoc, \"_createTmpDirs\").resolves({\n\t\tsourcePath: path.join(\"/\", \"some\", \"source\", \"path\"),\n\t\ttargetPath: path.join(\"/\", \"some\", \"target\", \"path\"),\n\t\ttmpPath: path.join(\"/\", \"some\", \"tmp\", \"path\"),\n\t\tcleanup: cleanupStub\n\t});\n\tconst writeResourcesToDirStub = sinon.stub(generateJsdoc, \"_writeResourcesToDir\").resolves(1);\n\tconst writeDependencyApisToDirStub = sinon.stub(generateJsdoc, \"_writeDependencyApisToDir\").resolves(0);\n\n\tconst writeStub = sinon.stub().resolves();\n\tconst workspace = {\n\t\twrite: writeStub\n\t};\n\n\tconst registerCleanupTaskStub = sinon.stub();\n\tconst taskUtil = {\n\t\tregisterCleanupTask: registerCleanupTaskStub\n\t};\n\tawait generateJsdoc({\n\t\ttaskUtil,\n\t\tworkspace,\n\t\tdependencies: \"dependencies\",\n\t\toptions: {\n\t\t\tpattern: \"some pattern\",\n\t\t\tprojectName: \"some.project\",\n\t\t\tnamespace: \"some/project\",\n\t\t\tversion: \"some version\"\n\t\t}\n\t});\n\n\tt.deepEqual(createTmpDirsStub.callCount, 1, \"createTmpDirs got called once\");\n\tt.deepEqual(createTmpDirsStub.getCall(0).args[0], \"some.project\",\n\t\t\"createTmpDirs got called with correct arguments\");\n\n\tt.deepEqual(registerCleanupTaskStub.callCount, 1, \"registerCleanupTask called once\");\n\tt.deepEqual(registerCleanupTaskStub.getCall(0).args[0], cleanupStub,\n\t\t\"registerCleanupTask called with correct argument\");\n\n\tt.deepEqual(writeResourcesToDirStub.callCount, 1, \"writeResourcesToDir got called once\");\n\tt.deepEqual(writeResourcesToDirStub.getCall(0).args[0], {\n\t\tworkspace,\n\t\tpattern: \"some pattern\",\n\t\ttargetPath: path.join(\"/\", \"some\", \"source\", \"path\") // one's target is another one's source\n\t}, \"writeResourcesToDir got called with correct arguments\");\n\n\tt.deepEqual(writeDependencyApisToDirStub.callCount, 1, \"writeDependencyApisToDir got called once\");\n\tt.deepEqual(writeDependencyApisToDirStub.getCall(0).args[0], {\n\t\tdependencies: \"dependencies\",\n\t\ttargetPath: path.join(\"/\", \"some\", \"tmp\", \"path\", \"dependency-apis\")\n\t}, \"writeDependencyApisToDir got called with correct arguments\");\n\n\tt.deepEqual(jsdocGeneratorStub.callCount, 1, \"jsdocGenerator processor got called once\");\n\tt.deepEqual(jsdocGeneratorStub.getCall(0).args[0], {\n\t\tsourcePath: path.join(\"/\", \"some\", \"source\", \"path\"),\n\t\ttargetPath: path.join(\"/\", \"some\", \"target\", \"path\"),\n\t\ttmpPath: path.join(\"/\", \"some\", \"tmp\", \"path\"),\n\t\toptions: {\n\t\t\tprojectName: \"some.project\",\n\t\t\tnamespace: \"some/project\",\n\t\t\tversion: \"some version\",\n\t\t\tvariants: [\"apijson\"]\n\t\t}\n\t}, \"jsdocGenerator got called with correct arguments\");\n\n\tt.deepEqual(writeStub.callCount, 2, \"Write got called twice\");\n\tt.deepEqual(writeStub.getCall(0).args[0], \"resource A\", \"Write got called with correct arguments\");\n\tt.deepEqual(writeStub.getCall(1).args[0], \"resource B\", \"Write got called with correct arguments\");\n\n\tmock.stop(\"../../../../lib/processors/jsdoc/jsdocGenerator\");\n});\n\ntest.serial(\"generateJsdoc with missing resources\", async (t) => {\n\tconst jsdocGeneratorStub = sinon.stub().resolves();\n\tmock(\"../../../../lib/processors/jsdoc/jsdocGenerator\", jsdocGeneratorStub);\n\tconst logger = require(\"@ui5/logger\");\n\tconst infoLogStub = sinon.stub();\n\tconst myLoggerInstance = {\n\t\tinfo: infoLogStub\n\t};\n\tsinon.stub(logger, \"getLogger\").returns(myLoggerInstance);\n\tconst generateJsdoc = mock.reRequire(\"../../../../lib/tasks/jsdoc/generateJsdoc\");\n\n\tconst cleanupStub = sinon.stub().resolves();\n\tsinon.stub(generateJsdoc, \"_createTmpDirs\").resolves({\n\t\tsourcePath: path.join(\"/\", \"some\", \"source\", \"path\"),\n\t\ttargetPath: path.join(\"/\", \"some\", \"target\", \"path\"),\n\t\ttmpPath: path.join(\"/\", \"some\", \"tmp\", \"path\"),\n\t\tcleanup: cleanupStub\n\t});\n\tsinon.stub(generateJsdoc, \"_writeResourcesToDir\").resolves(0);\n\tsinon.stub(generateJsdoc, \"_writeDependencyApisToDir\").resolves(0);\n\n\tconst writeStub = sinon.stub().resolves();\n\tconst workspace = {\n\t\twrite: writeStub\n\t};\n\tconst registerCleanupTaskStub = sinon.stub();\n\tconst taskUtil = {\n\t\tregisterCleanupTask: registerCleanupTaskStub\n\t};\n\tawait generateJsdoc({\n\t\ttaskUtil,\n\t\tworkspace,\n\t\tdependencies: \"dependencies\",\n\t\toptions: {\n\t\t\tpattern: \"some pattern\",\n\t\t\tprojectName: \"some.project\",\n\t\t\tnamespace: \"some/project\",\n\t\t\tversion: \"some version\"\n\t\t}\n\t});\n\n\tt.deepEqual(registerCleanupTaskStub.callCount, 1, \"registerCleanupTask called once\");\n\tt.deepEqual(registerCleanupTaskStub.getCall(0).args[0], cleanupStub,\n\t\t\"registerCleanupTask called with correct argument\");\n\n\tt.deepEqual(infoLogStub.callCount, 1, \"One message has been logged\");\n\tt.deepEqual(infoLogStub.getCall(0).args[0], \"Failed to find any input resources for project some.project \" +\n\t\t\"using pattern some pattern. Skipping JSDoc generation...\",\n\t\"Correct message has been logged\");\n\n\tt.deepEqual(jsdocGeneratorStub.callCount, 0, \"jsdocGenerator processor has *not* been called\");\n\n\tmock.stop(\"../../../../lib/processors/jsdoc/jsdocGenerator\");\n});\n\ntest.serial(\"generateJsdoc no parameters\", async (t) => {\n\tawait t.throwsAsync(generateJsdoc(), {\n\t\tinstanceOf: TypeError\n\t}, \"TypeError thrown\");\n});\n\ntest.serial(\"generateJsdoc missing parameters\", async (t) => {\n\tconst error = await t.throwsAsync(generateJsdoc({}));\n\tt.deepEqual(error.message, \"[generateJsdoc]: One or more mandatory options not provided\",\n\t\t\"Correct error message thrown\");\n});\n",
    "test/lib/tasks/uglify.js": "const test = require(\"ava\");\n\nconst uglify = require(\"../../../lib/tasks/uglify\");\nconst ui5Fs = require(\"@ui5/fs\");\nconst resourceFactory = ui5Fs.resourceFactory;\nconst DuplexCollection = ui5Fs.DuplexCollection;\n\ntest(\"integration: uglify\", (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst duplexCollection = new DuplexCollection({reader: reader, writer: writer});\n\tconst content = `\nfunction test(paramA) {\n\tvar variableA = paramA;\n\tconsole.log(variableA);\n}\ntest();`;\n\tconst testResource = resourceFactory.createResource({\n\t\tpath: \"/test.js\",\n\t\tstring: content\n\t});\n\tconst expected = \"function test(t){var o=t;console.log(o)}test();\";\n\n\treturn reader.write(testResource)\n\t\t.then(() => {\n\t\t\treturn reader.byPath(\"/test.js\");\n\t\t}).then(() => {\n\t\t\treturn uglify({\n\t\t\t\tworkspace: duplexCollection,\n\t\t\t\toptions: {\n\t\t\t\t\tpattern: \"/test.js\"\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(() => {\n\t\t\treturn writer.byPath(\"/test.js\").then((resource) => {\n\t\t\t\tif (!resource) {\n\t\t\t\t\tt.fail(\"Could not find /test.js in target locator\");\n\t\t\t\t} else {\n\t\t\t\t\treturn resource.getBuffer();\n\t\t\t\t}\n\t\t\t});\n\t\t}).then((buffer) => {\n\t\t\treturn t.deepEqual(buffer.toString(), expected, \"Correct content\");\n\t\t});\n});\n\ntest(\"integration: uglify copyright\", (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst duplexCollection = new DuplexCollection({reader: reader, writer: writer});\n\tconst content = `\n/*\n * Copyright jQuery Foundation and other contributors\n */\nfunction test(paramA) {\n\tvar variableA = paramA;\n\tconsole.log(variableA);\n}\ntest();`;\n\tconst testResource = resourceFactory.createResource({\n\t\tpath: \"/test.js\",\n\t\tstring: content\n\t});\n\tconst expected = `/*\n * Copyright jQuery Foundation and other contributors\n */\nfunction test(t){var o=t;console.log(o)}test();`;\n\n\treturn reader.write(testResource)\n\t\t.then(() => {\n\t\t\treturn reader.byPath(\"/test.js\");\n\t\t}).then(() => {\n\t\t\treturn uglify({\n\t\t\t\tworkspace: duplexCollection,\n\t\t\t\toptions: {\n\t\t\t\t\tpattern: \"/test.js\"\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(() => {\n\t\t\treturn writer.byPath(\"/test.js\").then((resource) => {\n\t\t\t\tif (!resource) {\n\t\t\t\t\tt.fail(\"Could not find /test.js in target locator\");\n\t\t\t\t} else {\n\t\t\t\t\treturn resource.getBuffer();\n\t\t\t\t}\n\t\t\t});\n\t\t}).then((buffer) => {\n\t\t\treturn t.deepEqual(buffer.toString(), expected, \"Correct content\");\n\t\t});\n});\n\ntest(\"integration: uglify raw module (@ui5-bundle-raw-include)\", (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst duplexCollection = new DuplexCollection({reader: reader, writer: writer});\n\tconst content = `\n//@ui5-bundle-raw-include sap/ui/my/module.js\nfunction test(paramA) {\n\tvar variableA = paramA;\n\tconsole.log(variableA);\n}\ntest();`;\n\tconst testResource = resourceFactory.createResource({\n\t\tpath: \"/test.js\",\n\t\tstring: content\n\t});\n\tconst expected = `//@ui5-bundle-raw-include sap/ui/my/module.js\nfunction test(t){var o=t;console.log(o)}test();`;\n\n\treturn reader.write(testResource)\n\t\t.then(() => {\n\t\t\treturn reader.byPath(\"/test.js\");\n\t\t}).then(() => {\n\t\t\treturn uglify({\n\t\t\t\tworkspace: duplexCollection,\n\t\t\t\toptions: {\n\t\t\t\t\tpattern: \"/test.js\"\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(() => {\n\t\t\treturn writer.byPath(\"/test.js\").then((resource) => {\n\t\t\t\tif (!resource) {\n\t\t\t\t\tt.fail(\"Could not find /test.js in target locator\");\n\t\t\t\t} else {\n\t\t\t\t\treturn resource.getBuffer();\n\t\t\t\t}\n\t\t\t});\n\t\t}).then((buffer) => {\n\t\t\treturn t.deepEqual(buffer.toString(), expected, \"Correct content\");\n\t\t});\n});\n\ntest(\"integration: uglify raw module (@ui5-bundle)\", (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst duplexCollection = new DuplexCollection({reader: reader, writer: writer});\n\tconst content = `\n//@ui5-bundle sap/ui/my/module.js\nfunction test(paramA) {\n\tvar variableA = paramA;\n\tconsole.log(variableA);\n}\ntest();`;\n\tconst testResource = resourceFactory.createResource({\n\t\tpath: \"/test.js\",\n\t\tstring: content\n\t});\n\tconst expected = `//@ui5-bundle sap/ui/my/module.js\nfunction test(t){var o=t;console.log(o)}test();`;\n\n\treturn reader.write(testResource)\n\t\t.then(() => {\n\t\t\treturn reader.byPath(\"/test.js\");\n\t\t}).then(() => {\n\t\t\treturn uglify({\n\t\t\t\tworkspace: duplexCollection,\n\t\t\t\toptions: {\n\t\t\t\t\tpattern: \"/test.js\"\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(() => {\n\t\t\treturn writer.byPath(\"/test.js\").then((resource) => {\n\t\t\t\tif (!resource) {\n\t\t\t\t\tt.fail(\"Could not find /test.js in target locator\");\n\t\t\t\t} else {\n\t\t\t\t\treturn resource.getBuffer();\n\t\t\t\t}\n\t\t\t});\n\t\t}).then((buffer) => {\n\t\t\treturn t.deepEqual(buffer.toString(), expected, \"Correct content\");\n\t\t});\n});\n\ntest(\"integration: uglify error handling\", async (t) => {\n\tconst reader = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst writer = resourceFactory.createAdapter({\n\t\tvirBasePath: \"/\"\n\t});\n\tconst duplexCollection = new DuplexCollection({reader: reader, writer: writer});\n\tconst content = `\nthis code can't be parsed!`;\n\tconst testResource = resourceFactory.createResource({\n\t\tpath: \"/test.js\",\n\t\tstring: content\n\t});\n\n\tawait reader.write(testResource);\n\n\tconst error = await t.throwsAsync(uglify({\n\t\tworkspace: duplexCollection,\n\t\toptions: {\n\t\t\tpattern: \"/test.js\"\n\t\t}\n\t}));\n\n\tt.regex(error.message, /Uglification failed with error/, \"Error should contain expected message\");\n\tt.regex(error.message, /test\\.js/, \"Error should contain filename\");\n\tt.regex(error.message, /col/, \"Error should contain col\");\n\tt.regex(error.message, /pos/, \"Error should contain pos\");\n\tt.regex(error.message, /line/, \"Error should contain line\");\n});\n",
    "test/lib/types/AbstractFormatter.js": "const test = require(\"ava\");\nconst sinon = require(\"sinon\");\nconst fs = require(\"graceful-fs\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\nconst AbstractFormatter = require(\"../../../lib/types/AbstractFormatter\");\n\nclass CustomFormatter extends AbstractFormatter {}\n\ntest.serial(\"dirExists: existing dir stat rejects\", async (t) => {\n\tsinon.stub(fs, \"stat\").callsArgWith(1, new Error(\"MYERROR\"));\n\tconst error = await t.throwsAsync(new CustomFormatter({}).dirExists(\"non-existing\"));\n\tt.deepEqual(error.message, \"MYERROR\", \"error code MYERROR when reading dir\");\n});\n\ntest.serial(\"dirExists: non existing dir\", async (t) => {\n\tsinon.stub(fs, \"stat\").callsArgWith(1, {code: \"ENOENT\"});\n\tconst bExists = await new CustomFormatter({}).dirExists(\"non-existing\");\n\tt.false(bExists, \"non-existing does not exist\");\n});\n\ntest.serial(\"dirExists: existing dir\", async (t) => {\n\tsinon.stub(fs, \"stat\").callsArgWith(1, null, {isDirectory: () => true});\n\tconst bExists = await new CustomFormatter({}).dirExists(\"dir\");\n\tt.true(bExists, \"directory exists\");\n});\n\ntest.serial(\"dirExists: existing file\", async (t) => {\n\tsinon.stub(fs, \"stat\").callsArgWith(1, null, {isDirectory: () => false});\n\tconst bExists = await new CustomFormatter({}).dirExists(\"file\");\n\tt.false(bExists, \"file exists but is not a directory\");\n});\n",
    "test/lib/types/module/ModuleFormatter.js": "const test = require(\"ava\");\nconst path = require(\"path\");\nconst chai = require(\"chai\");\nconst sinon = require(\"sinon\");\nchai.use(require(\"chai-fs\"));\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\nconst ModuleFormatter = require(\"../../../../lib/types/module/ModuleFormatter\");\n\nfunction clone(o) {\n\treturn JSON.parse(JSON.stringify(o));\n}\n\nconst moduleAPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"module.a\");\nconst moduleATree = {\n\tid: \"module.a\",\n\tversion: \"1.0.0\",\n\tpath: path.join(moduleAPath),\n\tdependencies: [],\n\t_level: 1,\n\tspecVersion: \"0.1\",\n\ttype: \"module\",\n\tmetadata: {\n\t\tname: \"module.d\",\n\t\tcopyright: \"Some fancy copyright\"\n\t},\n\tresources: {\n\t\tconfiguration: {\n\t\t\tpaths: {\n\t\t\t\t\"/\": \"dist\",\n\t\t\t\t\"/dev\": \"dev\"\n\t\t\t}\n\t\t}\n\t}\n};\n\ntest(\"validate: ok\", async (t) => {\n\tconst myProject = clone(moduleATree);\n\tconst moduleFormatter = new ModuleFormatter({project: myProject});\n\n\tawait t.notThrowsAsync(moduleFormatter.validate());\n});\n\ntest(\"validate: project not defined\", async (t) => {\n\tconst moduleFormatter = new ModuleFormatter({project: null});\n\n\tconst error = await t.throwsAsync(moduleFormatter.validate());\n\tt.deepEqual(error.message, \"Project is undefined\", \"Correct exception thrown\");\n});\n\ntest(\"validate: empty version\", async (t) => {\n\tconst myProject = clone(moduleATree);\n\tmyProject.version = undefined;\n\tconst applicationFormatter = new ModuleFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(applicationFormatter.validate());\n\tt.deepEqual(error.message, `\"version\" is missing for project module.a`, \"Correct exception thrown\");\n});\n\ntest(\"validate: empty type\", async (t) => {\n\tconst myProject = clone(moduleATree);\n\tmyProject.type = undefined;\n\tconst applicationFormatter = new ModuleFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(applicationFormatter.validate());\n\tt.deepEqual(error.message, `\"type\" configuration is missing for project module.a`, \"Correct exception thrown\");\n});\n\n\ntest(\"validate: empty metadata\", async (t) => {\n\tconst myProject = clone(moduleATree);\n\tmyProject.metadata = undefined;\n\tconst applicationFormatter = new ModuleFormatter({project: myProject});\n\n\tconst error = await t.throwsAsync(applicationFormatter.validate());\n\tt.deepEqual(error.message, `\"metadata.name\" configuration is missing for project module.a`,\n\t\t\"Correct exception thrown\");\n});\n\ntest(\"validate: empty resources\", async (t) => {\n\tconst myProject = clone(moduleATree);\n\tmyProject.resources = undefined;\n\tconst moduleFormatter = new ModuleFormatter({project: myProject});\n\tsinon.stub(moduleFormatter, \"dirExists\").resolves(true);\n\n\tawait moduleFormatter.validate();\n\tt.deepEqual(myProject.resources.configuration.paths, {\n\t\t\"/\": \"\"\n\t}, \"Defaulted to correct resource path configuration\");\n});\n\ntest(\"validate: first configured directory does not exist\", async (t) => {\n\tconst myProject = clone(moduleATree);\n\tconst moduleFormatter = new ModuleFormatter({project: myProject});\n\tconst dirExists = sinon.stub(moduleFormatter, \"dirExists\");\n\tdirExists.onFirstCall().resolves(false);\n\tdirExists.onSecondCall().resolves(true);\n\n\tconst error = await t.throwsAsync(moduleFormatter.validate());\n\tt.regex(error.message, /^Could not find \"\\/\" directory of project module.a at (?!(undefined))+/,\n\t\t\"Correct exception thrown\");\n});\n\ntest(\"validate: second configured directory does not exist\", async (t) => {\n\tconst myProject = clone(moduleATree);\n\tconst moduleFormatter = new ModuleFormatter({project: myProject});\n\tconst dirExists = sinon.stub(moduleFormatter, \"dirExists\");\n\tdirExists.onFirstCall().resolves(true);\n\tdirExists.onSecondCall().resolves(false);\n\n\tconst error = await t.throwsAsync(moduleFormatter.validate());\n\tt.regex(error.message, /^Could not find \"\\/dev\" directory of project module.a at (?!(undefined))+/,\n\t\t\"Correct exception thrown\");\n});\n\n\ntest(\"format: pass through\", async (t) => {\n\tconst myProject = clone(moduleATree);\n\tconst moduleFormatter = new ModuleFormatter({project: myProject});\n\tsinon.stub(moduleFormatter, \"validate\").resolves();\n\n\tawait moduleFormatter.format(myProject);\n\tt.deepEqual(myProject.resources.pathMappings, {\n\t\t\"/\": \"dist\",\n\t\t\"/dev\": \"dev\",\n\t}, \"path mappings correctly set\");\n});\n",
    "test/lib/types/themeLibrary/ThemeLibraryFormatter.js": "const test = require(\"ava\");\nconst path = require(\"path\");\nconst sinon = require(\"sinon\");\n\ntest.afterEach.always((t) => {\n\tsinon.restore();\n});\n\nconst ThemeLibraryFormatter = require(\"../../../../lib/types/themeLibrary/ThemeLibraryFormatter\");\n\nconst themeLibraryEPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"theme.library.e\");\nconst themeLibraryETree = {\n\tid: \"theme.library.e.id\",\n\tversion: \"1.0.0\",\n\tpath: themeLibraryEPath,\n\tdependencies: [],\n\t_level: 0,\n\t_isRoot: true,\n\tspecVersion: \"1.1\",\n\ttype: \"theme-library\",\n\tmetadata: {\n\t\tname: \"theme.library.e\",\n\t\tcopyright: \"UI development toolkit for HTML5 (OpenUI5)\\n * (c) Copyright 2009-xxx SAP SE or an SAP affiliate \" +\n\t\t\t\"company.\\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\"\n\t},\n\tresources: {\n\t\tconfiguration: {\n\t\t\tpaths: {\n\t\t\t\tsrc: \"src\",\n\t\t\t\ttest: \"test\"\n\t\t\t}\n\t\t}\n\t}\n};\n\nfunction clone(o) {\n\treturn JSON.parse(JSON.stringify(o));\n}\n\ntest(\"validate: project not defined\", async (t) => {\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: null});\n\n\t// error is thrown because project is not defined (null)\n\tconst error = await t.throwsAsync(themeLibraryFormatter.validate());\n\tt.deepEqual(error.message, \"Project is undefined\", \"Correct exception thrown\");\n});\n\ntest(\"validate: wrong specVersion (0.1)\", async (t) => {\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: {\n\t\tspecVersion: \"0.1\"\n\t}});\n\n\t// error is thrown because project is not defined (null)\n\tconst error = await t.throwsAsync(themeLibraryFormatter.validate());\n\tt.deepEqual(error.message,\n\t\t`theme-library type requires \"specVersion\" 1.1 or higher. Project \"specVersion\" is: 0.1`,\n\t\t\"Correct exception thrown\");\n});\n\ntest(\"validate: wrong specVersion (1.0)\", async (t) => {\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: {\n\t\tspecVersion: \"1.0\"\n\t}});\n\n\t// error is thrown because project is not defined (null)\n\tconst error = await t.throwsAsync(themeLibraryFormatter.validate());\n\tt.deepEqual(error.message,\n\t\t`theme-library type requires \"specVersion\" 1.1 or higher. Project \"specVersion\" is: 1.0`,\n\t\t\"Correct exception thrown\");\n});\n\ntest(\"validate: empty version\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tmyProject.version = undefined;\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\n\t// error is thrown because project's version is not defined\n\tconst error = await t.throwsAsync(themeLibraryFormatter.validate(myProject));\n\tt.deepEqual(error.message, `\"version\" is missing for project theme.library.e.id`, \"Correct exception thrown\");\n});\n\ntest(\"validate: empty type\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tmyProject.type = undefined;\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\n\t// error is thrown because project's type is not defined\n\tconst error = await t.throwsAsync(themeLibraryFormatter.validate(myProject));\n\tt.deepEqual(error.message, `\"type\" configuration is missing for project theme.library.e.id`,\n\t\t\"Correct exception thrown\");\n});\n\n\ntest(\"validate: empty metadata\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tmyProject.metadata = undefined;\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\n\t// error is thrown because project's metadata is not defined\n\tconst error = await t.throwsAsync(themeLibraryFormatter.validate(myProject));\n\tt.deepEqual(error.message, `\"metadata.name\" configuration is missing for project theme.library.e.id`,\n\t\t\"Correct exception thrown\");\n});\n\ntest(\"validate: empty resources\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tmyProject.resources = undefined;\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\n\tawait themeLibraryFormatter.validate(myProject);\n\tt.deepEqual(myProject.resources.configuration.paths.src, \"src\", \"default src directory is set\");\n\tt.deepEqual(myProject.resources.configuration.paths.test, \"test\", \"default test directory is set\");\n});\n\ntest(\"validate: src directory does not exist\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\tconst dirExists = sinon.stub(themeLibraryFormatter, \"dirExists\");\n\tdirExists.onFirstCall().resolves(false);\n\tdirExists.onSecondCall().resolves(true);\n\n\tconst error = await await t.throwsAsync(themeLibraryFormatter.validate(myProject));\n\tt.regex(error.message, /^Could not find source directory of project theme\\.library\\.e\\.id: (?!(undefined))+/,\n\t\t\"Missing source directory caused error\");\n});\n\ntest(\"validate: test directory does not exist\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\tconst dirExists = sinon.stub(themeLibraryFormatter, \"dirExists\");\n\tdirExists.onFirstCall().resolves(true);\n\tdirExists.onSecondCall().resolves(false);\n\n\tawait themeLibraryFormatter.validate(myProject);\n\t// Missing test directory is not an error\n\tt.deepEqual(myProject.resources.configuration.paths.test, null, \"Project test path configuration is set to nul\");\n});\n\ntest(\"format: copyright already configured\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\tsinon.stub(themeLibraryFormatter, \"validate\").resolves();\n\n\tawait themeLibraryFormatter.format();\n\tt.deepEqual(myProject.metadata.copyright, themeLibraryETree.metadata.copyright, \"Copyright was not altered\");\n});\n\ntest(\"format: formats correctly\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\tsinon.stub(themeLibraryFormatter, \"validate\").resolves();\n\n\tawait themeLibraryFormatter.format();\n\tt.deepEqual(myProject, {\n\t\tid: \"theme.library.e.id\",\n\t\tversion: \"1.0.0\",\n\t\tpath: themeLibraryEPath,\n\t\tdependencies: [],\n\t\t_level: 0,\n\t\t_isRoot: true,\n\t\tspecVersion: \"1.1\",\n\t\ttype: \"theme-library\",\n\t\tmetadata: {\n\t\t\tname: \"theme.library.e\",\n\t\t\tcopyright:\n\t\t\t\t\"UI development toolkit for HTML5 (OpenUI5)\\n * (c) Copyright 2009-xxx SAP SE or an SAP affiliate \" +\n\t\t\t\t\"company.\\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\"\n\t\t},\n\t\tresources: {\n\t\t\tconfiguration: {\n\t\t\t\tpaths: {\n\t\t\t\t\tsrc: \"src\",\n\t\t\t\t\ttest: \"test\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tpathMappings: {\n\t\t\t\t\"/resources/\": \"src\",\n\t\t\t\t\"/test-resources/\": \"test\"\n\t\t\t}\n\t\t}\n\t}, \"Project got formatted correctly\");\n});\n\ntest(\"format: configuration test path\", async (t) => {\n\tconst myProject = clone(themeLibraryETree);\n\tconst themeLibraryFormatter = new ThemeLibraryFormatter({project: myProject});\n\tsinon.stub(themeLibraryFormatter, \"validate\").resolves();\n\tmyProject.resources.configuration.paths.test = null;\n\tawait themeLibraryFormatter.format();\n\n\tt.falsy(myProject.resources.pathMappings[\"/test-resources/\"], \"test-resources pathMapping is not set\");\n});\n",
    "lib/lbt/analyzer/XMLTemplateAnalyzer.js": "\"use strict\";\n\n/*\n * TODOS\n * - find better way to distinguish between aggregation tags and control tags\n *   (currently, existence in pool is used to recognize controls)\n * - support alternative namespace URLs for libraries (as used by XSD files)\n * - make set of view types configurable\n * - plugin mechanism to support other special controls\n * - move UI5 specific constants to UI5ClientConstants?\n */\n\nconst xml2js = require(\"xml2js\");\nconst ModuleName = require(\"../utils/ModuleName\");\nconst JSTokenizer = require(\"../utils/JSTokenizer\");\nconst log = require(\"@ui5/logger\").getLogger(\"lbt:analyzer:XMLTemplateAnalyzer\");\n\n// ---------------------------------------------------------------------------------------------------------\n\nconst XHTML_NAMESPACE = \"http://www.w3.org/1999/xhtml\";\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nconst TEMPLATING_NAMESPACE = \"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\";\nconst TEMPLATING_CONDITONAL_TAGS = /^(?:if|repeat)$/;\n\nconst PATTERN_LIBRARY_NAMESPACES = /^([a-zA-Z_$][a-zA-z0-9_$]*(\\.[a-zA-Z_$][a-zA-z0-9_$]*)*)$/;\n\n// component container\nconst COMPONENTCONTAINER_MODULE = \"sap/ui/core/ComponentContainer.js\";\nconst COMPONENTCONTAINER_COMPONENTNAME_ATTRIBUTE = \"name\";\n\n// fragment definition\nconst FRAGMENTDEFINITION_MODULE = \"sap/ui/core/FragmentDefinition.js\";\n\n// fragment\nconst FRAGMENT_MODULE = \"sap/ui/core/Fragment.js\";\nconst FRAGMENT_FRAGMENTNAME_ATTRIBUTE = \"fragmentName\";\nconst FRAGMENT_TYPE_ATTRIBUTE = \"type\";\n\n// different view types\nconst HTMLVIEW_MODULE = \"sap/ui/core/mvc/HTMLView.js\";\nconst JSVIEW_MODULE = \"sap/ui/core/mvc/JSView.js\";\nconst JSONVIEW_MODULE = \"sap/ui/core/mvc/JSONView.js\";\nconst XMLVIEW_MODULE = \"sap/ui/core/mvc/XMLView.js\";\nconst ANYVIEW_VIEWNAME_ATTRIBUTE = \"viewName\";\nconst XMLVIEW_CONTROLLERNAME_ATTRIBUTE = \"controllerName\";\nconst XMLVIEW_RESBUNDLENAME_ATTRIBUTE = \"resourceBundleName\";\nconst XMLVIEW_CORE_REQUIRE_ATTRIBUTE_NS = {\n\turi: \"sap.ui.core\",\n\tlocal: \"require\"\n};\n\n/*\n * Helper to simplify access to node attributes.\n */\nfunction getAttribute(node, attr) {\n\treturn (node.$ && node.$[attr] && node.$[attr].value) || null;\n}\nfunction getAttributeNS(node, attrNS) {\n\tconst attr = Object.values(node.$ || []).find((n) => {\n\t\treturn n.uri === attrNS.uri && n.local === attrNS.local;\n\t});\n\treturn (attr && attr.value) || null;\n}\n\n/**\n * A dependency analyzer for XMLViews and XMLFragments.\n *\n * Parses the XML, collects controls and adds them as dependency to the ModuleInfo object.\n * Additionally, some special dependencies are handled:\n * <ul>\n * <li>controller of the view</li>\n * <li>resource bundle (note: locale dependent dependencies can't be modeled yet in ModuleInfo</li>\n * <li>component referenced via ComponentContainer control</li>\n * <li>embedded fragments or views</li>\n * </ul>\n *\n * In an XMLView, there usually exist 3 categories of element nodes: controls, aggregations\n * of cardinality 'multiple' and non-UI5 nodes (e.g. XHTML or SVG). The third category usually\n * can be identified by its namespace. To distinguish between the first and the second\n * category, this analyzer uses a ResourcePool (provided by the caller and usually derived from the\n * library classpath). When the qualified node name is contained in the pool, it is assumed to\n * represent a control, otherwise it is ignored.\n *\n * In certain cases this might give wrong results, but loading the metadata for each control\n * to implement the exactly same logic as used in the runtime XMLTemplateProcessor would be to\n * expensive and require too much runtime.\n *\n * @author Frank Weigel\n * @since 1.23.0\n * @private\n */\nclass XMLTemplateAnalyzer {\n\tconstructor(pool) {\n\t\tthis._pool = pool;\n\t\tthis._parser = new xml2js.Parser({\n\t\t\texplicitRoot: false,\n\t\t\texplicitChildren: true,\n\t\t\tpreserveChildrenOrder: true,\n\t\t\txmlns: true\n\t\t});\n\t\tthis.busy = false;\n\t}\n\n\t/**\n\t * Add a dependency if it is new.\n\t *\n\t * @param {string} moduleName\n\t * @param {boolean} conditional\n\t */\n\t_addDependency(moduleName, conditional) {\n\t\t// don't add references to 'self'\n\t\tif ( this.info.name === moduleName ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// don't add properties with data binding syntax\n\t\tif (moduleName.includes(\"{\") || moduleName.includes(\"}\")) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.info.addDependency(moduleName, conditional);\n\t}\n\n\t/**\n\t * Enrich the given ModuleInfo for an XMLView.\n\t *\n\t * @param {string} xml xml string to be analyzed\n\t * @param {ModuleInfo} info ModuleInfo to enrich\n\t * @returns {Promise<ModuleInfo>} the created ModuleInfo\n\t */\n\tanalyzeView(xml, info) {\n\t\treturn this._analyze(xml, info, false);\n\t}\n\n\t/**\n\t * Enrich the given ModuleInfo for a fragment (XML).\n\t *\n\t * @param {string} xml xml string to be analyzed\n\t * @param {ModuleInfo} info ModuleInfo to enrich\n\t * @returns {Promise<ModuleInfo>} the created ModuleInfo\n\t */\n\tanalyzeFragment(xml, info) {\n\t\treturn this._analyze(xml, info, true);\n\t}\n\n\t_analyze(xml, info, isFragment) {\n\t\tif ( this.busy ) {\n\t\t\t// TODO delegate to fresh instances instead\n\t\t\tthrow new Error(\"analyzer is busy\");\n\t\t}\n\n\t\tthis.info = info;\n\t\tthis.conditional = false;\n\t\tthis.templateTag = false;\n\t\tthis.promises = [];\n\t\tthis.busy = true;\n\n\t\treturn new Promise( (resolve, reject) => {\n\t\t\tthis._parser.parseString(xml, (err, result) => {\n\t\t\t\t// parse error\n\t\t\t\tif ( err ) {\n\t\t\t\t\tthis.busy = false;\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( !result ) {\n\t\t\t\t\t// Handle empty xml views/fragments\n\t\t\t\t\treject(new Error(\"Invalid empty XML document: \" + info.name));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// console.log(result);\n\t\t\t\t// clear();\n\t\t\t\tif ( isFragment ) {\n\t\t\t\t\t// all fragments implicitly depend on the fragment class\n\t\t\t\t\tthis.info.addImplicitDependency(FRAGMENT_MODULE);\n\t\t\t\t\tthis._analyzeNode(result);\n\t\t\t\t} else {\n\t\t\t\t\t// views require a special handling of the root node\n\t\t\t\t\tthis._analyzeViewRootNode(result);\n\t\t\t\t}\n\n\t\t\t\tPromise.all(this.promises).then( () => {\n\t\t\t\t\tthis.busy = false;\n\t\t\t\t\tresolve(info);\n\t\t\t\t});\n\t\t\t\t// console.log(\"Collected info for %s:\", info.name, info);\n\t\t\t});\n\t\t});\n\t}\n\n\t_analyzeViewRootNode(node) {\n\t\tthis.info.addImplicitDependency(XMLVIEW_MODULE);\n\n\t\tconst controllerName = getAttribute(node, XMLVIEW_CONTROLLERNAME_ATTRIBUTE);\n\t\tif ( controllerName ) {\n\t\t\tthis._addDependency( ModuleName.fromUI5LegacyName(controllerName, \".controller.js\"), this.conditional );\n\t\t}\n\n\t\tconst resourceBundleName = getAttribute(node, XMLVIEW_RESBUNDLENAME_ATTRIBUTE);\n\t\tif ( resourceBundleName ) {\n\t\t\tconst resourceBundleModuleName = ModuleName.fromUI5LegacyName(resourceBundleName, \".properties\");\n\t\t\tlog.verbose(\"found dependency to resource bundle %s\", resourceBundleModuleName);\n\t\t\t// TODO locale dependent dependencies: this._addDependency(resourceBundleModuleName);\n\t\t\tthis._addDependency( resourceBundleModuleName, this.conditional );\n\t\t}\n\n\t\tthis._analyzeCoreRequire(node);\n\n\t\tthis._analyzeChildren(node);\n\t}\n\n\t_analyzeNode(node) {\n\t\tconst namespace = node.$ns.uri || \"\";\n\t\tconst localName = node.$ns.local;\n\n\t\tconst oldConditional = this.conditional;\n\t\tconst oldTemplateTag = this.templateTag;\n\n\t\tif ( namespace === TEMPLATING_NAMESPACE ) {\n\t\t\tif ( TEMPLATING_CONDITONAL_TAGS.test(localName) ) {\n\t\t\t\tthis.conditional = true;\n\t\t\t}\n\t\t\tthis.templateTag = true;\n\t\t} else if ( namespace === XHTML_NAMESPACE || namespace === SVG_NAMESPACE ) {\n\n\t\t\t// ignore XHTML and SVG nodes\n\n\t\t} else if ( PATTERN_LIBRARY_NAMESPACES.test(namespace) ) {\n\t\t\t// looks like a UI5 library or package name\n\t\t\tconst moduleName = ModuleName.fromUI5LegacyName( (namespace ? namespace + \".\" : \"\") + localName );\n\n\t\t\t// ignore FragmentDefinition (also skipped by runtime XMLTemplateProcessor)\n\t\t\tif ( FRAGMENTDEFINITION_MODULE !== moduleName ) {\n\t\t\t\tthis._analyzeCoreRequire(node);\n\t\t\t\tthis.promises.push(this._analyzeModuleDependency(node, moduleName, this.conditional));\n\t\t\t}\n\t\t}\n\n\t\tthis._analyzeChildren(node);\n\n\t\t// restore conditional and templateTag state of the outer block\n\t\tthis.conditional = oldConditional;\n\t\tthis.templateTag = oldTemplateTag;\n\t}\n\n\t_analyzeChildren(node) {\n\t\tif ( Array.isArray(node.$$) ) {\n\t\t\tnode.$$.forEach( (child) => {\n\t\t\t\treturn this._analyzeNode( child);\n\t\t\t});\n\t\t}\n\t}\n\n\t_analyzeCoreRequire(node) {\n\t\tconst coreRequire = getAttributeNS(node, XMLVIEW_CORE_REQUIRE_ATTRIBUTE_NS);\n\t\tlet requireContext;\n\t\tif ( coreRequire ) {\n\t\t\t// expression binding syntax within coreRequire and a template parent node\n\t\t\t// These expressions cannot be parsed using parseJS and if within a template tag\n\t\t\t// represent an expression binding which needs to be evaluated before analysis\n\t\t\t// e.g. \"{= '{Handler: \\'' + ${myActions > handlerModule} + '\\'}'}\"\n\t\t\tif ((coreRequire.startsWith(\"{=\") || coreRequire.startsWith(\"{:=\")) && this.templateTag) {\n\t\t\t\tlog.verbose(\n\t\t\t\t\t`Ignoring core:require: '%s' on Node %s:%s contains ` +\n\t\t\t\t\t`an expression binding and is within a 'template' Node`,\n\t\t\t\t\tcoreRequire, node.$ns.uri, node.$ns.local\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\trequireContext = JSTokenizer.parseJS(coreRequire);\n\t\t\t} catch (e) {\n\t\t\t\tlog.error(\n\t\t\t\t\t\"Ignoring core:require: '%s' can't be parsed on Node %s:%s\",\n\t\t\t\t\tcoreRequire, node.$ns.uri, node.$ns.local\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( requireContext ) {\n\t\t\t\tObject.keys(requireContext).forEach((key) => {\n\t\t\t\t\tconst requireJsName = requireContext[key];\n\t\t\t\t\tif ( requireJsName && typeof requireJsName === \"string\" ) {\n\t\t\t\t\t\tthis._addDependency(ModuleName.fromRequireJSName(requireJsName), this.conditional);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.error(`Ignoring core:require: '${key}' refers to invalid module name '${requireJsName}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _analyzeModuleDependency(node, moduleName, conditional) {\n\t\ttry {\n\t\t\tawait this._pool.findResource(moduleName);\n\n\t\t\tthis._addDependency(moduleName, conditional);\n\n\t\t\t// handle special controls that reference other entities via name\n\t\t\t// - (HTML|JS|JSON|XML)View reference another view by 'viewName'\n\t\t\t// - ComponentContainer reference another component by 'componentName'\n\t\t\t// - Fragment references a fragment by 'fragmentName' . 'type'\n\n\t\t\tif ( moduleName === COMPONENTCONTAINER_MODULE ) {\n\t\t\t\tconst componentName = getAttribute(node, COMPONENTCONTAINER_COMPONENTNAME_ATTRIBUTE);\n\t\t\t\tif ( componentName ) {\n\t\t\t\t\tconst componentModuleName =\n\t\t\t\t\t\tModuleName.fromUI5LegacyName( componentName, \"/Component.js\" );\n\t\t\t\t\tthis._addDependency(componentModuleName, conditional);\n\t\t\t\t}\n\t\t\t\t// TODO what about component.json? handle it transitively via Component.js?\n\t\t\t} else if ( moduleName === FRAGMENT_MODULE ) {\n\t\t\t\tconst fragmentName = getAttribute(node, FRAGMENT_FRAGMENTNAME_ATTRIBUTE);\n\t\t\t\tconst type = getAttribute(node, FRAGMENT_TYPE_ATTRIBUTE);\n\t\t\t\tif ( fragmentName && type ) {\n\t\t\t\t\tconst fragmentModuleName =\n\t\t\t\t\t\tModuleName.fromUI5LegacyName( fragmentName, this._getFragmentExtension(type) );\n\t\t\t\t\t// console.log(\"child fragment detected %s\", fragmentModuleName);\n\t\t\t\t\tthis._addDependency(fragmentModuleName, conditional);\n\t\t\t\t}\n\t\t\t} else if ( moduleName === HTMLVIEW_MODULE ) {\n\t\t\t\tconst viewName = getAttribute(node, ANYVIEW_VIEWNAME_ATTRIBUTE);\n\t\t\t\tif ( viewName ) {\n\t\t\t\t\tconst childViewModuleName = ModuleName.fromUI5LegacyName( viewName, \".view.html\" );\n\t\t\t\t\t// console.log(\"child view detected %s\", childViewModuleName);\n\t\t\t\t\tthis._addDependency(childViewModuleName, conditional);\n\t\t\t\t}\n\t\t\t} else if ( moduleName === JSVIEW_MODULE ) {\n\t\t\t\tconst viewName = getAttribute(node, ANYVIEW_VIEWNAME_ATTRIBUTE);\n\t\t\t\tif ( viewName ) {\n\t\t\t\t\tconst childViewModuleName = ModuleName.fromUI5LegacyName( viewName, \".view.js\" );\n\t\t\t\t\t// console.log(\"child view detected %s\", childViewModuleName);\n\t\t\t\t\tthis._addDependency(childViewModuleName, conditional);\n\t\t\t\t}\n\t\t\t} else if ( moduleName === JSONVIEW_MODULE ) {\n\t\t\t\tconst viewName = getAttribute(node, ANYVIEW_VIEWNAME_ATTRIBUTE);\n\t\t\t\tif ( viewName ) {\n\t\t\t\t\tconst childViewModuleName = ModuleName.fromUI5LegacyName( viewName, \".view.json\" );\n\t\t\t\t\t// console.log(\"child view detected %s\", childViewModuleName);\n\t\t\t\t\tthis._addDependency(childViewModuleName, conditional);\n\t\t\t\t}\n\t\t\t} else if ( moduleName === XMLVIEW_MODULE ) {\n\t\t\t\tconst viewName = getAttribute(node, ANYVIEW_VIEWNAME_ATTRIBUTE);\n\t\t\t\tif ( viewName ) {\n\t\t\t\t\tconst childViewModuleName = ModuleName.fromUI5LegacyName( viewName, \".view.xml\" );\n\t\t\t\t\t// console.log(\"child view detected %s\", childViewModuleName);\n\t\t\t\t\tthis._addDependency(childViewModuleName, conditional);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// ignore missing resources\n\t\t\t// console.warn( \"node not found %s\", moduleName);\n\t\t}\n\t}\n\n\t_getFragmentExtension(type) {\n\t\treturn \".fragment.\" + type.toLowerCase();\n\t}\n}\n\n\nmodule.exports = XMLTemplateAnalyzer;\n",
    "lib/processors/jsdoc/lib/createIndexFiles.js": "/*\n * Node script to create cross-library API index files for use in the UI5 SDKs.\n *\n * (c) Copyright 2009-2021 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n\n\"use strict\";\nconst path = require(\"path\");\nconst log = (function() {\n\ttry {\n\t\treturn require(\"@ui5/logger\").getLogger(\"builder:processors:jsdoc:create-api-index\");\n\t} catch (error) {\n\t\t/* eslint-disable no-console */\n\t\treturn {\n\t\t\tinfo: function info(...msg) {\n\t\t\t\tconsole.log(\"[INFO]\", ...msg);\n\t\t\t},\n\t\t\terror: function error(...msg) {\n\t\t\t\tconsole.error(...msg);\n\t\t\t}\n\t\t};\n\t\t/* eslint-enable no-console */\n\t}\n}());\n\nfunction createIndexFiles(versionInfoFile, unpackedTestresourcesRoot, targetFile, targetFileDeprecated, targetFileExperimental, targetFileSince, options) {\n\tconst fs = options && options.fs || require(\"fs\");\n\tconst returnOutputFiles = options && !!options.returnOutputFiles;\n\n\tlog.info(\"creating API index files\");\n\tlog.info(\"  sap-ui-version.json: \" + versionInfoFile);\n\tlog.info(\"  unpacked test-resources: \" + unpackedTestresourcesRoot);\n\tlog.info(\"  target file: \" + targetFile);\n\tlog.info(\"  target file deprecated: \" + targetFileDeprecated);\n\tlog.info(\"  target file experimental: \" + targetFileExperimental);\n\tlog.info(\"  target file since: \" + targetFileSince);\n\tif (options && options.fs) {\n\t\tlog.info(\"Using custom fs\");\n\t}\n\tif (returnOutputFiles) {\n\t\tlog.info(\"Returning output files instead of writing to fs.\")\n\t}\n\tlog.info(\"\");\n\n\t// Deprecated, Experimental and Since collections\n\tlet oListCollection = {\n\t\tdeprecated: {\n\t\t\tnoVersion: {\n\t\t\t\tapis: []\n\t\t\t}\n\t\t},\n\t\texperimental: {\n\t\t\tnoVersion: {\n\t\t\t\tapis: []\n\t\t\t}\n\t\t},\n\t\tsince: {}\n\t};\n\n\tfunction readJSONFile(file) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tfs.readFile(file, 'utf8', function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\t// Handle empty files scenario\n\t\t\t\t\tif (data.trim() === \"\") {\n\t\t\t\t\t\tresolve({});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(JSON.parse(String(data)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction mkdirSync(dir) {\n\t\tif (dir && !fs.existsSync(dir)) {\n\t\t\tmkdirSync( path.dirname(dir) );\n\t\t\tfs.mkdirSync(dir);\n\t\t}\n\t}\n\n\tfunction writeJSON(file, content) {\n\t\treturn new Promise(function(resolve,reject) {\n\t\t\t// Create dir if it does not exist\n\t\t\tmkdirSync( path.dirname(file) );\n\t\t\tfs.writeFile(file, JSON.stringify(content), \"utf-8\", function(err) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(true);\n\t\t\t});\n\t\t});\n\t}\n\n\t/*\n\t * Extracts main symbol information from a library api.json.\n\t * Also collects deprecated, experimental and since api's.\n\t * Returns a promise that resolves with an array of symbols.\n\t */\n\tfunction createSymbolSummaryForLib(lib) {\n\t\tlet file = path.join(unpackedTestresourcesRoot, lib.replace(/\\./g, \"/\"), \"designtime/api.json\");\n\n\t\treturn readJSONFile(file).then(function (apijson) {\n\t\t\tif (!apijson.hasOwnProperty(\"symbols\") || !Array.isArray(apijson.symbols)) {\n\t\t\t\t// Ignore libraries with invalid api.json content like empty object or non-array \"symbols\" property.\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn apijson.symbols.map(symbol => {\n\t\t\t\tlet oReturn = {\n\t\t\t\t\tname: symbol.name,\n\t\t\t\t\tkind: symbol.kind,\n\t\t\t\t\tvisibility: symbol.visibility,\n\t\t\t\t\textends: symbol.extends,\n\t\t\t\t\timplements: symbol.implements,\n\t\t\t\t\tlib: lib\n\t\t\t\t};\n\t\t\t\t// We add deprecated member only when the control is deprecated to keep file size at check\n\t\t\t\tif (symbol.deprecated) {\n\t\t\t\t\toReturn.deprecated = true;\n\t\t\t\t}\n\t\t\t\tcollectLists(symbol);\n\t\t\t\treturn oReturn;\n\t\t\t});\n\t\t})\n\t}\n\n\t/*\n\t * Collects Deprecated, Experimental and Since data from passed symbol\n\t * including symbol itself, methods and events.\n\t */\n\tfunction collectLists(oSymbol) {\n\n\t\tfunction addData(oDataType, oEntityObject, sObjectType, sSymbolName) {\n\t\t\tlet sSince = oDataType !== \"since\" ? oEntityObject[oDataType].since : oEntityObject.since,\n\t\t\t\toData = {\n\t\t\t\t\tcontrol: sSymbolName,\n\t\t\t\t\ttext: oEntityObject[oDataType].text || oEntityObject.description,\n\t\t\t\t\ttype: sObjectType,\n\t\t\t\t\t\"static\": !!oEntityObject.static,\n\t\t\t\t\tvisibility: oEntityObject.visibility\n\t\t\t\t};\n\n\t\t\t// For class we skip entityName\n\t\t\tif (sObjectType !== \"class\") {\n\t\t\t\toData.entityName = oEntityObject.name;\n\t\t\t}\n\n\t\t\tif (sSince && sSince !== \"undefined\" /* Sometimes sSince comes as string \"undefined\" */) {\n\t\t\t\t// take only major and minor versions\n\t\t\t\tlet sVersion = sSince.split(\".\").slice(0, 2).join(\".\");\n\n\t\t\t\toData.since = sSince;\n\n\t\t\t\tif (!oListCollection[oDataType][sVersion]) {\n\t\t\t\t\toListCollection[oDataType][sVersion] = {\n\t\t\t\t\t\tname: sVersion,\n\t\t\t\t\t\tapis: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toListCollection[oDataType][sVersion].apis.push(oData);\n\t\t\t} else if (oDataType !== \"since\" /* noVersion does not make sense for since and will fail */) {\n\t\t\t\toListCollection[oDataType].noVersion.apis.push(oData);\n\t\t\t}\n\t\t}\n\n\t\t// Classes\n\t\tif (oSymbol.deprecated) {\n\t\t\taddData(\"deprecated\", oSymbol, \"class\", oSymbol.name);\n\t\t}\n\n\t\tif (oSymbol.experimental) {\n\t\t\taddData(\"experimental\", oSymbol, \"class\", oSymbol.name);\n\t\t}\n\n\t\tif (oSymbol.since && oSymbol.since !== \"undefined\" /* Sometimes sSince comes as string \"undefined\" */) {\n\t\t\taddData(\"since\", oSymbol, \"class\", oSymbol.name);\n\t\t}\n\n\t\t// Methods\n\t\toSymbol.methods && oSymbol.methods.forEach(oMethod => {\n\t\t\tif (oMethod.deprecated) {\n\t\t\t\taddData(\"deprecated\", oMethod, \"methods\", oSymbol.name);\n\t\t\t}\n\n\t\t\tif (oMethod.experimental) {\n\t\t\t\taddData(\"experimental\", oMethod, \"methods\", oSymbol.name);\n\t\t\t}\n\n\t\t\tif (oMethod.since) {\n\t\t\t\taddData(\"since\", oMethod, \"methods\", oSymbol.name);\n\t\t\t}\n\t\t});\n\n\t\t// Events\n\t\toSymbol.events && oSymbol.events.forEach(oEvent => {\n\t\t\tif (oEvent.deprecated) {\n\t\t\t\taddData(\"deprecated\", oEvent, \"events\", oSymbol.name);\n\t\t\t}\n\n\t\t\tif (oEvent.experimental) {\n\t\t\t\taddData(\"experimental\", oEvent, \"events\", oSymbol.name);\n\t\t\t}\n\n\t\t\tif (oEvent.since) {\n\t\t\t\taddData(\"since\", oEvent, \"events\", oSymbol.name);\n\t\t\t}\n\t\t});\n\n\t}\n\n\tfunction deepMerge(arrayOfArrays) {\n\t\treturn arrayOfArrays.reduce((array, items) => {\n\t\t\tarray.push.apply(array, items);\n\t\t\treturn array;\n\t\t}, []);\n\t}\n\n\tfunction expandHierarchyInfo(symbols) {\n\t\tlet byName = new Map();\n\t\tsymbols.forEach(symbol => {\n\t\t\tbyName.set(symbol.name, symbol);\n\t\t});\n\t\tsymbols.forEach(symbol => {\n\t\t\tlet parent = symbol.extends && byName.get(symbol.extends);\n\t\t\tif (parent) {\n\t\t\t\tparent.extendedBy = parent.extendedBy ||  [];\n\t\t\t\tparent.extendedBy.push(symbol.name);\n\t\t\t}\n\t\t\tif (symbol.implements) {\n\t\t\t\tsymbol.implements.forEach(intfName => {\n\t\t\t\t\tlet intf = byName.get(intfName);\n\t\t\t\t\tif (intf) {\n\t\t\t\t\t\tintf.implementedBy = intf.implementedBy ||  [];\n\t\t\t\t\t\tintf.implementedBy.push(symbol.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\treturn symbols;\n\t}\n\n\tfunction convertListToTree(symbols) {\n\t\tlet aTree = [];\n\n\t\t// Filter out excluded libraries\n\t\tsymbols = symbols.filter(({lib}) => [\"sap.ui.documentation\"].indexOf(lib) === -1);\n\n\t\t// Create treeName and displayName\n\t\tsymbols.forEach(oSymbol => {\n\t\t\toSymbol.treeName = oSymbol.name.replace(/^module:/, \"\").replace(/\\//g, \".\");\n\t\t\toSymbol.displayName = oSymbol.treeName.split(\".\").pop();\n\t\t});\n\n\t\t// Create missing - virtual namespaces\n\t\tsymbols.forEach(oSymbol => {\n\t\t\toSymbol.treeName.split(\".\").forEach((sPart, i, a) => {\n\t\t\t\tlet sName = a.slice(0, (i + 1)).join(\".\");\n\n\t\t\t\tif (!symbols.find(o => o.treeName === sName)) {\n\t\t\t\t\tsymbols.push({\n\t\t\t\t\t\tname: sName,\n\t\t\t\t\t\ttreeName: sName,\n\t\t\t\t\t\tdisplayName: sPart,\n\t\t\t\t\t\tlib: oSymbol.lib,\n\t\t\t\t\t\tkind: \"namespace\",\n\t\t\t\t\t\tvisibility: \"public\" // Virtual namespace are always public\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Discover parents\n\t\tsymbols.forEach(oSymbol => {\n\t\t\tlet aParent = oSymbol.treeName.split(\".\"),\n\t\t\t\tsParent;\n\n\t\t\t// Extract parent name\n\t\t\taParent.pop();\n\t\t\tsParent = aParent.join(\".\");\n\n\t\t\t// Mark parent\n\t\t\tif (symbols.find(({treeName}) => treeName === sParent)) {\n\t\t\t\toSymbol.parent = sParent;\n\t\t\t}\n\t\t});\n\n\t\t// Sort the list before building the tree\n\t\tsymbols.sort((a, b) => {\n\t\t\tlet sA = a.treeName.toUpperCase(),\n\t\t\t\tsB = b.treeName.toUpperCase();\n\n\t\t\tif (sA < sB) return -1;\n\t\t\tif (sA > sB) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\t\t// Build tree\n\t\tsymbols.forEach(oSymbol => {\n\t\t\tif (oSymbol.parent) {\n\t\t\t\tlet oParent = symbols.find(({treeName}) => treeName === oSymbol.parent);\n\n\t\t\t\tif (!oParent.nodes) oParent.nodes = [];\n\t\t\t\toParent.nodes.push(oSymbol);\n\t\t\t} else {\n\t\t\t\taTree.push(oSymbol);\n\t\t\t}\n\t\t});\n\n\t\t// Custom sort first level tree items - \"sap\" namespace should be on top\n\t\taTree.sort((a, b) => {\n\t\t\tlet sA = a.displayName.toUpperCase(),\n\t\t\t\tsB = b.displayName.toUpperCase();\n\n\t\t\tif (sA === \"SAP\") return -1;\n\t\t\tif (sB === \"SAP\") return 1;\n\t\t\tif (sA < sB) return -1;\n\t\t\tif (sA > sB) return 1;\n\n\t\t\treturn 0;\n\t\t});\n\n\t\t// walk the tree *from bottom to top*\n\t\t// in order to detect all parent nodes\n\t\t// that should be marked as content-deprecated\n\t\t// because their children are explicitly deprecated\n\t\ttoChildrenFirstArray(aTree).forEach(markDeprecatedNodes);\n\n\t\t// Clean tree - keep file size down\n\t\tfunction cleanTree (oSymbol) {\n\t\t\tdelete oSymbol.treeName;\n\t\t\tdelete oSymbol.parent;\n\t\t\tif (oSymbol.nodes) {\n\t\t\t\toSymbol.nodes.forEach(o => cleanTree(o));\n\t\t\t}\n\t\t}\n\t\taTree.forEach(o => cleanTree(o));\n\n\t\treturn aTree;\n\t}\n\n\t/**\n\t * Creates an array of all tree nodes,\n\t * where the child nodes precede the parent nodes\n\t * @param aTree\n\t * @returns {Array}\n\t */\n\tfunction toChildrenFirstArray(aTree) {\n\t\tvar aChildrenFirst = [];\n\t\tfunction addToLeafsFirst(node) {\n\t\t\tif (node.nodes) {\n\t\t\t\tnode.nodes.forEach(function(child) {\n\t\t\t\t\taddToLeafsFirst(child);\n\t\t\t\t});\n\t\t\t}\n\t\t\taChildrenFirst.push(node);\n\t\t}\n\t\taTree.forEach(function(parent) {\n\t\t\taddToLeafsFirst(parent);\n\t\t});\n\t\treturn aChildrenFirst;\n\t}\n\n\t/**\n\t * Sets the <code>bAllContentDeprecated</code> flag of each symbol\n\t *\n\t * The <code>bAllContentDeprecated</code> flag differs from the already existing <code>deprecated</code> flag\n\t * in the following respect:\n\t *\n\t *     1) if a node is deprecated => all its children should be marked as <code>bAllContentDeprecated</code>\n\t *        (even if not explicitly deprecated in their JSDoc)\n\t *     2) if all children of the node are deprecated => that node should also be marked as <code>bAllContentDeprecated</code>\n\t *        (even if not explicitly deprecated in its JSDoc)\n\t *     3) if a node is explicitly deprecated in its JSDoc => it should also be marked as <code>bAllContentDeprecated</code>\n\t *        (for consistency)\n\t *\n\t * @param oSymbol\n\t */\n\tfunction markDeprecatedNodes(oSymbol) {\n\t\t// 1. If the symbol is deprecated all content in it should be also deprecated\n\t\tif (oSymbol.deprecated) {\n\t\t\t// 2. If all content in the symbol is deprecated, flag should explicitly be passed to its child nodes.\n\t\t\tpropagateFlags(oSymbol, { bAllContentDeprecated: true });\n\t\t} else {\n\t\t\t// 3. If all children are deprecated, then the parent is marked as content-deprecated\n\t\t\toSymbol.bAllContentDeprecated = !!oSymbol.nodes && oSymbol.nodes.every(node => node.bAllContentDeprecated);\n\t\t}\n\t}\n\n\t/**\n\t * Merges the set of flags from <code>oFlags</code> into the given <code>oSymbol</code>\n\t * @param oSymbol\n\t * @param oFlags\n\t */\n\tfunction propagateFlags(oSymbol, oFlags) {\n\t\tObject.assign(oSymbol, oFlags);\n\t\tif (oSymbol.nodes) {\n\t\t\toSymbol.nodes.forEach(node => {\n\t\t\t\tpropagateFlags(node, oFlags);\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction createOverallIndex() {\n\t\tlet version = \"0.0.0\";\n\t\tconst filesToReturn = {};\n\n\t\tvar p = readJSONFile(versionInfoFile)\n\t\t\t.then(versionInfo => {\n\t\t\t\tversion = versionInfo.version;\n\t\t\t\treturn Promise.all(\n\t\t\t\t\tversionInfo.libraries.map(\n\t\t\t\t\t\tlib => createSymbolSummaryForLib(lib.name).catch(err => {\n\t\t\t\t\t\t\t// ignore 'file not found' errors as some libs don't have an api.json (themes, server libs)\n\t\t\t\t\t\t\tif (err.code === 'ENOENT') {\n\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then(deepMerge)\n\t\t\t.then(expandHierarchyInfo)\n\t\t\t.then(convertListToTree)\n\t\t\t.then(symbols => {\n\t\t\t\tlet result = {\n\t\t\t\t\t\"$schema-ref\": \"http://schemas.sap.com/sapui5/designtime/api-index.json/1.0\",\n\t\t\t\t\tversion: version,\n\t\t\t\t\tlibrary: \"*\",\n\t\t\t\t\tsymbols: symbols\n\t\t\t\t};\n\t\t\t\tif (returnOutputFiles) {\n\t\t\t\t\tfilesToReturn[targetFile] = JSON.stringify(result);\n\t\t\t\t} else {\n\t\t\t\t\treturn writeJSON(targetFile, result);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t/* Lists - modify and cleanup */\n\t\t\t\tlet sortList = function (oList) {\n\t\t\t\t\t/* Sorting since records */\n\t\t\t\t\tlet aKeys = Object.keys(oList),\n\t\t\t\t\t\toSorted = {};\n\n\t\t\t\t\taKeys.sort((a, b) => {\n\t\t\t\t\t\tlet aA = a.split(\".\"),\n\t\t\t\t\t\t\taB = b.split(\".\");\n\n\t\t\t\t\t\tif (a === \"noVersion\") {\n\t\t\t\t\t\t\treturn 1; /* No version always at end of list */\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (b === \"noVersion\") {\n\t\t\t\t\t\t\treturn -1; /* No version always at end of list */\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Normalize old versions 1.4 to 1.04 for proper sorting\n\t\t\t\t\t\ta = [aA[0], ('0' + aA[1]).slice(-2)].join(\"\");\n\t\t\t\t\t\tb = [aB[0], ('0' + aB[1]).slice(-2)].join(\"\");\n\n\t\t\t\t\t\t// Sort descending\n\t\t\t\t\t\treturn parseInt(b, 10) - parseInt(a, 10);\n\t\t\t\t\t});\n\n\t\t\t\t\taKeys.forEach((sKey) => {\n\t\t\t\t\t\toSorted[sKey] = oList[sKey];\n\t\t\t\t\t});\n\n\t\t\t\t\treturn oSorted;\n\t\t\t\t};\n\n\t\t\t\t/* Since */\n\t\t\t\toListCollection.since = sortList(oListCollection.since);\n\n\t\t\t\t/* Deprecated */\n\t\t\t\toListCollection.deprecated = sortList(oListCollection.deprecated);\n\t\t\t\tif (!oListCollection.deprecated.noVersion.apis.length) {\n\t\t\t\t\tdelete oListCollection.deprecated.noVersion;\n\t\t\t\t}\n\n\t\t\t\t/* Experimental */\n\t\t\t\toListCollection.experimental = sortList(oListCollection.experimental);\n\t\t\t\tif (!oListCollection.experimental.noVersion.apis.length) {\n\t\t\t\t\tdelete oListCollection.experimental.noVersion;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tif (returnOutputFiles) {\n\t\t\t\t\tfilesToReturn[targetFileDeprecated] = JSON.stringify(oListCollection.deprecated);\n\t\t\t\t\tfilesToReturn[targetFileExperimental] = JSON.stringify(oListCollection.experimental);\n\t\t\t\t\tfilesToReturn[targetFileSince] = JSON.stringify(oListCollection.since);\n\t\t\t\t\treturn filesToReturn;\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t// write deprecated, experimental and since collections in the respective index files\n\t\t\t\t\t\twriteJSON(targetFileDeprecated, oListCollection.deprecated),\n\t\t\t\t\t\twriteJSON(targetFileExperimental, oListCollection.experimental),\n\t\t\t\t\t\twriteJSON(targetFileSince, oListCollection.since)\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlog.error(\"**** failed to create API index for libraries:\", err)\n\t\t\t\tthrow err;\n\t\t\t});\n\n\t\treturn p;\n\t}\n\n\treturn createOverallIndex();\n\n}\n\nmodule.exports = createIndexFiles;\n",
    "lib/types/AbstractFormatter.js": "const fs = require(\"graceful-fs\");\n\n/**\n * Base class for the formatter implementation of a project type.\n *\n * @abstract\n */\nclass AbstractFormatter {\n\t/**\n\t * Constructor\n\t *\n\t * @param {object} parameters\n\t * @param {object} parameters.project Project\n\t */\n\tconstructor({project}) {\n\t\tif (new.target === AbstractFormatter) {\n\t\t\tthrow new TypeError(\"Class 'AbstractFormatter' is abstract\");\n\t\t}\n\t\tthis._project = project;\n\t}\n\n\t/**\n\t * Formats and validates the project\n\t *\n\t * @returns {Promise}\n\t */\n\tformat() {\n\t\tthrow new Error(\"AbstractFormatter: Function format Not implemented\");\n\t}\n\n\t/**\n\t * Validates the project\n\t *\n\t * @returns {Promise} resolves if successfully validated\n\t * @throws {Error} if validation fails\n\t */\n\tvalidate() {\n\t\tthrow new Error(\"AbstractFormatter: Function validate Not implemented\");\n\t}\n\n\t/**\n\t * Checks whether or not the given input is a directory on the file system.\n\t *\n\t * @param {string} dirPath directory\n\t * @returns {Promise<boolean>} whether or not the given directory exists.\n\t * <code>true</code> directory exists\n\t * <code>false</code> directory does not exist\n\t */\n\tdirExists(dirPath) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfs.stat(dirPath, (err, stats) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === \"ENOENT\") { // \"File or directory does not exist\"\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(stats.isDirectory());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = AbstractFormatter;\n",
    "test/lib/lbt/analyzer/JSModuleAnalyzer.js": "const test = require(\"ava\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst esprima = require(\"esprima\");\nconst ModuleInfo = require(\"../../../../lib/lbt/resources/ModuleInfo\");\nconst JSModuleAnalyzer = require(\"../../../../lib/lbt/analyzer/JSModuleAnalyzer\");\n\nconst EXPECTED_MODULE_NAME = \"sap/ui/testmodule.js\";\n\nconst EXPECTED_DECLARE_DEPENDENCIES = [\n\t\"jquery.sap.global.js\",\n\t\"top/require/void.js\", \"top/require/var.js\", \"top/require/assign.js\", \"top/requireSync/var.js\",\n\t\"top/requireSync/assign.js\", \"block/require/void.js\", \"block/require/var.js\", \"block/require/assign.js\",\n\t\"block/requireSync/var.js\", \"block/requireSync/assign.js\", \"nested/scope/require/void.js\",\n\t\"nested/scope/require/var.js\", \"nested/scope/require/assign.js\", \"nested/scope/requireSync/var.js\",\n\t\"nested/scope/requireSync/assign.js\", \"nested/scope2/require/void.js\", \"nested/scope2/require/var.js\",\n\t\"nested/scope2/require/assign.js\", \"nested/scope2/requireSync/var.js\", \"nested/scope2/requireSync/assign.js\"\n];\n\nconst EXPECTED_DEFINE_DEPENDENCIES_NO_LEGACY = [\n\t\"ui5loader-autoconfig.js\",\n\t\"define/arg1.js\", \"define/arg2.js\"\n];\n\nconst EXPECTED_DEFINE_DEPENDENCIES_WITH_LEGACY = [\n\t\"jquery.sap.global.js\",\n\t\"define/arg1.js\", \"define/arg2.js\",\n\t\"require/arg1.js\"\n];\n\nconst NO_DEPENDENCIES = [];\n\nfunction analyze(file, name) {\n\tif ( arguments.length === 1 ) {\n\t\tname = file;\n\t}\n\treturn new Promise( (resolve, reject) => {\n\t\tfile = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"lbt\", file);\n\t\tfs.readFile(file, (err, buffer) => {\n\t\t\tif ( err ) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst info = analyzeString(buffer.toString(), name);\n\t\t\t\tresolve(info);\n\t\t\t} catch (execErr) {\n\t\t\t\treject(execErr);\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction analyzeString(content, name) {\n\tconst ast = esprima.parseScript(content, {comment: true});\n\tconst info = new ModuleInfo(name);\n\tnew JSModuleAnalyzer().analyze(ast, name, info);\n\treturn info;\n}\n\nfunction assertModuleNamesEqual(t, actual, expected, msg) {\n\tactual.sort();\n\texpected.sort();\n\tt.deepEqual(actual, expected, msg);\n}\n\nfunction getConditionalDependencies(info) {\n\treturn info.dependencies.filter((dep) => info.isConditionalDependency(dep));\n}\n\nfunction analyzeModule(\n\tt,\n\tfile,\n\tname,\n\texpectedDependencies,\n\texpectedConditionalDependencies,\n\texpectedSubmodules,\n\tignoreImplicitDependencies,\n\trawModule\n) {\n\t//\n\tanalyze(file, name).then( (info) => {\n\t\tt.is(info.name, name, \"module name should match\");\n\t\tlet deps = info.dependencies;\n\t\tif ( ignoreImplicitDependencies ) {\n\t\t\tdeps = deps.filter((dep) => !info.isImplicitDependency(dep));\n\t\t}\n\t\tif ( expectedDependencies != null ) {\n\t\t\tassertModuleNamesEqual(t,\n\t\t\t\tdeps,\n\t\t\t\texpectedDependencies,\n\t\t\t\t\"module dependencies should match\");\n\t\t}\n\t\tif ( expectedConditionalDependencies != null ) {\n\t\t\tassertModuleNamesEqual(t,\n\t\t\t\tgetConditionalDependencies(info),\n\t\t\t\texpectedConditionalDependencies,\n\t\t\t\t\"conditional module dependencies should match\");\n\t\t}\n\t\tif ( expectedSubmodules != null ) {\n\t\t\tassertModuleNamesEqual(t,\n\t\t\t\tinfo.subModules,\n\t\t\t\texpectedSubmodules,\n\t\t\t\t\"submodules should match\");\n\t\t}\n\t\tt.false(info.dynamicDependencies,\n\t\t\t\"no use of dynamic dependencies should have been detected\");\n\t\tif (rawModule) {\n\t\t\tt.true(info.rawModule,\n\t\t\t\t\"raw module\");\n\t\t} else {\n\t\t\tt.false(info.rawModule,\n\t\t\t\t\"ui5 module\");\n\t\t}\n\t}).then(() => t.end(), (e) => t.fail(`failed to analyze module with error: ${e.message}`));\n}\n\ntest.cb(\"DeclareToplevel\", analyzeModule,\n\t\"modules/declare_toplevel.js\", EXPECTED_MODULE_NAME, EXPECTED_DECLARE_DEPENDENCIES);\n\ntest.cb(\"DeclareFunctionExprScope\", analyzeModule,\n\t\"modules/declare_function_expr_scope.js\", EXPECTED_MODULE_NAME, EXPECTED_DECLARE_DEPENDENCIES);\n\ntest.cb(\"DeclareFunctionInvocationScope\", analyzeModule,\n\t\"modules/declare_function_invocation_scope.js\", EXPECTED_MODULE_NAME, EXPECTED_DECLARE_DEPENDENCIES);\n\ntest.cb(\"DefineToplevelNamed\", analyzeModule,\n\t\"modules/define_toplevel_named.js\", EXPECTED_MODULE_NAME, EXPECTED_DEFINE_DEPENDENCIES_NO_LEGACY);\n\ntest.cb(\"DefineToplevelUnnamed\", analyzeModule,\n\t\"modules/define_toplevel_unnamed.js\", \"modules/define_toplevel_unnamed.js\", EXPECTED_DEFINE_DEPENDENCIES_NO_LEGACY);\n\ntest.cb(\"DefineWithLegacyCalls\", analyzeModule,\n\t\"modules/define_with_legacy_calls.js\", \"modules/define_with_legacy_calls.js\",\n\tEXPECTED_DEFINE_DEPENDENCIES_WITH_LEGACY);\n\ntest.cb(\"OldStyleModuleWithoutDeclare\", function(t) {\n\tanalyze(\"modules/no_declare_but_requires.js\", null).then((info) => {\n\t\tt.is(info.name, null, \"module name should be null\");\n\t\tt.true(info.rawModule, \"raw module\");\n\t\tassertModuleNamesEqual(t,\n\t\t\tinfo.dependencies,\n\t\t\t[\"dependency1.js\", \"dependency2.js\", \"jquery.sap.global.js\"],\n\t\t\t\"dependencies should be correct\");\n\t\tt.end();\n\t});\n});\n\ntest.cb(\"NotAnUI5Module\", analyzeModule,\n\t\"modules/not_a_module.js\", \"modules/not_a_module.js\",\n\tNO_DEPENDENCIES, NO_DEPENDENCIES, NO_DEPENDENCIES, NO_DEPENDENCIES, true);\n\ntest.cb(\"AMDSpecialDependenciesShouldBeIgnored\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/amd_special_dependencies.js\",\n\t\t\"modules/amd_special_dependencies.js\",\n\t\t[\"modules/dep1.js\", \"dep2.js\", \"utils/dep1.js\", \"ui5loader-autoconfig.js\"],\n\t\t[],\n\t\t[\"utils/helper1.js\", \"utils/helper2.js\", \"utils/helper3.js\"]\n\t);\n});\n\ntest.cb(\"AMDMultipleModulesFirstUnnamed\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/amd_multiple_modules_first_unnamed.js\",\n\t\t\"modules/amd_multiple_modules_first_unnamed.js\",\n\t\t[\"modules/dep1.js\", \"dep2.js\", \"utils/dep1.js\", \"ui5loader-autoconfig.js\"],\n\t\t[],\n\t\t[\"utils/helper1.js\", \"utils/helper2.js\"]\n\t);\n});\n\ntest.cb(\"AMDMultipleModulesOtherThanFirstOneUnnamed\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/amd_multiple_modules_other_than_first_one_unnamed.js\",\n\t\t\"modules/amd_multiple_modules_other_than_first_one_unnamed.js\",\n\t\t[\"modules/dep1.js\", \"dep2.js\", \"utils/dep1.js\", \"ui5loader-autoconfig.js\"],\n\t\t[],\n\t\t[\"utils/helper1.js\", \"utils/helper2.js\"]\n\t);\n});\n\ntest.cb(\"AMDMultipleNamedModulesNoneMatchingFileName\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/amd_multiple_named_modules_none_matching_filename.js\",\n\t\t\"modules/amd_multiple_named_modules_none_matching_filename.js\",\n\t\t[\"dep2.js\", \"utils/dep1.js\", \"ui5loader-autoconfig.js\"],\n\t\t[],\n\t\t[\"utils/helper1.js\", \"utils/helper2.js\", \"utils/helper3.js\"]\n\t);\n});\n\ntest.cb(\"AMDMultipleNamedModulesOneMatchingFileName\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/amd_multiple_named_modules_one_matching_filename.js\",\n\t\t\"modules/amd_multiple_named_modules_one_matching_filename.js\",\n\t\t[\"modules/dep1.js\", \"dep2.js\", \"utils/dep1.js\", \"ui5loader-autoconfig.js\"],\n\t\t[],\n\t\t[\"utils/helper1.js\", \"utils/helper2.js\"]\n\t);\n});\n\ntest(\"AMDMultipleUnnamedModules\", (t) =>\n\tanalyze(\"modules/amd_multiple_unnamed_modules.js\")\n\t\t.then(() => {\n\t\t\tt.fail(\"parsing a file with multiple unnamed modules shouldn't succeed\");\n\t\t}, (err) => {\n\t\t\tt.true(/only one of them/.test(err.message),\n\t\t\t\t\"Exception message should contain a hint on multiple unnamed modules\");\n\t\t})\n);\n\ntest.cb(\"AMDSingleNamedModule\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/amd_single_named_module.js\",\n\t\t\"alternative/name.js\",\n\t\t[\"alternative/dep1.js\", \"dep2.js\", \"ui5loader-autoconfig.js\"],\n\t\t[],\n\t\t[]\n\t);\n});\n\ntest.cb(\"AMDSingleUnnamedModule\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/amd_single_unnamed_module.js\",\n\t\t\"modules/amd_single_unnamed_module.js\",\n\t\t[\"modules/dep1.js\", \"dep2.js\", \"ui5loader-autoconfig.js\"],\n\t\t[],\n\t\t[]\n\t);\n});\n\n\ntest(\"AMDMultipleModulesWithConflictBetweenNamedAndUnnamed\", (t) =>\n\tanalyze(\"modules/amd_multiple_modules_with_conflict_between_named_and_unnamed.js\")\n\t\t.then(() => {\n\t\t\tt.fail(\"parsing a file with conflicting modules shouldn't succeed\");\n\t\t}, (err) => {\n\t\t\tt.is(err.message, \"conflicting main modules found (unnamed + named)\",\n\t\t\t\t\"Exception message should contain a hint on conflicting modules\");\n\t\t})\n);\n\ntest(\"AMDMultipleModulesWithConflictBetweenUnnamedAndNamed\", (t) =>\n\tanalyze(\"modules/amd_multiple_modules_with_conflict_between_unnamed_and_named.js\")\n\t\t.then(() => {\n\t\t\tt.fail(\"parsing a file with conflicting modules shouldn't succeed\");\n\t\t}, (err) => {\n\t\t\tt.is(err.message, \"conflicting main modules found (unnamed + named)\",\n\t\t\t\t\"Exception message should contain a hint on conflicting modules\");\n\t\t})\n);\n\ntest(\"AMDMultipleModulesWithConflictBetweenTwoNamed\", (t) =>\n\tanalyze(\"modules/amd_multiple_modules_with_conflict_between_two_named.js\")\n\t\t.then(() => {\n\t\t\tt.fail(\"parsing a file with conflicting modules shouldn't succeed\");\n\t\t}, (err) => {\n\t\t\tt.is(err.message, \"conflicting main modules found (unnamed + named)\",\n\t\t\t\t\"Exception message should contain a hint on conflicting modules\");\n\t\t})\n);\n\ntest.cb(\"OldStyleBundle\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/bundle-oldstyle.js\",\n\t\t\"sap-ui-core.js\",\n\t\t[\n\t\t\t\"jquery.sap.dom.js\",\n\t\t\t\"jquery.sap.script.js\",\n\t\t\t\"sap/ui/base/Object.js\",\n\t\t\t\"sap/ui/base/BindingParser.js\",\n\t\t\t\"sap/ui/base/EventProvider.js\",\n\t\t\t\"sap/ui/base/ManagedObjectMetadata.js\",\n\t\t\t\"sap/ui/model/BindingMode.js\",\n\t\t\t\"sap/ui/model/CompositeBinding.js\",\n\t\t\t\"sap/ui/model/Context.js\",\n\t\t\t\"sap/ui/model/FormatException.js\",\n\t\t\t\"sap/ui/model/ListBinding.js\",\n\t\t\t\"sap/ui/model/Model.js\",\n\t\t\t\"sap/ui/model/ParseException.js\",\n\t\t\t\"sap/ui/model/TreeBinding.js\",\n\t\t\t\"sap/ui/model/Type.js\",\n\t\t\t\"sap/ui/model/ValidateException.js\",\n\t\t\t\"jquery.sap.strings.js\",\n\t\t\t\"sap/ui/Global.js\",\n\t\t\t\"sap/ui/base/Interface.js\",\n\t\t\t\"sap/ui/core/Component.js\",\n\t\t\t\"sap/ui/core/Configuration.js\",\n\t\t\t\"sap/ui/core/Control.js\",\n\t\t\t\"sap/ui/core/Element.js\",\n\t\t\t\"sap/ui/core/ElementMetadata.js\",\n\t\t\t\"sap/ui/core/FocusHandler.js\",\n\t\t\t\"sap/ui/core/RenderManager.js\",\n\t\t\t\"sap/ui/core/ResizeHandler.js\",\n\t\t\t\"sap/ui/core/ThemeCheck.js\",\n\t\t\t\"sap/ui/core/UIArea.js\",\n\t\t\t\"sap/ui/core/message/MessageManager.js\",\n\t\t\t\"jquery.sap.mobile.js\",\n\t\t\t\"jquery.sap.properties.js\",\n\t\t\t\"jquery.sap.resources.js\",\n\t\t\t\"jquery.sap.sjax.js\"\n\t\t],\n\t\t[],\n\t\t[\n\t\t\t\"sap/ui/Device.js\",\n\t\t\t\"sap/ui/thirdparty/URI.js\",\n\t\t\t\"sap/ui/thirdparty/es6-promise.js\",\n\t\t\t\"sap/ui/thirdparty/jquery.js\",\n\t\t\t\"sap/ui/thirdparty/jqueryui/jquery-ui-position.js\",\n\t\t\t\"jquery.sap.global.js\",\n\t\t\t\"jquery.sap.act.js\",\n\t\t\t\"jquery.sap.encoder.js\",\n\t\t\t\"jquery.sap.events.js\",\n\t\t\t\"jquery.sap.keycodes.js\",\n\t\t\t\"sap/ui/base/DataType.js\",\n\t\t\t\"sap/ui/base/Event.js\",\n\t\t\t\"sap/ui/base/ManagedObject.js\",\n\t\t\t\"sap/ui/core/Core.js\",\n\t\t\t\"sap/ui/thirdparty/jquery-mobile-custom.js\"\n\t\t],\n\t\t/* ignoreImplicitDependencies: */ true\n\t);\n});\n\ntest.cb(\"OldStyleBundleV2\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/bundle-oldstyle-v2.js\",\n\t\t\"sap-ui-core.js\",\n\t\t[\n\t\t\t\"jquery.sap.dom.js\",\n\t\t\t\"jquery.sap.script.js\",\n\t\t\t\"sap/ui/base/Object.js\",\n\t\t\t\"sap/ui/base/BindingParser.js\",\n\t\t\t\"sap/ui/base/EventProvider.js\",\n\t\t\t\"sap/ui/base/ManagedObjectMetadata.js\",\n\t\t\t\"sap/ui/model/BindingMode.js\",\n\t\t\t\"sap/ui/model/CompositeBinding.js\",\n\t\t\t\"sap/ui/model/Context.js\",\n\t\t\t\"sap/ui/model/FormatException.js\",\n\t\t\t\"sap/ui/model/ListBinding.js\",\n\t\t\t\"sap/ui/model/Model.js\",\n\t\t\t\"sap/ui/model/ParseException.js\",\n\t\t\t\"sap/ui/model/TreeBinding.js\",\n\t\t\t\"sap/ui/model/Type.js\",\n\t\t\t\"sap/ui/model/ValidateException.js\",\n\t\t\t\"jquery.sap.strings.js\",\n\t\t\t\"sap/ui/Global.js\",\n\t\t\t\"sap/ui/base/Interface.js\",\n\t\t\t\"sap/ui/core/Component.js\",\n\t\t\t\"sap/ui/core/Configuration.js\",\n\t\t\t\"sap/ui/core/Control.js\",\n\t\t\t\"sap/ui/core/Element.js\",\n\t\t\t\"sap/ui/core/ElementMetadata.js\",\n\t\t\t\"sap/ui/core/FocusHandler.js\",\n\t\t\t\"sap/ui/core/RenderManager.js\",\n\t\t\t\"sap/ui/core/ResizeHandler.js\",\n\t\t\t\"sap/ui/core/ThemeCheck.js\",\n\t\t\t\"sap/ui/core/UIArea.js\",\n\t\t\t\"sap/ui/core/message/MessageManager.js\",\n\t\t\t\"jquery.sap.mobile.js\",\n\t\t\t\"jquery.sap.properties.js\",\n\t\t\t\"jquery.sap.resources.js\",\n\t\t\t\"jquery.sap.sjax.js\"\n\t\t],\n\t\t[],\n\t\t[\n\t\t\t\"sap/ui/Device.js\",\n\t\t\t\"sap/ui/thirdparty/URI.js\",\n\t\t\t\"sap/ui/thirdparty/es6-promise.js\",\n\t\t\t\"sap/ui/thirdparty/jquery.js\",\n\t\t\t\"sap/ui/thirdparty/jqueryui/jquery-ui-position.js\",\n\t\t\t\"jquery.sap.global.js\",\n\t\t\t\"jquery.sap.act.js\",\n\t\t\t\"jquery.sap.encoder.js\",\n\t\t\t\"jquery.sap.events.js\",\n\t\t\t\"jquery.sap.keycodes.js\",\n\t\t\t\"sap/ui/base/DataType.js\",\n\t\t\t\"sap/ui/base/Event.js\",\n\t\t\t\"sap/ui/base/ManagedObject.js\",\n\t\t\t\"sap/ui/core/Core.js\",\n\t\t\t\"sap/ui/thirdparty/jquery-mobile-custom.js\"\n\t\t],\n\t\t/* ignoreImplicitDependencies: */ true\n\t);\n});\n\ntest.cb(\"EvoBundle\", (t) => {\n\tanalyzeModule(t,\n\t\t\"modules/bundle-evo.js\",\n\t\t\"sap-ui-core.js\",\n\t\t[\n\t\t\t\"sap/base/util/now.js\",\n\t\t\t\"sap/base/util/Version.js\",\n\t\t\t\"sap/ui/dom/getComputedStyleFix.js\",\n\t\t\t\"sap/ui/dom/activeElementFix.js\",\n\t\t\t\"sap/ui/dom/includeScript.js\",\n\t\t\t\"sap/ui/dom/includeStylesheet.js\",\n\t\t\t\"sap/ui/core/support/Hotkeys.js\",\n\t\t\t\"sap/ui/security/FrameOptions.js\",\n\t\t\t\"sap/ui/performance/Measurement.js\",\n\t\t\t\"sap/ui/performance/trace/Interaction.js\",\n\t\t\t\"sap/ui/base/syncXHRFix.js\",\n\t\t\t\"sap/base/util/LoaderExtensions.js\",\n\t\t\t\"sap/base/util/defineLazyProperty.js\",\n\t\t\t\"sap/base/util/ObjectPath.js\",\n\t\t\t\"sap/base/util/isPlainObject.js\",\n\t\t\t\"sap/ui/base/Object.js\",\n\t\t\t\"sap/ui/base/BindingParser.js\",\n\t\t\t\"sap/ui/base/EventProvider.js\",\n\t\t\t\"sap/ui/base/ManagedObjectMetadata.js\",\n\t\t\t\"sap/ui/model/BindingMode.js\",\n\t\t\t\"sap/ui/model/StaticBinding.js\",\n\t\t\t\"sap/ui/model/CompositeBinding.js\",\n\t\t\t\"sap/ui/model/Context.js\",\n\t\t\t\"sap/ui/model/FormatException.js\",\n\t\t\t\"sap/ui/model/ParseException.js\",\n\t\t\t\"sap/ui/model/Type.js\",\n\t\t\t\"sap/ui/model/ValidateException.js\",\n\t\t\t\"sap/ui/base/SyncPromise.js\",\n\t\t\t\"sap/ui/util/ActivityDetection.js\",\n\t\t\t\"sap/base/util/deepClone.js\",\n\t\t\t\"sap/base/util/deepEqual.js\",\n\t\t\t\"sap/base/util/uid.js\",\n\t\t\t\"sap/ui/Global.js\",\n\t\t\t\"sap/ui/base/Interface.js\",\n\t\t\t\"sap/ui/core/Component.js\",\n\t\t\t\"sap/ui/core/Configuration.js\",\n\t\t\t\"sap/ui/core/Control.js\",\n\t\t\t\"sap/ui/core/Element.js\",\n\t\t\t\"sap/ui/core/ElementMetadata.js\",\n\t\t\t\"sap/ui/core/FocusHandler.js\",\n\t\t\t\"sap/ui/core/RenderManager.js\",\n\t\t\t\"sap/ui/core/ResizeHandler.js\",\n\t\t\t\"sap/ui/core/ThemeCheck.js\",\n\t\t\t\"sap/ui/core/UIArea.js\",\n\t\t\t\"sap/ui/core/message/MessageManager.js\",\n\t\t\t\"sap/ui/dom/getScrollbarSize.js\",\n\t\t\t\"sap/base/i18n/ResourceBundle.js\",\n\t\t\t\"sap/base/util/array/uniqueSort.js\",\n\t\t\t\"sap/ui/performance/trace/initTraces.js\",\n\t\t\t\"sap/base/util/isEmptyObject.js\",\n\t\t\t\"sap/base/util/each.js\",\n\t\t\t\"sap/ui/events/jquery/EventSimulation.js\"\n\t\t],\n\t\t[],\n\t\t[\n\t\t\t\"sap/ui/thirdparty/baseuri.js\",\n\t\t\t\"sap/ui/thirdparty/es6-promise.js\",\n\t\t\t\"sap/ui/thirdparty/es6-shim-nopromise.js\",\n\t\t\t\"ui5loader.js\",\n\t\t\t\"ui5loader-autoconfig.js\",\n\t\t\t\"jquery.sap.global.js\",\n\t\t\t\"jquery.sap.stubs.js\",\n\t\t\t\"sap/base/Log.js\",\n\t\t\t\"sap/base/assert.js\",\n\t\t\t\"sap/ui/base/DataType.js\",\n\t\t\t\"sap/ui/base/Event.js\",\n\t\t\t\"sap/ui/base/ManagedObject.js\",\n\t\t\t\"sap/ui/core/Core.js\",\n\t\t\t\"sap/ui/thirdparty/URI.js\",\n\t\t\t\"sap/ui/thirdparty/jqueryui/jquery-ui-position.js\",\n\t\t\t\"sap/ui/Device.js\",\n\t\t\t\"sap/ui/thirdparty/jquery.js\",\n\t\t\t\"sap/ui/thirdparty/jquery-mobile-custom.js\"\n\t\t],\n\t\t/* ignoreImplicitDependencies: */ true\n\t);\n});\n\ntest(\"Bundle\", (t) => {\n\treturn analyze(\"modules/bundle.js\").then( (info) => {\n\t\tconst expected = [\n\t\t\t\"sap/m/CheckBox.js\",\n\t\t\t\"sap/ui/core/Core.js\",\n\t\t\t\"todo/Component.js\",\n\t\t\t\"todo/controller/App.controller.js\",\n\t\t\t\"sap/m/messagebundle.properties\",\n\t\t\t\"todo/manifest.json\",\n\t\t\t\"todo/model/todoitems.json\",\n\t\t\t\"todo/view/App.view.xml\"\n\t\t];\n\t\tt.deepEqual(info.subModules, expected, \"module dependencies should match\");\n\t\tt.truthy(info.dependencies.every((dep) => !info.isConditionalDependency(dep)),\n\t\t\t\"none of the dependencies must be 'conditional'\");\n\t\tt.false(info.rawModule,\n\t\t\t\"ui5 module\");\n\t});\n});\n\ntest(\"ES6 Syntax\", (t) => {\n\treturn analyze(\"modules/es6-syntax.js\", \"modules/es6-syntax.js\").then( (info) => {\n\t\tconst expected = [\n\t\t\t\"conditional/module1.js\",\n\t\t\t\"conditional/module2.js\",\n\t\t\t\"conditional/module3.js\",\n\t\t\t\"static/module1.js\",\n\t\t\t\"static/module2.js\",\n\t\t\t\"static/module3.js\",\n\t\t\t\"static/module4.js\",\n\t\t\t\"static/module5.js\",\n\t\t\t\"static/module6.js\",\n\t\t\t\"static/module7.js\",\n\t\t\t\"ui5loader-autoconfig.js\"\n\t\t];\n\t\tconst actual = info.dependencies.sort();\n\t\tt.deepEqual(actual, expected, \"module dependencies should match\");\n\t\texpected.forEach((dep) => {\n\t\t\tt.is(info.isConditionalDependency(dep), /^conditional\\//.test(dep),\n\t\t\t\t\"only dependencies to 'conditional/*' modules should be conditional\");\n\t\t\tt.is(info.isImplicitDependency(dep), !/^(?:conditional|static)\\//.test(dep),\n\t\t\t\t\"all dependencies other than 'conditional/*' and 'static/*' should be implicit\");\n\t\t\tt.false(info.dynamicDependencies,\n\t\t\t\t\"no use of dynamic dependencies should have been detected\");\n\t\t\tt.false(info.rawModule,\n\t\t\t\t\"ui5 module\");\n\t\t});\n\t});\n});\n\ntest(\"Dynamic import (declare/require)\", (t) => {\n\treturn analyze(\"modules/declare_dynamic_require.js\").then((info) => {\n\t\tt.true(info.dynamicDependencies,\n\t\t\t\"the use of dynamic dependencies should have been detected\");\n\t\tt.false(info.rawModule,\n\t\t\t\"ui5 module\");\n\t});\n});\n\ntest(\"Dynamic import (define/require)\", (t) => {\n\treturn analyze(\"modules/amd_dynamic_require.js\").then((info) => {\n\t\tt.true(info.dynamicDependencies,\n\t\t\t\"the use of dynamic dependencies should have been detected\");\n\t\tt.false(info.rawModule,\n\t\t\t\"ui5 module\");\n\t});\n});\n\ntest(\"Dynamic import (define/requireSync)\", (t) => {\n\treturn analyze(\"modules/amd_dynamic_require_sync.js\").then((info) => {\n\t\tt.true(info.dynamicDependencies,\n\t\t\t\"the use of dynamic dependencies should have been detected\");\n\t\tt.false(info.rawModule,\n\t\t\t\"ui5 module\");\n\t});\n});\n\ntest(\"Nested require\", (t) => {\n\tconst content = `\n(function(deps, callback) {\n\tfunction doIt(array, callback) {\n\t\tcallback();\n\t}\n\n\tvar aArray = [];\n\tdoIt(aArray, function() {\n\t\tdoIt([\"foo\"], function() {\n\t\t\tdoIt([\"bar\"], function() {\n\t\t\t\t// nested sap.ui.require\n\t\t\t\tsap.ui.require(deps, callback);\n\t\t\t});\n\t\t});\n\t});\n}([\n\t\"my/dependency\"\n], function(myDep) {\n\tconsole.log(\"done\")\n}));`;\n\tconst info = analyzeString(content, \"modules/nestedRequire.js\");\n\tt.true(info.rawModule, \"raw module\");\n});\n\ntest(\"Toplevel define\", (t) => {\n\tconst content = `\n(function() {\n\tfunction defineMyFile() {\n\t\tsap.ui.define('def/MyFile', ['dep/myDep'],\n\t\t\tfunction(myDep) {\n\t\t\t\treturn 47;\n\t\t\t});\n\t}\n\n\t// conditional\n\tif (!(window.sap && window.sap.ui && window.sap.ui.define)) {\n\t\tvar fnHandler = function() {\n\t\t\tdefineMyFile();\n\t\t};\n\t\tmy.addEventListener(\"myevent\", fnHandler);\n\t} else {\n\t\tdefineMyFile();\n\t}\n}()); `;\n\tconst info = analyzeString(content, \"modules/functionDefine.js\");\n\tt.true(info.rawModule, \"raw module\");\n});\n\ntest(\"Invalid ui5 bundle comment\", (t) => {\n\tconst content = `/@ui5-bundles sap/ui/thirdparty/xxx.js\nif(!('xxx'in Node.prototype)){}\n//@ui5-bundle-raw-includes sap/ui/thirdparty/aaa.js\n(function(g,f){g.AAA=f();}(this,(function(){})));\nsap.ui.define(\"my/module\", [\"sap/ui/core/UIComponent\"],function(n){\"use strict\";return 47+n});`;\n\tconst info = analyzeString(content, \"modules/bundle-evo_invalid_comment.js\");\n\tt.is(info.name, \"my/module.js\",\n\t\t\"module name matches\");\n\tt.deepEqual(info.subModules, [],\n\t\t\"no submodules\");\n});\n\ntest(\"Declare two times\", (t) => {\n\tconst content = `jQuery.sap.declare(\"sap.ui.testmodule\");\nsap.ui.testmodule.load = function(modName) {\n\tjQuery.sap.require(modName);\n};\njQuery.sap.declare(\"sap.ui.testmodule\");`;\n\tconst info = analyzeString(content, \"modules/declare_times_two.js\");\n\tt.is(info.name, \"sap/ui/testmodule.js\",\n\t\t\"module name matches\");\n\tt.deepEqual(info.subModules, [],\n\t\t\"no submodules\");\n});\n\ntest(\"Declare dynamic name\", (t) => {\n\tconst content = `var sCommonName = \"sap.ui\"\njQuery.sap.declare(sCommonName + \".testmodule\");\n\nsap.ui.testmodule.load = function(modName) {\n\tjQuery.sap.require(modName);\n};`;\n\tconst info = analyzeString(content, \"modules/dynamic_name.js\");\n\tt.is(info.name, \"modules/dynamic_name.js\",\n\t\t\"module name matches\");\n\tt.deepEqual(info.subModules, [],\n\t\t\"no submodules\");\n});\n\ntest(\"jQuery.sap.registerPreloadedModules (with Identifier)\", (t) => {\n\tconst content = `\nvar data = {};\njQuery.sap.registerPreloadedModules(data);\n`;\n\tconst info = analyzeString(content, \"modules/registerPreloadedModules-Identifier.js\");\n\tt.deepEqual(info.subModules, [],\n\t\t\"no submodules\");\n});\n\ntest(\"jQuery.sap.registerPreloadedModules (with ObjectExpression)\", (t) => {\n\tconst content = `\njQuery.sap.registerPreloadedModules({\n\t\"modules\": {\n\t\t\"foo.bar\": \"\"\n\t}\n});\n`;\n\tconst info = analyzeString(content, \"modules/registerPreloadedModules-ObjectExpression.js\");\n\tt.deepEqual(info.subModules, [\"foo/bar.js\"],\n\t\t\"submodule from jQuery.sap.registerPreloadedModules\");\n});\n\ntest(\"jQuery.sap.registerPreloadedModules (with ObjectExpression, version 1.0)\", (t) => {\n\tconst content = `\njQuery.sap.registerPreloadedModules({\n\t\"modules\": {\n\t\t\"foo.bar\": \"\"\n\t},\n\t\"version\": \"1.0\"\n});\n`;\n\tconst info = analyzeString(content, \"modules/registerPreloadedModules-ObjectExpression.js\");\n\tt.deepEqual(info.subModules, [\"foo/bar.js\"],\n\t\t\"submodule from jQuery.sap.registerPreloadedModules\");\n});\n\ntest(\"jQuery.sap.registerPreloadedModules (with ObjectExpression, version 2.0)\", (t) => {\n\tconst content = `\njQuery.sap.registerPreloadedModules({\n\t\"modules\": {\n\t\t\"foo/bar.js\": \"\"\n\t},\n\t\"version\": \"2.0\"\n});\n`;\n\tconst info = analyzeString(content, \"modules/registerPreloadedModules-ObjectExpression.js\");\n\tt.deepEqual(info.subModules, [\"foo/bar.js\"],\n\t\t\"submodule from jQuery.sap.registerPreloadedModules\");\n});\n",
    "test/lib/tasks/bundlers/generateManifestBundle.integration.js": "const test = require(\"ava\");\nconst path = require(\"path\");\n\nconst chai = require(\"chai\");\nchai.use(require(\"chai-fs\"));\nconst assert = chai.assert;\nconst extractZip = require(\"extract-zip\");\nconst recursive = require(\"recursive-readdir\");\n\nconst ui5Builder = require(\"../../../../\");\nconst builder = ui5Builder.builder;\n\nconst applicationBPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"application.b\");\nconst libraryCore = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"sap.ui.core-evo\");\nconst libraryKPath = path.join(__dirname, \"..\", \"..\", \"..\", \"fixtures\", \"library.k\");\n\n\nconst findFiles = (folder) => {\n\treturn new Promise((resolve, reject) => {\n\t\trecursive(folder, (err, files) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(files);\n\t\t\t}\n\t\t});\n\t});\n};\n\ntest(\"integration: Build application.b with manifestBundler\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"application.b\", \"dest\");\n\tconst destBundle = path.resolve(path.join(destPath, \"manifest-bundle\"));\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.b\", \"dest\", \"manifest-bundle\");\n\tconst excludedTasks = [\"*\"];\n\tconst includedTasks = [\"escapeNonAsciiCharacters\", \"generateManifestBundle\"];\n\n\treturn builder.build({\n\t\ttree: applicationBTree,\n\t\tdestPath,\n\t\texcludedTasks,\n\t\tincludedTasks\n\t}).then(() => {\n\t\treturn extractZip(destBundle + \".zip\", {dir: destBundle});\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destBundle, expectedPath);\n\n\t\t// Check for all file contents\n\t\texpectedFiles.forEach((expectedFile) => {\n\t\t\tconst relativeFile = path.relative(expectedPath, expectedFile);\n\t\t\tconst destFile = path.join(destBundle, relativeFile);\n\t\t\tassert.fileEqual(destFile, expectedFile);\n\t\t});\n\t\tt.pass();\n\t});\n});\n\ntest(\"integration: Build library.k with manifestBundler\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"library.k\", \"dest\");\n\tconst destBundle = path.resolve(path.join(destPath, \"resources\", \"library\", \"k\", \"manifest-bundle\"));\n\tconst expectedPath =\n\t\tpath.join(\"test\", \"expected\", \"build\", \"library.k\", \"dest\", \"resources\", \"library\", \"k\", \"manifest-bundle\");\n\tconst excludedTasks = [\"*\"];\n\tconst includedTasks = [\"generateLibraryManifest\", \"generateManifestBundle\"];\n\n\treturn builder.build({\n\t\ttree: libraryKTree,\n\t\tdestPath,\n\t\texcludedTasks,\n\t\tincludedTasks\n\t}).then(() => {\n\t\treturn extractZip(destBundle + \".zip\", {dir: destBundle});\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destBundle, expectedPath);\n\n\t\t// Check for all file contents\n\t\texpectedFiles.forEach((expectedFile) => {\n\t\t\tconst relativeFile = path.relative(expectedPath, expectedFile);\n\t\t\tconst destFile = path.join(destBundle, relativeFile);\n\t\t\tassert.fileEqual(destFile, expectedFile);\n\t\t});\n\t\tt.pass();\n\t});\n});\n\nconst applicationBTree = {\n\t\"id\": \"application.b\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationBPath,\n\t\"dependencies\": [],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.b\",\n\t\t\"namespace\": \"id1\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t},\n\t\t\t\"propertiesFileSourceEncoding\": \"ISO-8859-1\"\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t}\n};\n\nconst libraryKTree = {\n\t\"id\": \"library.k\",\n\t\"version\": \"1.0.0\",\n\t\"path\": libraryKPath,\n\t\"dependencies\": [\n\t\t{\n\t\t\t\"id\": \"sap.ui.core-evo\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"path\": libraryCore,\n\t\t\t\"dependencies\": [],\n\t\t\t\"_level\": 1,\n\t\t\t\"specVersion\": \"0.1\",\n\t\t\t\"type\": \"library\",\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"sap.ui.core\",\n\t\t\t\t\"namespace\": \"sap/ui/core\"\n\t\t\t},\n\t\t\t\"resources\": {\n\t\t\t\t\"configuration\": {\n\t\t\t\t\t\"paths\": {\n\t\t\t\t\t\t\"src\": \"main/src\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pathMappings\": {\n\t\t\t\t\t\"/resources/\": \"main/src\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"library\",\n\t\"metadata\": {\n\t\t\"name\": \"library.k\",\n\t\t\"namespace\": \"library/k\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"src\": \"src\",\n\t\t\t\t\"test\": \"test\"\n\t\t\t}\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/resources/\": \"src\"\n\t\t}\n\t}\n};\n",
    "test/lib/tasks/generateCachebusterInfo.js": "const test = require(\"ava\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst chai = require(\"chai\");\nchai.use(require(\"chai-fs\"));\nconst assert = chai.assert;\n\n\nconst ui5Builder = require(\"../../../\");\nconst builder = ui5Builder.builder;\nconst applicationGPath = path.join(__dirname, \"..\", \"..\", \"fixtures\", \"application.g\");\n\nconst recursive = require(\"recursive-readdir\");\n\nconst findFiles = (folder) => {\n\treturn new Promise((resolve, reject) => {\n\t\trecursive(folder, (err, files) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(files);\n\t\t\t}\n\t\t});\n\t});\n};\n\ntest(\"integration: Build application.g with manifestBundler\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"application.g\", \"cachebuster\");\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.g\", \"cachebuster\");\n\tconst excludedTasks = [\"escapeNonAsciiCharacters\", \"generateVersionInfo\"];\n\tconst includedTasks = [\"generateCachebusterInfo\"];\n\n\treturn builder.build({\n\t\ttree: applicationGTree,\n\t\tdestPath,\n\t\texcludedTasks,\n\t\tincludedTasks\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\texpectedFiles.forEach((expectedFile) => {\n\t\t\tconst relativeFile = path.relative(expectedPath, expectedFile);\n\t\t\tconst destFile = path.join(destPath, relativeFile);\n\t\t\tif (expectedFile.endsWith(\"sap-ui-cachebuster-info.json\")) {\n\t\t\t\tconst currentContent = JSON.parse(fs.readFileSync(destFile, \"utf-8\").replace(/(:\\s+)(\\d+)/g, \": 0\"));\n\t\t\t\tconst expectedContent = JSON.parse(fs.readFileSync(expectedFile, \"utf-8\").replace(/(:\\s+)(\\d+)/g, \": 0\"));\n\t\t\t\tassert.deepEqual(currentContent, expectedContent);\n\t\t\t} else {\n\t\t\t\tassert.fileEqual(destFile, expectedFile);\n\t\t\t}\n\t\t});\n\t\tt.pass();\n\t});\n});\n\ntest(\"integration: Build application.g with manifestBundler and cachebuster using hashes\", (t) => {\n\tconst destPath = path.join(\"test\", \"tmp\", \"build\", \"application.g\", \"cachebuster_hash\");\n\tconst expectedPath = path.join(\"test\", \"expected\", \"build\", \"application.g\", \"cachebuster\");\n\tconst excludedTasks = [\"escapeNonAsciiCharacters\", \"generateVersionInfo\"];\n\tconst includedTasks = [\"generateCachebusterInfo\"];\n\n\treturn builder.build({\n\t\ttree: applicationGTreeWithCachebusterHash,\n\t\tdestPath,\n\t\texcludedTasks,\n\t\tincludedTasks\n\t}).then(() => {\n\t\treturn findFiles(expectedPath);\n\t}).then((expectedFiles) => {\n\t\t// Check for all directories and files\n\t\tassert.directoryDeepEqual(destPath, expectedPath);\n\n\t\t// Check for all file contents\n\t\texpectedFiles.forEach((expectedFile) => {\n\t\t\tconst relativeFile = path.relative(expectedPath, expectedFile);\n\t\t\tconst destFile = path.join(destPath, relativeFile);\n\t\t\tif (expectedFile.endsWith(\"sap-ui-cachebuster-info.json\")) {\n\t\t\t\tconst currentContent = JSON.parse(fs.readFileSync(destFile, \"utf-8\").replace(/(:\\s+)(\"[^\"]+\")/g, \": \\\"\\\"\"));\n\t\t\t\tconst expectedContent = JSON.parse(fs.readFileSync(expectedFile, \"utf-8\").replace(/(:\\s+)(\\d+)/g, \": \\\"\\\"\"));\n\t\t\t\tassert.deepEqual(currentContent, expectedContent);\n\t\t\t} else {\n\t\t\t\tassert.fileEqual(destFile, expectedFile);\n\t\t\t}\n\t\t});\n\t\tt.pass();\n\t});\n});\n\nconst applicationGTree = {\n\t\"id\": \"application.g\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationGPath,\n\t\"dependencies\": [],\n\t\"builder\": {},\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.g\",\n\t\t\"namespace\": \"application/g\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t}\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t}\n};\n\nconst applicationGTreeWithCachebusterHash = {\n\t\"id\": \"application.g\",\n\t\"version\": \"1.0.0\",\n\t\"path\": applicationGPath,\n\t\"dependencies\": [],\n\t\"builder\": {\n\t\t\"cachebuster\": {\n\t\t\t\"signatureType\": \"hash\"\n\t\t}\n\t},\n\t\"_level\": 0,\n\t\"_isRoot\": true,\n\t\"specVersion\": \"0.1\",\n\t\"type\": \"application\",\n\t\"metadata\": {\n\t\t\"name\": \"application.g\",\n\t\t\"namespace\": \"application/g\",\n\t\t\"copyright\": \"Some fancy copyright\"\n\t},\n\t\"resources\": {\n\t\t\"configuration\": {\n\t\t\t\"paths\": {\n\t\t\t\t\"webapp\": \"webapp\"\n\t\t\t}\n\t\t},\n\t\t\"pathMappings\": {\n\t\t\t\"/\": \"webapp\"\n\t\t}\n\t}\n};\n"
  }
}