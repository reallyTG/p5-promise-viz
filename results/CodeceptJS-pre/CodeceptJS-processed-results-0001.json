{
  "promises": {
    "0": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179699530221",
      "endTime": "1209179699555499",
      "elapsedTime": "25278",
      "asyncId": 93,
      "triggerAsyncId": 92,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        94
      ],
      "uniqueid": 0
    },
    "1": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179700256623",
      "endTime": "1209179701559083",
      "elapsedTime": "1302460",
      "asyncId": 94,
      "triggerAsyncId": 93,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        95,
        101
      ],
      "uniqueid": 1
    },
    "2": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179700423786",
      "endTime": "1209179701852513",
      "elapsedTime": "1428727",
      "asyncId": 95,
      "triggerAsyncId": 94,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        96,
        104
      ],
      "uniqueid": 2
    },
    "3": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179700763031",
      "endTime": "1209179702119814",
      "elapsedTime": "1356783",
      "asyncId": 97,
      "triggerAsyncId": 96,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        98,
        107,
        135
      ],
      "uniqueid": 3
    },
    "4": {
      "source": "test/unit/actor_test.js:58:20:58:20",
      "startTime": "1209179700923021",
      "endTime": "1209179702672870",
      "elapsedTime": "1749849",
      "asyncId": 98,
      "triggerAsyncId": 97,
      "io": "",
      "userCode": true,
      "line": "\n    recorder.start();\n    const promise = I.customStep();\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });\n\n  it('should init pageobject methods as metastep', () => ",
      "startLine": 58,
      "startCol": 20,
      "endLine": 58,
      "endCol": 20,
      "file": "test/unit/actor_test.js",
      "triggers": [
        100
      ],
      "uniqueid": 4
    },
    "5": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179701137814",
      "endTime": "1209179702834313",
      "elapsedTime": "1696499",
      "asyncId": 100,
      "triggerAsyncId": 98,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 5
    },
    "6": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179701262587",
      "endTime": "1209179701281323",
      "elapsedTime": "18736",
      "asyncId": 101,
      "triggerAsyncId": 94,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        102
      ],
      "uniqueid": 6
    },
    "7": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179701328812",
      "endTime": "1209179701478823",
      "elapsedTime": "150011",
      "asyncId": 102,
      "triggerAsyncId": 101,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 7
    },
    "8": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179701626890",
      "endTime": "1209179701642169",
      "elapsedTime": "15279",
      "asyncId": 104,
      "triggerAsyncId": 95,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        105
      ],
      "uniqueid": 8
    },
    "9": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179701688836",
      "endTime": "1209179701780738",
      "elapsedTime": "91902",
      "asyncId": 105,
      "triggerAsyncId": 104,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 9
    },
    "10": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179701929207",
      "endTime": "1209179701943974",
      "elapsedTime": "14767",
      "asyncId": 107,
      "triggerAsyncId": 97,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        108
      ],
      "uniqueid": 10
    },
    "11": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179701992715",
      "endTime": "1209179702048530",
      "elapsedTime": "55815",
      "asyncId": 108,
      "triggerAsyncId": 107,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 11
    },
    "12": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179705409969",
      "endTime": "1209179705429034",
      "elapsedTime": "19065",
      "asyncId": 136,
      "triggerAsyncId": 134,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        137
      ],
      "uniqueid": 12
    },
    "13": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179705599955",
      "endTime": "1209179706731926",
      "elapsedTime": "1131971",
      "asyncId": 137,
      "triggerAsyncId": 136,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        138,
        144
      ],
      "uniqueid": 13
    },
    "14": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179705748473",
      "endTime": "1209179706993977",
      "elapsedTime": "1245504",
      "asyncId": 138,
      "triggerAsyncId": 137,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        139,
        147
      ],
      "uniqueid": 14
    },
    "15": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179706018058",
      "endTime": "1209179707239497",
      "elapsedTime": "1221439",
      "asyncId": 140,
      "triggerAsyncId": 139,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        141,
        150,
        158
      ],
      "uniqueid": 15
    },
    "16": {
      "source": "test/unit/actor_test.js:90:20:90:20",
      "startTime": "1209179706322338",
      "endTime": "1209179707390881",
      "elapsedTime": "1068543",
      "asyncId": 141,
      "triggerAsyncId": 140,
      "io": "",
      "userCode": true,
      "line": "\n    const promise = I.hello();\n    expect(promise).toBeInstanceOf(Promise);\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });\n\n  it('should produce step events', () => ",
      "startLine": 90,
      "startCol": 20,
      "endLine": 90,
      "endCol": 20,
      "file": "test/unit/actor_test.js",
      "triggers": [
        143
      ],
      "uniqueid": 16
    },
    "17": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179706451140",
      "endTime": "1209179707513901",
      "elapsedTime": "1062761",
      "asyncId": 143,
      "triggerAsyncId": 141,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 17
    },
    "18": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179706536810",
      "endTime": "1209179706552450",
      "elapsedTime": "15640",
      "asyncId": 144,
      "triggerAsyncId": 137,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        145
      ],
      "uniqueid": 18
    },
    "19": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179706598135",
      "endTime": "1209179706660873",
      "elapsedTime": "62738",
      "asyncId": 145,
      "triggerAsyncId": 144,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 19
    },
    "20": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179706799502",
      "endTime": "1209179706815563",
      "elapsedTime": "16061",
      "asyncId": 147,
      "triggerAsyncId": 138,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        148
      ],
      "uniqueid": 20
    },
    "21": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179706861449",
      "endTime": "1209179706923034",
      "elapsedTime": "61585",
      "asyncId": 148,
      "triggerAsyncId": 147,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 21
    },
    "22": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179707083474",
      "endTime": "1209179707098613",
      "elapsedTime": "15139",
      "asyncId": 150,
      "triggerAsyncId": 140,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        151
      ],
      "uniqueid": 22
    },
    "23": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179707144399",
      "endTime": "1209179707173984",
      "elapsedTime": "29585",
      "asyncId": 151,
      "triggerAsyncId": 150,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 23
    },
    "24": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179707975225",
      "endTime": "1209179707993560",
      "elapsedTime": "18335",
      "asyncId": 159,
      "triggerAsyncId": 157,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        160
      ],
      "uniqueid": 24
    },
    "25": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179708241014",
      "endTime": "1209179709183469",
      "elapsedTime": "942455",
      "asyncId": 160,
      "triggerAsyncId": 159,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        161,
        167
      ],
      "uniqueid": 25
    },
    "26": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179708413837",
      "endTime": "1209179709647930",
      "elapsedTime": "1234093",
      "asyncId": 161,
      "triggerAsyncId": 160,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        162,
        170
      ],
      "uniqueid": 26
    },
    "27": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179708673464",
      "endTime": "1209179709889592",
      "elapsedTime": "1216128",
      "asyncId": 163,
      "triggerAsyncId": 162,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        164,
        173,
        181
      ],
      "uniqueid": 27
    },
    "28": {
      "source": "test/unit/actor_test.js:104:22:104:22",
      "startTime": "1209179708786375",
      "endTime": "1209179710073547",
      "elapsedTime": "1287172",
      "asyncId": 164,
      "triggerAsyncId": 163,
      "io": "",
      "userCode": true,
      "line": "\n    });\n\n    return I.hello().then(() => {\n      expect(listeners).toEqual(3);\n    });\n  })",
      "startLine": 104,
      "startCol": 22,
      "endLine": 104,
      "endCol": 22,
      "file": "test/unit/actor_test.js",
      "triggers": [
        166
      ],
      "uniqueid": 28
    },
    "29": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179708911860",
      "endTime": "1209179710185858",
      "elapsedTime": "1273998",
      "asyncId": 166,
      "triggerAsyncId": 164,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 29
    },
    "30": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179708991740",
      "endTime": "1209179709014904",
      "elapsedTime": "23164",
      "asyncId": 167,
      "triggerAsyncId": 160,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        168
      ],
      "uniqueid": 30
    },
    "31": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179709062513",
      "endTime": "1209179709114560",
      "elapsedTime": "52047",
      "asyncId": 168,
      "triggerAsyncId": 167,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 31
    },
    "32": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179709246988",
      "endTime": "1209179709262688",
      "elapsedTime": "15700",
      "asyncId": 170,
      "triggerAsyncId": 161,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        171
      ],
      "uniqueid": 32
    },
    "33": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179709306350",
      "endTime": "1209179709573991",
      "elapsedTime": "267641",
      "asyncId": 171,
      "triggerAsyncId": 170,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 33
    },
    "34": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179709725856",
      "endTime": "1209179709741285",
      "elapsedTime": "15429",
      "asyncId": 173,
      "triggerAsyncId": 163,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        174
      ],
      "uniqueid": 34
    },
    "35": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179709786790",
      "endTime": "1209179709817828",
      "elapsedTime": "31038",
      "asyncId": 174,
      "triggerAsyncId": 173,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 35
    },
    "36": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179710634619",
      "endTime": "1209179710653354",
      "elapsedTime": "18735",
      "asyncId": 182,
      "triggerAsyncId": 180,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        183
      ],
      "uniqueid": 36
    },
    "37": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179710863127",
      "endTime": "1209179712090507",
      "elapsedTime": "1227380",
      "asyncId": 183,
      "triggerAsyncId": 182,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        184,
        191
      ],
      "uniqueid": 37
    },
    "38": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179710992990",
      "endTime": "1209179712354371",
      "elapsedTime": "1361381",
      "asyncId": 184,
      "triggerAsyncId": 183,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        185,
        194
      ],
      "uniqueid": 38
    },
    "39": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179711245072",
      "endTime": "1209179715691544",
      "elapsedTime": "4446472",
      "asyncId": 185,
      "triggerAsyncId": 184,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        186,
        197,
        198
      ],
      "uniqueid": 39
    },
    "40": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179711396045",
      "endTime": "1209179716718178",
      "elapsedTime": "5322133",
      "asyncId": 186,
      "triggerAsyncId": 185,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        187,
        214,
        215
      ],
      "uniqueid": 40
    },
    "41": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179711654049",
      "endTime": "1209179716955512",
      "elapsedTime": "5301463",
      "asyncId": 188,
      "triggerAsyncId": 187,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        190,
        223,
        231
      ],
      "uniqueid": 41
    },
    "42": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179711779353",
      "endTime": "1209179717086478",
      "elapsedTime": "5307125",
      "asyncId": 190,
      "triggerAsyncId": 188,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 42
    },
    "43": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179711859484",
      "endTime": "1209179711874462",
      "elapsedTime": "14978",
      "asyncId": 191,
      "triggerAsyncId": 183,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        192
      ],
      "uniqueid": 43
    },
    "44": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179711924245",
      "endTime": "1209179711979399",
      "elapsedTime": "55154",
      "asyncId": 192,
      "triggerAsyncId": 191,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 44
    },
    "45": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179712154256",
      "endTime": "1209179712169384",
      "elapsedTime": "15128",
      "asyncId": 194,
      "triggerAsyncId": 184,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        195
      ],
      "uniqueid": 45
    },
    "46": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179712213377",
      "endTime": "1209179712283839",
      "elapsedTime": "70462",
      "asyncId": 195,
      "triggerAsyncId": 194,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 46
    },
    "47": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179712664111",
      "endTime": "1209179715666417",
      "elapsedTime": "3002306",
      "asyncId": 197,
      "triggerAsyncId": 185,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 47
    },
    "48": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179712822568",
      "endTime": "1209179712839771",
      "elapsedTime": "17203",
      "asyncId": 198,
      "triggerAsyncId": 185,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        199
      ],
      "uniqueid": 48
    },
    "49": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179712910543",
      "endTime": "1209179713629600",
      "elapsedTime": "719057",
      "asyncId": 199,
      "triggerAsyncId": 198,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        200,
        201
      ],
      "uniqueid": 49
    },
    "50": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179712984321",
      "endTime": "1209179713765375",
      "elapsedTime": "781054",
      "asyncId": 200,
      "triggerAsyncId": 199,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 50
    },
    "51": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179713131808",
      "endTime": "1209179713148098",
      "elapsedTime": "16290",
      "asyncId": 201,
      "triggerAsyncId": 199,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        202
      ],
      "uniqueid": 51
    },
    "52": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179713203051",
      "endTime": "1209179713412524",
      "elapsedTime": "209473",
      "asyncId": 202,
      "triggerAsyncId": 201,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        203
      ],
      "uniqueid": 52
    },
    "53": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179715101689",
      "endTime": "1209179715118811",
      "elapsedTime": "17122",
      "asyncId": 207,
      "triggerAsyncId": 206,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        208
      ],
      "uniqueid": 53
    },
    "54": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179715190716",
      "endTime": "1209179715640989",
      "elapsedTime": "450273",
      "asyncId": 208,
      "triggerAsyncId": 207,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        209,
        210
      ],
      "uniqueid": 54
    },
    "55": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179715397192",
      "endTime": "1209179715413694",
      "elapsedTime": "16502",
      "asyncId": 210,
      "triggerAsyncId": 208,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        211
      ],
      "uniqueid": 55
    },
    "56": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179715468105",
      "endTime": "1209179715559657",
      "elapsedTime": "91552",
      "asyncId": 211,
      "triggerAsyncId": 210,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        212
      ],
      "uniqueid": 56
    },
    "57": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179715776163",
      "endTime": "1209179716691949",
      "elapsedTime": "915786",
      "asyncId": 214,
      "triggerAsyncId": 186,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 57
    },
    "58": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179715858868",
      "endTime": "1209179715878985",
      "elapsedTime": "20117",
      "asyncId": 215,
      "triggerAsyncId": 186,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        216
      ],
      "uniqueid": 58
    },
    "59": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179715963223",
      "endTime": "1209179716662053",
      "elapsedTime": "698830",
      "asyncId": 216,
      "triggerAsyncId": 215,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        217,
        218
      ],
      "uniqueid": 59
    },
    "60": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179716059123",
      "endTime": "1209179716704472",
      "elapsedTime": "645349",
      "asyncId": 217,
      "triggerAsyncId": 216,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 60
    },
    "61": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179716130998",
      "endTime": "1209179716145334",
      "elapsedTime": "14336",
      "asyncId": 218,
      "triggerAsyncId": 216,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        219
      ],
      "uniqueid": 61
    },
    "62": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179716198304",
      "endTime": "1209179716573687",
      "elapsedTime": "375383",
      "asyncId": 219,
      "triggerAsyncId": 218,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        220
      ],
      "uniqueid": 62
    },
    "63": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179716797106",
      "endTime": "1209179716812665",
      "elapsedTime": "15559",
      "asyncId": 223,
      "triggerAsyncId": 188,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        224
      ],
      "uniqueid": 63
    },
    "64": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179716860024",
      "endTime": "1209179716889759",
      "elapsedTime": "29735",
      "asyncId": 224,
      "triggerAsyncId": 223,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 64
    },
    "65": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179717524970",
      "endTime": "1209179717543945",
      "elapsedTime": "18975",
      "asyncId": 232,
      "triggerAsyncId": 230,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        233
      ],
      "uniqueid": 65
    },
    "66": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179717697022",
      "endTime": "1209179718840755",
      "elapsedTime": "1143733",
      "asyncId": 233,
      "triggerAsyncId": 232,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        234,
        241
      ],
      "uniqueid": 66
    },
    "67": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179717824431",
      "endTime": "1209179719084311",
      "elapsedTime": "1259880",
      "asyncId": 234,
      "triggerAsyncId": 233,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        235,
        244
      ],
      "uniqueid": 67
    },
    "68": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179718050825",
      "endTime": "1209179721546615",
      "elapsedTime": "3495790",
      "asyncId": 235,
      "triggerAsyncId": 234,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        236,
        247,
        248
      ],
      "uniqueid": 68
    },
    "69": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179718208139",
      "endTime": "1209179722498529",
      "elapsedTime": "4290390",
      "asyncId": 236,
      "triggerAsyncId": 235,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        237,
        264,
        265
      ],
      "uniqueid": 69
    },
    "70": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179718470471",
      "endTime": "1209179722733098",
      "elapsedTime": "4262627",
      "asyncId": 238,
      "triggerAsyncId": 237,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        240,
        273,
        281
      ],
      "uniqueid": 70
    },
    "71": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179718600475",
      "endTime": "1209179722852181",
      "elapsedTime": "4251706",
      "asyncId": 240,
      "triggerAsyncId": 238,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 71
    },
    "72": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179718683240",
      "endTime": "1209179718698689",
      "elapsedTime": "15449",
      "asyncId": 241,
      "triggerAsyncId": 233,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        242
      ],
      "uniqueid": 72
    },
    "73": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179718743863",
      "endTime": "1209179718775202",
      "elapsedTime": "31339",
      "asyncId": 242,
      "triggerAsyncId": 241,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 73
    },
    "74": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179718908522",
      "endTime": "1209179718924472",
      "elapsedTime": "15950",
      "asyncId": 244,
      "triggerAsyncId": 234,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        245
      ],
      "uniqueid": 74
    },
    "75": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179718972331",
      "endTime": "1209179719016474",
      "elapsedTime": "44143",
      "asyncId": 245,
      "triggerAsyncId": 244,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 75
    },
    "76": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179719166134",
      "endTime": "1209179721522209",
      "elapsedTime": "2356075",
      "asyncId": 247,
      "triggerAsyncId": 235,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 76
    },
    "77": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179719246225",
      "endTime": "1209179719262585",
      "elapsedTime": "16360",
      "asyncId": 248,
      "triggerAsyncId": 235,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        249
      ],
      "uniqueid": 77
    },
    "78": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179719329601",
      "endTime": "1209179719809751",
      "elapsedTime": "480150",
      "asyncId": 249,
      "triggerAsyncId": 248,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        250,
        251
      ],
      "uniqueid": 78
    },
    "79": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179719398240",
      "endTime": "1209179719868370",
      "elapsedTime": "470130",
      "asyncId": 250,
      "triggerAsyncId": 249,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 79
    },
    "80": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179719467269",
      "endTime": "1209179719482137",
      "elapsedTime": "14868",
      "asyncId": 251,
      "triggerAsyncId": 249,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        252
      ],
      "uniqueid": 80
    },
    "81": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179719534665",
      "endTime": "1209179719707369",
      "elapsedTime": "172704",
      "asyncId": 252,
      "triggerAsyncId": 251,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        253
      ],
      "uniqueid": 81
    },
    "82": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179721037080",
      "endTime": "1209179721057368",
      "elapsedTime": "20288",
      "asyncId": 257,
      "triggerAsyncId": 256,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        258
      ],
      "uniqueid": 82
    },
    "83": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179721125566",
      "endTime": "1209179721497573",
      "elapsedTime": "372007",
      "asyncId": 258,
      "triggerAsyncId": 257,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        259,
        260
      ],
      "uniqueid": 83
    },
    "84": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179721256462",
      "endTime": "1209179721272602",
      "elapsedTime": "16140",
      "asyncId": 260,
      "triggerAsyncId": 258,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        261
      ],
      "uniqueid": 84
    },
    "85": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179721327134",
      "endTime": "1209179721416110",
      "elapsedTime": "88976",
      "asyncId": 261,
      "triggerAsyncId": 260,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        262
      ],
      "uniqueid": 85
    },
    "86": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179721628298",
      "endTime": "1209179722473311",
      "elapsedTime": "845013",
      "asyncId": 264,
      "triggerAsyncId": 236,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 86
    },
    "87": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179721701826",
      "endTime": "1209179721717986",
      "elapsedTime": "16160",
      "asyncId": 265,
      "triggerAsyncId": 236,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        266
      ],
      "uniqueid": 87
    },
    "88": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179721786865",
      "endTime": "1209179722447433",
      "elapsedTime": "660568",
      "asyncId": 266,
      "triggerAsyncId": 265,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        267,
        268
      ],
      "uniqueid": 88
    },
    "89": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179721857237",
      "endTime": "1209179722485394",
      "elapsedTime": "628157",
      "asyncId": 267,
      "triggerAsyncId": 266,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 89
    },
    "90": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179721927559",
      "endTime": "1209179721942256",
      "elapsedTime": "14697",
      "asyncId": 268,
      "triggerAsyncId": 266,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        269
      ],
      "uniqueid": 90
    },
    "91": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179721996268",
      "endTime": "1209179722359638",
      "elapsedTime": "363370",
      "asyncId": 269,
      "triggerAsyncId": 268,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        270
      ],
      "uniqueid": 91
    },
    "92": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179722574301",
      "endTime": "1209179722590391",
      "elapsedTime": "16090",
      "asyncId": 273,
      "triggerAsyncId": 238,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        274
      ],
      "uniqueid": 92
    },
    "93": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179722637349",
      "endTime": "1209179722668067",
      "elapsedTime": "30718",
      "asyncId": 274,
      "triggerAsyncId": 273,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 93
    },
    "94": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179723301373",
      "endTime": "1209179723319757",
      "elapsedTime": "18384",
      "asyncId": 282,
      "triggerAsyncId": 280,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        283
      ],
      "uniqueid": 94
    },
    "95": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179723460661",
      "endTime": "1209179725212244",
      "elapsedTime": "1751583",
      "asyncId": 283,
      "triggerAsyncId": 282,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        284,
        295
      ],
      "uniqueid": 95
    },
    "96": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179723591096",
      "endTime": "1209179725438618",
      "elapsedTime": "1847522",
      "asyncId": 284,
      "triggerAsyncId": 283,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        285,
        298
      ],
      "uniqueid": 96
    },
    "97": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179723763529",
      "endTime": "1209179726193622",
      "elapsedTime": "2430093",
      "asyncId": 285,
      "triggerAsyncId": 284,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        286,
        301,
        302
      ],
      "uniqueid": 97
    },
    "98": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179723916315",
      "endTime": "1209179727180331",
      "elapsedTime": "3264016",
      "asyncId": 286,
      "triggerAsyncId": 285,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        287,
        310,
        311
      ],
      "uniqueid": 98
    },
    "99": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179724224222",
      "endTime": "1209179727926379",
      "elapsedTime": "3702157",
      "asyncId": 288,
      "triggerAsyncId": 287,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        289,
        319,
        320
      ],
      "uniqueid": 99
    },
    "100": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179724390023",
      "endTime": "1209179730872610",
      "elapsedTime": "6482587",
      "asyncId": 289,
      "triggerAsyncId": 288,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        290,
        328,
        329
      ],
      "uniqueid": 100
    },
    "101": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179724537058",
      "endTime": "1209179731823031",
      "elapsedTime": "7285973",
      "asyncId": 290,
      "triggerAsyncId": 289,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        291,
        345,
        346
      ],
      "uniqueid": 101
    },
    "102": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179724797727",
      "endTime": "1209179732519265",
      "elapsedTime": "7721538",
      "asyncId": 292,
      "triggerAsyncId": 291,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        294,
        354,
        355,
        368
      ],
      "uniqueid": 102
    },
    "103": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179724942799",
      "endTime": "1209179732649179",
      "elapsedTime": "7706380",
      "asyncId": 294,
      "triggerAsyncId": 292,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 103
    },
    "104": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179725052034",
      "endTime": "1209179725068995",
      "elapsedTime": "16961",
      "asyncId": 295,
      "triggerAsyncId": 283,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        296
      ],
      "uniqueid": 104
    },
    "105": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179725114711",
      "endTime": "1209179725145829",
      "elapsedTime": "31118",
      "asyncId": 296,
      "triggerAsyncId": 295,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 105
    },
    "106": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179725281964",
      "endTime": "1209179725297814",
      "elapsedTime": "15850",
      "asyncId": 298,
      "triggerAsyncId": 284,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        299
      ],
      "uniqueid": 106
    },
    "107": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179725343710",
      "endTime": "1209179725373957",
      "elapsedTime": "30247",
      "asyncId": 299,
      "triggerAsyncId": 298,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 107
    },
    "108": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179725535389",
      "endTime": "1209179726169147",
      "elapsedTime": "633758",
      "asyncId": 301,
      "triggerAsyncId": 285,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 108
    },
    "109": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179725607735",
      "endTime": "1209179725623384",
      "elapsedTime": "15649",
      "asyncId": 302,
      "triggerAsyncId": 285,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        303
      ],
      "uniqueid": 109
    },
    "110": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179725691642",
      "endTime": "1209179726143949",
      "elapsedTime": "452307",
      "asyncId": 303,
      "triggerAsyncId": 302,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        304,
        305
      ],
      "uniqueid": 110
    },
    "111": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179725765530",
      "endTime": "1209179726180728",
      "elapsedTime": "415198",
      "asyncId": 304,
      "triggerAsyncId": 303,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 111
    },
    "112": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179725835551",
      "endTime": "1209179725850530",
      "elapsedTime": "14979",
      "asyncId": 305,
      "triggerAsyncId": 303,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        306
      ],
      "uniqueid": 112
    },
    "113": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179725899491",
      "endTime": "1209179726061545",
      "elapsedTime": "162054",
      "asyncId": 306,
      "triggerAsyncId": 305,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        307
      ],
      "uniqueid": 113
    },
    "114": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179726278361",
      "endTime": "1209179727155745",
      "elapsedTime": "877384",
      "asyncId": 310,
      "triggerAsyncId": 286,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 114
    },
    "115": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179726353201",
      "endTime": "1209179726368831",
      "elapsedTime": "15630",
      "asyncId": 311,
      "triggerAsyncId": 286,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        312
      ],
      "uniqueid": 115
    },
    "116": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179726440545",
      "endTime": "1209179727130448",
      "elapsedTime": "689903",
      "asyncId": 312,
      "triggerAsyncId": 311,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        313,
        314
      ],
      "uniqueid": 116
    },
    "117": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179726507481",
      "endTime": "1209179727167317",
      "elapsedTime": "659836",
      "asyncId": 313,
      "triggerAsyncId": 312,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 117
    },
    "118": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179726578484",
      "endTime": "1209179726593592",
      "elapsedTime": "15108",
      "asyncId": 314,
      "triggerAsyncId": 312,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        315
      ],
      "uniqueid": 118
    },
    "119": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179726648906",
      "endTime": "1209179727030891",
      "elapsedTime": "381985",
      "asyncId": 315,
      "triggerAsyncId": 314,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        316
      ],
      "uniqueid": 119
    },
    "120": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179727273316",
      "endTime": "1209179727896193",
      "elapsedTime": "622877",
      "asyncId": 319,
      "triggerAsyncId": 288,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 120
    },
    "121": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179727351913",
      "endTime": "1209179727368163",
      "elapsedTime": "16250",
      "asyncId": 320,
      "triggerAsyncId": 288,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        321
      ],
      "uniqueid": 121
    },
    "122": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179727436321",
      "endTime": "1209179727865876",
      "elapsedTime": "429555",
      "asyncId": 321,
      "triggerAsyncId": 320,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        322,
        323
      ],
      "uniqueid": 122
    },
    "123": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179727511051",
      "endTime": "1209179727910399",
      "elapsedTime": "399348",
      "asyncId": 322,
      "triggerAsyncId": 321,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 123
    },
    "124": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179727582284",
      "endTime": "1209179727597573",
      "elapsedTime": "15289",
      "asyncId": 323,
      "triggerAsyncId": 321,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        324
      ],
      "uniqueid": 124
    },
    "125": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179727646575",
      "endTime": "1209179727784974",
      "elapsedTime": "138399",
      "asyncId": 324,
      "triggerAsyncId": 323,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        325
      ],
      "uniqueid": 125
    },
    "126": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179728033871",
      "endTime": "1209179730847503",
      "elapsedTime": "2813632",
      "asyncId": 328,
      "triggerAsyncId": 289,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 126
    },
    "127": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179728114842",
      "endTime": "1209179728130883",
      "elapsedTime": "16041",
      "asyncId": 329,
      "triggerAsyncId": 289,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        330
      ],
      "uniqueid": 127
    },
    "128": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179728201224",
      "endTime": "1209179729122441",
      "elapsedTime": "921217",
      "asyncId": 330,
      "triggerAsyncId": 329,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        331,
        332
      ],
      "uniqueid": 128
    },
    "129": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179728665104",
      "endTime": "1209179729166874",
      "elapsedTime": "501770",
      "asyncId": 331,
      "triggerAsyncId": 330,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 129
    },
    "130": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179728746196",
      "endTime": "1209179728761173",
      "elapsedTime": "14977",
      "asyncId": 332,
      "triggerAsyncId": 330,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        333
      ],
      "uniqueid": 130
    },
    "131": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179728816417",
      "endTime": "1209179728994050",
      "elapsedTime": "177633",
      "asyncId": 333,
      "triggerAsyncId": 332,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        334
      ],
      "uniqueid": 131
    },
    "132": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179730312791",
      "endTime": "1209179730329532",
      "elapsedTime": "16741",
      "asyncId": 338,
      "triggerAsyncId": 337,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        339
      ],
      "uniqueid": 132
    },
    "133": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179730395115",
      "endTime": "1209179730820773",
      "elapsedTime": "425658",
      "asyncId": 339,
      "triggerAsyncId": 338,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        340,
        341
      ],
      "uniqueid": 133
    },
    "134": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179730578589",
      "endTime": "1209179730597013",
      "elapsedTime": "18424",
      "asyncId": 341,
      "triggerAsyncId": 339,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        342
      ],
      "uniqueid": 134
    },
    "135": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179730655172",
      "endTime": "1209179730741534",
      "elapsedTime": "86362",
      "asyncId": 342,
      "triggerAsyncId": 341,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        343
      ],
      "uniqueid": 135
    },
    "136": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179730962428",
      "endTime": "1209179731798825",
      "elapsedTime": "836397",
      "asyncId": 345,
      "triggerAsyncId": 290,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 136
    },
    "137": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179731058097",
      "endTime": "1209179731077624",
      "elapsedTime": "19527",
      "asyncId": 346,
      "triggerAsyncId": 290,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        347
      ],
      "uniqueid": 137
    },
    "138": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179731140642",
      "endTime": "1209179731774139",
      "elapsedTime": "633497",
      "asyncId": 347,
      "triggerAsyncId": 346,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        348,
        349
      ],
      "uniqueid": 138
    },
    "139": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179731209401",
      "endTime": "1209179731810377",
      "elapsedTime": "600976",
      "asyncId": 348,
      "triggerAsyncId": 347,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 139
    },
    "140": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179731275735",
      "endTime": "1209179731291725",
      "elapsedTime": "15990",
      "asyncId": 349,
      "triggerAsyncId": 347,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        350
      ],
      "uniqueid": 140
    },
    "141": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179731336559",
      "endTime": "1209179731691444",
      "elapsedTime": "354885",
      "asyncId": 350,
      "triggerAsyncId": 349,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        351
      ],
      "uniqueid": 141
    },
    "142": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179731912328",
      "endTime": "1209179732494679",
      "elapsedTime": "582351",
      "asyncId": 354,
      "triggerAsyncId": 292,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 142
    },
    "143": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179731986948",
      "endTime": "1209179732008017",
      "elapsedTime": "21069",
      "asyncId": 355,
      "triggerAsyncId": 292,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        356
      ],
      "uniqueid": 143
    },
    "144": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179732071767",
      "endTime": "1209179732469753",
      "elapsedTime": "397986",
      "asyncId": 356,
      "triggerAsyncId": 355,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        357,
        358
      ],
      "uniqueid": 144
    },
    "145": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179732132911",
      "endTime": "1209179732506391",
      "elapsedTime": "373480",
      "asyncId": 357,
      "triggerAsyncId": 356,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 145
    },
    "146": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179732201299",
      "endTime": "1209179732216007",
      "elapsedTime": "14708",
      "asyncId": 358,
      "triggerAsyncId": 356,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        359
      ],
      "uniqueid": 146
    },
    "147": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179732266452",
      "endTime": "1209179732394842",
      "elapsedTime": "128390",
      "asyncId": 359,
      "triggerAsyncId": 358,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        360
      ],
      "uniqueid": 147
    },
    "148": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179733125962",
      "endTime": "1209179733144487",
      "elapsedTime": "18525",
      "asyncId": 369,
      "triggerAsyncId": 367,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        370
      ],
      "uniqueid": 148
    },
    "149": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179733268800",
      "endTime": "1209179734960420",
      "elapsedTime": "1691620",
      "asyncId": 370,
      "triggerAsyncId": 369,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        371,
        383
      ],
      "uniqueid": 149
    },
    "150": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179733395347",
      "endTime": "1209179735181293",
      "elapsedTime": "1785946",
      "asyncId": 371,
      "triggerAsyncId": 370,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        372,
        386
      ],
      "uniqueid": 150
    },
    "151": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179733512256",
      "endTime": "1209179735390335",
      "elapsedTime": "1878079",
      "asyncId": 372,
      "triggerAsyncId": 371,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        373,
        389
      ],
      "uniqueid": 151
    },
    "152": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179733675702",
      "endTime": "1209179737794961",
      "elapsedTime": "4119259",
      "asyncId": 373,
      "triggerAsyncId": 372,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        374,
        392,
        393
      ],
      "uniqueid": 152
    },
    "153": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179733818590",
      "endTime": "1209179738687192",
      "elapsedTime": "4868602",
      "asyncId": 374,
      "triggerAsyncId": 373,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        375,
        409,
        410
      ],
      "uniqueid": 153
    },
    "154": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179734083516",
      "endTime": "1209179739416459",
      "elapsedTime": "5332943",
      "asyncId": 376,
      "triggerAsyncId": 375,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        377,
        418,
        419
      ],
      "uniqueid": 154
    },
    "155": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179734237415",
      "endTime": "1209179743404792",
      "elapsedTime": "9167377",
      "asyncId": 377,
      "triggerAsyncId": 376,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        378,
        427,
        428
      ],
      "uniqueid": 155
    },
    "156": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179734371826",
      "endTime": "1209179744781542",
      "elapsedTime": "10409716",
      "asyncId": 378,
      "triggerAsyncId": 377,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        379,
        452,
        453
      ],
      "uniqueid": 156
    },
    "157": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179734608680",
      "endTime": "1209179745520787",
      "elapsedTime": "10912107",
      "asyncId": 380,
      "triggerAsyncId": 379,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        382,
        461,
        462,
        475
      ],
      "uniqueid": 157
    },
    "158": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179734732753",
      "endTime": "1209179745638648",
      "elapsedTime": "10905895",
      "asyncId": 382,
      "triggerAsyncId": 380,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 158
    },
    "159": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179734809346",
      "endTime": "1209179734824625",
      "elapsedTime": "15279",
      "asyncId": 383,
      "triggerAsyncId": 370,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        384
      ],
      "uniqueid": 159
    },
    "160": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179734866533",
      "endTime": "1209179734897121",
      "elapsedTime": "30588",
      "asyncId": 384,
      "triggerAsyncId": 383,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 160
    },
    "161": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179735024439",
      "endTime": "1209179735039588",
      "elapsedTime": "15149",
      "asyncId": 386,
      "triggerAsyncId": 371,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        387
      ],
      "uniqueid": 161
    },
    "162": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179735085804",
      "endTime": "1209179735117063",
      "elapsedTime": "31259",
      "asyncId": 387,
      "triggerAsyncId": 386,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 162
    },
    "163": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179735239713",
      "endTime": "1209179735254380",
      "elapsedTime": "14667",
      "asyncId": 389,
      "triggerAsyncId": 372,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        390
      ],
      "uniqueid": 163
    },
    "164": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179735294726",
      "endTime": "1209179735327527",
      "elapsedTime": "32801",
      "asyncId": 390,
      "triggerAsyncId": 389,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 164
    },
    "165": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179735467109",
      "endTime": "1209179737770775",
      "elapsedTime": "2303666",
      "asyncId": 392,
      "triggerAsyncId": 373,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 165
    },
    "166": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179735539745",
      "endTime": "1209179735555725",
      "elapsedTime": "15980",
      "asyncId": 393,
      "triggerAsyncId": 373,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        394
      ],
      "uniqueid": 166
    },
    "167": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179735636636",
      "endTime": "1209179736132726",
      "elapsedTime": "496090",
      "asyncId": 394,
      "triggerAsyncId": 393,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        395,
        396
      ],
      "uniqueid": 167
    },
    "168": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179735699945",
      "endTime": "1209179736181568",
      "elapsedTime": "481623",
      "asyncId": 395,
      "triggerAsyncId": 394,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 168
    },
    "169": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179735766109",
      "endTime": "1209179735780877",
      "elapsedTime": "14768",
      "asyncId": 396,
      "triggerAsyncId": 394,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        397
      ],
      "uniqueid": 169
    },
    "170": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179735829969",
      "endTime": "1209179736027629",
      "elapsedTime": "197660",
      "asyncId": 397,
      "triggerAsyncId": 396,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        398
      ],
      "uniqueid": 170
    },
    "171": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179737323187",
      "endTime": "1209179737339377",
      "elapsedTime": "16190",
      "asyncId": 402,
      "triggerAsyncId": 401,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        403
      ],
      "uniqueid": 171
    },
    "172": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179737394080",
      "endTime": "1209179737746029",
      "elapsedTime": "351949",
      "asyncId": 403,
      "triggerAsyncId": 402,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        404,
        405
      ],
      "uniqueid": 172
    },
    "173": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179737518623",
      "endTime": "1209179737534282",
      "elapsedTime": "15659",
      "asyncId": 405,
      "triggerAsyncId": 403,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        406
      ],
      "uniqueid": 173
    },
    "174": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179737584757",
      "endTime": "1209179737668334",
      "elapsedTime": "83577",
      "asyncId": 406,
      "triggerAsyncId": 405,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        407
      ],
      "uniqueid": 174
    },
    "175": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179737872216",
      "endTime": "1209179738663398",
      "elapsedTime": "791182",
      "asyncId": 409,
      "triggerAsyncId": 374,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 175
    },
    "176": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179737937628",
      "endTime": "1209179737953077",
      "elapsedTime": "15449",
      "asyncId": 410,
      "triggerAsyncId": 374,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        411
      ],
      "uniqueid": 176
    },
    "177": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179738023549",
      "endTime": "1209179738638471",
      "elapsedTime": "614922",
      "asyncId": 411,
      "triggerAsyncId": 410,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        412,
        413
      ],
      "uniqueid": 177
    },
    "178": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179738092789",
      "endTime": "1209179738674639",
      "elapsedTime": "581850",
      "asyncId": 412,
      "triggerAsyncId": 411,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 178
    },
    "179": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179738156899",
      "endTime": "1209179738171857",
      "elapsedTime": "14958",
      "asyncId": 413,
      "triggerAsyncId": 411,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        414
      ],
      "uniqueid": 179
    },
    "180": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179738220228",
      "endTime": "1209179738555736",
      "elapsedTime": "335508",
      "asyncId": 414,
      "triggerAsyncId": 413,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        415
      ],
      "uniqueid": 180
    },
    "181": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179738778764",
      "endTime": "1209179739392624",
      "elapsedTime": "613860",
      "asyncId": 418,
      "triggerAsyncId": 376,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 181
    },
    "182": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179738851490",
      "endTime": "1209179738867631",
      "elapsedTime": "16141",
      "asyncId": 419,
      "triggerAsyncId": 376,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        420
      ],
      "uniqueid": 182
    },
    "183": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179738938303",
      "endTime": "1209179739368439",
      "elapsedTime": "430136",
      "asyncId": 420,
      "triggerAsyncId": 419,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        421,
        422
      ],
      "uniqueid": 183
    },
    "184": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179739022401",
      "endTime": "1209179739403845",
      "elapsedTime": "381444",
      "asyncId": 421,
      "triggerAsyncId": 420,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 184
    },
    "185": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179739098323",
      "endTime": "1209179739113021",
      "elapsedTime": "14698",
      "asyncId": 422,
      "triggerAsyncId": 420,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        423
      ],
      "uniqueid": 185
    },
    "186": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179739161732",
      "endTime": "1209179739292537",
      "elapsedTime": "130805",
      "asyncId": 423,
      "triggerAsyncId": 422,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        424
      ],
      "uniqueid": 186
    },
    "187": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179739488624",
      "endTime": "1209179743380096",
      "elapsedTime": "3891472",
      "asyncId": 427,
      "triggerAsyncId": 377,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 187
    },
    "188": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179739553275",
      "endTime": "1209179739568514",
      "elapsedTime": "15239",
      "asyncId": 428,
      "triggerAsyncId": 377,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        429
      ],
      "uniqueid": 188
    },
    "189": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179739631232",
      "endTime": "1209179740119156",
      "elapsedTime": "487924",
      "asyncId": 429,
      "triggerAsyncId": 428,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        430,
        431
      ],
      "uniqueid": 189
    },
    "190": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179739698478",
      "endTime": "1209179740164771",
      "elapsedTime": "466293",
      "asyncId": 430,
      "triggerAsyncId": 429,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 190
    },
    "191": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179739766605",
      "endTime": "1209179739781653",
      "elapsedTime": "15048",
      "asyncId": 431,
      "triggerAsyncId": 429,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        432
      ],
      "uniqueid": 191
    },
    "192": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179739826117",
      "endTime": "1209179739984714",
      "elapsedTime": "158597",
      "asyncId": 432,
      "triggerAsyncId": 431,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        433
      ],
      "uniqueid": 192
    },
    "193": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179741300860",
      "endTime": "1209179741317461",
      "elapsedTime": "16601",
      "asyncId": 437,
      "triggerAsyncId": 436,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        438
      ],
      "uniqueid": 193
    },
    "194": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179741377043",
      "endTime": "1209179741741536",
      "elapsedTime": "364493",
      "asyncId": 438,
      "triggerAsyncId": 437,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        439,
        440
      ],
      "uniqueid": 194
    },
    "195": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179741494182",
      "endTime": "1209179741509861",
      "elapsedTime": "15679",
      "asyncId": 440,
      "triggerAsyncId": 438,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        441
      ],
      "uniqueid": 195
    },
    "196": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179741555888",
      "endTime": "1209179741648581",
      "elapsedTime": "92693",
      "asyncId": 441,
      "triggerAsyncId": 440,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        442
      ],
      "uniqueid": 196
    },
    "197": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179742920815",
      "endTime": "1209179742936635",
      "elapsedTime": "15820",
      "asyncId": 445,
      "triggerAsyncId": 444,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        446
      ],
      "uniqueid": 197
    },
    "198": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179742999012",
      "endTime": "1209179743354758",
      "elapsedTime": "355746",
      "asyncId": 446,
      "triggerAsyncId": 445,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        447,
        448
      ],
      "uniqueid": 198
    },
    "199": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179743126341",
      "endTime": "1209179743141900",
      "elapsedTime": "15559",
      "asyncId": 448,
      "triggerAsyncId": 446,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        449
      ],
      "uniqueid": 199
    },
    "200": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179743190681",
      "endTime": "1209179743276762",
      "elapsedTime": "86081",
      "asyncId": 449,
      "triggerAsyncId": 448,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        450
      ],
      "uniqueid": 200
    },
    "201": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179743480785",
      "endTime": "1209179744756896",
      "elapsedTime": "1276111",
      "asyncId": 452,
      "triggerAsyncId": 378,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 201
    },
    "202": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179743552429",
      "endTime": "1209179743568729",
      "elapsedTime": "16300",
      "asyncId": 453,
      "triggerAsyncId": 378,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        454
      ],
      "uniqueid": 202
    },
    "203": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179743629353",
      "endTime": "1209179744732210",
      "elapsedTime": "1102857",
      "asyncId": 454,
      "triggerAsyncId": 453,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        455,
        456
      ],
      "uniqueid": 203
    },
    "204": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179743691249",
      "endTime": "1209179744768598",
      "elapsedTime": "1077349",
      "asyncId": 455,
      "triggerAsyncId": 454,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 204
    },
    "205": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179743756812",
      "endTime": "1209179743771439",
      "elapsedTime": "14627",
      "asyncId": 456,
      "triggerAsyncId": 454,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        457
      ],
      "uniqueid": 205
    },
    "206": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179743819539",
      "endTime": "1209179744641910",
      "elapsedTime": "822371",
      "asyncId": 457,
      "triggerAsyncId": 456,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        458
      ],
      "uniqueid": 206
    },
    "207": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179744878954",
      "endTime": "1209179745496722",
      "elapsedTime": "617768",
      "asyncId": 461,
      "triggerAsyncId": 380,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 207
    },
    "208": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179744953965",
      "endTime": "1209179744972420",
      "elapsedTime": "18455",
      "asyncId": 462,
      "triggerAsyncId": 380,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        463
      ],
      "uniqueid": 208
    },
    "209": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179745064592",
      "endTime": "1209179745472296",
      "elapsedTime": "407704",
      "asyncId": 463,
      "triggerAsyncId": 462,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        464,
        465
      ],
      "uniqueid": 209
    },
    "210": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179745138371",
      "endTime": "1209179745508254",
      "elapsedTime": "369883",
      "asyncId": 464,
      "triggerAsyncId": 463,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 210
    },
    "211": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179745208362",
      "endTime": "1209179745224101",
      "elapsedTime": "15739",
      "asyncId": 465,
      "triggerAsyncId": 463,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        466
      ],
      "uniqueid": 211
    },
    "212": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179745270107",
      "endTime": "1209179745396454",
      "elapsedTime": "126347",
      "asyncId": 466,
      "triggerAsyncId": 465,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        467
      ],
      "uniqueid": 212
    },
    "213": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179746095714",
      "endTime": "1209179746114389",
      "elapsedTime": "18675",
      "asyncId": 476,
      "triggerAsyncId": 474,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        477
      ],
      "uniqueid": 213
    },
    "214": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179746308553",
      "endTime": "1209179747610994",
      "elapsedTime": "1302441",
      "asyncId": 477,
      "triggerAsyncId": 476,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        478,
        486
      ],
      "uniqueid": 214
    },
    "215": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179746463844",
      "endTime": "1209179747639106",
      "elapsedTime": "1175262",
      "asyncId": 478,
      "triggerAsyncId": 477,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        479
      ],
      "uniqueid": 215
    },
    "216": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179746700588",
      "endTime": "1209179747941944",
      "elapsedTime": "1241356",
      "asyncId": 480,
      "triggerAsyncId": 479,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        481,
        579
      ],
      "uniqueid": 216
    },
    "217": {
      "source": "test/unit/actor_test.js:158:8:158:8",
      "startTime": "1209179746808690",
      "endTime": "1209179747956171",
      "elapsedTime": "1147481",
      "asyncId": 481,
      "triggerAsyncId": 480,
      "io": "",
      "userCode": true,
      "line": "\n\n    return I.die()\n      .then(() => listeners = 0)\n      .catch(() => null)\n      .then(() => {\n        expect(listeners).toEqual(3)",
      "startLine": 158,
      "startCol": 8,
      "endLine": 158,
      "endCol": 8,
      "file": "test/unit/actor_test.js",
      "triggers": [
        482
      ],
      "uniqueid": 217
    },
    "218": {
      "source": "test/unit/actor_test.js:160:8:160:8",
      "startTime": "1209179747033932",
      "endTime": "1209179748122151",
      "elapsedTime": "1088219",
      "asyncId": 483,
      "triggerAsyncId": 482,
      "io": "",
      "userCode": true,
      "line": "\n      .then(() => listeners = 0)\n      .catch(() => null)\n      .then(() => {\n        expect(listeners).toEqual(3);\n      });\n  })",
      "startLine": 160,
      "startCol": 8,
      "endLine": 160,
      "endCol": 8,
      "file": "test/unit/actor_test.js",
      "triggers": [
        485
      ],
      "uniqueid": 218
    },
    "219": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179747154228",
      "endTime": "1209179748237527",
      "elapsedTime": "1083299",
      "asyncId": 485,
      "triggerAsyncId": 483,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 219
    },
    "220": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179747229699",
      "endTime": "1209179747244978",
      "elapsedTime": "15279",
      "asyncId": 486,
      "triggerAsyncId": 477,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        487
      ],
      "uniqueid": 220
    },
    "221": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179747286425",
      "endTime": "1209179747372076",
      "elapsedTime": "85651",
      "asyncId": 487,
      "triggerAsyncId": 486,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 221
    },
    "222": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179754064697",
      "endTime": "1209179754082490",
      "elapsedTime": "17793",
      "asyncId": 580,
      "triggerAsyncId": 578,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        586
      ],
      "uniqueid": 222
    },
    "223": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179757729063",
      "endTime": "1209179757745914",
      "elapsedTime": "16851",
      "asyncId": 587,
      "triggerAsyncId": 585,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        593
      ],
      "uniqueid": 223
    },
    "224": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179760112018",
      "endTime": "1209179760129621",
      "elapsedTime": "17603",
      "asyncId": 594,
      "triggerAsyncId": 592,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        611
      ],
      "uniqueid": 224
    },
    "225": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179765579172",
      "endTime": "1209179767408560",
      "elapsedTime": "1829388",
      "asyncId": 596,
      "triggerAsyncId": 592,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        600
      ],
      "uniqueid": 225
    },
    "226": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179765815605",
      "endTime": "1209179767379756",
      "elapsedTime": "1564151",
      "asyncId": 597,
      "triggerAsyncId": 592,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        598
      ],
      "uniqueid": 226
    },
    "227": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179766057308",
      "endTime": "1209179766196308",
      "elapsedTime": "139000",
      "asyncId": 598,
      "triggerAsyncId": 597,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        599
      ],
      "uniqueid": 227
    },
    "228": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179766176431",
      "endTime": "1209179766878026",
      "elapsedTime": "701595",
      "asyncId": 599,
      "triggerAsyncId": 598,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 228
    },
    "229": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179766328235",
      "endTime": "1209179767643790",
      "elapsedTime": "1315555",
      "asyncId": 600,
      "triggerAsyncId": 596,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        601
      ],
      "uniqueid": 229
    },
    "230": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179767520650",
      "endTime": "1209179767903958",
      "elapsedTime": "383308",
      "asyncId": 611,
      "triggerAsyncId": 594,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        612,
        614
      ],
      "uniqueid": 230
    },
    "231": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179767573980",
      "endTime": "1209179768195514",
      "elapsedTime": "621534",
      "asyncId": 612,
      "triggerAsyncId": 611,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        613,
        617
      ],
      "uniqueid": 231
    },
    "232": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179767696609",
      "endTime": "1209179767711988",
      "elapsedTime": "15379",
      "asyncId": 614,
      "triggerAsyncId": 611,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        615
      ],
      "uniqueid": 232
    },
    "233": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179767755039",
      "endTime": "1209179767834107",
      "elapsedTime": "79068",
      "asyncId": 615,
      "triggerAsyncId": 614,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 233
    },
    "234": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179767974730",
      "endTime": "1209179767992965",
      "elapsedTime": "18235",
      "asyncId": 617,
      "triggerAsyncId": 612,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        618
      ],
      "uniqueid": 234
    },
    "235": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179768059028",
      "endTime": "1209179768126124",
      "elapsedTime": "67096",
      "asyncId": 618,
      "triggerAsyncId": 617,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 235
    },
    "236": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179769882565",
      "endTime": "1209179769900860",
      "elapsedTime": "18295",
      "asyncId": 624,
      "triggerAsyncId": 622,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        637
      ],
      "uniqueid": 236
    },
    "237": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179771427009",
      "endTime": "1209179772679737",
      "elapsedTime": "1252728",
      "asyncId": 626,
      "triggerAsyncId": 622,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        630
      ],
      "uniqueid": 237
    },
    "238": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179771550381",
      "endTime": "1209179772653488",
      "elapsedTime": "1103107",
      "asyncId": 627,
      "triggerAsyncId": 622,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        628
      ],
      "uniqueid": 238
    },
    "239": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179771731069",
      "endTime": "1209179771872193",
      "elapsedTime": "141124",
      "asyncId": 628,
      "triggerAsyncId": 627,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        629
      ],
      "uniqueid": 239
    },
    "240": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179771854130",
      "endTime": "1209179772310765",
      "elapsedTime": "456635",
      "asyncId": 629,
      "triggerAsyncId": 628,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 240
    },
    "241": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179772006265",
      "endTime": "1209179772887095",
      "elapsedTime": "880830",
      "asyncId": 630,
      "triggerAsyncId": 626,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        631
      ],
      "uniqueid": 241
    },
    "242": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179772757643",
      "endTime": "1209179773141582",
      "elapsedTime": "383939",
      "asyncId": 637,
      "triggerAsyncId": 624,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        638,
        640
      ],
      "uniqueid": 242
    },
    "243": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179772812435",
      "endTime": "1209179773569213",
      "elapsedTime": "756778",
      "asyncId": 638,
      "triggerAsyncId": 637,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        639,
        643
      ],
      "uniqueid": 243
    },
    "244": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179772933452",
      "endTime": "1209179772948140",
      "elapsedTime": "14688",
      "asyncId": 640,
      "triggerAsyncId": 637,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        641
      ],
      "uniqueid": 244
    },
    "245": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179772993494",
      "endTime": "1209179773060861",
      "elapsedTime": "67367",
      "asyncId": 641,
      "triggerAsyncId": 640,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 245
    },
    "246": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179773211022",
      "endTime": "1209179773225740",
      "elapsedTime": "14718",
      "asyncId": 643,
      "triggerAsyncId": 638,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        644
      ],
      "uniqueid": 246
    },
    "247": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179773267929",
      "endTime": "1209179773497048",
      "elapsedTime": "229119",
      "asyncId": 644,
      "triggerAsyncId": 643,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 247
    },
    "248": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179773874035",
      "endTime": "1209179773891127",
      "elapsedTime": "17092",
      "asyncId": 652,
      "triggerAsyncId": 650,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        665
      ],
      "uniqueid": 248
    },
    "249": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179774849652",
      "endTime": "1209179776014375",
      "elapsedTime": "1164723",
      "asyncId": 654,
      "triggerAsyncId": 650,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        658
      ],
      "uniqueid": 249
    },
    "250": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179774967584",
      "endTime": "1209179775981844",
      "elapsedTime": "1014260",
      "asyncId": 655,
      "triggerAsyncId": 650,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        656
      ],
      "uniqueid": 250
    },
    "251": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179775137502",
      "endTime": "1209179775272836",
      "elapsedTime": "135334",
      "asyncId": 656,
      "triggerAsyncId": 655,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        657
      ],
      "uniqueid": 251
    },
    "252": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179775255383",
      "endTime": "1209179775676903",
      "elapsedTime": "421520",
      "asyncId": 657,
      "triggerAsyncId": 656,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 252
    },
    "253": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179775395836",
      "endTime": "1209179776211284",
      "elapsedTime": "815448",
      "asyncId": 658,
      "triggerAsyncId": 654,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        659
      ],
      "uniqueid": 253
    },
    "254": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179776087622",
      "endTime": "1209179776418502",
      "elapsedTime": "330880",
      "asyncId": 665,
      "triggerAsyncId": 652,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        666,
        668
      ],
      "uniqueid": 254
    },
    "255": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179776142786",
      "endTime": "1209179776764591",
      "elapsedTime": "621805",
      "asyncId": 666,
      "triggerAsyncId": 665,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        667,
        671
      ],
      "uniqueid": 255
    },
    "256": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179776256428",
      "endTime": "1209179776270735",
      "elapsedTime": "14307",
      "asyncId": 668,
      "triggerAsyncId": 665,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        669
      ],
      "uniqueid": 256
    },
    "257": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179776311622",
      "endTime": "1209179776356857",
      "elapsedTime": "45235",
      "asyncId": 669,
      "triggerAsyncId": 668,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 257
    },
    "258": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179776474136",
      "endTime": "1209179776488303",
      "elapsedTime": "14167",
      "asyncId": 671,
      "triggerAsyncId": 666,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        672
      ],
      "uniqueid": 258
    },
    "259": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179776528859",
      "endTime": "1209179776693417",
      "elapsedTime": "164558",
      "asyncId": 672,
      "triggerAsyncId": 671,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 259
    },
    "260": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179777107663",
      "endTime": "1209179777128312",
      "elapsedTime": "20649",
      "asyncId": 680,
      "triggerAsyncId": 678,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        696
      ],
      "uniqueid": 260
    },
    "261": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179778021516",
      "endTime": "1209179780488238",
      "elapsedTime": "2466722",
      "asyncId": 682,
      "triggerAsyncId": 678,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        686
      ],
      "uniqueid": 261
    },
    "262": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179778141340",
      "endTime": "1209179780462650",
      "elapsedTime": "2321310",
      "asyncId": 683,
      "triggerAsyncId": 678,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        684
      ],
      "uniqueid": 262
    },
    "263": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179778299056",
      "endTime": "1209179778428468",
      "elapsedTime": "129412",
      "asyncId": 684,
      "triggerAsyncId": 683,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        685
      ],
      "uniqueid": 263
    },
    "264": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179778411126",
      "endTime": "1209179778836032",
      "elapsedTime": "424906",
      "asyncId": 685,
      "triggerAsyncId": 684,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 264
    },
    "265": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179778553132",
      "endTime": "1209179780675579",
      "elapsedTime": "2122447",
      "asyncId": 686,
      "triggerAsyncId": 682,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        687
      ],
      "uniqueid": 265
    },
    "266": {
      "source": "lib/interfaces/gherkin.js:51:15:51:15",
      "startTime": "1209179779073767",
      "endTime": "1209179780430460",
      "elapsedTime": "1356693",
      "asyncId": 691,
      "triggerAsyncId": 689,
      "io": false,
      "userCode": true,
      "line": "\n      event.dispatcher.on(event.step.before, setMetaStep);\n      try {\n        await fn(...fn.params);\n        step.status = 'passed';\n      } catch (err) {\n        step.status = 'failed'",
      "startLine": 51,
      "startCol": 15,
      "endLine": 51,
      "endCol": 15,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 266
    },
    "267": {
      "source": "test/unit/bdd_test.js:103:14:103:14",
      "startTime": "1209179779147025",
      "endTime": "1209179780403068",
      "elapsedTime": "1256043",
      "asyncId": 692,
      "triggerAsyncId": 689,
      "io": "",
      "userCode": true,
      "line": "\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', async () => {\n      return new Promise((checkoutDone) => {\n        sum += 10;\n        setTimeout(checkoutDone, 0);\n      })",
      "startLine": 103,
      "startCol": 14,
      "endLine": 103,
      "endCol": 14,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 267
    },
    "268": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179780558740",
      "endTime": "1209179780891614",
      "elapsedTime": "332874",
      "asyncId": 696,
      "triggerAsyncId": 680,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        697,
        699
      ],
      "uniqueid": 268
    },
    "269": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179780609485",
      "endTime": "1209179781241850",
      "elapsedTime": "632365",
      "asyncId": 697,
      "triggerAsyncId": 696,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        698,
        702
      ],
      "uniqueid": 269
    },
    "270": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179780721234",
      "endTime": "1209179780735551",
      "elapsedTime": "14317",
      "asyncId": 699,
      "triggerAsyncId": 696,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        700
      ],
      "uniqueid": 270
    },
    "271": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179780780335",
      "endTime": "1209179780828746",
      "elapsedTime": "48411",
      "asyncId": 700,
      "triggerAsyncId": 699,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 271
    },
    "272": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179780948030",
      "endTime": "1209179780962547",
      "elapsedTime": "14517",
      "asyncId": 702,
      "triggerAsyncId": 697,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        703
      ],
      "uniqueid": 272
    },
    "273": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179781009715",
      "endTime": "1209179781170707",
      "elapsedTime": "160992",
      "asyncId": 703,
      "triggerAsyncId": 702,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 273
    },
    "274": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179781534949",
      "endTime": "1209179781551771",
      "elapsedTime": "16822",
      "asyncId": 711,
      "triggerAsyncId": 709,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        715
      ],
      "uniqueid": 274
    },
    "275": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179784563865",
      "endTime": "1209179787476823",
      "elapsedTime": "2912958",
      "asyncId": 713,
      "triggerAsyncId": 709,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        721
      ],
      "uniqueid": 275
    },
    "276": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179784682777",
      "endTime": "1209179787426188",
      "elapsedTime": "2743411",
      "asyncId": 714,
      "triggerAsyncId": 709,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        719
      ],
      "uniqueid": 276
    },
    "277": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179784934559",
      "endTime": "1209179787500116",
      "elapsedTime": "2565557",
      "asyncId": 715,
      "triggerAsyncId": 711,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        716,
        723
      ],
      "uniqueid": 277
    },
    "278": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179785097064",
      "endTime": "1209179788067460",
      "elapsedTime": "2970396",
      "asyncId": 716,
      "triggerAsyncId": 715,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        717,
        745
      ],
      "uniqueid": 278
    },
    "279": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179785364184",
      "endTime": "1209179788359046",
      "elapsedTime": "2994862",
      "asyncId": 718,
      "triggerAsyncId": 717,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        725,
        748
      ],
      "uniqueid": 279
    },
    "280": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179785474681",
      "endTime": "1209179785604464",
      "elapsedTime": "129783",
      "asyncId": 719,
      "triggerAsyncId": 714,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        720
      ],
      "uniqueid": 280
    },
    "281": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179785584036",
      "endTime": "1209179786467061",
      "elapsedTime": "883025",
      "asyncId": 720,
      "triggerAsyncId": 719,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 281
    },
    "282": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179785727485",
      "endTime": "1209179787685344",
      "elapsedTime": "1957859",
      "asyncId": 721,
      "triggerAsyncId": 713,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        722
      ],
      "uniqueid": 282
    },
    "283": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179785917261",
      "endTime": "1209179785932850",
      "elapsedTime": "15589",
      "asyncId": 723,
      "triggerAsyncId": 715,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        724
      ],
      "uniqueid": 283
    },
    "284": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179785975079",
      "endTime": "1209179787452708",
      "elapsedTime": "1477629",
      "asyncId": 724,
      "triggerAsyncId": 723,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        732
      ],
      "uniqueid": 284
    },
    "285": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179786125190",
      "endTime": "1209179788801214",
      "elapsedTime": "2676024",
      "asyncId": 725,
      "triggerAsyncId": 718,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        726,
        752
      ],
      "uniqueid": 285
    },
    "286": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179786208897",
      "endTime": "1209179789159566",
      "elapsedTime": "2950669",
      "asyncId": 726,
      "triggerAsyncId": 725,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        727,
        758
      ],
      "uniqueid": 286
    },
    "287": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179786339211",
      "endTime": "1209179789450401",
      "elapsedTime": "3111190",
      "asyncId": 728,
      "triggerAsyncId": 727,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        735,
        761
      ],
      "uniqueid": 287
    },
    "288": {
      "source": "test/unit/bdd_test.js:123:28:123:28",
      "startTime": "1209179786629365",
      "endTime": "1209179786646227",
      "elapsedTime": "16862",
      "asyncId": 732,
      "triggerAsyncId": 724,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 28,
      "endLine": 123,
      "endCol": 28,
      "file": "test/unit/bdd_test.js",
      "triggers": [
        733
      ],
      "uniqueid": 288
    },
    "289": {
      "source": "test/unit/bdd_test.js:123:38:123:38",
      "startTime": "1209179786701881",
      "endTime": "1209179787351729",
      "elapsedTime": "649848",
      "asyncId": 733,
      "triggerAsyncId": 732,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 38,
      "endLine": 123,
      "endCol": 38,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 289
    },
    "290": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179786964964",
      "endTime": "1209179789893171",
      "elapsedTime": "2928207",
      "asyncId": 735,
      "triggerAsyncId": 728,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        736,
        765
      ],
      "uniqueid": 290
    },
    "291": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179787056295",
      "endTime": "1209179790238147",
      "elapsedTime": "3181852",
      "asyncId": 736,
      "triggerAsyncId": 735,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        737,
        771
      ],
      "uniqueid": 291
    },
    "292": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179787190717",
      "endTime": "1209179790525455",
      "elapsedTime": "3334738",
      "asyncId": 738,
      "triggerAsyncId": 737,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        742,
        774
      ],
      "uniqueid": 292
    },
    "293": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179787566240",
      "endTime": "1209179790735619",
      "elapsedTime": "3169379",
      "asyncId": 742,
      "triggerAsyncId": 738,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        743,
        778
      ],
      "uniqueid": 293
    },
    "294": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179787618729",
      "endTime": "1209179791066679",
      "elapsedTime": "3447950",
      "asyncId": 743,
      "triggerAsyncId": 742,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        744,
        781
      ],
      "uniqueid": 294
    },
    "295": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179787731270",
      "endTime": "1209179787745847",
      "elapsedTime": "14577",
      "asyncId": 745,
      "triggerAsyncId": 716,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        746
      ],
      "uniqueid": 295
    },
    "296": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179787797103",
      "endTime": "1209179787989744",
      "elapsedTime": "192641",
      "asyncId": 746,
      "triggerAsyncId": 745,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 296
    },
    "297": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179788139845",
      "endTime": "1209179788154683",
      "elapsedTime": "14838",
      "asyncId": 748,
      "triggerAsyncId": 718,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        749
      ],
      "uniqueid": 297
    },
    "298": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179788198906",
      "endTime": "1209179788334550",
      "elapsedTime": "135644",
      "asyncId": 749,
      "triggerAsyncId": 748,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 298
    },
    "299": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179788415371",
      "endTime": "1209179788429959",
      "elapsedTime": "14588",
      "asyncId": 752,
      "triggerAsyncId": 725,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        753
      ],
      "uniqueid": 299
    },
    "300": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179788470946",
      "endTime": "1209179788777530",
      "elapsedTime": "306584",
      "asyncId": 753,
      "triggerAsyncId": 752,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        754
      ],
      "uniqueid": 300
    },
    "301": {
      "source": "test/unit/bdd_test.js:123:28:123:28",
      "startTime": "1209179788564421",
      "endTime": "1209179788580381",
      "elapsedTime": "15960",
      "asyncId": 754,
      "triggerAsyncId": 753,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 28,
      "endLine": 123,
      "endCol": 28,
      "file": "test/unit/bdd_test.js",
      "triggers": [
        755
      ],
      "uniqueid": 301
    },
    "302": {
      "source": "test/unit/bdd_test.js:123:38:123:38",
      "startTime": "1209179788635905",
      "endTime": "1209179788717898",
      "elapsedTime": "81993",
      "asyncId": 755,
      "triggerAsyncId": 754,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 38,
      "endLine": 123,
      "endCol": 38,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 302
    },
    "303": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179788857971",
      "endTime": "1209179788872799",
      "elapsedTime": "14828",
      "asyncId": 758,
      "triggerAsyncId": 726,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        759
      ],
      "uniqueid": 303
    },
    "304": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179788914697",
      "endTime": "1209179789092240",
      "elapsedTime": "177543",
      "asyncId": 759,
      "triggerAsyncId": 758,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 304
    },
    "305": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179789229828",
      "endTime": "1209179789244766",
      "elapsedTime": "14938",
      "asyncId": 761,
      "triggerAsyncId": 728,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        762
      ],
      "uniqueid": 305
    },
    "306": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179789286504",
      "endTime": "1209179789426757",
      "elapsedTime": "140253",
      "asyncId": 762,
      "triggerAsyncId": 761,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 306
    },
    "307": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179789511896",
      "endTime": "1209179789527335",
      "elapsedTime": "15439",
      "asyncId": 765,
      "triggerAsyncId": 735,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        766
      ],
      "uniqueid": 307
    },
    "308": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179789569765",
      "endTime": "1209179789869827",
      "elapsedTime": "300062",
      "asyncId": 766,
      "triggerAsyncId": 765,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        767
      ],
      "uniqueid": 308
    },
    "309": {
      "source": "test/unit/bdd_test.js:123:28:123:28",
      "startTime": "1209179789660595",
      "endTime": "1209179789676354",
      "elapsedTime": "15759",
      "asyncId": 767,
      "triggerAsyncId": 766,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 28,
      "endLine": 123,
      "endCol": 28,
      "file": "test/unit/bdd_test.js",
      "triggers": [
        768
      ],
      "uniqueid": 309
    },
    "310": {
      "source": "test/unit/bdd_test.js:123:38:123:38",
      "startTime": "1209179789730235",
      "endTime": "1209179789810305",
      "elapsedTime": "80070",
      "asyncId": 768,
      "triggerAsyncId": 767,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 38,
      "endLine": 123,
      "endCol": 38,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 310
    },
    "311": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179789949336",
      "endTime": "1209179789963803",
      "elapsedTime": "14467",
      "asyncId": 771,
      "triggerAsyncId": 736,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        772
      ],
      "uniqueid": 311
    },
    "312": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179790013726",
      "endTime": "1209179790172113",
      "elapsedTime": "158387",
      "asyncId": 772,
      "triggerAsyncId": 771,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 312
    },
    "313": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179790308639",
      "endTime": "1209179790323417",
      "elapsedTime": "14778",
      "asyncId": 774,
      "triggerAsyncId": 738,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        775
      ],
      "uniqueid": 313
    },
    "314": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179790364564",
      "endTime": "1209179790501090",
      "elapsedTime": "136526",
      "asyncId": 775,
      "triggerAsyncId": 774,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 314
    },
    "315": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179790583785",
      "endTime": "1209179790598743",
      "elapsedTime": "14958",
      "asyncId": 778,
      "triggerAsyncId": 742,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        779
      ],
      "uniqueid": 315
    },
    "316": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179790639759",
      "endTime": "1209179790673943",
      "elapsedTime": "34184",
      "asyncId": 779,
      "triggerAsyncId": 778,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 316
    },
    "317": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179790793367",
      "endTime": "1209179790808155",
      "elapsedTime": "14788",
      "asyncId": 781,
      "triggerAsyncId": 743,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        782
      ],
      "uniqueid": 317
    },
    "318": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179790854392",
      "endTime": "1209179790984425",
      "elapsedTime": "130033",
      "asyncId": 782,
      "triggerAsyncId": 781,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 318
    },
    "319": {
      "source": "test/unit/bdd_test.js:138:26:138:26",
      "startTime": "1209179790968475",
      "endTime": "1209179791451400",
      "elapsedTime": "482925",
      "asyncId": 783,
      "triggerAsyncId": 744,
      "io": "",
      "userCode": true,
      "line": "\n    const suite = run(text);\n    suite.tests[0].fn(() => {\n      recorder.promise().then(() => {\n        printed.should.include.members([\n          'add 600',\n          'add 1600'",
      "startLine": 138,
      "startCol": 26,
      "endLine": 138,
      "endCol": 26,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 319
    },
    "320": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179791719703",
      "endTime": "1209179791741614",
      "elapsedTime": "21911",
      "asyncId": 791,
      "triggerAsyncId": 789,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        797
      ],
      "uniqueid": 320
    },
    "321": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179792756185",
      "endTime": "1209179792774239",
      "elapsedTime": "18054",
      "asyncId": 798,
      "triggerAsyncId": 796,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        807
      ],
      "uniqueid": 321
    },
    "322": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179793470013",
      "endTime": "1209179794370991",
      "elapsedTime": "900978",
      "asyncId": 800,
      "triggerAsyncId": 796,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        804
      ],
      "uniqueid": 322
    },
    "323": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179793591671",
      "endTime": "1209179794288536",
      "elapsedTime": "696865",
      "asyncId": 801,
      "triggerAsyncId": 796,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        802
      ],
      "uniqueid": 323
    },
    "324": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179793823595",
      "endTime": "1209179793957196",
      "elapsedTime": "133601",
      "asyncId": 802,
      "triggerAsyncId": 801,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        803
      ],
      "uniqueid": 324
    },
    "325": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179793939402",
      "endTime": "1209179794301491",
      "elapsedTime": "362089",
      "asyncId": 803,
      "triggerAsyncId": 802,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 325
    },
    "326": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179794099492",
      "endTime": "1209179794572108",
      "elapsedTime": "472616",
      "asyncId": 804,
      "triggerAsyncId": 800,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        805
      ],
      "uniqueid": 326
    },
    "327": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179794440451",
      "endTime": "1209179794789094",
      "elapsedTime": "348643",
      "asyncId": 807,
      "triggerAsyncId": 798,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        808,
        810
      ],
      "uniqueid": 327
    },
    "328": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179794501345",
      "endTime": "1209179795225692",
      "elapsedTime": "724347",
      "asyncId": 808,
      "triggerAsyncId": 807,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        809,
        813
      ],
      "uniqueid": 328
    },
    "329": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179794618785",
      "endTime": "1209179794634485",
      "elapsedTime": "15700",
      "asyncId": 810,
      "triggerAsyncId": 807,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        811
      ],
      "uniqueid": 329
    },
    "330": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179794677686",
      "endTime": "1209179794725225",
      "elapsedTime": "47539",
      "asyncId": 811,
      "triggerAsyncId": 810,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 330
    },
    "331": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179794846873",
      "endTime": "1209179794862913",
      "elapsedTime": "16040",
      "asyncId": 813,
      "triggerAsyncId": 808,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        814
      ],
      "uniqueid": 331
    },
    "332": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179794904381",
      "endTime": "1209179795151654",
      "elapsedTime": "247273",
      "asyncId": 814,
      "triggerAsyncId": 813,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 332
    },
    "333": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179795528540",
      "endTime": "1209179795545211",
      "elapsedTime": "16671",
      "asyncId": 822,
      "triggerAsyncId": 820,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        828
      ],
      "uniqueid": 333
    },
    "334": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179797502959",
      "endTime": "1209179797520031",
      "elapsedTime": "17072",
      "asyncId": 829,
      "triggerAsyncId": 827,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        830
      ],
      "uniqueid": 334
    },
    "335": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179798618830",
      "endTime": "1209179801351180",
      "elapsedTime": "2732350",
      "asyncId": 831,
      "triggerAsyncId": 830,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 335
    },
    "336": {
      "source": "lib/scenario.js:137:10:137:10",
      "startTime": "1209179799080165",
      "endTime": "1209179801365257",
      "elapsedTime": "2285092",
      "asyncId": 832,
      "triggerAsyncId": 827,
      "io": "",
      "userCode": true,
      "line": "\n\n    if (isAsyncFunction(fn)) {\n      fn.call(this, getInjectedArguments(fn)).then(() => {\n        recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n        recorder.add(`finish ${hookName} hook`, () => done());\n        recorder.catch()",
      "startLine": 137,
      "startCol": 10,
      "endLine": 137,
      "endCol": 10,
      "file": "lib/scenario.js",
      "triggers": [
        836
      ],
      "uniqueid": 336
    },
    "337": {
      "source": "lib/interfaces/gherkin.js:67:64:67:64",
      "startTime": "1209179799220929",
      "endTime": "1209179801151947",
      "elapsedTime": "1931018",
      "asyncId": 833,
      "triggerAsyncId": 827,
      "io": "",
      "userCode": true,
      "line": "\n  for (const child of ast.feature.children) {\n    if (child.type === 'Background') {\n      suite.beforeEach('Before', scenario.injected(async () => runSteps(child.steps), suite, 'before'));\n      continue;\n    }\n    if (child.type === 'ScenarioOutline') ",
      "startLine": 67,
      "startCol": 64,
      "endLine": 67,
      "endCol": 64,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        834,
        846
      ],
      "uniqueid": 337
    },
    "338": {
      "source": "lib/interfaces/gherkin.js:67:64:67:64",
      "startTime": "1209179799465296",
      "endTime": "1209179799614556",
      "elapsedTime": "149260",
      "asyncId": 834,
      "triggerAsyncId": 833,
      "io": "",
      "userCode": true,
      "line": "\n  for (const child of ast.feature.children) {\n    if (child.type === 'Background') {\n      suite.beforeEach('Before', scenario.injected(async () => runSteps(child.steps), suite, 'before'));\n      continue;\n    }\n    if (child.type === 'ScenarioOutline') ",
      "startLine": 67,
      "startCol": 64,
      "endLine": 67,
      "endCol": 64,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        835
      ],
      "uniqueid": 338
    },
    "339": {
      "source": "lib/interfaces/gherkin.js:67:64:67:64",
      "startTime": "1209179799595440",
      "endTime": "1209179801166143",
      "elapsedTime": "1570703",
      "asyncId": 835,
      "triggerAsyncId": 834,
      "io": "",
      "userCode": true,
      "line": "\n  for (const child of ast.feature.children) {\n    if (child.type === 'Background') {\n      suite.beforeEach('Before', scenario.injected(async () => runSteps(child.steps), suite, 'before'));\n      continue;\n    }\n    if (child.type === 'ScenarioOutline') ",
      "startLine": 67,
      "startCol": 64,
      "endLine": 67,
      "endCol": 64,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 339
    },
    "340": {
      "source": "lib/scenario.js:137:47:137:47",
      "startTime": "1209179799754979",
      "endTime": "1209179801639721",
      "elapsedTime": "1884742",
      "asyncId": 836,
      "triggerAsyncId": 832,
      "io": "",
      "userCode": true,
      "line": "\n\n    if (isAsyncFunction(fn)) {\n      fn.call(this, getInjectedArguments(fn)).then(() => {\n        recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n        recorder.add(`finish ${hookName} hook`, () => done());\n        recorder.catch()",
      "startLine": 137,
      "startCol": 47,
      "endLine": 137,
      "endCol": 47,
      "file": "lib/scenario.js",
      "triggers": [
        837
      ],
      "uniqueid": 340
    },
    "341": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179800164026",
      "endTime": "1209179801390404",
      "elapsedTime": "1226378",
      "asyncId": 838,
      "triggerAsyncId": 827,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        842
      ],
      "uniqueid": 341
    },
    "342": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179800284171",
      "endTime": "1209179801244641",
      "elapsedTime": "960470",
      "asyncId": 839,
      "triggerAsyncId": 827,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        840,
        847
      ],
      "uniqueid": 342
    },
    "343": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179800560819",
      "endTime": "1209179800700020",
      "elapsedTime": "139201",
      "asyncId": 840,
      "triggerAsyncId": 839,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        841
      ],
      "uniqueid": 343
    },
    "344": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179800680934",
      "endTime": "1209179801256944",
      "elapsedTime": "576010",
      "asyncId": 841,
      "triggerAsyncId": 840,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 344
    },
    "345": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179800825956",
      "endTime": "1209179801836560",
      "elapsedTime": "1010604",
      "asyncId": 842,
      "triggerAsyncId": 838,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        843
      ],
      "uniqueid": 345
    },
    "346": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179801503005",
      "endTime": "1209179802116685",
      "elapsedTime": "613680",
      "asyncId": 848,
      "triggerAsyncId": 830,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        849,
        854
      ],
      "uniqueid": 346
    },
    "347": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179801565111",
      "endTime": "1209179802377964",
      "elapsedTime": "812853",
      "asyncId": 849,
      "triggerAsyncId": 848,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        850,
        857
      ],
      "uniqueid": 347
    },
    "348": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179801702929",
      "endTime": "1209179802629946",
      "elapsedTime": "927017",
      "asyncId": 851,
      "triggerAsyncId": 850,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        852,
        860
      ],
      "uniqueid": 348
    },
    "349": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179801761860",
      "endTime": "1209179802846402",
      "elapsedTime": "1084542",
      "asyncId": 852,
      "triggerAsyncId": 851,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        853,
        863
      ],
      "uniqueid": 349
    },
    "350": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179801888958",
      "endTime": "1209179801903385",
      "elapsedTime": "14427",
      "asyncId": 854,
      "triggerAsyncId": 848,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        855
      ],
      "uniqueid": 350
    },
    "351": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179801951726",
      "endTime": "1209179802043788",
      "elapsedTime": "92062",
      "asyncId": 855,
      "triggerAsyncId": 854,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        856
      ],
      "uniqueid": 351
    },
    "352": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179802184171",
      "endTime": "1209179802199339",
      "elapsedTime": "15168",
      "asyncId": 857,
      "triggerAsyncId": 849,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        858
      ],
      "uniqueid": 352
    },
    "353": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179802248241",
      "endTime": "1209179802309145",
      "elapsedTime": "60904",
      "asyncId": 858,
      "triggerAsyncId": 857,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        859
      ],
      "uniqueid": 353
    },
    "354": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179802459898",
      "endTime": "1209179802475357",
      "elapsedTime": "15459",
      "asyncId": 860,
      "triggerAsyncId": 851,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        861
      ],
      "uniqueid": 354
    },
    "355": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179802524288",
      "endTime": "1209179802558102",
      "elapsedTime": "33814",
      "asyncId": 861,
      "triggerAsyncId": 860,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        862
      ],
      "uniqueid": 355
    },
    "356": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179802694778",
      "endTime": "1209179802709465",
      "elapsedTime": "14687",
      "asyncId": 863,
      "triggerAsyncId": 852,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        864
      ],
      "uniqueid": 356
    },
    "357": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179802755702",
      "endTime": "1209179802785468",
      "elapsedTime": "29766",
      "asyncId": 864,
      "triggerAsyncId": 863,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        865
      ],
      "uniqueid": 357
    },
    "358": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179803141315",
      "endTime": "1209179803158296",
      "elapsedTime": "16981",
      "asyncId": 870,
      "triggerAsyncId": 868,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        883
      ],
      "uniqueid": 358
    },
    "359": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179805356535",
      "endTime": "1209179807440470",
      "elapsedTime": "2083935",
      "asyncId": 872,
      "triggerAsyncId": 868,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        876
      ],
      "uniqueid": 359
    },
    "360": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1209179805599220",
      "endTime": "1209179807413840",
      "elapsedTime": "1814620",
      "asyncId": 873,
      "triggerAsyncId": 868,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        874
      ],
      "uniqueid": 360
    },
    "361": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1209179805923528",
      "endTime": "1209179806071245",
      "elapsedTime": "147717",
      "asyncId": 874,
      "triggerAsyncId": 873,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        875
      ],
      "uniqueid": 361
    },
    "362": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1209179806052550",
      "endTime": "1209179806769182",
      "elapsedTime": "716632",
      "asyncId": 875,
      "triggerAsyncId": 874,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 362
    },
    "363": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179806201990",
      "endTime": "1209179807639343",
      "elapsedTime": "1437353",
      "asyncId": 876,
      "triggerAsyncId": 872,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        877
      ],
      "uniqueid": 363
    },
    "364": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179807511593",
      "endTime": "1209179807857081",
      "elapsedTime": "345488",
      "asyncId": 883,
      "triggerAsyncId": 870,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        884,
        886
      ],
      "uniqueid": 364
    },
    "365": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179807563401",
      "endTime": "1209179809194697",
      "elapsedTime": "1631296",
      "asyncId": 884,
      "triggerAsyncId": 883,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        885,
        889
      ],
      "uniqueid": 365
    },
    "366": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179807687242",
      "endTime": "1209179807701689",
      "elapsedTime": "14447",
      "asyncId": 886,
      "triggerAsyncId": 883,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        887
      ],
      "uniqueid": 366
    },
    "367": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179807744079",
      "endTime": "1209179807792530",
      "elapsedTime": "48451",
      "asyncId": 887,
      "triggerAsyncId": 886,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 367
    },
    "368": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179807921792",
      "endTime": "1209179807936810",
      "elapsedTime": "15018",
      "asyncId": 889,
      "triggerAsyncId": 884,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        890
      ],
      "uniqueid": 368
    },
    "369": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179807980081",
      "endTime": "1209179808786973",
      "elapsedTime": "806892",
      "asyncId": 890,
      "triggerAsyncId": 889,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        891,
        892
      ],
      "uniqueid": 369
    },
    "370": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179808298608",
      "endTime": "1209179809701417",
      "elapsedTime": "1402809",
      "asyncId": 891,
      "triggerAsyncId": 890,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        895
      ],
      "uniqueid": 370
    },
    "371": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1209179808384369",
      "endTime": "1209179809674276",
      "elapsedTime": "1289907",
      "asyncId": 892,
      "triggerAsyncId": 890,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        893
      ],
      "uniqueid": 371
    },
    "372": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1209179808563484",
      "endTime": "1209179808639697",
      "elapsedTime": "76213",
      "asyncId": 893,
      "triggerAsyncId": 892,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        894
      ],
      "uniqueid": 372
    },
    "373": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1209179808623788",
      "endTime": "1209179809130938",
      "elapsedTime": "507150",
      "asyncId": 894,
      "triggerAsyncId": 893,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 373
    },
    "374": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179808709067",
      "endTime": "1209179809895961",
      "elapsedTime": "1186894",
      "asyncId": 895,
      "triggerAsyncId": 891,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        896
      ],
      "uniqueid": 374
    },
    "375": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179809773863",
      "endTime": "1209179810123778",
      "elapsedTime": "349915",
      "asyncId": 903,
      "triggerAsyncId": 885,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        904,
        906
      ],
      "uniqueid": 375
    },
    "376": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179809827673",
      "endTime": "1209179810477381",
      "elapsedTime": "649708",
      "asyncId": 904,
      "triggerAsyncId": 903,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        905,
        909
      ],
      "uniqueid": 376
    },
    "377": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179809942679",
      "endTime": "1209179809958408",
      "elapsedTime": "15729",
      "asyncId": 906,
      "triggerAsyncId": 903,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        907
      ],
      "uniqueid": 377
    },
    "378": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179810009344",
      "endTime": "1209179810058676",
      "elapsedTime": "49332",
      "asyncId": 907,
      "triggerAsyncId": 906,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 378
    },
    "379": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179810183149",
      "endTime": "1209179810200181",
      "elapsedTime": "17032",
      "asyncId": 909,
      "triggerAsyncId": 904,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        910
      ],
      "uniqueid": 379
    },
    "380": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179810243843",
      "endTime": "1209179810405295",
      "elapsedTime": "161452",
      "asyncId": 910,
      "triggerAsyncId": 909,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 380
    },
    "381": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179810776782",
      "endTime": "1209179810793563",
      "elapsedTime": "16781",
      "asyncId": 918,
      "triggerAsyncId": 916,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        929
      ],
      "uniqueid": 381
    },
    "382": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1209179811774461",
      "endTime": "1209179813113249",
      "elapsedTime": "1338788",
      "asyncId": 920,
      "triggerAsyncId": 916,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        924
      ],
      "uniqueid": 382
    },
    "383": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179811897241",
      "endTime": "1209179813087381",
      "elapsedTime": "1190140",
      "asyncId": 921,
      "triggerAsyncId": 916,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        922
      ],
      "uniqueid": 383
    },
    "384": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179812266423",
      "endTime": "1209179812408068",
      "elapsedTime": "141645",
      "asyncId": 922,
      "triggerAsyncId": 921,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        923
      ],
      "uniqueid": 384
    },
    "385": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1209179812388642",
      "endTime": "1209179813011549",
      "elapsedTime": "622907",
      "asyncId": 923,
      "triggerAsyncId": 922,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 385
    },
    "386": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1209179812537571",
      "endTime": "1209179813312132",
      "elapsedTime": "774561",
      "asyncId": 924,
      "triggerAsyncId": 920,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        925
      ],
      "uniqueid": 386
    },
    "387": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179813181577",
      "endTime": "1209179813532966",
      "elapsedTime": "351389",
      "asyncId": 929,
      "triggerAsyncId": 918,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        930,
        932
      ],
      "uniqueid": 387
    },
    "388": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179813242331",
      "endTime": "1209179813967420",
      "elapsedTime": "725089",
      "asyncId": 930,
      "triggerAsyncId": 929,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        931,
        935
      ],
      "uniqueid": 388
    },
    "389": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179813359441",
      "endTime": "1209179813375491",
      "elapsedTime": "16050",
      "asyncId": 932,
      "triggerAsyncId": 929,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        933
      ],
      "uniqueid": 389
    },
    "390": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179813418521",
      "endTime": "1209179813464808",
      "elapsedTime": "46287",
      "asyncId": 933,
      "triggerAsyncId": 932,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 390
    },
    "391": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179813590875",
      "endTime": "1209179813607706",
      "elapsedTime": "16831",
      "asyncId": 935,
      "triggerAsyncId": 930,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        936
      ],
      "uniqueid": 391
    },
    "392": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179813650046",
      "endTime": "1209179813894864",
      "elapsedTime": "244818",
      "asyncId": 936,
      "triggerAsyncId": 935,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 392
    },
    "393": {
      "source": "lib/data/dataScenarioConfig.js:52:49:52:49",
      "startTime": "1209179835515626",
      "endTime": "1209179835550832",
      "elapsedTime": "35206",
      "asyncId": 1231,
      "triggerAsyncId": 1230,
      "io": "",
      "userCode": true,
      "line": "\n     */\n  config(helper, obj) {\n    this.scenarios.forEach(scenario => scenario.config(helper, obj));\n    return this;\n  }",
      "startLine": 52,
      "startCol": 49,
      "endLine": 52,
      "endCol": 49,
      "file": "lib/data/dataScenarioConfig.js",
      "triggers": [],
      "uniqueid": 393
    },
    "394": {
      "source": "lib/data/dataScenarioConfig.js:52:49:52:49",
      "startTime": "1209179835655128",
      "endTime": "1209179835673292",
      "elapsedTime": "18164",
      "asyncId": 1232,
      "triggerAsyncId": 1230,
      "io": "",
      "userCode": true,
      "line": "\n     */\n  config(helper, obj) {\n    this.scenarios.forEach(scenario => scenario.config(helper, obj));\n    return this;\n  }",
      "startLine": 52,
      "startCol": 49,
      "endLine": 52,
      "endCol": 49,
      "file": "lib/data/dataScenarioConfig.js",
      "triggers": [],
      "uniqueid": 394
    },
    "395": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179908933545",
      "endTime": "1209179908953071",
      "elapsedTime": "19526",
      "asyncId": 1575,
      "triggerAsyncId": 1572,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1577
      ],
      "uniqueid": 395
    },
    "396": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179909451345",
      "endTime": "1209179910109398",
      "elapsedTime": "658053",
      "asyncId": 1577,
      "triggerAsyncId": 1575,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1578,
        1581
      ],
      "uniqueid": 396
    },
    "397": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179909637504",
      "endTime": "1209179915367941",
      "elapsedTime": "5730437",
      "asyncId": 1578,
      "triggerAsyncId": 1577,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1583,
        1585,
        1586,
        1616
      ],
      "uniqueid": 397
    },
    "398": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179909887973",
      "endTime": "1209179909903392",
      "elapsedTime": "15419",
      "asyncId": 1581,
      "triggerAsyncId": 1577,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1582
      ],
      "uniqueid": 398
    },
    "399": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179909956391",
      "endTime": "1209179910047131",
      "elapsedTime": "90740",
      "asyncId": 1582,
      "triggerAsyncId": 1581,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1584
      ],
      "uniqueid": 399
    },
    "400": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179910216158",
      "endTime": "1209179915340199",
      "elapsedTime": "5124041",
      "asyncId": 1585,
      "triggerAsyncId": 1578,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1592
      ],
      "uniqueid": 400
    },
    "401": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179910293373",
      "endTime": "1209179910309543",
      "elapsedTime": "16170",
      "asyncId": 1586,
      "triggerAsyncId": 1578,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1587
      ],
      "uniqueid": 401
    },
    "402": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179910380626",
      "endTime": "1209179910931237",
      "elapsedTime": "550611",
      "asyncId": 1587,
      "triggerAsyncId": 1586,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1588,
        1589
      ],
      "uniqueid": 402
    },
    "403": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179910454905",
      "endTime": "1209179910976823",
      "elapsedTime": "521918",
      "asyncId": 1588,
      "triggerAsyncId": 1587,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 403
    },
    "404": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179910528623",
      "endTime": "1209179910543862",
      "elapsedTime": "15239",
      "asyncId": 1589,
      "triggerAsyncId": 1587,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1590
      ],
      "uniqueid": 404
    },
    "405": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179910594537",
      "endTime": "1209179910760177",
      "elapsedTime": "165640",
      "asyncId": 1590,
      "triggerAsyncId": 1589,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1591
      ],
      "uniqueid": 405
    },
    "406": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179912092934",
      "endTime": "1209179912108874",
      "elapsedTime": "15940",
      "asyncId": 1595,
      "triggerAsyncId": 1594,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1596
      ],
      "uniqueid": 406
    },
    "407": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179912163527",
      "endTime": "1209179912606477",
      "elapsedTime": "442950",
      "asyncId": 1596,
      "triggerAsyncId": 1595,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1597,
        1599
      ],
      "uniqueid": 407
    },
    "408": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179912346650",
      "endTime": "1209179912362780",
      "elapsedTime": "16130",
      "asyncId": 1599,
      "triggerAsyncId": 1596,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1600
      ],
      "uniqueid": 408
    },
    "409": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179912408416",
      "endTime": "1209179912492743",
      "elapsedTime": "84327",
      "asyncId": 1600,
      "triggerAsyncId": 1599,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1601
      ],
      "uniqueid": 409
    },
    "410": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179914800858",
      "endTime": "1209179914817991",
      "elapsedTime": "17133",
      "asyncId": 1604,
      "triggerAsyncId": 1603,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1605
      ],
      "uniqueid": 410
    },
    "411": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179914874096",
      "endTime": "1209179915311255",
      "elapsedTime": "437159",
      "asyncId": 1605,
      "triggerAsyncId": 1604,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1606,
        1608
      ],
      "uniqueid": 411
    },
    "412": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179915070914",
      "endTime": "1209179915087836",
      "elapsedTime": "16922",
      "asyncId": 1608,
      "triggerAsyncId": 1605,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1609
      ],
      "uniqueid": 412
    },
    "413": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179915137880",
      "endTime": "1209179915216557",
      "elapsedTime": "78677",
      "asyncId": 1609,
      "triggerAsyncId": 1608,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1610
      ],
      "uniqueid": 413
    },
    "414": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179915875101",
      "endTime": "1209179917043731",
      "elapsedTime": "1168630",
      "asyncId": 1618,
      "triggerAsyncId": 1615,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1620
      ],
      "uniqueid": 414
    },
    "415": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179917397805",
      "endTime": "1209179918255742",
      "elapsedTime": "857937",
      "asyncId": 1620,
      "triggerAsyncId": 1618,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1621,
        1626
      ],
      "uniqueid": 415
    },
    "416": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179917525364",
      "endTime": "1209179918508876",
      "elapsedTime": "983512",
      "asyncId": 1621,
      "triggerAsyncId": 1620,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1622,
        1629
      ],
      "uniqueid": 416
    },
    "417": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179917764792",
      "endTime": "1209179922293989",
      "elapsedTime": "4529197",
      "asyncId": 1622,
      "triggerAsyncId": 1621,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1623,
        1632
      ],
      "uniqueid": 417
    },
    "418": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179917867304",
      "endTime": "1209179922408243",
      "elapsedTime": "4540939",
      "asyncId": 1623,
      "triggerAsyncId": 1622,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 418
    },
    "419": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179918090823",
      "endTime": "1209179918106252",
      "elapsedTime": "15429",
      "asyncId": 1626,
      "triggerAsyncId": 1620,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1627
      ],
      "uniqueid": 419
    },
    "420": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179918162627",
      "endTime": "1209179918192193",
      "elapsedTime": "29566",
      "asyncId": 1627,
      "triggerAsyncId": 1626,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1628
      ],
      "uniqueid": 420
    },
    "421": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179918343036",
      "endTime": "1209179918361911",
      "elapsedTime": "18875",
      "asyncId": 1629,
      "triggerAsyncId": 1621,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1630
      ],
      "uniqueid": 421
    },
    "422": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179918418407",
      "endTime": "1209179918448093",
      "elapsedTime": "29686",
      "asyncId": 1630,
      "triggerAsyncId": 1629,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1631
      ],
      "uniqueid": 422
    },
    "423": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179918575050",
      "endTime": "1209179918589758",
      "elapsedTime": "14708",
      "asyncId": 1632,
      "triggerAsyncId": 1622,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1633
      ],
      "uniqueid": 423
    },
    "424": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179918644029",
      "endTime": "1209179922270715",
      "elapsedTime": "3626686",
      "asyncId": 1633,
      "triggerAsyncId": 1632,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1635,
        1640
      ],
      "uniqueid": 424
    },
    "425": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1209179918913725",
      "endTime": "1209179918931278",
      "elapsedTime": "17553",
      "asyncId": 1635,
      "triggerAsyncId": 1633,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1636
      ],
      "uniqueid": 425
    },
    "426": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179919070028",
      "endTime": "1209179922124501",
      "elapsedTime": "3054473",
      "asyncId": 1636,
      "triggerAsyncId": 1635,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1637,
        1641,
        1642
      ],
      "uniqueid": 426
    },
    "427": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179919277587",
      "endTime": "1209179922248884",
      "elapsedTime": "2971297",
      "asyncId": 1638,
      "triggerAsyncId": 1637,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1639,
        1660
      ],
      "uniqueid": 427
    },
    "428": {
      "source": "lib/within.js:66:31:66:31",
      "startTime": "1209179919327350",
      "endTime": "1209179922259755",
      "elapsedTime": "2932405",
      "asyncId": 1639,
      "triggerAsyncId": 1638,
      "io": "",
      "userCode": true,
      "line": "\n    }\n    finalize();\n    return recorder.promise().then(() => res);\n  }, false, false);\n}",
      "startLine": 66,
      "startCol": 31,
      "endLine": 66,
      "endCol": 31,
      "file": "lib/within.js",
      "triggers": [
        1645
      ],
      "uniqueid": 428
    },
    "429": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179919466050",
      "endTime": "1209179922104283",
      "elapsedTime": "2638233",
      "asyncId": 1641,
      "triggerAsyncId": 1636,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1649
      ],
      "uniqueid": 429
    },
    "430": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179919540379",
      "endTime": "1209179919556960",
      "elapsedTime": "16581",
      "asyncId": 1642,
      "triggerAsyncId": 1636,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1643
      ],
      "uniqueid": 430
    },
    "431": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179919625569",
      "endTime": "1209179920190427",
      "elapsedTime": "564858",
      "asyncId": 1643,
      "triggerAsyncId": 1642,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1644,
        1646
      ],
      "uniqueid": 431
    },
    "432": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179919694418",
      "endTime": "1209179920234089",
      "elapsedTime": "539671",
      "asyncId": 1644,
      "triggerAsyncId": 1643,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 432
    },
    "433": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179919814883",
      "endTime": "1209179919829932",
      "elapsedTime": "15049",
      "asyncId": 1646,
      "triggerAsyncId": 1643,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1647
      ],
      "uniqueid": 433
    },
    "434": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179919879895",
      "endTime": "1209179920057729",
      "elapsedTime": "177834",
      "asyncId": 1647,
      "triggerAsyncId": 1646,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1648
      ],
      "uniqueid": 434
    },
    "435": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179921385366",
      "endTime": "1209179921403811",
      "elapsedTime": "18445",
      "asyncId": 1652,
      "triggerAsyncId": 1651,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1653
      ],
      "uniqueid": 435
    },
    "436": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179921469604",
      "endTime": "1209179922077874",
      "elapsedTime": "608270",
      "asyncId": 1653,
      "triggerAsyncId": 1652,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1654,
        1656
      ],
      "uniqueid": 436
    },
    "437": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179921655863",
      "endTime": "1209179921672444",
      "elapsedTime": "16581",
      "asyncId": 1656,
      "triggerAsyncId": 1653,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1657
      ],
      "uniqueid": 437
    },
    "438": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179921728179",
      "endTime": "1209179921821995",
      "elapsedTime": "93816",
      "asyncId": 1657,
      "triggerAsyncId": 1656,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1658
      ],
      "uniqueid": 438
    },
    "439": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179922885938",
      "endTime": "1209179922900706",
      "elapsedTime": "14768",
      "asyncId": 1667,
      "triggerAsyncId": 1664,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1669
      ],
      "uniqueid": 439
    },
    "440": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179923245582",
      "endTime": "1209179924058144",
      "elapsedTime": "812562",
      "asyncId": 1669,
      "triggerAsyncId": 1667,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1670,
        1676
      ],
      "uniqueid": 440
    },
    "441": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179923367330",
      "endTime": "1209179924261425",
      "elapsedTime": "894095",
      "asyncId": 1670,
      "triggerAsyncId": 1669,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1671,
        1679
      ],
      "uniqueid": 441
    },
    "442": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179923487605",
      "endTime": "1209179924473252",
      "elapsedTime": "985647",
      "asyncId": 1671,
      "triggerAsyncId": 1670,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1672,
        1682
      ],
      "uniqueid": 442
    },
    "443": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179923607109",
      "endTime": "1209179925188603",
      "elapsedTime": "1581494",
      "asyncId": 1672,
      "triggerAsyncId": 1671,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1673,
        1685,
        1686,
        1694
      ],
      "uniqueid": 443
    },
    "444": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179923703500",
      "endTime": "1209179925300973",
      "elapsedTime": "1597473",
      "asyncId": 1673,
      "triggerAsyncId": 1672,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 444
    },
    "445": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179923907422",
      "endTime": "1209179923920396",
      "elapsedTime": "12974",
      "asyncId": 1676,
      "triggerAsyncId": 1669,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1677
      ],
      "uniqueid": 445
    },
    "446": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179923968707",
      "endTime": "1209179923993233",
      "elapsedTime": "24526",
      "asyncId": 1677,
      "triggerAsyncId": 1676,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1678
      ],
      "uniqueid": 446
    },
    "447": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179924124038",
      "endTime": "1209179924136832",
      "elapsedTime": "12794",
      "asyncId": 1679,
      "triggerAsyncId": 1670,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1680
      ],
      "uniqueid": 447
    },
    "448": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179924184291",
      "endTime": "1209179924208516",
      "elapsedTime": "24225",
      "asyncId": 1680,
      "triggerAsyncId": 1679,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1681
      ],
      "uniqueid": 448
    },
    "449": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179924321217",
      "endTime": "1209179924333190",
      "elapsedTime": "11973",
      "asyncId": 1682,
      "triggerAsyncId": 1671,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1683
      ],
      "uniqueid": 449
    },
    "450": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179924385839",
      "endTime": "1209179924417187",
      "elapsedTime": "31348",
      "asyncId": 1683,
      "triggerAsyncId": 1682,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1684
      ],
      "uniqueid": 450
    },
    "451": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179924549956",
      "endTime": "1209179925169247",
      "elapsedTime": "619291",
      "asyncId": 1685,
      "triggerAsyncId": 1672,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1692
      ],
      "uniqueid": 451
    },
    "452": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179924622762",
      "endTime": "1209179924635707",
      "elapsedTime": "12945",
      "asyncId": 1686,
      "triggerAsyncId": 1672,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1687
      ],
      "uniqueid": 452
    },
    "453": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179924701630",
      "endTime": "1209179925148568",
      "elapsedTime": "446938",
      "asyncId": 1687,
      "triggerAsyncId": 1686,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1688,
        1689
      ],
      "uniqueid": 453
    },
    "454": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179924772994",
      "endTime": "1209179925178564",
      "elapsedTime": "405570",
      "asyncId": 1688,
      "triggerAsyncId": 1687,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 454
    },
    "455": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179924840500",
      "endTime": "1209179924852924",
      "elapsedTime": "12424",
      "asyncId": 1689,
      "triggerAsyncId": 1687,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1690
      ],
      "uniqueid": 455
    },
    "456": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179924900152",
      "endTime": "1209179925073958",
      "elapsedTime": "173806",
      "asyncId": 1690,
      "triggerAsyncId": 1689,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1691
      ],
      "uniqueid": 456
    },
    "457": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179925791973",
      "endTime": "1209179925806360",
      "elapsedTime": "14387",
      "asyncId": 1702,
      "triggerAsyncId": 1699,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1704
      ],
      "uniqueid": 457
    },
    "458": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179926160714",
      "endTime": "1209179927093372",
      "elapsedTime": "932658",
      "asyncId": 1704,
      "triggerAsyncId": 1702,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1705,
        1712
      ],
      "uniqueid": 458
    },
    "459": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179926285788",
      "endTime": "1209179927307623",
      "elapsedTime": "1021835",
      "asyncId": 1705,
      "triggerAsyncId": 1704,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1706,
        1715
      ],
      "uniqueid": 459
    },
    "460": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179926407507",
      "endTime": "1209179927514130",
      "elapsedTime": "1106623",
      "asyncId": 1706,
      "triggerAsyncId": 1705,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1707,
        1718
      ],
      "uniqueid": 460
    },
    "461": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179926530818",
      "endTime": "1209179927712682",
      "elapsedTime": "1181864",
      "asyncId": 1707,
      "triggerAsyncId": 1706,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1708,
        1721
      ],
      "uniqueid": 461
    },
    "462": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179926643879",
      "endTime": "1209179928430988",
      "elapsedTime": "1787109",
      "asyncId": 1708,
      "triggerAsyncId": 1707,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1709,
        1724,
        1725,
        1733
      ],
      "uniqueid": 462
    },
    "463": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179926742274",
      "endTime": "1209179928542888",
      "elapsedTime": "1800614",
      "asyncId": 1709,
      "triggerAsyncId": 1708,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 463
    },
    "464": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179926944373",
      "endTime": "1209179926957627",
      "elapsedTime": "13254",
      "asyncId": 1712,
      "triggerAsyncId": 1704,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1713
      ],
      "uniqueid": 464
    },
    "465": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179927010466",
      "endTime": "1209179927037196",
      "elapsedTime": "26730",
      "asyncId": 1713,
      "triggerAsyncId": 1712,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1714
      ],
      "uniqueid": 465
    },
    "466": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179927158995",
      "endTime": "1209179927171909",
      "elapsedTime": "12914",
      "asyncId": 1715,
      "triggerAsyncId": 1705,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1716
      ],
      "uniqueid": 466
    },
    "467": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179927225088",
      "endTime": "1209179927251087",
      "elapsedTime": "25999",
      "asyncId": 1716,
      "triggerAsyncId": 1715,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1717
      ],
      "uniqueid": 467
    },
    "468": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179927369218",
      "endTime": "1209179927382013",
      "elapsedTime": "12795",
      "asyncId": 1718,
      "triggerAsyncId": 1706,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1719
      ],
      "uniqueid": 468
    },
    "469": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179927433399",
      "endTime": "1209179927459177",
      "elapsedTime": "25778",
      "asyncId": 1719,
      "triggerAsyncId": 1718,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1720
      ],
      "uniqueid": 469
    },
    "470": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179927574663",
      "endTime": "1209179927587047",
      "elapsedTime": "12384",
      "asyncId": 1721,
      "triggerAsyncId": 1707,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1722
      ],
      "uniqueid": 470
    },
    "471": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179927633865",
      "endTime": "1209179927658500",
      "elapsedTime": "24635",
      "asyncId": 1722,
      "triggerAsyncId": 1721,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1723
      ],
      "uniqueid": 471
    },
    "472": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179927794816",
      "endTime": "1209179928411111",
      "elapsedTime": "616295",
      "asyncId": 1724,
      "triggerAsyncId": 1708,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1731
      ],
      "uniqueid": 472
    },
    "473": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179927868885",
      "endTime": "1209179927882320",
      "elapsedTime": "13435",
      "asyncId": 1725,
      "triggerAsyncId": 1708,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1726
      ],
      "uniqueid": 473
    },
    "474": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179927948935",
      "endTime": "1209179928389761",
      "elapsedTime": "440826",
      "asyncId": 1726,
      "triggerAsyncId": 1725,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1727,
        1728
      ],
      "uniqueid": 474
    },
    "475": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179928028754",
      "endTime": "1209179928420829",
      "elapsedTime": "392075",
      "asyncId": 1727,
      "triggerAsyncId": 1726,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 475
    },
    "476": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179928095018",
      "endTime": "1209179928107352",
      "elapsedTime": "12334",
      "asyncId": 1728,
      "triggerAsyncId": 1726,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1729
      ],
      "uniqueid": 476
    },
    "477": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179928156514",
      "endTime": "1209179928314149",
      "elapsedTime": "157635",
      "asyncId": 1729,
      "triggerAsyncId": 1728,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1730
      ],
      "uniqueid": 477
    },
    "478": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179929047082",
      "endTime": "1209179929062571",
      "elapsedTime": "15489",
      "asyncId": 1741,
      "triggerAsyncId": 1738,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1743
      ],
      "uniqueid": 478
    },
    "479": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179929410123",
      "endTime": "1209179930509783",
      "elapsedTime": "1099660",
      "asyncId": 1743,
      "triggerAsyncId": 1741,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1744,
        1752
      ],
      "uniqueid": 479
    },
    "480": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179929531861",
      "endTime": "1209179930722201",
      "elapsedTime": "1190340",
      "asyncId": 1744,
      "triggerAsyncId": 1743,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1745,
        1755
      ],
      "uniqueid": 480
    },
    "481": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179929655763",
      "endTime": "1209179930923729",
      "elapsedTime": "1267966",
      "asyncId": 1745,
      "triggerAsyncId": 1744,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1746,
        1758
      ],
      "uniqueid": 481
    },
    "482": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179929778974",
      "endTime": "1209179931135586",
      "elapsedTime": "1356612",
      "asyncId": 1746,
      "triggerAsyncId": 1745,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1747,
        1761
      ],
      "uniqueid": 482
    },
    "483": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179929909058",
      "endTime": "1209179931346361",
      "elapsedTime": "1437303",
      "asyncId": 1747,
      "triggerAsyncId": 1746,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1748,
        1764
      ],
      "uniqueid": 483
    },
    "484": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179930045193",
      "endTime": "1209179932066530",
      "elapsedTime": "2021337",
      "asyncId": 1748,
      "triggerAsyncId": 1747,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1749,
        1767,
        1768,
        1776
      ],
      "uniqueid": 484
    },
    "485": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179930152093",
      "endTime": "1209179932170285",
      "elapsedTime": "2018192",
      "asyncId": 1749,
      "triggerAsyncId": 1748,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 485
    },
    "486": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179930364291",
      "endTime": "1209179930378016",
      "elapsedTime": "13725",
      "asyncId": 1752,
      "triggerAsyncId": 1743,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1753
      ],
      "uniqueid": 486
    },
    "487": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179930428451",
      "endTime": "1209179930454119",
      "elapsedTime": "25668",
      "asyncId": 1753,
      "triggerAsyncId": 1752,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1754
      ],
      "uniqueid": 487
    },
    "488": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179930571639",
      "endTime": "1209179930584223",
      "elapsedTime": "12584",
      "asyncId": 1755,
      "triggerAsyncId": 1744,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1756
      ],
      "uniqueid": 488
    },
    "489": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179930639617",
      "endTime": "1209179930666367",
      "elapsedTime": "26750",
      "asyncId": 1756,
      "triggerAsyncId": 1755,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1757
      ],
      "uniqueid": 489
    },
    "490": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179930783106",
      "endTime": "1209179930795819",
      "elapsedTime": "12713",
      "asyncId": 1758,
      "triggerAsyncId": 1745,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1759
      ],
      "uniqueid": 490
    },
    "491": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179930843118",
      "endTime": "1209179930867974",
      "elapsedTime": "24856",
      "asyncId": 1759,
      "triggerAsyncId": 1758,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1760
      ],
      "uniqueid": 491
    },
    "492": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179930988380",
      "endTime": "1209179931006785",
      "elapsedTime": "18405",
      "asyncId": 1761,
      "triggerAsyncId": 1746,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1762
      ],
      "uniqueid": 492
    },
    "493": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179931056528",
      "endTime": "1209179931081605",
      "elapsedTime": "25077",
      "asyncId": 1762,
      "triggerAsyncId": 1761,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1763
      ],
      "uniqueid": 493
    },
    "494": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179931200397",
      "endTime": "1209179931213492",
      "elapsedTime": "13095",
      "asyncId": 1764,
      "triggerAsyncId": 1747,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1765
      ],
      "uniqueid": 494
    },
    "495": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179931264978",
      "endTime": "1209179931290506",
      "elapsedTime": "25528",
      "asyncId": 1765,
      "triggerAsyncId": 1764,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1766
      ],
      "uniqueid": 495
    },
    "496": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179931420510",
      "endTime": "1209179932046603",
      "elapsedTime": "626093",
      "asyncId": 1767,
      "triggerAsyncId": 1748,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1774
      ],
      "uniqueid": 496
    },
    "497": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179931492034",
      "endTime": "1209179931504978",
      "elapsedTime": "12944",
      "asyncId": 1768,
      "triggerAsyncId": 1748,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1769
      ],
      "uniqueid": 497
    },
    "498": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179931579067",
      "endTime": "1209179932023690",
      "elapsedTime": "444623",
      "asyncId": 1769,
      "triggerAsyncId": 1768,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1770,
        1771
      ],
      "uniqueid": 498
    },
    "499": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179931645261",
      "endTime": "1209179932056261",
      "elapsedTime": "411000",
      "asyncId": 1770,
      "triggerAsyncId": 1769,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 499
    },
    "500": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179931712146",
      "endTime": "1209179931724820",
      "elapsedTime": "12674",
      "asyncId": 1771,
      "triggerAsyncId": 1769,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1772
      ],
      "uniqueid": 500
    },
    "501": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179931776627",
      "endTime": "1209179931931998",
      "elapsedTime": "155371",
      "asyncId": 1772,
      "triggerAsyncId": 1771,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1773
      ],
      "uniqueid": 501
    },
    "502": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179932665352",
      "endTime": "1209179932680150",
      "elapsedTime": "14798",
      "asyncId": 1784,
      "triggerAsyncId": 1781,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1786
      ],
      "uniqueid": 502
    },
    "503": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179933033151",
      "endTime": "1209179934208764",
      "elapsedTime": "1175613",
      "asyncId": 1786,
      "triggerAsyncId": 1784,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1787,
        1796
      ],
      "uniqueid": 503
    },
    "504": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179933155651",
      "endTime": "1209179934419279",
      "elapsedTime": "1263628",
      "asyncId": 1787,
      "triggerAsyncId": 1786,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1788,
        1799
      ],
      "uniqueid": 504
    },
    "505": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179933273231",
      "endTime": "1209179934615847",
      "elapsedTime": "1342616",
      "asyncId": 1788,
      "triggerAsyncId": 1787,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1789,
        1802
      ],
      "uniqueid": 505
    },
    "506": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179933390411",
      "endTime": "1209179934824087",
      "elapsedTime": "1433676",
      "asyncId": 1789,
      "triggerAsyncId": 1788,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1790,
        1805
      ],
      "uniqueid": 506
    },
    "507": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179933505928",
      "endTime": "1209179935034812",
      "elapsedTime": "1528884",
      "asyncId": 1790,
      "triggerAsyncId": 1789,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1791,
        1808
      ],
      "uniqueid": 507
    },
    "508": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179933625051",
      "endTime": "1209179935237121",
      "elapsedTime": "1612070",
      "asyncId": 1791,
      "triggerAsyncId": 1790,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1792,
        1811
      ],
      "uniqueid": 508
    },
    "509": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179933748712",
      "endTime": "1209179935942052",
      "elapsedTime": "2193340",
      "asyncId": 1792,
      "triggerAsyncId": 1791,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1793,
        1814,
        1815,
        1823
      ],
      "uniqueid": 509
    },
    "510": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179933847978",
      "endTime": "1209179936060634",
      "elapsedTime": "2212656",
      "asyncId": 1793,
      "triggerAsyncId": 1792,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 510
    },
    "511": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179934059284",
      "endTime": "1209179934072860",
      "elapsedTime": "13576",
      "asyncId": 1796,
      "triggerAsyncId": 1786,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1797
      ],
      "uniqueid": 511
    },
    "512": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179934128073",
      "endTime": "1209179934153401",
      "elapsedTime": "25328",
      "asyncId": 1797,
      "triggerAsyncId": 1796,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1798
      ],
      "uniqueid": 512
    },
    "513": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179934269508",
      "endTime": "1209179934283013",
      "elapsedTime": "13505",
      "asyncId": 1799,
      "triggerAsyncId": 1787,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1800
      ],
      "uniqueid": 513
    },
    "514": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179934333979",
      "endTime": "1209179934359447",
      "elapsedTime": "25468",
      "asyncId": 1800,
      "triggerAsyncId": 1799,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1801
      ],
      "uniqueid": 514
    },
    "515": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179934479231",
      "endTime": "1209179934491154",
      "elapsedTime": "11923",
      "asyncId": 1802,
      "triggerAsyncId": 1788,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1803
      ],
      "uniqueid": 515
    },
    "516": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179934537921",
      "endTime": "1209179934562287",
      "elapsedTime": "24366",
      "asyncId": 1803,
      "triggerAsyncId": 1802,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1804
      ],
      "uniqueid": 516
    },
    "517": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179934684185",
      "endTime": "1209179934697750",
      "elapsedTime": "13565",
      "asyncId": 1805,
      "triggerAsyncId": 1789,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1806
      ],
      "uniqueid": 517
    },
    "518": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179934746472",
      "endTime": "1209179934770767",
      "elapsedTime": "24295",
      "asyncId": 1806,
      "triggerAsyncId": 1805,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1807
      ],
      "uniqueid": 518
    },
    "519": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179934883779",
      "endTime": "1209179934895721",
      "elapsedTime": "11942",
      "asyncId": 1808,
      "triggerAsyncId": 1790,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1809
      ],
      "uniqueid": 519
    },
    "520": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179934946276",
      "endTime": "1209179934970942",
      "elapsedTime": "24666",
      "asyncId": 1809,
      "triggerAsyncId": 1808,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1810
      ],
      "uniqueid": 520
    },
    "521": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179935095375",
      "endTime": "1209179935107108",
      "elapsedTime": "11733",
      "asyncId": 1811,
      "triggerAsyncId": 1791,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1812
      ],
      "uniqueid": 521
    },
    "522": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179935152873",
      "endTime": "1209179935182679",
      "elapsedTime": "29806",
      "asyncId": 1812,
      "triggerAsyncId": 1811,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1813
      ],
      "uniqueid": 522
    },
    "523": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179935315218",
      "endTime": "1209179935921934",
      "elapsedTime": "606716",
      "asyncId": 1814,
      "triggerAsyncId": 1792,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1821
      ],
      "uniqueid": 523
    },
    "524": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179935389637",
      "endTime": "1209179935401880",
      "elapsedTime": "12243",
      "asyncId": 1815,
      "triggerAsyncId": 1792,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1816
      ],
      "uniqueid": 524
    },
    "525": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179935467673",
      "endTime": "1209179935900414",
      "elapsedTime": "432741",
      "asyncId": 1816,
      "triggerAsyncId": 1815,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1817,
        1818
      ],
      "uniqueid": 525
    },
    "526": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179935540941",
      "endTime": "1209179935931482",
      "elapsedTime": "390541",
      "asyncId": 1817,
      "triggerAsyncId": 1816,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 526
    },
    "527": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179935606092",
      "endTime": "1209179935618476",
      "elapsedTime": "12384",
      "asyncId": 1818,
      "triggerAsyncId": 1816,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1819
      ],
      "uniqueid": 527
    },
    "528": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179935668409",
      "endTime": "1209179935825454",
      "elapsedTime": "157045",
      "asyncId": 1819,
      "triggerAsyncId": 1818,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1820
      ],
      "uniqueid": 528
    },
    "529": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179936544511",
      "endTime": "1209179936559469",
      "elapsedTime": "14958",
      "asyncId": 1831,
      "triggerAsyncId": 1828,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1833
      ],
      "uniqueid": 529
    },
    "530": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179936884488",
      "endTime": "1209179938536353",
      "elapsedTime": "1651865",
      "asyncId": 1833,
      "triggerAsyncId": 1831,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1834,
        1845
      ],
      "uniqueid": 530
    },
    "531": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179937014802",
      "endTime": "1209179938747489",
      "elapsedTime": "1732687",
      "asyncId": 1834,
      "triggerAsyncId": 1833,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1835,
        1848
      ],
      "uniqueid": 531
    },
    "532": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179937137121",
      "endTime": "1209179938948956",
      "elapsedTime": "1811835",
      "asyncId": 1835,
      "triggerAsyncId": 1834,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1836,
        1851
      ],
      "uniqueid": 532
    },
    "533": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179937255593",
      "endTime": "1209179939161925",
      "elapsedTime": "1906332",
      "asyncId": 1836,
      "triggerAsyncId": 1835,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1837,
        1854
      ],
      "uniqueid": 533
    },
    "534": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179937373434",
      "endTime": "1209179939370706",
      "elapsedTime": "1997272",
      "asyncId": 1837,
      "triggerAsyncId": 1836,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1838,
        1857
      ],
      "uniqueid": 534
    },
    "535": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179937491215",
      "endTime": "1209179939573016",
      "elapsedTime": "2081801",
      "asyncId": 1838,
      "triggerAsyncId": 1837,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1839,
        1860
      ],
      "uniqueid": 535
    },
    "536": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179937609366",
      "endTime": "1209179939784041",
      "elapsedTime": "2174675",
      "asyncId": 1839,
      "triggerAsyncId": 1838,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1840,
        1863
      ],
      "uniqueid": 536
    },
    "537": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179937955976",
      "endTime": "1209179940732208",
      "elapsedTime": "2776232",
      "asyncId": 1840,
      "triggerAsyncId": 1839,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1841,
        1866,
        1867
      ],
      "uniqueid": 537
    },
    "538": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179938091329",
      "endTime": "1209179946808363",
      "elapsedTime": "8717034",
      "asyncId": 1841,
      "triggerAsyncId": 1840,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1842,
        1879
      ],
      "uniqueid": 538
    },
    "539": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179938188672",
      "endTime": "1209179946917938",
      "elapsedTime": "8729266",
      "asyncId": 1842,
      "triggerAsyncId": 1841,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 539
    },
    "540": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179938391522",
      "endTime": "1209179938405208",
      "elapsedTime": "13686",
      "asyncId": 1845,
      "triggerAsyncId": 1833,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1846
      ],
      "uniqueid": 540
    },
    "541": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179938455351",
      "endTime": "1209179938480979",
      "elapsedTime": "25628",
      "asyncId": 1846,
      "triggerAsyncId": 1845,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1847
      ],
      "uniqueid": 541
    },
    "542": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179938597107",
      "endTime": "1209179938609490",
      "elapsedTime": "12383",
      "asyncId": 1848,
      "triggerAsyncId": 1834,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1849
      ],
      "uniqueid": 542
    },
    "543": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179938665756",
      "endTime": "1209179938691805",
      "elapsedTime": "26049",
      "asyncId": 1849,
      "triggerAsyncId": 1848,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1850
      ],
      "uniqueid": 543
    },
    "544": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179938810236",
      "endTime": "1209179938822760",
      "elapsedTime": "12524",
      "asyncId": 1851,
      "triggerAsyncId": 1835,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1852
      ],
      "uniqueid": 544
    },
    "545": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179938869598",
      "endTime": "1209179938894574",
      "elapsedTime": "24976",
      "asyncId": 1852,
      "triggerAsyncId": 1851,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1853
      ],
      "uniqueid": 545
    },
    "546": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179939017384",
      "endTime": "1209179939032583",
      "elapsedTime": "15199",
      "asyncId": 1854,
      "triggerAsyncId": 1836,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1855
      ],
      "uniqueid": 546
    },
    "547": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179939082386",
      "endTime": "1209179939107694",
      "elapsedTime": "25308",
      "asyncId": 1855,
      "triggerAsyncId": 1854,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1856
      ],
      "uniqueid": 547
    },
    "548": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179939226506",
      "endTime": "1209179939239571",
      "elapsedTime": "13065",
      "asyncId": 1857,
      "triggerAsyncId": 1837,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1858
      ],
      "uniqueid": 548
    },
    "549": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179939290697",
      "endTime": "1209179939316305",
      "elapsedTime": "25608",
      "asyncId": 1858,
      "triggerAsyncId": 1857,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1859
      ],
      "uniqueid": 549
    },
    "550": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179939430438",
      "endTime": "1209179939442922",
      "elapsedTime": "12484",
      "asyncId": 1860,
      "triggerAsyncId": 1838,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1861
      ],
      "uniqueid": 550
    },
    "551": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179939489940",
      "endTime": "1209179939514606",
      "elapsedTime": "24666",
      "asyncId": 1861,
      "triggerAsyncId": 1860,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1862
      ],
      "uniqueid": 551
    },
    "552": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179939635112",
      "endTime": "1209179939647906",
      "elapsedTime": "12794",
      "asyncId": 1863,
      "triggerAsyncId": 1839,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1864
      ],
      "uniqueid": 552
    },
    "553": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179939693922",
      "endTime": "1209179939727675",
      "elapsedTime": "33753",
      "asyncId": 1864,
      "triggerAsyncId": 1863,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1865
      ],
      "uniqueid": 553
    },
    "554": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179939860074",
      "endTime": "1209179940713222",
      "elapsedTime": "853148",
      "asyncId": 1866,
      "triggerAsyncId": 1840,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1873
      ],
      "uniqueid": 554
    },
    "555": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179939929133",
      "endTime": "1209179939941857",
      "elapsedTime": "12724",
      "asyncId": 1867,
      "triggerAsyncId": 1840,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1868
      ],
      "uniqueid": 555
    },
    "556": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179940018571",
      "endTime": "1209179940694407",
      "elapsedTime": "675836",
      "asyncId": 1868,
      "triggerAsyncId": 1867,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1869,
        1870
      ],
      "uniqueid": 556
    },
    "557": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179940093962",
      "endTime": "1209179940722329",
      "elapsedTime": "628367",
      "asyncId": 1869,
      "triggerAsyncId": 1868,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 557
    },
    "558": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179940158853",
      "endTime": "1209179940170976",
      "elapsedTime": "12123",
      "asyncId": 1870,
      "triggerAsyncId": 1868,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1871
      ],
      "uniqueid": 558
    },
    "559": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179940216311",
      "endTime": "1209179940663399",
      "elapsedTime": "447088",
      "asyncId": 1871,
      "triggerAsyncId": 1870,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1872,
        1874
      ],
      "uniqueid": 559
    },
    "560": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179940798522",
      "endTime": "1209179940811637",
      "elapsedTime": "13115",
      "asyncId": 1879,
      "triggerAsyncId": 1841,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1880
      ],
      "uniqueid": 560
    },
    "561": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179940859456",
      "endTime": "1209179946789888",
      "elapsedTime": "5930432",
      "asyncId": 1880,
      "triggerAsyncId": 1879,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1881,
        1883,
        1889
      ],
      "uniqueid": 561
    },
    "562": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1209179941136195",
      "endTime": "1209179941150602",
      "elapsedTime": "14407",
      "asyncId": 1883,
      "triggerAsyncId": 1880,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1884
      ],
      "uniqueid": 562
    },
    "563": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179941210564",
      "endTime": "1209179942362152",
      "elapsedTime": "1151588",
      "asyncId": 1884,
      "triggerAsyncId": 1883,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1885,
        1890,
        1891
      ],
      "uniqueid": 563
    },
    "564": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179941310120",
      "endTime": "1209179946612266",
      "elapsedTime": "5302146",
      "asyncId": 1885,
      "triggerAsyncId": 1884,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1886,
        1901,
        1902
      ],
      "uniqueid": 564
    },
    "565": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179941459130",
      "endTime": "1209179946746928",
      "elapsedTime": "5287798",
      "asyncId": 1887,
      "triggerAsyncId": 1886,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1888,
        1919
      ],
      "uniqueid": 565
    },
    "566": {
      "source": "lib/session.js:128:31:128:31",
      "startTime": "1209179941506529",
      "endTime": "1209179946757407",
      "elapsedTime": "5250878",
      "asyncId": 1888,
      "triggerAsyncId": 1887,
      "io": "",
      "userCode": true,
      "line": "\n    }\n    finalize();\n    return recorder.promise().then(() => res);\n  }, false, false);\n}",
      "startLine": 128,
      "startCol": 31,
      "endLine": 128,
      "endCol": 31,
      "file": "lib/session.js",
      "triggers": [
        1894
      ],
      "uniqueid": 566
    },
    "567": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179941630701",
      "endTime": "1209179942341062",
      "elapsedTime": "710361",
      "asyncId": 1890,
      "triggerAsyncId": 1884,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1899
      ],
      "uniqueid": 567
    },
    "568": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179941703327",
      "endTime": "1209179941718967",
      "elapsedTime": "15640",
      "asyncId": 1891,
      "triggerAsyncId": 1884,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1892
      ],
      "uniqueid": 568
    },
    "569": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179941784590",
      "endTime": "1209179942321175",
      "elapsedTime": "536585",
      "asyncId": 1892,
      "triggerAsyncId": 1891,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1893,
        1896
      ],
      "uniqueid": 569
    },
    "570": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179941845614",
      "endTime": "1209179942350209",
      "elapsedTime": "504595",
      "asyncId": 1893,
      "triggerAsyncId": 1892,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 570
    },
    "571": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179942010463",
      "endTime": "1209179942024339",
      "elapsedTime": "13876",
      "asyncId": 1896,
      "triggerAsyncId": 1892,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1897
      ],
      "uniqueid": 571
    },
    "572": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179942075895",
      "endTime": "1209179942243179",
      "elapsedTime": "167284",
      "asyncId": 1897,
      "triggerAsyncId": 1896,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1898
      ],
      "uniqueid": 572
    },
    "573": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179942438365",
      "endTime": "1209179946591176",
      "elapsedTime": "4152811",
      "asyncId": 1901,
      "triggerAsyncId": 1885,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1908
      ],
      "uniqueid": 573
    },
    "574": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179942524456",
      "endTime": "1209179942538282",
      "elapsedTime": "13826",
      "asyncId": 1902,
      "triggerAsyncId": 1885,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1903
      ],
      "uniqueid": 574
    },
    "575": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179942613503",
      "endTime": "1209179944757660",
      "elapsedTime": "2144157",
      "asyncId": 1903,
      "triggerAsyncId": 1902,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1904,
        1905
      ],
      "uniqueid": 575
    },
    "576": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179942691509",
      "endTime": "1209179944795141",
      "elapsedTime": "2103632",
      "asyncId": 1904,
      "triggerAsyncId": 1903,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 576
    },
    "577": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179942763614",
      "endTime": "1209179942779344",
      "elapsedTime": "15730",
      "asyncId": 1905,
      "triggerAsyncId": 1903,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1906
      ],
      "uniqueid": 577
    },
    "578": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179944399099",
      "endTime": "1209179944569468",
      "elapsedTime": "170369",
      "asyncId": 1906,
      "triggerAsyncId": 1905,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1907
      ],
      "uniqueid": 578
    },
    "579": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179945954663",
      "endTime": "1209179945969361",
      "elapsedTime": "14698",
      "asyncId": 1911,
      "triggerAsyncId": 1910,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1912
      ],
      "uniqueid": 579
    },
    "580": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179946034733",
      "endTime": "1209179946569385",
      "elapsedTime": "534652",
      "asyncId": 1912,
      "triggerAsyncId": 1911,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1913,
        1915
      ],
      "uniqueid": 580
    },
    "581": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179946225170",
      "endTime": "1209179946238716",
      "elapsedTime": "13546",
      "asyncId": 1915,
      "triggerAsyncId": 1912,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1916
      ],
      "uniqueid": 581
    },
    "582": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179946292496",
      "endTime": "1209179946388837",
      "elapsedTime": "96341",
      "asyncId": 1916,
      "triggerAsyncId": 1915,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1917
      ],
      "uniqueid": 582
    },
    "583": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179947437983",
      "endTime": "1209179947452981",
      "elapsedTime": "14998",
      "asyncId": 1926,
      "triggerAsyncId": 1923,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1927
      ],
      "uniqueid": 583
    },
    "584": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179947670469",
      "endTime": "1209179948391439",
      "elapsedTime": "720970",
      "asyncId": 1927,
      "triggerAsyncId": 1926,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1928,
        1933
      ],
      "uniqueid": 584
    },
    "585": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179947800021",
      "endTime": "1209179948596824",
      "elapsedTime": "796803",
      "asyncId": 1928,
      "triggerAsyncId": 1927,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1929,
        1936
      ],
      "uniqueid": 585
    },
    "586": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179947917221",
      "endTime": "1209179949348072",
      "elapsedTime": "1430851",
      "asyncId": 1929,
      "triggerAsyncId": 1928,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1930,
        1939,
        1940
      ],
      "uniqueid": 586
    },
    "587": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179948042616",
      "endTime": "1209179950091966",
      "elapsedTime": "2049350",
      "asyncId": 1930,
      "triggerAsyncId": 1929,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1932,
        1948,
        1949,
        1965
      ],
      "uniqueid": 587
    },
    "588": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179948163512",
      "endTime": "1209179950199648",
      "elapsedTime": "2036136",
      "asyncId": 1932,
      "triggerAsyncId": 1930,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 588
    },
    "589": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179948251658",
      "endTime": "1209179948264792",
      "elapsedTime": "13134",
      "asyncId": 1933,
      "triggerAsyncId": 1927,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1934
      ],
      "uniqueid": 589
    },
    "590": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179948309476",
      "endTime": "1209179948335394",
      "elapsedTime": "25918",
      "asyncId": 1934,
      "triggerAsyncId": 1933,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1935
      ],
      "uniqueid": 590
    },
    "591": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179948454147",
      "endTime": "1209179948466951",
      "elapsedTime": "12804",
      "asyncId": 1936,
      "triggerAsyncId": 1928,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1937
      ],
      "uniqueid": 591
    },
    "592": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179948514720",
      "endTime": "1209179948538936",
      "elapsedTime": "24216",
      "asyncId": 1937,
      "triggerAsyncId": 1936,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1938
      ],
      "uniqueid": 592
    },
    "593": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179948673728",
      "endTime": "1209179949328725",
      "elapsedTime": "654997",
      "asyncId": 1939,
      "triggerAsyncId": 1929,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1946
      ],
      "uniqueid": 593
    },
    "594": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179948745523",
      "endTime": "1209179948760140",
      "elapsedTime": "14617",
      "asyncId": 1940,
      "triggerAsyncId": 1929,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1941
      ],
      "uniqueid": 594
    },
    "595": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179948832225",
      "endTime": "1209179949307195",
      "elapsedTime": "474970",
      "asyncId": 1941,
      "triggerAsyncId": 1940,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1942,
        1943
      ],
      "uniqueid": 595
    },
    "596": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179948906274",
      "endTime": "1209179949338093",
      "elapsedTime": "431819",
      "asyncId": 1942,
      "triggerAsyncId": 1941,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 596
    },
    "597": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179948974352",
      "endTime": "1209179948986915",
      "elapsedTime": "12563",
      "asyncId": 1943,
      "triggerAsyncId": 1941,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1944
      ],
      "uniqueid": 597
    },
    "598": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179949048120",
      "endTime": "1209179949230882",
      "elapsedTime": "182762",
      "asyncId": 1944,
      "triggerAsyncId": 1943,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1945
      ],
      "uniqueid": 598
    },
    "599": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179949430987",
      "endTime": "1209179950072750",
      "elapsedTime": "641763",
      "asyncId": 1948,
      "triggerAsyncId": 1930,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1955
      ],
      "uniqueid": 599
    },
    "600": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179949502050",
      "endTime": "1209179949514774",
      "elapsedTime": "12724",
      "asyncId": 1949,
      "triggerAsyncId": 1930,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1950
      ],
      "uniqueid": 600
    },
    "601": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179949587350",
      "endTime": "1209179950052642",
      "elapsedTime": "465292",
      "asyncId": 1950,
      "triggerAsyncId": 1949,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1951,
        1952
      ],
      "uniqueid": 601
    },
    "602": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179949659255",
      "endTime": "1209179950081967",
      "elapsedTime": "422712",
      "asyncId": 1951,
      "triggerAsyncId": 1950,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 602
    },
    "603": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179949728845",
      "endTime": "1209179949744224",
      "elapsedTime": "15379",
      "asyncId": 1952,
      "triggerAsyncId": 1950,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1953
      ],
      "uniqueid": 603
    },
    "604": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179949795851",
      "endTime": "1209179949964597",
      "elapsedTime": "168746",
      "asyncId": 1953,
      "triggerAsyncId": 1952,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1954
      ],
      "uniqueid": 604
    },
    "605": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179950714051",
      "endTime": "1209179950728919",
      "elapsedTime": "14868",
      "asyncId": 1967,
      "triggerAsyncId": 1964,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1969
      ],
      "uniqueid": 605
    },
    "606": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179951483784",
      "endTime": "1209179953035301",
      "elapsedTime": "1551517",
      "asyncId": 1969,
      "triggerAsyncId": 1967,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1970,
        1973,
        1985
      ],
      "uniqueid": 606
    },
    "607": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179951592788",
      "endTime": "1209179953085234",
      "elapsedTime": "1492446",
      "asyncId": 1970,
      "triggerAsyncId": 1969,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 607
    },
    "608": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179951805286",
      "endTime": "1209179951818100",
      "elapsedTime": "12814",
      "asyncId": 1973,
      "triggerAsyncId": 1969,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1974
      ],
      "uniqueid": 608
    },
    "609": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179951875568",
      "endTime": "1209179953010514",
      "elapsedTime": "1134946",
      "asyncId": 1974,
      "triggerAsyncId": 1973,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1975,
        1979
      ],
      "uniqueid": 609
    },
    "610": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179953490083",
      "endTime": "1209179953504901",
      "elapsedTime": "14818",
      "asyncId": 1987,
      "triggerAsyncId": 1984,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1989
      ],
      "uniqueid": 610
    },
    "611": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179953975863",
      "endTime": "1209179955071456",
      "elapsedTime": "1095593",
      "asyncId": 1989,
      "triggerAsyncId": 1987,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1990,
        1994
      ],
      "uniqueid": 611
    },
    "612": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179954116106",
      "endTime": "1209179955729219",
      "elapsedTime": "1613113",
      "asyncId": 1990,
      "triggerAsyncId": 1989,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        1991,
        2002,
        2013
      ],
      "uniqueid": 612
    },
    "613": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179954221564",
      "endTime": "1209179955777339",
      "elapsedTime": "1555775",
      "asyncId": 1991,
      "triggerAsyncId": 1990,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 613
    },
    "614": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179954440864",
      "endTime": "1209179954453759",
      "elapsedTime": "12895",
      "asyncId": 1994,
      "triggerAsyncId": 1989,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        1995
      ],
      "uniqueid": 614
    },
    "615": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179954505325",
      "endTime": "1209179955048683",
      "elapsedTime": "543358",
      "asyncId": 1995,
      "triggerAsyncId": 1994,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        1996,
        2000
      ],
      "uniqueid": 615
    },
    "616": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179955143982",
      "endTime": "1209179955156776",
      "elapsedTime": "12794",
      "asyncId": 2002,
      "triggerAsyncId": 1990,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2003
      ],
      "uniqueid": 616
    },
    "617": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179955208423",
      "endTime": "1209179955709251",
      "elapsedTime": "500828",
      "asyncId": 2003,
      "triggerAsyncId": 2002,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2004,
        2007
      ],
      "uniqueid": 617
    },
    "618": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179956172199",
      "endTime": "1209179956186526",
      "elapsedTime": "14327",
      "asyncId": 2015,
      "triggerAsyncId": 2012,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2017
      ],
      "uniqueid": 618
    },
    "619": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179956616681",
      "endTime": "1209179957830125",
      "elapsedTime": "1213444",
      "asyncId": 2017,
      "triggerAsyncId": 2015,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2018,
        2023
      ],
      "uniqueid": 619
    },
    "620": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179956741485",
      "endTime": "1209179958492216",
      "elapsedTime": "1750731",
      "asyncId": 2018,
      "triggerAsyncId": 2017,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2019,
        2031
      ],
      "uniqueid": 620
    },
    "621": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179956861651",
      "endTime": "1209179959149087",
      "elapsedTime": "2287436",
      "asyncId": 2019,
      "triggerAsyncId": 2018,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2020,
        2038,
        2049
      ],
      "uniqueid": 621
    },
    "622": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179956965134",
      "endTime": "1209179959198750",
      "elapsedTime": "2233616",
      "asyncId": 2020,
      "triggerAsyncId": 2019,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 622
    },
    "623": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179957183383",
      "endTime": "1209179957196007",
      "elapsedTime": "12624",
      "asyncId": 2023,
      "triggerAsyncId": 2017,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2024
      ],
      "uniqueid": 623
    },
    "624": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179957254847",
      "endTime": "1209179957810098",
      "elapsedTime": "555251",
      "asyncId": 2024,
      "triggerAsyncId": 2023,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2025,
        2029
      ],
      "uniqueid": 624
    },
    "625": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179957900908",
      "endTime": "1209179957914072",
      "elapsedTime": "13164",
      "asyncId": 2031,
      "triggerAsyncId": 2018,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2032
      ],
      "uniqueid": 625
    },
    "626": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179957965589",
      "endTime": "1209179958469974",
      "elapsedTime": "504385",
      "asyncId": 2032,
      "triggerAsyncId": 2031,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2033,
        2036
      ],
      "uniqueid": 626
    },
    "627": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179958561806",
      "endTime": "1209179958574951",
      "elapsedTime": "13145",
      "asyncId": 2038,
      "triggerAsyncId": 2019,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2039
      ],
      "uniqueid": 627
    },
    "628": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179958626357",
      "endTime": "1209179959127897",
      "elapsedTime": "501540",
      "asyncId": 2039,
      "triggerAsyncId": 2038,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2040,
        2043
      ],
      "uniqueid": 628
    },
    "629": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179959621933",
      "endTime": "1209179959636881",
      "elapsedTime": "14948",
      "asyncId": 2051,
      "triggerAsyncId": 2048,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2053
      ],
      "uniqueid": 629
    },
    "630": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179960063009",
      "endTime": "1209179961363816",
      "elapsedTime": "1300807",
      "asyncId": 2053,
      "triggerAsyncId": 2051,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2054,
        2060
      ],
      "uniqueid": 630
    },
    "631": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179960193103",
      "endTime": "1209179962017011",
      "elapsedTime": "1823908",
      "asyncId": 2054,
      "triggerAsyncId": 2053,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2055,
        2068
      ],
      "uniqueid": 631
    },
    "632": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179960314871",
      "endTime": "1209179962651048",
      "elapsedTime": "2336177",
      "asyncId": 2055,
      "triggerAsyncId": 2054,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2056,
        2075
      ],
      "uniqueid": 632
    },
    "633": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179960440166",
      "endTime": "1209179963292100",
      "elapsedTime": "2851934",
      "asyncId": 2056,
      "triggerAsyncId": 2055,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2057,
        2082,
        2096
      ],
      "uniqueid": 633
    },
    "634": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179960544051",
      "endTime": "1209179963386797",
      "elapsedTime": "2842746",
      "asyncId": 2057,
      "triggerAsyncId": 2056,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 634
    },
    "635": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179960754595",
      "endTime": "1209179960767960",
      "elapsedTime": "13365",
      "asyncId": 2060,
      "triggerAsyncId": 2053,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2061
      ],
      "uniqueid": 635
    },
    "636": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179960827081",
      "endTime": "1209179961342767",
      "elapsedTime": "515686",
      "asyncId": 2061,
      "triggerAsyncId": 2060,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2062,
        2066
      ],
      "uniqueid": 636
    },
    "637": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179961430031",
      "endTime": "1209179961442734",
      "elapsedTime": "12703",
      "asyncId": 2068,
      "triggerAsyncId": 2054,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2069
      ],
      "uniqueid": 637
    },
    "638": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179961493009",
      "endTime": "1209179961985581",
      "elapsedTime": "492572",
      "asyncId": 2069,
      "triggerAsyncId": 2068,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2070,
        2073
      ],
      "uniqueid": 638
    },
    "639": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179962087763",
      "endTime": "1209179962102941",
      "elapsedTime": "15178",
      "asyncId": 2075,
      "triggerAsyncId": 2055,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2076
      ],
      "uniqueid": 639
    },
    "640": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179962153456",
      "endTime": "1209179962627795",
      "elapsedTime": "474339",
      "asyncId": 2076,
      "triggerAsyncId": 2075,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2077,
        2080
      ],
      "uniqueid": 640
    },
    "641": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179962717744",
      "endTime": "1209179962730948",
      "elapsedTime": "13204",
      "asyncId": 2082,
      "triggerAsyncId": 2056,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2083
      ],
      "uniqueid": 641
    },
    "642": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179962783937",
      "endTime": "1209179963271892",
      "elapsedTime": "487955",
      "asyncId": 2083,
      "triggerAsyncId": 2082,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2084,
        2087
      ],
      "uniqueid": 642
    },
    "643": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179963943410",
      "endTime": "1209179963958358",
      "elapsedTime": "14948",
      "asyncId": 2098,
      "triggerAsyncId": 2095,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2100
      ],
      "uniqueid": 643
    },
    "644": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179964324474",
      "endTime": "1209179966305857",
      "elapsedTime": "1981383",
      "asyncId": 2100,
      "triggerAsyncId": 2098,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2101,
        2104,
        2125
      ],
      "uniqueid": 644
    },
    "645": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179964428519",
      "endTime": "1209179966378262",
      "elapsedTime": "1949743",
      "asyncId": 2101,
      "triggerAsyncId": 2100,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 645
    },
    "646": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179964636629",
      "endTime": "1209179964649724",
      "elapsedTime": "13095",
      "asyncId": 2104,
      "triggerAsyncId": 2100,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2105
      ],
      "uniqueid": 646
    },
    "647": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179964703875",
      "endTime": "1209179966272043",
      "elapsedTime": "1568168",
      "asyncId": 2105,
      "triggerAsyncId": 2104,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2107,
        2112
      ],
      "uniqueid": 647
    },
    "648": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1209179964888000",
      "endTime": "1209179964902647",
      "elapsedTime": "14647",
      "asyncId": 2107,
      "triggerAsyncId": 2105,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2108
      ],
      "uniqueid": 648
    },
    "649": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179964991664",
      "endTime": "1209179965524342",
      "elapsedTime": "532678",
      "asyncId": 2108,
      "triggerAsyncId": 2107,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2109,
        2113
      ],
      "uniqueid": 649
    },
    "650": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179965069821",
      "endTime": "1209179965968274",
      "elapsedTime": "898453",
      "asyncId": 2109,
      "triggerAsyncId": 2108,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2110,
        2117
      ],
      "uniqueid": 650
    },
    "651": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179965211907",
      "endTime": "1209179966251956",
      "elapsedTime": "1040049",
      "asyncId": 2111,
      "triggerAsyncId": 2110,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2115,
        2119,
        2122
      ],
      "uniqueid": 651
    },
    "652": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179965322404",
      "endTime": "1209179965335338",
      "elapsedTime": "12934",
      "asyncId": 2113,
      "triggerAsyncId": 2108,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2114
      ],
      "uniqueid": 652
    },
    "653": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179965380242",
      "endTime": "1209179965464490",
      "elapsedTime": "84248",
      "asyncId": 2114,
      "triggerAsyncId": 2113,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2116
      ],
      "uniqueid": 653
    },
    "654": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179965588182",
      "endTime": "1209179965600545",
      "elapsedTime": "12363",
      "asyncId": 2117,
      "triggerAsyncId": 2109,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2118
      ],
      "uniqueid": 654
    },
    "655": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179965657742",
      "endTime": "1209179965910997",
      "elapsedTime": "253255",
      "asyncId": 2118,
      "triggerAsyncId": 2117,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2121
      ],
      "uniqueid": 655
    },
    "656": {
      "source": "lib/recorder.js:137:25:137:25",
      "startTime": "1209179965897201",
      "endTime": "1209179966482798",
      "elapsedTime": "585597",
      "asyncId": 2120,
      "triggerAsyncId": 2119,
      "io": false,
      "userCode": true,
      "line": "\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /*",
      "startLine": 137,
      "startCol": 25,
      "endLine": 137,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2126,
        2131
      ],
      "uniqueid": 656
    },
    "657": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179966083239",
      "endTime": "1209179966097346",
      "elapsedTime": "14107",
      "asyncId": 2122,
      "triggerAsyncId": 2111,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2123
      ],
      "uniqueid": 657
    },
    "658": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179966142831",
      "endTime": "1209179966189890",
      "elapsedTime": "47059",
      "asyncId": 2123,
      "triggerAsyncId": 2122,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2124
      ],
      "uniqueid": 658
    },
    "659": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179966904999",
      "endTime": "1209179966919797",
      "elapsedTime": "14798",
      "asyncId": 2133,
      "triggerAsyncId": 2130,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2135
      ],
      "uniqueid": 659
    },
    "660": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179967220080",
      "endTime": "1209179968959359",
      "elapsedTime": "1739279",
      "asyncId": 2135,
      "triggerAsyncId": 2133,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2136,
        2139,
        2157
      ],
      "uniqueid": 660
    },
    "661": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1209179967320929",
      "endTime": "1209179969020764",
      "elapsedTime": "1699835",
      "asyncId": 2136,
      "triggerAsyncId": 2135,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 661
    },
    "662": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179967531203",
      "endTime": "1209179967544388",
      "elapsedTime": "13185",
      "asyncId": 2139,
      "triggerAsyncId": 2135,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2140
      ],
      "uniqueid": 662
    },
    "663": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179967600312",
      "endTime": "1209179968921698",
      "elapsedTime": "1321386",
      "asyncId": 2140,
      "triggerAsyncId": 2139,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2142,
        2147
      ],
      "uniqueid": 663
    },
    "664": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1209179967729214",
      "endTime": "1209179967743170",
      "elapsedTime": "13956",
      "asyncId": 2142,
      "triggerAsyncId": 2140,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2143
      ],
      "uniqueid": 664
    },
    "665": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179967838749",
      "endTime": "1209179968388359",
      "elapsedTime": "549610",
      "asyncId": 2143,
      "triggerAsyncId": 2142,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2144,
        2148
      ],
      "uniqueid": 665
    },
    "666": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179967896317",
      "endTime": "1209179968413757",
      "elapsedTime": "517440",
      "asyncId": 2144,
      "triggerAsyncId": 2143,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2145
      ],
      "uniqueid": 666
    },
    "667": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179968017394",
      "endTime": "1209179968901751",
      "elapsedTime": "884357",
      "asyncId": 2146,
      "triggerAsyncId": 2145,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2150,
        2152,
        2154
      ],
      "uniqueid": 667
    },
    "668": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179968136066",
      "endTime": "1209179968148800",
      "elapsedTime": "12734",
      "asyncId": 2148,
      "triggerAsyncId": 2143,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2149
      ],
      "uniqueid": 668
    },
    "669": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179968193945",
      "endTime": "1209179968295445",
      "elapsedTime": "101500",
      "asyncId": 2149,
      "triggerAsyncId": 2148,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2151
      ],
      "uniqueid": 669
    },
    "670": {
      "source": "lib/recorder.js:137:25:137:25",
      "startTime": "1209179968694402",
      "endTime": "1209179969124258",
      "elapsedTime": "429856",
      "asyncId": 2153,
      "triggerAsyncId": 2152,
      "io": false,
      "userCode": true,
      "line": "\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /*",
      "startLine": 137,
      "startCol": 25,
      "endLine": 137,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2158,
        2166
      ],
      "uniqueid": 670
    },
    "671": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179968757531",
      "endTime": "1209179968770826",
      "elapsedTime": "13295",
      "asyncId": 2154,
      "triggerAsyncId": 2146,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2155
      ],
      "uniqueid": 671
    },
    "672": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179968815259",
      "endTime": "1209179968839404",
      "elapsedTime": "24145",
      "asyncId": 2155,
      "triggerAsyncId": 2154,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2156
      ],
      "uniqueid": 672
    },
    "673": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179969722218",
      "endTime": "1209179969736415",
      "elapsedTime": "14197",
      "asyncId": 2168,
      "triggerAsyncId": 2165,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2173
      ],
      "uniqueid": 673
    },
    "674": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179970194012",
      "endTime": "1209179970208750",
      "elapsedTime": "14738",
      "asyncId": 2175,
      "triggerAsyncId": 2172,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2177
      ],
      "uniqueid": 674
    },
    "675": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179970438971",
      "endTime": "1209179971048904",
      "elapsedTime": "609933",
      "asyncId": 2177,
      "triggerAsyncId": 2175,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2178,
        2179
      ],
      "uniqueid": 675
    },
    "676": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179970639397",
      "endTime": "1209179970653714",
      "elapsedTime": "14317",
      "asyncId": 2179,
      "triggerAsyncId": 2177,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2180
      ],
      "uniqueid": 676
    },
    "677": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179970706823",
      "endTime": "1209179970755614",
      "elapsedTime": "48791",
      "asyncId": 2180,
      "triggerAsyncId": 2179,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2181
      ],
      "uniqueid": 677
    },
    "678": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179971702499",
      "endTime": "1209179971719531",
      "elapsedTime": "17032",
      "asyncId": 2191,
      "triggerAsyncId": 2188,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2193
      ],
      "uniqueid": 678
    },
    "679": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179971954661",
      "endTime": "1209179972649143",
      "elapsedTime": "694482",
      "asyncId": 2193,
      "triggerAsyncId": 2191,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2194,
        2200
      ],
      "uniqueid": 679
    },
    "680": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179972058877",
      "endTime": "1209179973222507",
      "elapsedTime": "1163630",
      "asyncId": 2194,
      "triggerAsyncId": 2193,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2195,
        2203
      ],
      "uniqueid": 680
    },
    "681": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179972152482",
      "endTime": "1209179973844212",
      "elapsedTime": "1691730",
      "asyncId": 2195,
      "triggerAsyncId": 2194,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2196,
        2213
      ],
      "uniqueid": 681
    },
    "682": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179972243763",
      "endTime": "1209179974176404",
      "elapsedTime": "1932641",
      "asyncId": 2196,
      "triggerAsyncId": 2195,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2197,
        2221
      ],
      "uniqueid": 682
    },
    "683": {
      "source": "test/unit/recorder_test.js:30:10:30:10",
      "startTime": "1209179972331798",
      "endTime": "1209179974238060",
      "elapsedTime": "1906262",
      "asyncId": 2197,
      "triggerAsyncId": 2196,
      "io": "",
      "userCode": true,
      "line": "\n      recorder.add(() => order += 'b');\n      return recorder.promise()\n        .then(() => expect(order).is.equal('acdb'));\n    });\n  });",
      "startLine": 30,
      "startCol": 10,
      "endLine": 30,
      "endCol": 10,
      "file": "test/unit/recorder_test.js",
      "triggers": [
        2199
      ],
      "uniqueid": 683
    },
    "684": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179972427117",
      "endTime": "1209179974379064",
      "elapsedTime": "1951947",
      "asyncId": 2199,
      "triggerAsyncId": 2197,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 684
    },
    "685": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179972478823",
      "endTime": "1209179972491177",
      "elapsedTime": "12354",
      "asyncId": 2200,
      "triggerAsyncId": 2193,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2201
      ],
      "uniqueid": 685
    },
    "686": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179972533055",
      "endTime": "1209179972579803",
      "elapsedTime": "46748",
      "asyncId": 2201,
      "triggerAsyncId": 2200,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 686
    },
    "687": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179972708213",
      "endTime": "1209179972720767",
      "elapsedTime": "12554",
      "asyncId": 2203,
      "triggerAsyncId": 2194,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2204
      ],
      "uniqueid": 687
    },
    "688": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179972760962",
      "endTime": "1209179973055354",
      "elapsedTime": "294392",
      "asyncId": 2204,
      "triggerAsyncId": 2203,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2206
      ],
      "uniqueid": 688
    },
    "689": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1209179972915922",
      "endTime": "1209179972932053",
      "elapsedTime": "16131",
      "asyncId": 2206,
      "triggerAsyncId": 2204,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2207
      ],
      "uniqueid": 689
    },
    "690": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179972983108",
      "endTime": "1209179973452278",
      "elapsedTime": "469170",
      "asyncId": 2207,
      "triggerAsyncId": 2206,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2208,
        2210
      ],
      "uniqueid": 690
    },
    "691": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179973042049",
      "endTime": "1209179974066048",
      "elapsedTime": "1023999",
      "asyncId": 2208,
      "triggerAsyncId": 2207,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2215,
        2218
      ],
      "uniqueid": 691
    },
    "692": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179973142447",
      "endTime": "1209179973154480",
      "elapsedTime": "12033",
      "asyncId": 2210,
      "triggerAsyncId": 2207,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2211
      ],
      "uniqueid": 692
    },
    "693": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179973198342",
      "endTime": "1209179973265768",
      "elapsedTime": "67426",
      "asyncId": 2211,
      "triggerAsyncId": 2210,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 693
    },
    "694": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179973358662",
      "endTime": "1209179973373360",
      "elapsedTime": "14698",
      "asyncId": 2213,
      "triggerAsyncId": 2195,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2214
      ],
      "uniqueid": 694
    },
    "695": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179973421239",
      "endTime": "1209179973675967",
      "elapsedTime": "254728",
      "asyncId": 2214,
      "triggerAsyncId": 2213,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 695
    },
    "696": {
      "source": "lib/recorder.js:137:25:137:25",
      "startTime": "1209179973662000",
      "endTime": "1209179974394052",
      "elapsedTime": "732052",
      "asyncId": 2216,
      "triggerAsyncId": 2215,
      "io": false,
      "userCode": true,
      "line": "\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /*",
      "startLine": 137,
      "startCol": 25,
      "endLine": 137,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2233
      ],
      "uniqueid": 696
    },
    "697": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179973766997",
      "endTime": "1209179973779741",
      "elapsedTime": "12744",
      "asyncId": 2218,
      "triggerAsyncId": 2208,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2219
      ],
      "uniqueid": 697
    },
    "698": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179973820788",
      "endTime": "1209179973886050",
      "elapsedTime": "65262",
      "asyncId": 2219,
      "triggerAsyncId": 2218,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 698
    },
    "699": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179973975808",
      "endTime": "1209179973987861",
      "elapsedTime": "12053",
      "asyncId": 2221,
      "triggerAsyncId": 2196,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2222
      ],
      "uniqueid": 699
    },
    "700": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179974040239",
      "endTime": "1209179974104480",
      "elapsedTime": "64241",
      "asyncId": 2222,
      "triggerAsyncId": 2221,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 700
    },
    "701": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179974841841",
      "endTime": "1209179974856990",
      "elapsedTime": "15149",
      "asyncId": 2235,
      "triggerAsyncId": 2232,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2237
      ],
      "uniqueid": 701
    },
    "702": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179975081099",
      "endTime": "1209179975583621",
      "elapsedTime": "502522",
      "asyncId": 2237,
      "triggerAsyncId": 2235,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2238,
        2242
      ],
      "uniqueid": 702
    },
    "703": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179975180926",
      "endTime": "1209179975802672",
      "elapsedTime": "621746",
      "asyncId": 2238,
      "triggerAsyncId": 2237,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2239,
        2245
      ],
      "uniqueid": 703
    },
    "704": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179975273079",
      "endTime": "1209179976049725",
      "elapsedTime": "776646",
      "asyncId": 2239,
      "triggerAsyncId": 2238,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2241,
        2248,
        2257
      ],
      "uniqueid": 704
    },
    "705": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179975367045",
      "endTime": "1209179976154070",
      "elapsedTime": "787025",
      "asyncId": 2241,
      "triggerAsyncId": 2239,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 705
    },
    "706": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179975420786",
      "endTime": "1209179975433951",
      "elapsedTime": "13165",
      "asyncId": 2242,
      "triggerAsyncId": 2237,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2243
      ],
      "uniqueid": 706
    },
    "707": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179975475689",
      "endTime": "1209179975523208",
      "elapsedTime": "47519",
      "asyncId": 2243,
      "triggerAsyncId": 2242,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 707
    },
    "708": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179975637582",
      "endTime": "1209179975651809",
      "elapsedTime": "14227",
      "asyncId": 2245,
      "triggerAsyncId": 2238,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2246
      ],
      "uniqueid": 708
    },
    "709": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179975697485",
      "endTime": "1209179975742449",
      "elapsedTime": "44964",
      "asyncId": 2246,
      "triggerAsyncId": 2245,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 709
    },
    "710": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179975857234",
      "endTime": "1209179975869747",
      "elapsedTime": "12513",
      "asyncId": 2248,
      "triggerAsyncId": 2239,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2249
      ],
      "uniqueid": 710
    },
    "711": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179975912557",
      "endTime": "1209179975967951",
      "elapsedTime": "55394",
      "asyncId": 2249,
      "triggerAsyncId": 2248,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 711
    },
    "712": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179976469511",
      "endTime": "1209179976484900",
      "elapsedTime": "15389",
      "asyncId": 2259,
      "triggerAsyncId": 2256,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2261
      ],
      "uniqueid": 712
    },
    "713": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179976700013",
      "endTime": "1209179977196002",
      "elapsedTime": "495989",
      "asyncId": 2261,
      "triggerAsyncId": 2259,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2263,
        2266,
        2278
      ],
      "uniqueid": 713
    },
    "714": {
      "source": "test/unit/recorder_test.js:49:10:49:10",
      "startTime": "1209179976845145",
      "endTime": "1209179977246156",
      "elapsedTime": "401011",
      "asyncId": 2263,
      "triggerAsyncId": 2261,
      "io": "",
      "userCode": true,
      "line": "\n      recorder.add(() => counter++);\n      return recorder.promise()\n        .then(() => expect(counter).eql(1));\n    });\n  });",
      "startLine": 49,
      "startCol": 10,
      "endLine": 49,
      "endCol": 10,
      "file": "test/unit/recorder_test.js",
      "triggers": [
        2265
      ],
      "uniqueid": 714
    },
    "715": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179976946986",
      "endTime": "1209179977339000",
      "elapsedTime": "392014",
      "asyncId": 2265,
      "triggerAsyncId": 2263,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 715
    },
    "716": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179977026535",
      "endTime": "1209179977041172",
      "elapsedTime": "14637",
      "asyncId": 2266,
      "triggerAsyncId": 2261,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2267
      ],
      "uniqueid": 716
    },
    "717": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179977087990",
      "endTime": "1209179977133305",
      "elapsedTime": "45315",
      "asyncId": 2267,
      "triggerAsyncId": 2266,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2268
      ],
      "uniqueid": 717
    },
    "718": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179977749680",
      "endTime": "1209179977764267",
      "elapsedTime": "14587",
      "asyncId": 2280,
      "triggerAsyncId": 2277,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2282
      ],
      "uniqueid": 718
    },
    "719": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179977986854",
      "endTime": "1209179978376945",
      "elapsedTime": "390091",
      "asyncId": 2282,
      "triggerAsyncId": 2280,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2283,
        2286
      ],
      "uniqueid": 719
    },
    "720": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179978093614",
      "endTime": "1209179983357107",
      "elapsedTime": "5263493",
      "asyncId": 2283,
      "triggerAsyncId": 2282,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2285,
        2289,
        2290,
        2321
      ],
      "uniqueid": 720
    },
    "721": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179978191297",
      "endTime": "1209179983453327",
      "elapsedTime": "5262030",
      "asyncId": 2285,
      "triggerAsyncId": 2283,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 721
    },
    "722": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179978244277",
      "endTime": "1209179978256449",
      "elapsedTime": "12172",
      "asyncId": 2286,
      "triggerAsyncId": 2282,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2287
      ],
      "uniqueid": 722
    },
    "723": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179978296054",
      "endTime": "1209179978321281",
      "elapsedTime": "25227",
      "asyncId": 2287,
      "triggerAsyncId": 2286,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 723
    },
    "724": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179978445463",
      "endTime": "1209179983336007",
      "elapsedTime": "4890544",
      "asyncId": 2289,
      "triggerAsyncId": 2283,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 724
    },
    "725": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179978513661",
      "endTime": "1209179978526586",
      "elapsedTime": "12925",
      "asyncId": 2290,
      "triggerAsyncId": 2283,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2291
      ],
      "uniqueid": 725
    },
    "726": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179978592659",
      "endTime": "1209179979027364",
      "elapsedTime": "434705",
      "asyncId": 2291,
      "triggerAsyncId": 2290,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2292,
        2293
      ],
      "uniqueid": 726
    },
    "727": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179978655387",
      "endTime": "1209179979065405",
      "elapsedTime": "410018",
      "asyncId": 2292,
      "triggerAsyncId": 2291,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 727
    },
    "728": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179978718245",
      "endTime": "1209179978730037",
      "elapsedTime": "11792",
      "asyncId": 2293,
      "triggerAsyncId": 2291,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2294
      ],
      "uniqueid": 728
    },
    "729": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179978772767",
      "endTime": "1209179978936253",
      "elapsedTime": "163486",
      "asyncId": 2294,
      "triggerAsyncId": 2293,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2295
      ],
      "uniqueid": 729
    },
    "730": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179980201494",
      "endTime": "1209179980215059",
      "elapsedTime": "13565",
      "asyncId": 2299,
      "triggerAsyncId": 2298,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2300
      ],
      "uniqueid": 730
    },
    "731": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179980273829",
      "endTime": "1209179980669701",
      "elapsedTime": "395872",
      "asyncId": 2300,
      "triggerAsyncId": 2299,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2301,
        2303
      ],
      "uniqueid": 731
    },
    "732": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179980443788",
      "endTime": "1209179980458425",
      "elapsedTime": "14637",
      "asyncId": 2303,
      "triggerAsyncId": 2300,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2304
      ],
      "uniqueid": 732
    },
    "733": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179980504682",
      "endTime": "1209179980589651",
      "elapsedTime": "84969",
      "asyncId": 2304,
      "triggerAsyncId": 2303,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2305
      ],
      "uniqueid": 733
    },
    "734": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179982864153",
      "endTime": "1209179982879402",
      "elapsedTime": "15249",
      "asyncId": 2308,
      "triggerAsyncId": 2307,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2309
      ],
      "uniqueid": 734
    },
    "735": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179982934896",
      "endTime": "1209179983317533",
      "elapsedTime": "382637",
      "asyncId": 2309,
      "triggerAsyncId": 2308,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2310,
        2312
      ],
      "uniqueid": 735
    },
    "736": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179983115454",
      "endTime": "1209179983134289",
      "elapsedTime": "18835",
      "asyncId": 2312,
      "triggerAsyncId": 2309,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2313
      ],
      "uniqueid": 736
    },
    "737": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179983179173",
      "endTime": "1209179983251729",
      "elapsedTime": "72556",
      "asyncId": 2313,
      "triggerAsyncId": 2312,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2314
      ],
      "uniqueid": 737
    },
    "738": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179983766353",
      "endTime": "1209179983781893",
      "elapsedTime": "15540",
      "asyncId": 2323,
      "triggerAsyncId": 2320,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2325
      ],
      "uniqueid": 738
    },
    "739": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179984023235",
      "endTime": "1209179984762180",
      "elapsedTime": "738945",
      "asyncId": 2325,
      "triggerAsyncId": 2323,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2326,
        2330
      ],
      "uniqueid": 739
    },
    "740": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179984129424",
      "endTime": "1209179984961303",
      "elapsedTime": "831879",
      "asyncId": 2326,
      "triggerAsyncId": 2325,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2327,
        2333
      ],
      "uniqueid": 740
    },
    "741": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179984221707",
      "endTime": "1209179990019040",
      "elapsedTime": "5797333",
      "asyncId": 2327,
      "triggerAsyncId": 2326,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2329,
        2336,
        2337,
        2372
      ],
      "uniqueid": 741
    },
    "742": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179984318719",
      "endTime": "1209179990114709",
      "elapsedTime": "5795990",
      "asyncId": 2329,
      "triggerAsyncId": 2327,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 742
    },
    "743": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179984370856",
      "endTime": "1209179984383440",
      "elapsedTime": "12584",
      "asyncId": 2330,
      "triggerAsyncId": 2325,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2331
      ],
      "uniqueid": 743
    },
    "744": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179984427362",
      "endTime": "1209179984694683",
      "elapsedTime": "267321",
      "asyncId": 2331,
      "triggerAsyncId": 2330,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 744
    },
    "745": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179984824757",
      "endTime": "1209179984837591",
      "elapsedTime": "12834",
      "asyncId": 2333,
      "triggerAsyncId": 2326,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2334
      ],
      "uniqueid": 745
    },
    "746": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179984879429",
      "endTime": "1209179984904827",
      "elapsedTime": "25398",
      "asyncId": 2334,
      "triggerAsyncId": 2333,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 746
    },
    "747": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179985038898",
      "endTime": "1209179989992350",
      "elapsedTime": "4953452",
      "asyncId": 2336,
      "triggerAsyncId": 2327,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 747
    },
    "748": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179985111544",
      "endTime": "1209179985124258",
      "elapsedTime": "12714",
      "asyncId": 2337,
      "triggerAsyncId": 2327,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2338
      ],
      "uniqueid": 748
    },
    "749": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179985192566",
      "endTime": "1209179985710737",
      "elapsedTime": "518171",
      "asyncId": 2338,
      "triggerAsyncId": 2337,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2339,
        2340
      ],
      "uniqueid": 749
    },
    "750": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179985257067",
      "endTime": "1209179985744600",
      "elapsedTime": "487533",
      "asyncId": 2339,
      "triggerAsyncId": 2338,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 750
    },
    "751": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179985319083",
      "endTime": "1209179985330965",
      "elapsedTime": "11882",
      "asyncId": 2340,
      "triggerAsyncId": 2338,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2341
      ],
      "uniqueid": 751
    },
    "752": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179985385237",
      "endTime": "1209179985551909",
      "elapsedTime": "166672",
      "asyncId": 2341,
      "triggerAsyncId": 2340,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2342
      ],
      "uniqueid": 752
    },
    "753": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179986878765",
      "endTime": "1209179986891429",
      "elapsedTime": "12664",
      "asyncId": 2346,
      "triggerAsyncId": 2345,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2347
      ],
      "uniqueid": 753
    },
    "754": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179986945140",
      "endTime": "1209179987350960",
      "elapsedTime": "405820",
      "asyncId": 2347,
      "triggerAsyncId": 2346,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2348,
        2350
      ],
      "uniqueid": 754
    },
    "755": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179987124035",
      "endTime": "1209179987137470",
      "elapsedTime": "13435",
      "asyncId": 2350,
      "triggerAsyncId": 2347,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2351
      ],
      "uniqueid": 755
    },
    "756": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179987188236",
      "endTime": "1209179987269929",
      "elapsedTime": "81693",
      "asyncId": 2351,
      "triggerAsyncId": 2350,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2352
      ],
      "uniqueid": 756
    },
    "757": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179989530414",
      "endTime": "1209179989544881",
      "elapsedTime": "14467",
      "asyncId": 2355,
      "triggerAsyncId": 2354,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2356
      ],
      "uniqueid": 757
    },
    "758": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179989599374",
      "endTime": "1209179989974666",
      "elapsedTime": "375292",
      "asyncId": 2356,
      "triggerAsyncId": 2355,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2357,
        2359
      ],
      "uniqueid": 758
    },
    "759": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179989770514",
      "endTime": "1209179989784811",
      "elapsedTime": "14297",
      "asyncId": 2359,
      "triggerAsyncId": 2356,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2360
      ],
      "uniqueid": 759
    },
    "760": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179989836578",
      "endTime": "1209179989908833",
      "elapsedTime": "72255",
      "asyncId": 2360,
      "triggerAsyncId": 2359,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2361
      ],
      "uniqueid": 760
    },
    "761": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179990790065",
      "endTime": "1209179990805914",
      "elapsedTime": "15849",
      "asyncId": 2374,
      "triggerAsyncId": 2371,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2375
      ],
      "uniqueid": 761
    },
    "762": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179991079827",
      "endTime": "1209179991700340",
      "elapsedTime": "620513",
      "asyncId": 2375,
      "triggerAsyncId": 2374,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2376,
        2379
      ],
      "uniqueid": 762
    },
    "763": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179991220801",
      "endTime": "1209179991918138",
      "elapsedTime": "697337",
      "asyncId": 2376,
      "triggerAsyncId": 2375,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2377,
        2382
      ],
      "uniqueid": 763
    },
    "764": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179991522858",
      "endTime": "1209179991537094",
      "elapsedTime": "14236",
      "asyncId": 2379,
      "triggerAsyncId": 2375,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2380
      ],
      "uniqueid": 764
    },
    "765": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179991580966",
      "endTime": "1209179991639737",
      "elapsedTime": "58771",
      "asyncId": 2380,
      "triggerAsyncId": 2379,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2381
      ],
      "uniqueid": 765
    },
    "766": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179991757687",
      "endTime": "1209179991768578",
      "elapsedTime": "10891",
      "asyncId": 2382,
      "triggerAsyncId": 2376,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2383
      ],
      "uniqueid": 766
    },
    "767": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179991811128",
      "endTime": "1209179991856002",
      "elapsedTime": "44874",
      "asyncId": 2383,
      "triggerAsyncId": 2382,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2384
      ],
      "uniqueid": 767
    },
    "768": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209179992428224",
      "endTime": "1209179992443192",
      "elapsedTime": "14968",
      "asyncId": 2390,
      "triggerAsyncId": 2387,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2391
      ],
      "uniqueid": 768
    },
    "769": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179992696096",
      "endTime": "1209179995483399",
      "elapsedTime": "2787303",
      "asyncId": 2391,
      "triggerAsyncId": 2390,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2392,
        2406
      ],
      "uniqueid": 769
    },
    "770": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179992863159",
      "endTime": "1209179995680849",
      "elapsedTime": "2817690",
      "asyncId": 2392,
      "triggerAsyncId": 2391,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2393,
        2409
      ],
      "uniqueid": 770
    },
    "771": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179993034760",
      "endTime": "1209179995869081",
      "elapsedTime": "2834321",
      "asyncId": 2393,
      "triggerAsyncId": 2392,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2394,
        2412
      ],
      "uniqueid": 771
    },
    "772": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179993197746",
      "endTime": "1209179996068295",
      "elapsedTime": "2870549",
      "asyncId": 2394,
      "triggerAsyncId": 2393,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2395,
        2415
      ],
      "uniqueid": 772
    },
    "773": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179993354219",
      "endTime": "1209179996259443",
      "elapsedTime": "2905224",
      "asyncId": 2395,
      "triggerAsyncId": 2394,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2396,
        2418
      ],
      "uniqueid": 773
    },
    "774": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179993517004",
      "endTime": "1209179996450300",
      "elapsedTime": "2933296",
      "asyncId": 2396,
      "triggerAsyncId": 2395,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2397,
        2421
      ],
      "uniqueid": 774
    },
    "775": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179993676543",
      "endTime": "1209179996641058",
      "elapsedTime": "2964515",
      "asyncId": 2397,
      "triggerAsyncId": 2396,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2398,
        2424
      ],
      "uniqueid": 775
    },
    "776": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179994567222",
      "endTime": "1209179997947776",
      "elapsedTime": "3380554",
      "asyncId": 2399,
      "triggerAsyncId": 2398,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2400,
        2427,
        2428
      ],
      "uniqueid": 776
    },
    "777": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179994703487",
      "endTime": "1209179998656634",
      "elapsedTime": "3953147",
      "asyncId": 2400,
      "triggerAsyncId": 2399,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2401,
        2444,
        2445
      ],
      "uniqueid": 777
    },
    "778": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179994838540",
      "endTime": "1209180000008708",
      "elapsedTime": "5170168",
      "asyncId": 2401,
      "triggerAsyncId": 2400,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2402,
        2453,
        2454
      ],
      "uniqueid": 778
    },
    "779": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209179995117253",
      "endTime": "1209180000739327",
      "elapsedTime": "5622074",
      "asyncId": 2403,
      "triggerAsyncId": 2402,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2405,
        2462,
        2463,
        2478
      ],
      "uniqueid": 779
    },
    "780": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209179995252095",
      "endTime": "1209180000845125",
      "elapsedTime": "5593030",
      "asyncId": 2405,
      "triggerAsyncId": 2403,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 780
    },
    "781": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179995337415",
      "endTime": "1209179995350369",
      "elapsedTime": "12954",
      "asyncId": 2406,
      "triggerAsyncId": 2391,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2407
      ],
      "uniqueid": 781
    },
    "782": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179995401395",
      "endTime": "1209179995425370",
      "elapsedTime": "23975",
      "asyncId": 2407,
      "triggerAsyncId": 2406,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2408
      ],
      "uniqueid": 782
    },
    "783": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179995539834",
      "endTime": "1209179995555063",
      "elapsedTime": "15229",
      "asyncId": 2409,
      "triggerAsyncId": 2392,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2410
      ],
      "uniqueid": 783
    },
    "784": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179995601039",
      "endTime": "1209179995625936",
      "elapsedTime": "24897",
      "asyncId": 2410,
      "triggerAsyncId": 2409,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2411
      ],
      "uniqueid": 784
    },
    "785": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179995739348",
      "endTime": "1209179995750369",
      "elapsedTime": "11021",
      "asyncId": 2412,
      "triggerAsyncId": 2393,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2413
      ],
      "uniqueid": 785
    },
    "786": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179995793019",
      "endTime": "1209179995816072",
      "elapsedTime": "23053",
      "asyncId": 2413,
      "triggerAsyncId": 2412,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2414
      ],
      "uniqueid": 786
    },
    "787": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179995924846",
      "endTime": "1209179995935957",
      "elapsedTime": "11111",
      "asyncId": 2415,
      "triggerAsyncId": 2394,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2416
      ],
      "uniqueid": 787
    },
    "788": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179995981933",
      "endTime": "1209179996013462",
      "elapsedTime": "31529",
      "asyncId": 2416,
      "triggerAsyncId": 2415,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2417
      ],
      "uniqueid": 788
    },
    "789": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179996129559",
      "endTime": "1209179996140971",
      "elapsedTime": "11412",
      "asyncId": 2418,
      "triggerAsyncId": 2395,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2419
      ],
      "uniqueid": 789
    },
    "790": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179996184252",
      "endTime": "1209179996207035",
      "elapsedTime": "22783",
      "asyncId": 2419,
      "triggerAsyncId": 2418,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2420
      ],
      "uniqueid": 790
    },
    "791": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179996314777",
      "endTime": "1209179996325627",
      "elapsedTime": "10850",
      "asyncId": 2421,
      "triggerAsyncId": 2396,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2422
      ],
      "uniqueid": 791
    },
    "792": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179996371833",
      "endTime": "1209179996395909",
      "elapsedTime": "24076",
      "asyncId": 2422,
      "triggerAsyncId": 2421,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2423
      ],
      "uniqueid": 792
    },
    "793": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209179996510904",
      "endTime": "1209179996521894",
      "elapsedTime": "10990",
      "asyncId": 2424,
      "triggerAsyncId": 2397,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2425
      ],
      "uniqueid": 793
    },
    "794": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209179996564084",
      "endTime": "1209179996586305",
      "elapsedTime": "22221",
      "asyncId": 2425,
      "triggerAsyncId": 2424,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2426
      ],
      "uniqueid": 794
    },
    "795": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179996723102",
      "endTime": "1209179997927619",
      "elapsedTime": "1204517",
      "asyncId": 2427,
      "triggerAsyncId": 2399,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2434
      ],
      "uniqueid": 795
    },
    "796": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179996795798",
      "endTime": "1209179996808291",
      "elapsedTime": "12493",
      "asyncId": 2428,
      "triggerAsyncId": 2399,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2429
      ],
      "uniqueid": 796
    },
    "797": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179996876158",
      "endTime": "1209179997909074",
      "elapsedTime": "1032916",
      "asyncId": 2429,
      "triggerAsyncId": 2428,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2430,
        2431
      ],
      "uniqueid": 797
    },
    "798": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179996941771",
      "endTime": "1209179997938399",
      "elapsedTime": "996628",
      "asyncId": 2430,
      "triggerAsyncId": 2429,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 798
    },
    "799": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179997027261",
      "endTime": "1209179997039895",
      "elapsedTime": "12634",
      "asyncId": 2431,
      "triggerAsyncId": 2429,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2432
      ],
      "uniqueid": 799
    },
    "800": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179997090380",
      "endTime": "1209179997728115",
      "elapsedTime": "637735",
      "asyncId": 2432,
      "triggerAsyncId": 2431,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2433,
        2435
      ],
      "uniqueid": 800
    },
    "801": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179998037494",
      "endTime": "1209179998638861",
      "elapsedTime": "601367",
      "asyncId": 2444,
      "triggerAsyncId": 2400,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2451
      ],
      "uniqueid": 801
    },
    "802": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179998110431",
      "endTime": "1209179998123686",
      "elapsedTime": "13255",
      "asyncId": 2445,
      "triggerAsyncId": 2400,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2446
      ],
      "uniqueid": 802
    },
    "803": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179998216289",
      "endTime": "1209179998620968",
      "elapsedTime": "404679",
      "asyncId": 2446,
      "triggerAsyncId": 2445,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2447,
        2448
      ],
      "uniqueid": 803
    },
    "804": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179998297231",
      "endTime": "1209179998647357",
      "elapsedTime": "350126",
      "asyncId": 2447,
      "triggerAsyncId": 2446,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 804
    },
    "805": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179998364517",
      "endTime": "1209179998376970",
      "elapsedTime": "12453",
      "asyncId": 2448,
      "triggerAsyncId": 2446,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2449
      ],
      "uniqueid": 805
    },
    "806": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179998424279",
      "endTime": "1209179998551257",
      "elapsedTime": "126978",
      "asyncId": 2449,
      "triggerAsyncId": 2448,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2450
      ],
      "uniqueid": 806
    },
    "807": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209179998732868",
      "endTime": "1209179999981647",
      "elapsedTime": "1248779",
      "asyncId": 2453,
      "triggerAsyncId": 2401,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2460
      ],
      "uniqueid": 807
    },
    "808": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209179998802658",
      "endTime": "1209179998814581",
      "elapsedTime": "11923",
      "asyncId": 2454,
      "triggerAsyncId": 2401,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2455
      ],
      "uniqueid": 808
    },
    "809": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209179998880304",
      "endTime": "1209179999952493",
      "elapsedTime": "1072189",
      "asyncId": 2455,
      "triggerAsyncId": 2454,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2456,
        2457
      ],
      "uniqueid": 809
    },
    "810": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209179998948642",
      "endTime": "1209179999991957",
      "elapsedTime": "1043315",
      "asyncId": 2456,
      "triggerAsyncId": 2455,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 810
    },
    "811": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209179999019364",
      "endTime": "1209179999030936",
      "elapsedTime": "11572",
      "asyncId": 2457,
      "triggerAsyncId": 2455,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2458
      ],
      "uniqueid": 811
    },
    "812": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209179999082573",
      "endTime": "1209179999217646",
      "elapsedTime": "135073",
      "asyncId": 2458,
      "triggerAsyncId": 2457,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2459
      ],
      "uniqueid": 812
    },
    "813": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180000113174",
      "endTime": "1209180000720001",
      "elapsedTime": "606827",
      "asyncId": 2462,
      "triggerAsyncId": 2403,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2469
      ],
      "uniqueid": 813
    },
    "814": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180000185599",
      "endTime": "1209180000197752",
      "elapsedTime": "12153",
      "asyncId": 2463,
      "triggerAsyncId": 2403,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2464
      ],
      "uniqueid": 814
    },
    "815": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180000267403",
      "endTime": "1209180000701887",
      "elapsedTime": "434484",
      "asyncId": 2464,
      "triggerAsyncId": 2463,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2465,
        2466
      ],
      "uniqueid": 815
    },
    "816": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180000339318",
      "endTime": "1209180000730090",
      "elapsedTime": "390772",
      "asyncId": 2465,
      "triggerAsyncId": 2464,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 816
    },
    "817": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180000407455",
      "endTime": "1209180000420349",
      "elapsedTime": "12894",
      "asyncId": 2466,
      "triggerAsyncId": 2464,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2467
      ],
      "uniqueid": 817
    },
    "818": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180000467708",
      "endTime": "1209180000630433",
      "elapsedTime": "162725",
      "asyncId": 2467,
      "triggerAsyncId": 2466,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2468
      ],
      "uniqueid": 818
    },
    "819": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209180003019650",
      "endTime": "1209180003035550",
      "elapsedTime": "15900",
      "asyncId": 2480,
      "triggerAsyncId": 2477,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2482
      ],
      "uniqueid": 819
    },
    "820": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180003711406",
      "endTime": "1209180006147741",
      "elapsedTime": "2436335",
      "asyncId": 2483,
      "triggerAsyncId": 2482,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2484,
        2503
      ],
      "uniqueid": 820
    },
    "821": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180003813127",
      "endTime": "1209180006307561",
      "elapsedTime": "2494434",
      "asyncId": 2484,
      "triggerAsyncId": 2483,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2485,
        2506
      ],
      "uniqueid": 821
    },
    "822": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180003911251",
      "endTime": "1209180006472189",
      "elapsedTime": "2560938",
      "asyncId": 2485,
      "triggerAsyncId": 2484,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2486,
        2509
      ],
      "uniqueid": 822
    },
    "823": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180004015315",
      "endTime": "1209180006631347",
      "elapsedTime": "2616032",
      "asyncId": 2486,
      "triggerAsyncId": 2485,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2487,
        2512
      ],
      "uniqueid": 823
    },
    "824": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180004113550",
      "endTime": "1209180006789854",
      "elapsedTime": "2676304",
      "asyncId": 2487,
      "triggerAsyncId": 2486,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2488,
        2515
      ],
      "uniqueid": 824
    },
    "825": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180004211994",
      "endTime": "1209180006948361",
      "elapsedTime": "2736367",
      "asyncId": 2488,
      "triggerAsyncId": 2487,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2489,
        2518
      ],
      "uniqueid": 825
    },
    "826": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180004307453",
      "endTime": "1209180007119021",
      "elapsedTime": "2811568",
      "asyncId": 2489,
      "triggerAsyncId": 2488,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2490,
        2521
      ],
      "uniqueid": 826
    },
    "827": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180004651898",
      "endTime": "1209180007727932",
      "elapsedTime": "3076034",
      "asyncId": 2491,
      "triggerAsyncId": 2490,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2492,
        2524,
        2525
      ],
      "uniqueid": 827
    },
    "828": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180004762385",
      "endTime": "1209180008758222",
      "elapsedTime": "3995837",
      "asyncId": 2492,
      "triggerAsyncId": 2491,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2493,
        2533,
        2534
      ],
      "uniqueid": 828
    },
    "829": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180005102382",
      "endTime": "1209180009411016",
      "elapsedTime": "4308634",
      "asyncId": 2494,
      "triggerAsyncId": 2493,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2495,
        2542,
        2543
      ],
      "uniqueid": 829
    },
    "830": {
      "source": "test/unit/scenario_test.js:65:10:65:10",
      "startTime": "1209180005558387",
      "endTime": "1209180009474074",
      "elapsedTime": "3915687",
      "asyncId": 2497,
      "triggerAsyncId": 2496,
      "io": "",
      "userCode": true,
      "line": "\n      scenario.suiteTeardown();\n      return recorder.promise()\n        .then(() => expect(beforeSuite.called).is.ok)\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok)",
      "startLine": 65,
      "startCol": 10,
      "endLine": 65,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        2498
      ],
      "uniqueid": 830
    },
    "831": {
      "source": "test/unit/scenario_test.js:66:10:66:10",
      "startTime": "1209180005660017",
      "endTime": "1209180009501094",
      "elapsedTime": "3841077",
      "asyncId": 2498,
      "triggerAsyncId": 2497,
      "io": "",
      "userCode": true,
      "line": "\n      return recorder.promise()\n        .then(() => expect(beforeSuite.called).is.ok)\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok);\n    })",
      "startLine": 66,
      "startCol": 10,
      "endLine": 66,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        2499
      ],
      "uniqueid": 831
    },
    "832": {
      "source": "test/unit/scenario_test.js:67:10:67:10",
      "startTime": "1209180005754334",
      "endTime": "1209180009526021",
      "elapsedTime": "3771687",
      "asyncId": 2499,
      "triggerAsyncId": 2498,
      "io": "",
      "userCode": true,
      "line": "\n        .then(() => expect(beforeSuite.called).is.ok)\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok);\n    });",
      "startLine": 67,
      "startCol": 10,
      "endLine": 67,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        2500
      ],
      "uniqueid": 832
    },
    "833": {
      "source": "test/unit/scenario_test.js:68:10:68:10",
      "startTime": "1209180005846918",
      "endTime": "1209180009550747",
      "elapsedTime": "3703829",
      "asyncId": 2500,
      "triggerAsyncId": 2499,
      "io": "",
      "userCode": true,
      "line": "\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok);\n    });\n\n    it('should fire failed event on error', () => ",
      "startLine": 68,
      "startCol": 10,
      "endLine": 68,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        2502
      ],
      "uniqueid": 833
    },
    "834": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209180005954890",
      "endTime": "1209180009647048",
      "elapsedTime": "3692158",
      "asyncId": 2502,
      "triggerAsyncId": 2500,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 834
    },
    "835": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180006025272",
      "endTime": "1209180006035942",
      "elapsedTime": "10670",
      "asyncId": 2503,
      "triggerAsyncId": 2483,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2504
      ],
      "uniqueid": 835
    },
    "836": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180006077800",
      "endTime": "1209180006099130",
      "elapsedTime": "21330",
      "asyncId": 2504,
      "triggerAsyncId": 2503,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 836
    },
    "837": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180006195260",
      "endTime": "1209180006205229",
      "elapsedTime": "9969",
      "asyncId": 2506,
      "triggerAsyncId": 2484,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2507
      ],
      "uniqueid": 837
    },
    "838": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180006240756",
      "endTime": "1209180006260132",
      "elapsedTime": "19376",
      "asyncId": 2507,
      "triggerAsyncId": 2506,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 838
    },
    "839": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180006353897",
      "endTime": "1209180006363586",
      "elapsedTime": "9689",
      "asyncId": 2509,
      "triggerAsyncId": 2485,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2510
      ],
      "uniqueid": 839
    },
    "840": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180006404131",
      "endTime": "1209180006424430",
      "elapsedTime": "20299",
      "asyncId": 2510,
      "triggerAsyncId": 2509,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 840
    },
    "841": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180006518606",
      "endTime": "1209180006528755",
      "elapsedTime": "10149",
      "asyncId": 2512,
      "triggerAsyncId": 2486,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2513
      ],
      "uniqueid": 841
    },
    "842": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180006564572",
      "endTime": "1209180006584319",
      "elapsedTime": "19747",
      "asyncId": 2513,
      "triggerAsyncId": 2512,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 842
    },
    "843": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180006677774",
      "endTime": "1209180006687933",
      "elapsedTime": "10159",
      "asyncId": 2515,
      "triggerAsyncId": 2487,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2516
      ],
      "uniqueid": 843
    },
    "844": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180006722648",
      "endTime": "1209180006743017",
      "elapsedTime": "20369",
      "asyncId": 2516,
      "triggerAsyncId": 2515,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 844
    },
    "845": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180006835740",
      "endTime": "1209180006845939",
      "elapsedTime": "10199",
      "asyncId": 2518,
      "triggerAsyncId": 2488,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2519
      ],
      "uniqueid": 845
    },
    "846": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180006881005",
      "endTime": "1209180006901023",
      "elapsedTime": "20018",
      "asyncId": 2519,
      "triggerAsyncId": 2518,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 846
    },
    "847": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180006997824",
      "endTime": "1209180007014696",
      "elapsedTime": "16872",
      "asyncId": 2521,
      "triggerAsyncId": 2489,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2522
      ],
      "uniqueid": 847
    },
    "848": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180007051204",
      "endTime": "1209180007071422",
      "elapsedTime": "20218",
      "asyncId": 2522,
      "triggerAsyncId": 2521,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 848
    },
    "849": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180007193751",
      "endTime": "1209180007711161",
      "elapsedTime": "517410",
      "asyncId": 2524,
      "triggerAsyncId": 2491,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 849
    },
    "850": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180007252601",
      "endTime": "1209180007263031",
      "elapsedTime": "10430",
      "asyncId": 2525,
      "triggerAsyncId": 2491,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2526
      ],
      "uniqueid": 850
    },
    "851": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180007320228",
      "endTime": "1209180007694770",
      "elapsedTime": "374542",
      "asyncId": 2526,
      "triggerAsyncId": 2525,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2527,
        2528
      ],
      "uniqueid": 851
    },
    "852": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180007376904",
      "endTime": "1209180007719296",
      "elapsedTime": "342392",
      "asyncId": 2527,
      "triggerAsyncId": 2526,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 852
    },
    "853": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180007446755",
      "endTime": "1209180007459950",
      "elapsedTime": "13195",
      "asyncId": 2528,
      "triggerAsyncId": 2526,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2529
      ],
      "uniqueid": 853
    },
    "854": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180007508180",
      "endTime": "1209180007637393",
      "elapsedTime": "129213",
      "asyncId": 2529,
      "triggerAsyncId": 2528,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2530
      ],
      "uniqueid": 854
    },
    "855": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180007791030",
      "endTime": "1209180008741571",
      "elapsedTime": "950541",
      "asyncId": 2533,
      "triggerAsyncId": 2492,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 855
    },
    "856": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180007849209",
      "endTime": "1209180007860931",
      "elapsedTime": "11722",
      "asyncId": 2534,
      "triggerAsyncId": 2492,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2535
      ],
      "uniqueid": 856
    },
    "857": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180008318288",
      "endTime": "1209180008725060",
      "elapsedTime": "406772",
      "asyncId": 2535,
      "triggerAsyncId": 2534,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2536,
        2537
      ],
      "uniqueid": 857
    },
    "858": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180008390233",
      "endTime": "1209180008749576",
      "elapsedTime": "359343",
      "asyncId": 2536,
      "triggerAsyncId": 2535,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 858
    },
    "859": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180008457198",
      "endTime": "1209180008470173",
      "elapsedTime": "12975",
      "asyncId": 2537,
      "triggerAsyncId": 2535,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2538
      ],
      "uniqueid": 859
    },
    "860": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180008524274",
      "endTime": "1209180008663034",
      "elapsedTime": "138760",
      "asyncId": 2538,
      "triggerAsyncId": 2537,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2539
      ],
      "uniqueid": 860
    },
    "861": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180008833914",
      "endTime": "1209180009394395",
      "elapsedTime": "560481",
      "asyncId": 2542,
      "triggerAsyncId": 2494,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 861
    },
    "862": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180008898666",
      "endTime": "1209180008910057",
      "elapsedTime": "11391",
      "asyncId": 2543,
      "triggerAsyncId": 2494,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2544
      ],
      "uniqueid": 862
    },
    "863": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180008970620",
      "endTime": "1209180009376882",
      "elapsedTime": "406262",
      "asyncId": 2544,
      "triggerAsyncId": 2543,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2545,
        2546
      ],
      "uniqueid": 863
    },
    "864": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180009039780",
      "endTime": "1209180009402389",
      "elapsedTime": "362609",
      "asyncId": 2545,
      "triggerAsyncId": 2544,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 864
    },
    "865": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180009103179",
      "endTime": "1209180009114270",
      "elapsedTime": "11091",
      "asyncId": 2546,
      "triggerAsyncId": 2544,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2547
      ],
      "uniqueid": 865
    },
    "866": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180009156729",
      "endTime": "1209180009312561",
      "elapsedTime": "155832",
      "asyncId": 2547,
      "triggerAsyncId": 2546,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2548
      ],
      "uniqueid": 866
    },
    "867": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209180010129612",
      "endTime": "1209180010146003",
      "elapsedTime": "16391",
      "asyncId": 2559,
      "triggerAsyncId": 2556,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2561
      ],
      "uniqueid": 867
    },
    "868": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180011190009",
      "endTime": "1209180014469354",
      "elapsedTime": "3279345",
      "asyncId": 2562,
      "triggerAsyncId": 2561,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2563,
        2586
      ],
      "uniqueid": 868
    },
    "869": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180011291469",
      "endTime": "1209180014632920",
      "elapsedTime": "3341451",
      "asyncId": 2563,
      "triggerAsyncId": 2562,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2564,
        2589
      ],
      "uniqueid": 869
    },
    "870": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180011429768",
      "endTime": "1209180014778553",
      "elapsedTime": "3348785",
      "asyncId": 2564,
      "triggerAsyncId": 2563,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2565,
        2592
      ],
      "uniqueid": 870
    },
    "871": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180011528974",
      "endTime": "1209180014928745",
      "elapsedTime": "3399771",
      "asyncId": 2565,
      "triggerAsyncId": 2564,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2566,
        2595
      ],
      "uniqueid": 871
    },
    "872": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180011624864",
      "endTime": "1209180015088294",
      "elapsedTime": "3463430",
      "asyncId": 2566,
      "triggerAsyncId": 2565,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2567,
        2598
      ],
      "uniqueid": 872
    },
    "873": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180011720313",
      "endTime": "1209180015232273",
      "elapsedTime": "3511960",
      "asyncId": 2567,
      "triggerAsyncId": 2566,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2568,
        2601
      ],
      "uniqueid": 873
    },
    "874": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180011818467",
      "endTime": "1209180015379289",
      "elapsedTime": "3560822",
      "asyncId": 2568,
      "triggerAsyncId": 2567,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2569,
        2604
      ],
      "uniqueid": 874
    },
    "875": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180012226391",
      "endTime": "1209180015538698",
      "elapsedTime": "3312307",
      "asyncId": 2570,
      "triggerAsyncId": 2569,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2571,
        2607
      ],
      "uniqueid": 875
    },
    "876": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180012358579",
      "endTime": "1209180015683258",
      "elapsedTime": "3324679",
      "asyncId": 2571,
      "triggerAsyncId": 2570,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2572,
        2610
      ],
      "uniqueid": 876
    },
    "877": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180012490796",
      "endTime": "1209180015825455",
      "elapsedTime": "3334659",
      "asyncId": 2572,
      "triggerAsyncId": 2571,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2573,
        2613
      ],
      "uniqueid": 877
    },
    "878": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180012619017",
      "endTime": "1209180015977169",
      "elapsedTime": "3358152",
      "asyncId": 2573,
      "triggerAsyncId": 2572,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2574,
        2616
      ],
      "uniqueid": 878
    },
    "879": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180012747878",
      "endTime": "1209180016136979",
      "elapsedTime": "3389101",
      "asyncId": 2574,
      "triggerAsyncId": 2573,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2575,
        2619
      ],
      "uniqueid": 879
    },
    "880": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180012876449",
      "endTime": "1209180016282481",
      "elapsedTime": "3406032",
      "asyncId": 2575,
      "triggerAsyncId": 2574,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2576,
        2622
      ],
      "uniqueid": 880
    },
    "881": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180013009989",
      "endTime": "1209180016426351",
      "elapsedTime": "3416362",
      "asyncId": 2576,
      "triggerAsyncId": 2575,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2577,
        2625
      ],
      "uniqueid": 881
    },
    "882": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180013655389",
      "endTime": "1209180016966213",
      "elapsedTime": "3310824",
      "asyncId": 2578,
      "triggerAsyncId": 2577,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2579,
        2628,
        2629
      ],
      "uniqueid": 882
    },
    "883": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180013765084",
      "endTime": "1209180016981361",
      "elapsedTime": "3216277",
      "asyncId": 2579,
      "triggerAsyncId": 2578,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2580
      ],
      "uniqueid": 883
    },
    "884": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180013871674",
      "endTime": "1209180016989366",
      "elapsedTime": "3117692",
      "asyncId": 2580,
      "triggerAsyncId": 2579,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2581
      ],
      "uniqueid": 884
    },
    "885": {
      "source": "test/unit/scenario_test.js:79:10:79:10",
      "startTime": "1209180014084883",
      "endTime": "1209180018249477",
      "elapsedTime": "4164594",
      "asyncId": 2582,
      "triggerAsyncId": 2581,
      "io": "",
      "userCode": true,
      "line": "\n      scenario.test(test).fn(() => {});\n      return recorder.promise()\n        .then(() => expect(failed.called).is.ok)\n        .catch(() => null);\n    });",
      "startLine": 79,
      "startCol": 10,
      "endLine": 79,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        2583
      ],
      "uniqueid": 885
    },
    "886": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209180014286772",
      "endTime": "1209180018770333",
      "elapsedTime": "4483561",
      "asyncId": 2585,
      "triggerAsyncId": 2583,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 886
    },
    "887": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180014347165",
      "endTime": "1209180014356412",
      "elapsedTime": "9247",
      "asyncId": 2586,
      "triggerAsyncId": 2562,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2587
      ],
      "uniqueid": 887
    },
    "888": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180014393672",
      "endTime": "1209180014414912",
      "elapsedTime": "21240",
      "asyncId": 2587,
      "triggerAsyncId": 2586,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 888
    },
    "889": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180014522964",
      "endTime": "1209180014533704",
      "elapsedTime": "10740",
      "asyncId": 2589,
      "triggerAsyncId": 2563,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2590
      ],
      "uniqueid": 889
    },
    "890": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180014571926",
      "endTime": "1209180014589248",
      "elapsedTime": "17322",
      "asyncId": 2590,
      "triggerAsyncId": 2589,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 890
    },
    "891": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180014676752",
      "endTime": "1209180014685629",
      "elapsedTime": "8877",
      "asyncId": 2592,
      "triggerAsyncId": 2564,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2593
      ],
      "uniqueid": 891
    },
    "892": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180014717920",
      "endTime": "1209180014735783",
      "elapsedTime": "17863",
      "asyncId": 2593,
      "triggerAsyncId": 2592,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 892
    },
    "893": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180014821744",
      "endTime": "1209180014830060",
      "elapsedTime": "8316",
      "asyncId": 2595,
      "triggerAsyncId": 2565,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2596
      ],
      "uniqueid": 893
    },
    "894": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180014862921",
      "endTime": "1209180014880324",
      "elapsedTime": "17403",
      "asyncId": 2596,
      "triggerAsyncId": 2595,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 894
    },
    "895": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180014977015",
      "endTime": "1209180014986162",
      "elapsedTime": "9147",
      "asyncId": 2598,
      "triggerAsyncId": 2566,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2599
      ],
      "uniqueid": 895
    },
    "896": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180015026708",
      "endTime": "1209180015044432",
      "elapsedTime": "17724",
      "asyncId": 2599,
      "triggerAsyncId": 2598,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 896
    },
    "897": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180015131775",
      "endTime": "1209180015140271",
      "elapsedTime": "8496",
      "asyncId": 2601,
      "triggerAsyncId": 2567,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2602
      ],
      "uniqueid": 897
    },
    "898": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180015172541",
      "endTime": "1209180015189754",
      "elapsedTime": "17213",
      "asyncId": 2602,
      "triggerAsyncId": 2601,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 898
    },
    "899": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180015275444",
      "endTime": "1209180015284852",
      "elapsedTime": "9408",
      "asyncId": 2604,
      "triggerAsyncId": 2568,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2605
      ],
      "uniqueid": 899
    },
    "900": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180015317613",
      "endTime": "1209180015335747",
      "elapsedTime": "18134",
      "asyncId": 2605,
      "triggerAsyncId": 2604,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 900
    },
    "901": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180015430765",
      "endTime": "1209180015439562",
      "elapsedTime": "8797",
      "asyncId": 2607,
      "triggerAsyncId": 2570,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2608
      ],
      "uniqueid": 901
    },
    "902": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180015472143",
      "endTime": "1209180015494395",
      "elapsedTime": "22252",
      "asyncId": 2608,
      "triggerAsyncId": 2607,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 902
    },
    "903": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180015582209",
      "endTime": "1209180015590976",
      "elapsedTime": "8767",
      "asyncId": 2610,
      "triggerAsyncId": 2571,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2611
      ],
      "uniqueid": 903
    },
    "904": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180015623236",
      "endTime": "1209180015640869",
      "elapsedTime": "17633",
      "asyncId": 2611,
      "triggerAsyncId": 2610,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 904
    },
    "905": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180015725157",
      "endTime": "1209180015733853",
      "elapsedTime": "8696",
      "asyncId": 2613,
      "triggerAsyncId": 2572,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2614
      ],
      "uniqueid": 905
    },
    "906": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180015765853",
      "endTime": "1209180015783005",
      "elapsedTime": "17152",
      "asyncId": 2614,
      "triggerAsyncId": 2613,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 906
    },
    "907": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180015868145",
      "endTime": "1209180015877502",
      "elapsedTime": "9357",
      "asyncId": 2616,
      "triggerAsyncId": 2573,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2617
      ],
      "uniqueid": 907
    },
    "908": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180015910114",
      "endTime": "1209180015932856",
      "elapsedTime": "22742",
      "asyncId": 2617,
      "triggerAsyncId": 2616,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 908
    },
    "909": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180016028395",
      "endTime": "1209180016040999",
      "elapsedTime": "12604",
      "asyncId": 2619,
      "triggerAsyncId": 2574,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2620
      ],
      "uniqueid": 909
    },
    "910": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180016076165",
      "endTime": "1209180016094228",
      "elapsedTime": "18063",
      "asyncId": 2620,
      "triggerAsyncId": 2619,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 910
    },
    "911": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180016181001",
      "endTime": "1209180016189958",
      "elapsedTime": "8957",
      "asyncId": 2622,
      "triggerAsyncId": 2575,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2623
      ],
      "uniqueid": 911
    },
    "912": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180016221657",
      "endTime": "1209180016239380",
      "elapsedTime": "17723",
      "asyncId": 2623,
      "triggerAsyncId": 2622,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 912
    },
    "913": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180016324771",
      "endTime": "1209180016333457",
      "elapsedTime": "8686",
      "asyncId": 2625,
      "triggerAsyncId": 2576,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2626
      ],
      "uniqueid": 913
    },
    "914": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180016365376",
      "endTime": "1209180016383020",
      "elapsedTime": "17644",
      "asyncId": 2626,
      "triggerAsyncId": 2625,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 914
    },
    "915": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180016494068",
      "endTime": "1209180016950513",
      "elapsedTime": "456445",
      "asyncId": 2628,
      "triggerAsyncId": 2578,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 915
    },
    "916": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180016557977",
      "endTime": "1209180016567936",
      "elapsedTime": "9959",
      "asyncId": 2629,
      "triggerAsyncId": 2578,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2630
      ],
      "uniqueid": 916
    },
    "917": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180016627919",
      "endTime": "1209180016934303",
      "elapsedTime": "306384",
      "asyncId": 2630,
      "triggerAsyncId": 2629,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2631,
        2632
      ],
      "uniqueid": 917
    },
    "918": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180016681219",
      "endTime": "1209180016958077",
      "elapsedTime": "276858",
      "asyncId": 2631,
      "triggerAsyncId": 2630,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 918
    },
    "919": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180016730811",
      "endTime": "1209180016739598",
      "elapsedTime": "8787",
      "asyncId": 2632,
      "triggerAsyncId": 2630,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2633
      ],
      "uniqueid": 919
    },
    "920": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180016775705",
      "endTime": "1209180016874801",
      "elapsedTime": "99096",
      "asyncId": 2633,
      "triggerAsyncId": 2632,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2634
      ],
      "uniqueid": 920
    },
    "921": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1209180017225288",
      "endTime": "1209180017237140",
      "elapsedTime": "11852",
      "asyncId": 2638,
      "triggerAsyncId": 2581,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2639
      ],
      "uniqueid": 921
    },
    "922": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180017335024",
      "endTime": "1209180018984955",
      "elapsedTime": "1649931",
      "asyncId": 2639,
      "triggerAsyncId": 2638,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2640,
        2644,
        2645
      ],
      "uniqueid": 922
    },
    "923": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180017394906",
      "endTime": "1209180019867489",
      "elapsedTime": "2472583",
      "asyncId": 2640,
      "triggerAsyncId": 2639,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2641,
        2658,
        2659
      ],
      "uniqueid": 923
    },
    "924": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180017466630",
      "endTime": "1209180020751114",
      "elapsedTime": "3284484",
      "asyncId": 2641,
      "triggerAsyncId": 2640,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2642,
        2671,
        2672
      ],
      "uniqueid": 924
    },
    "925": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180017756373",
      "endTime": "1209180021587832",
      "elapsedTime": "3831459",
      "asyncId": 2642,
      "triggerAsyncId": 2641,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2643,
        2684,
        2685
      ],
      "uniqueid": 925
    },
    "926": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180017848025",
      "endTime": "1209180021767148",
      "elapsedTime": "3919123",
      "asyncId": 2643,
      "triggerAsyncId": 2642,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2697
      ],
      "uniqueid": 926
    },
    "927": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180017972358",
      "endTime": "1209180018970668",
      "elapsedTime": "998310",
      "asyncId": 2644,
      "triggerAsyncId": 2639,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 927
    },
    "928": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180018037870",
      "endTime": "1209180018047709",
      "elapsedTime": "9839",
      "asyncId": 2645,
      "triggerAsyncId": 2639,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2646
      ],
      "uniqueid": 928
    },
    "929": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180018111899",
      "endTime": "1209180018956792",
      "elapsedTime": "844893",
      "asyncId": 2646,
      "triggerAsyncId": 2645,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2647,
        2648
      ],
      "uniqueid": 929
    },
    "930": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180018196518",
      "endTime": "1209180018977421",
      "elapsedTime": "780903",
      "asyncId": 2647,
      "triggerAsyncId": 2646,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 930
    },
    "931": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180018303418",
      "endTime": "1209180018313277",
      "elapsedTime": "9859",
      "asyncId": 2648,
      "triggerAsyncId": 2646,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2649
      ],
      "uniqueid": 931
    },
    "932": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180018351558",
      "endTime": "1209180018934601",
      "elapsedTime": "583043",
      "asyncId": 2649,
      "triggerAsyncId": 2648,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2650
      ],
      "uniqueid": 932
    },
    "933": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180019055147",
      "endTime": "1209180019853262",
      "elapsedTime": "798115",
      "asyncId": 2658,
      "triggerAsyncId": 2640,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 933
    },
    "934": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180019111713",
      "endTime": "1209180019120549",
      "elapsedTime": "8836",
      "asyncId": 2659,
      "triggerAsyncId": 2640,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2660
      ],
      "uniqueid": 934
    },
    "935": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180019174380",
      "endTime": "1209180019839346",
      "elapsedTime": "664966",
      "asyncId": 2660,
      "triggerAsyncId": 2659,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2661,
        2662
      ],
      "uniqueid": 935
    },
    "936": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180019225446",
      "endTime": "1209180019859955",
      "elapsedTime": "634509",
      "asyncId": 2661,
      "triggerAsyncId": 2660,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 936
    },
    "937": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180019277804",
      "endTime": "1209180019289556",
      "elapsedTime": "11752",
      "asyncId": 2662,
      "triggerAsyncId": 2660,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2663
      ],
      "uniqueid": 937
    },
    "938": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180019327257",
      "endTime": "1209180019816563",
      "elapsedTime": "489306",
      "asyncId": 2663,
      "triggerAsyncId": 2662,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2664
      ],
      "uniqueid": 938
    },
    "939": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180019924125",
      "endTime": "1209180020736968",
      "elapsedTime": "812843",
      "asyncId": 2671,
      "triggerAsyncId": 2641,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 939
    },
    "940": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180019982474",
      "endTime": "1209180019991802",
      "elapsedTime": "9328",
      "asyncId": 2672,
      "triggerAsyncId": 2641,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2673
      ],
      "uniqueid": 940
    },
    "941": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180020092831",
      "endTime": "1209180020723382",
      "elapsedTime": "630551",
      "asyncId": 2673,
      "triggerAsyncId": 2672,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2674,
        2675
      ],
      "uniqueid": 941
    },
    "942": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180020146472",
      "endTime": "1209180020743651",
      "elapsedTime": "597179",
      "asyncId": 2674,
      "triggerAsyncId": 2673,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 942
    },
    "943": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180020198118",
      "endTime": "1209180020206915",
      "elapsedTime": "8797",
      "asyncId": 2675,
      "triggerAsyncId": 2673,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2676
      ],
      "uniqueid": 943
    },
    "944": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180020246429",
      "endTime": "1209180020701171",
      "elapsedTime": "454742",
      "asyncId": 2676,
      "triggerAsyncId": 2675,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2677
      ],
      "uniqueid": 944
    },
    "945": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180020808292",
      "endTime": "1209180021573706",
      "elapsedTime": "765414",
      "asyncId": 2684,
      "triggerAsyncId": 2642,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 945
    },
    "946": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180020866150",
      "endTime": "1209180020875377",
      "elapsedTime": "9227",
      "asyncId": 2685,
      "triggerAsyncId": 2642,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2686
      ],
      "uniqueid": 946
    },
    "947": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180020926944",
      "endTime": "1209180021559870",
      "elapsedTime": "632926",
      "asyncId": 2686,
      "triggerAsyncId": 2685,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2687,
        2688
      ],
      "uniqueid": 947
    },
    "948": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180020979522",
      "endTime": "1209180021580428",
      "elapsedTime": "600906",
      "asyncId": 2687,
      "triggerAsyncId": 2686,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 948
    },
    "949": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180021042180",
      "endTime": "1209180021051257",
      "elapsedTime": "9077",
      "asyncId": 2688,
      "triggerAsyncId": 2686,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2689
      ],
      "uniqueid": 949
    },
    "950": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180021088376",
      "endTime": "1209180021537518",
      "elapsedTime": "449142",
      "asyncId": 2689,
      "triggerAsyncId": 2688,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2690
      ],
      "uniqueid": 950
    },
    "951": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180021633949",
      "endTime": "1209180021642875",
      "elapsedTime": "8926",
      "asyncId": 2697,
      "triggerAsyncId": 2643,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2698
      ],
      "uniqueid": 951
    },
    "952": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180021677039",
      "endTime": "1209180021720250",
      "elapsedTime": "43211",
      "asyncId": 2698,
      "triggerAsyncId": 2697,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 952
    },
    "953": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209180022136180",
      "endTime": "1209180022148513",
      "elapsedTime": "12333",
      "asyncId": 2705,
      "triggerAsyncId": 2703,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2707
      ],
      "uniqueid": 953
    },
    "954": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209180022747465",
      "endTime": "1209180022760239",
      "elapsedTime": "12774",
      "asyncId": 2709,
      "triggerAsyncId": 2706,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2710
      ],
      "uniqueid": 954
    },
    "955": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180023036347",
      "endTime": "1209180025046693",
      "elapsedTime": "2010346",
      "asyncId": 2711,
      "triggerAsyncId": 2710,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2712,
        2727
      ],
      "uniqueid": 955
    },
    "956": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180023146483",
      "endTime": "1209180025211572",
      "elapsedTime": "2065089",
      "asyncId": 2712,
      "triggerAsyncId": 2711,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2713,
        2730
      ],
      "uniqueid": 956
    },
    "957": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180023244086",
      "endTime": "1209180025368837",
      "elapsedTime": "2124751",
      "asyncId": 2713,
      "triggerAsyncId": 2712,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2714,
        2733
      ],
      "uniqueid": 957
    },
    "958": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180023339976",
      "endTime": "1209180025530670",
      "elapsedTime": "2190694",
      "asyncId": 2714,
      "triggerAsyncId": 2713,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2715,
        2736
      ],
      "uniqueid": 958
    },
    "959": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180023436366",
      "endTime": "1209180025694988",
      "elapsedTime": "2258622",
      "asyncId": 2715,
      "triggerAsyncId": 2714,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2716,
        2739
      ],
      "uniqueid": 959
    },
    "960": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180023532436",
      "endTime": "1209180025857382",
      "elapsedTime": "2324946",
      "asyncId": 2716,
      "triggerAsyncId": 2715,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2717,
        2742
      ],
      "uniqueid": 960
    },
    "961": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180023627334",
      "endTime": "1209180026030086",
      "elapsedTime": "2402752",
      "asyncId": 2717,
      "triggerAsyncId": 2716,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2718,
        2745
      ],
      "uniqueid": 961
    },
    "962": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180024207922",
      "endTime": "1209180026608049",
      "elapsedTime": "2400127",
      "asyncId": 2719,
      "triggerAsyncId": 2718,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2720,
        2748,
        2749
      ],
      "uniqueid": 962
    },
    "963": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180024318208",
      "endTime": "1209180026622626",
      "elapsedTime": "2304418",
      "asyncId": 2720,
      "triggerAsyncId": 2719,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2721
      ],
      "uniqueid": 963
    },
    "964": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180024424237",
      "endTime": "1209180026630190",
      "elapsedTime": "2205953",
      "asyncId": 2721,
      "triggerAsyncId": 2720,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2722
      ],
      "uniqueid": 964
    },
    "965": {
      "source": "test/unit/scenario_test.js:89:10:89:10",
      "startTime": "1209180024623921",
      "endTime": "1209180027524286",
      "elapsedTime": "2900365",
      "asyncId": 2723,
      "triggerAsyncId": 2722,
      "io": "",
      "userCode": true,
      "line": "\n      scenario.test(test).fn(() => {});\n      return recorder.promise()\n        .then(() => expect(failed.called).is.ok)\n        .catch(() => null);\n    });\n  })",
      "startLine": 89,
      "startCol": 10,
      "endLine": 89,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        2724
      ],
      "uniqueid": 965
    },
    "966": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1209180024829406",
      "endTime": "1209180028068946",
      "elapsedTime": "3239540",
      "asyncId": 2726,
      "triggerAsyncId": 2724,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 966
    },
    "967": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180024917251",
      "endTime": "1209180024931678",
      "elapsedTime": "14427",
      "asyncId": 2727,
      "triggerAsyncId": 2711,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2728
      ],
      "uniqueid": 967
    },
    "968": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180024972284",
      "endTime": "1209180024990789",
      "elapsedTime": "18505",
      "asyncId": 2728,
      "triggerAsyncId": 2727,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2729
      ],
      "uniqueid": 968
    },
    "969": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180025096026",
      "endTime": "1209180025104912",
      "elapsedTime": "8886",
      "asyncId": 2730,
      "triggerAsyncId": 2712,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2731
      ],
      "uniqueid": 969
    },
    "970": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180025146080",
      "endTime": "1209180025164374",
      "elapsedTime": "18294",
      "asyncId": 2731,
      "triggerAsyncId": 2730,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2732
      ],
      "uniqueid": 970
    },
    "971": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180025259001",
      "endTime": "1209180025267778",
      "elapsedTime": "8777",
      "asyncId": 2733,
      "triggerAsyncId": 2713,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2734
      ],
      "uniqueid": 971
    },
    "972": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180025305508",
      "endTime": "1209180025323292",
      "elapsedTime": "17784",
      "asyncId": 2734,
      "triggerAsyncId": 2733,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2735
      ],
      "uniqueid": 972
    },
    "973": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180025416146",
      "endTime": "1209180025424882",
      "elapsedTime": "8736",
      "asyncId": 2736,
      "triggerAsyncId": 2714,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2737
      ],
      "uniqueid": 973
    },
    "974": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180025465338",
      "endTime": "1209180025483702",
      "elapsedTime": "18364",
      "asyncId": 2737,
      "triggerAsyncId": 2736,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2738
      ],
      "uniqueid": 974
    },
    "975": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180025583189",
      "endTime": "1209180025592456",
      "elapsedTime": "9267",
      "asyncId": 2739,
      "triggerAsyncId": 2715,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2740
      ],
      "uniqueid": 975
    },
    "976": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180025631379",
      "endTime": "1209180025649332",
      "elapsedTime": "17953",
      "asyncId": 2740,
      "triggerAsyncId": 2739,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2741
      ],
      "uniqueid": 976
    },
    "977": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180025745873",
      "endTime": "1209180025755021",
      "elapsedTime": "9148",
      "asyncId": 2742,
      "triggerAsyncId": 2716,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2743
      ],
      "uniqueid": 977
    },
    "978": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180025793823",
      "endTime": "1209180025811747",
      "elapsedTime": "17924",
      "asyncId": 2743,
      "triggerAsyncId": 2742,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2744
      ],
      "uniqueid": 978
    },
    "979": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180025905062",
      "endTime": "1209180025913708",
      "elapsedTime": "8646",
      "asyncId": 2745,
      "triggerAsyncId": 2717,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2746
      ],
      "uniqueid": 979
    },
    "980": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180025950467",
      "endTime": "1209180025968230",
      "elapsedTime": "17763",
      "asyncId": 2746,
      "triggerAsyncId": 2745,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2747
      ],
      "uniqueid": 980
    },
    "981": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180026105417",
      "endTime": "1209180026593291",
      "elapsedTime": "487874",
      "asyncId": 2748,
      "triggerAsyncId": 2719,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2755
      ],
      "uniqueid": 981
    },
    "982": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180026169437",
      "endTime": "1209180026179035",
      "elapsedTime": "9598",
      "asyncId": 2749,
      "triggerAsyncId": 2719,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2750
      ],
      "uniqueid": 982
    },
    "983": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180026238917",
      "endTime": "1209180026577442",
      "elapsedTime": "338525",
      "asyncId": 2750,
      "triggerAsyncId": 2749,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2751,
        2752
      ],
      "uniqueid": 983
    },
    "984": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180026299110",
      "endTime": "1209180026600325",
      "elapsedTime": "301215",
      "asyncId": 2751,
      "triggerAsyncId": 2750,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 984
    },
    "985": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180026358411",
      "endTime": "1209180026367698",
      "elapsedTime": "9287",
      "asyncId": 2752,
      "triggerAsyncId": 2750,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2753
      ],
      "uniqueid": 985
    },
    "986": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180026408846",
      "endTime": "1209180026515826",
      "elapsedTime": "106980",
      "asyncId": 2753,
      "triggerAsyncId": 2752,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2754
      ],
      "uniqueid": 986
    },
    "987": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1209180026785561",
      "endTime": "1209180026796252",
      "elapsedTime": "10691",
      "asyncId": 2758,
      "triggerAsyncId": 2722,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2759
      ],
      "uniqueid": 987
    },
    "988": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180026875951",
      "endTime": "1209180028292796",
      "elapsedTime": "1416845",
      "asyncId": 2759,
      "triggerAsyncId": 2758,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2760,
        2764,
        2765
      ],
      "uniqueid": 988
    },
    "989": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180026940722",
      "endTime": "1209180029236524",
      "elapsedTime": "2295802",
      "asyncId": 2760,
      "triggerAsyncId": 2759,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2761,
        2778,
        2779
      ],
      "uniqueid": 989
    },
    "990": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180027010794",
      "endTime": "1209180030180443",
      "elapsedTime": "3169649",
      "asyncId": 2761,
      "triggerAsyncId": 2760,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2762,
        2791,
        2792
      ],
      "uniqueid": 990
    },
    "991": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180027081837",
      "endTime": "1209180031101709",
      "elapsedTime": "4019872",
      "asyncId": 2762,
      "triggerAsyncId": 2761,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2763,
        2804,
        2805
      ],
      "uniqueid": 991
    },
    "992": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180027159823",
      "endTime": "1209180031296975",
      "elapsedTime": "4137152",
      "asyncId": 2763,
      "triggerAsyncId": 2762,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        2817,
        3476
      ],
      "uniqueid": 992
    },
    "993": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180027280699",
      "endTime": "1209180028278389",
      "elapsedTime": "997690",
      "asyncId": 2764,
      "triggerAsyncId": 2759,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2771
      ],
      "uniqueid": 993
    },
    "994": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180027343126",
      "endTime": "1209180027353045",
      "elapsedTime": "9919",
      "asyncId": 2765,
      "triggerAsyncId": 2759,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2766
      ],
      "uniqueid": 994
    },
    "995": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180027416584",
      "endTime": "1209180028264072",
      "elapsedTime": "847488",
      "asyncId": 2766,
      "triggerAsyncId": 2765,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2767,
        2768
      ],
      "uniqueid": 995
    },
    "996": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180027475134",
      "endTime": "1209180028285222",
      "elapsedTime": "810088",
      "asyncId": 2767,
      "triggerAsyncId": 2766,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 996
    },
    "997": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180027575031",
      "endTime": "1209180027584138",
      "elapsedTime": "9107",
      "asyncId": 2768,
      "triggerAsyncId": 2766,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2769
      ],
      "uniqueid": 997
    },
    "998": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180027629062",
      "endTime": "1209180028240508",
      "elapsedTime": "611446",
      "asyncId": 2769,
      "triggerAsyncId": 2768,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2770,
        2772
      ],
      "uniqueid": 998
    },
    "999": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180028355914",
      "endTime": "1209180029222017",
      "elapsedTime": "866103",
      "asyncId": 2778,
      "triggerAsyncId": 2760,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2785
      ],
      "uniqueid": 999
    },
    "1000": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180028422809",
      "endTime": "1209180028433059",
      "elapsedTime": "10250",
      "asyncId": 2779,
      "triggerAsyncId": 2760,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2780
      ],
      "uniqueid": 1000
    },
    "1001": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180028491268",
      "endTime": "1209180029207319",
      "elapsedTime": "716051",
      "asyncId": 2780,
      "triggerAsyncId": 2779,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2781,
        2782
      ],
      "uniqueid": 1001
    },
    "1002": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180028550759",
      "endTime": "1209180029228950",
      "elapsedTime": "678191",
      "asyncId": 2781,
      "triggerAsyncId": 2780,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 1002
    },
    "1003": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180028611323",
      "endTime": "1209180028620390",
      "elapsedTime": "9067",
      "asyncId": 2782,
      "triggerAsyncId": 2780,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2783
      ],
      "uniqueid": 1003
    },
    "1004": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180028664793",
      "endTime": "1209180029184136",
      "elapsedTime": "519343",
      "asyncId": 2783,
      "triggerAsyncId": 2782,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2784,
        2786
      ],
      "uniqueid": 1004
    },
    "1005": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180029298661",
      "endTime": "1209180030165775",
      "elapsedTime": "867114",
      "asyncId": 2791,
      "triggerAsyncId": 2761,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2798
      ],
      "uniqueid": 1005
    },
    "1006": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180029365526",
      "endTime": "1209180029375224",
      "elapsedTime": "9698",
      "asyncId": 2792,
      "triggerAsyncId": 2761,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2793
      ],
      "uniqueid": 1006
    },
    "1007": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180029432531",
      "endTime": "1209180030151128",
      "elapsedTime": "718597",
      "asyncId": 2793,
      "triggerAsyncId": 2792,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2794,
        2795
      ],
      "uniqueid": 1007
    },
    "1008": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180029493145",
      "endTime": "1209180030172748",
      "elapsedTime": "679603",
      "asyncId": 2794,
      "triggerAsyncId": 2793,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 1008
    },
    "1009": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180029556864",
      "endTime": "1209180029566412",
      "elapsedTime": "9548",
      "asyncId": 2795,
      "triggerAsyncId": 2793,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2796
      ],
      "uniqueid": 1009
    },
    "1010": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180029608341",
      "endTime": "1209180030121362",
      "elapsedTime": "513021",
      "asyncId": 2796,
      "triggerAsyncId": 2795,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2797,
        2799
      ],
      "uniqueid": 1010
    },
    "1011": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1209180030242439",
      "endTime": "1209180031087392",
      "elapsedTime": "844953",
      "asyncId": 2804,
      "triggerAsyncId": 2762,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2811
      ],
      "uniqueid": 1011
    },
    "1012": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1209180030305417",
      "endTime": "1209180030314754",
      "elapsedTime": "9337",
      "asyncId": 2805,
      "triggerAsyncId": 2762,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2806
      ],
      "uniqueid": 1012
    },
    "1013": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1209180030374096",
      "endTime": "1209180031072645",
      "elapsedTime": "698549",
      "asyncId": 2806,
      "triggerAsyncId": 2805,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2807,
        2808
      ],
      "uniqueid": 1013
    },
    "1014": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1209180030433156",
      "endTime": "1209180031094255",
      "elapsedTime": "661099",
      "asyncId": 2807,
      "triggerAsyncId": 2806,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 1014
    },
    "1015": {
      "source": "lib/recorder.js:187:24:187:24",
      "startTime": "1209180030492297",
      "endTime": "1209180030501324",
      "elapsedTime": "9027",
      "asyncId": 2808,
      "triggerAsyncId": 2806,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 24,
      "endLine": 187,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2809
      ],
      "uniqueid": 1015
    },
    "1016": {
      "source": "lib/recorder.js:187:37:187:37",
      "startTime": "1209180030543583",
      "endTime": "1209180031049421",
      "elapsedTime": "505838",
      "asyncId": 2809,
      "triggerAsyncId": 2808,
      "io": "",
      "userCode": true,
      "line": "\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err)",
      "startLine": 187,
      "startCol": 37,
      "endLine": 187,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2810,
        2812
      ],
      "uniqueid": 1016
    },
    "1017": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180031157273",
      "endTime": "1209180031166891",
      "elapsedTime": "9618",
      "asyncId": 2817,
      "triggerAsyncId": 2763,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        2818
      ],
      "uniqueid": 1017
    },
    "1018": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180031211354",
      "endTime": "1209180031246530",
      "elapsedTime": "35176",
      "asyncId": 2818,
      "triggerAsyncId": 2817,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        2819
      ],
      "uniqueid": 1018
    },
    "1019": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1209180080088399",
      "endTime": "1209180080190390",
      "elapsedTime": "101991",
      "asyncId": 3472,
      "triggerAsyncId": 3470,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1019
    },
    "1020": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1209180080647386",
      "endTime": "1209180080725422",
      "elapsedTime": "78036",
      "asyncId": 3473,
      "triggerAsyncId": 3470,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1020
    },
    "1021": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1209180081119060",
      "endTime": "1209180081235117",
      "elapsedTime": "116057",
      "asyncId": 3474,
      "triggerAsyncId": 3470,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1021
    },
    "1022": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1209180081540169",
      "endTime": "1209180081619748",
      "elapsedTime": "79579",
      "asyncId": 3475,
      "triggerAsyncId": 3470,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1022
    },
    "1023": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1209180096670560",
      "endTime": "1209180096685668",
      "elapsedTime": "15108",
      "asyncId": 3478,
      "triggerAsyncId": 3470,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        3479
      ],
      "uniqueid": 1023
    },
    "1024": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180096797968",
      "endTime": "1209180100298117",
      "elapsedTime": "3500149",
      "asyncId": 3479,
      "triggerAsyncId": 3478,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        3481,
        3514
      ],
      "uniqueid": 1024
    },
    "1025": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1209180096897445",
      "endTime": "1209180260270047",
      "elapsedTime": "163372602",
      "asyncId": 3480,
      "triggerAsyncId": 3470,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 1025
    },
    "1026": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180097026857",
      "endTime": "1209180097036315",
      "elapsedTime": "9458",
      "asyncId": 3481,
      "triggerAsyncId": 3479,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        3482
      ],
      "uniqueid": 1026
    },
    "1027": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180097080698",
      "endTime": "1209180100219319",
      "elapsedTime": "3138621",
      "asyncId": 3482,
      "triggerAsyncId": 3481,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [
        3495
      ],
      "uniqueid": 1027
    },
    "1028": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1209180261908357",
      "endTime": "1209180261931140",
      "elapsedTime": "22783",
      "asyncId": 3510,
      "triggerAsyncId": 3508,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1028
    },
    "1029": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1209180262068076",
      "endTime": "1209180262083655",
      "elapsedTime": "15579",
      "asyncId": 3511,
      "triggerAsyncId": 3508,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1029
    },
    "1030": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1209180262200614",
      "endTime": "1209180262219490",
      "elapsedTime": "18876",
      "asyncId": 3512,
      "triggerAsyncId": 3508,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1030
    },
    "1031": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1209180262336860",
      "endTime": "1209180262357288",
      "elapsedTime": "20428",
      "asyncId": 3513,
      "triggerAsyncId": 3508,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1031
    },
    "1032": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180264185514",
      "endTime": "1209180266045669",
      "elapsedTime": "1860155",
      "asyncId": 3514,
      "triggerAsyncId": 3479,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        3516,
        3549
      ],
      "uniqueid": 1032
    },
    "1033": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1209180264291883",
      "endTime": "1209180418417118",
      "elapsedTime": "154125235",
      "asyncId": 3515,
      "triggerAsyncId": 3508,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 1033
    },
    "1034": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180264343941",
      "endTime": "1209180264356564",
      "elapsedTime": "12623",
      "asyncId": 3516,
      "triggerAsyncId": 3514,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        3517
      ],
      "uniqueid": 1034
    },
    "1035": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180264397431",
      "endTime": "1209180265973975",
      "elapsedTime": "1576544",
      "asyncId": 3517,
      "triggerAsyncId": 3516,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 1035
    },
    "1036": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1209180419296085",
      "endTime": "1209180419319158",
      "elapsedTime": "23073",
      "asyncId": 3545,
      "triggerAsyncId": 3543,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1036
    },
    "1037": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1209180419439704",
      "endTime": "1209180419454591",
      "elapsedTime": "14887",
      "asyncId": 3546,
      "triggerAsyncId": 3543,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1037
    },
    "1038": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1209180419576219",
      "endTime": "1209180419603951",
      "elapsedTime": "27732",
      "asyncId": 3547,
      "triggerAsyncId": 3543,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1038
    },
    "1039": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1209180419722263",
      "endTime": "1209180419740878",
      "elapsedTime": "18615",
      "asyncId": 3548,
      "triggerAsyncId": 3543,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1039
    },
    "1040": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180421251619",
      "endTime": "1209180423052573",
      "elapsedTime": "1800954",
      "asyncId": 3549,
      "triggerAsyncId": 3514,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        3551,
        3584
      ],
      "uniqueid": 1040
    },
    "1041": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1209180421367456",
      "endTime": "1209180575433600",
      "elapsedTime": "154066144",
      "asyncId": 3550,
      "triggerAsyncId": 3543,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 1041
    },
    "1042": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180421421637",
      "endTime": "1209180421433289",
      "elapsedTime": "11652",
      "asyncId": 3551,
      "triggerAsyncId": 3549,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        3552
      ],
      "uniqueid": 1042
    },
    "1043": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180421472763",
      "endTime": "1209180422981580",
      "elapsedTime": "1508817",
      "asyncId": 3552,
      "triggerAsyncId": 3551,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 1043
    },
    "1044": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1209180576310633",
      "endTime": "1209180576338195",
      "elapsedTime": "27562",
      "asyncId": 3580,
      "triggerAsyncId": 3578,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1044
    },
    "1045": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1209180576460043",
      "endTime": "1209180576474991",
      "elapsedTime": "14948",
      "asyncId": 3581,
      "triggerAsyncId": 3578,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1045
    },
    "1046": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1209180576594896",
      "endTime": "1209180576611938",
      "elapsedTime": "17042",
      "asyncId": 3582,
      "triggerAsyncId": 3578,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1046
    },
    "1047": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1209180576731432",
      "endTime": "1209180576750748",
      "elapsedTime": "19316",
      "asyncId": 3583,
      "triggerAsyncId": 3578,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1047
    },
    "1048": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180577530008",
      "endTime": "1209180579359135",
      "elapsedTime": "1829127",
      "asyncId": 3584,
      "triggerAsyncId": 3549,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        3586,
        3619
      ],
      "uniqueid": 1048
    },
    "1049": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1209180577642429",
      "endTime": "1209180692969454",
      "elapsedTime": "115327025",
      "asyncId": 3585,
      "triggerAsyncId": 3578,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 1049
    },
    "1050": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180577693875",
      "endTime": "1209180577705356",
      "elapsedTime": "11481",
      "asyncId": 3586,
      "triggerAsyncId": 3584,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        3587
      ],
      "uniqueid": 1050
    },
    "1051": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180577751734",
      "endTime": "1209180579294985",
      "elapsedTime": "1543251",
      "asyncId": 3587,
      "triggerAsyncId": 3586,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 1051
    },
    "1052": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1209180693812574",
      "endTime": "1209180693834856",
      "elapsedTime": "22282",
      "asyncId": 3615,
      "triggerAsyncId": 3613,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1052
    },
    "1053": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1209180693953979",
      "endTime": "1209180693970009",
      "elapsedTime": "16030",
      "asyncId": 3616,
      "triggerAsyncId": 3613,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1053
    },
    "1054": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1209180694103960",
      "endTime": "1209180694120862",
      "elapsedTime": "16902",
      "asyncId": 3617,
      "triggerAsyncId": 3613,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1054
    },
    "1055": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1209180694236008",
      "endTime": "1209180694254402",
      "elapsedTime": "18394",
      "asyncId": 3618,
      "triggerAsyncId": 3613,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1055
    },
    "1056": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180695521056",
      "endTime": "1209180697325787",
      "elapsedTime": "1804731",
      "asyncId": 3619,
      "triggerAsyncId": 3584,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        3621,
        3654
      ],
      "uniqueid": 1056
    },
    "1057": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1209180695627555",
      "endTime": "1209180811201103",
      "elapsedTime": "115573548",
      "asyncId": 3620,
      "triggerAsyncId": 3613,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 1057
    },
    "1058": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180695679964",
      "endTime": "1209180695693358",
      "elapsedTime": "13394",
      "asyncId": 3621,
      "triggerAsyncId": 3619,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        3622
      ],
      "uniqueid": 1058
    },
    "1059": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180695733173",
      "endTime": "1209180697263480",
      "elapsedTime": "1530307",
      "asyncId": 3622,
      "triggerAsyncId": 3621,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 1059
    },
    "1060": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1209180812023714",
      "endTime": "1209180812045114",
      "elapsedTime": "21400",
      "asyncId": 3650,
      "triggerAsyncId": 3648,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1060
    },
    "1061": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1209180812168776",
      "endTime": "1209180812184045",
      "elapsedTime": "15269",
      "asyncId": 3651,
      "triggerAsyncId": 3648,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1061
    },
    "1062": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1209180812300373",
      "endTime": "1209180812316874",
      "elapsedTime": "16501",
      "asyncId": 3652,
      "triggerAsyncId": 3648,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1062
    },
    "1063": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1209180812439223",
      "endTime": "1209180812458399",
      "elapsedTime": "19176",
      "asyncId": 3653,
      "triggerAsyncId": 3648,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1063
    },
    "1064": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180813137311",
      "endTime": "1209180815016452",
      "elapsedTime": "1879141",
      "asyncId": 3654,
      "triggerAsyncId": 3619,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        3656,
        3657
      ],
      "uniqueid": 1064
    },
    "1065": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1209180813243310",
      "endTime": "1209180951443244",
      "elapsedTime": "138199934",
      "asyncId": 3655,
      "triggerAsyncId": 3648,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 1065
    },
    "1066": {
      "source": "lib/recorder.js:177:47:177:47",
      "startTime": "1209180813350541",
      "endTime": "1209180815301346",
      "elapsedTime": "1950805",
      "asyncId": 3656,
      "triggerAsyncId": 3654,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 47,
      "endLine": 177,
      "endCol": 47,
      "file": "lib/recorder.js",
      "triggers": [
        3672
      ],
      "uniqueid": 1066
    },
    "1067": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180813403750",
      "endTime": "1209180813415232",
      "elapsedTime": "11482",
      "asyncId": 3657,
      "triggerAsyncId": 3654,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        3658
      ],
      "uniqueid": 1067
    },
    "1068": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180813457191",
      "endTime": "1209180814947954",
      "elapsedTime": "1490763",
      "asyncId": 3658,
      "triggerAsyncId": 3657,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 1068
    },
    "1069": {
      "source": "lib/recorder.js:181:24:181:24",
      "startTime": "1209180815070413",
      "endTime": "1209180815079571",
      "elapsedTime": "9158",
      "asyncId": 3672,
      "triggerAsyncId": 3656,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 24,
      "endLine": 181,
      "endCol": 24,
      "file": "lib/recorder.js",
      "triggers": [
        3673
      ],
      "uniqueid": 1069
    },
    "1070": {
      "source": "lib/recorder.js:181:37:181:37",
      "startTime": "1209180815131788",
      "endTime": "1209180815240592",
      "elapsedTime": "108804",
      "asyncId": 3673,
      "triggerAsyncId": 3672,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 37,
      "endLine": 181,
      "endCol": 37,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 1070
    }
  },
  "files": {
    "lib/recorder.js": "const debug = require('debug')('codeceptjs:recorder');\nconst promiseRetry = require('promise-retry');\n\nconst { log } = require('./output');\n\nlet promise;\nlet running = false;\nlet errFn;\nlet queueId = 0;\nlet sessionId = null;\nlet asyncErr = null;\n\nlet tasks = [];\nlet oldPromises = [];\n\nconst defaultRetryOptions = {\n  retries: 0,\n  minTimeout: 150,\n  maxTimeout: 10000,\n};\n\n/**\n * Singleton object to record all test steps as promises and run them in chain.\n * @alias recorder\n * @interface\n */\nmodule.exports = {\n\n  /**\n   * @type {Array<Object<string, *>>}\n   * @inner\n   */\n  retries: [],\n\n  /**\n   * Start recording promises\n   *\n   * @api\n   * @inner\n   */\n  start() {\n    running = true;\n    asyncErr = null;\n    errFn = null;\n    this.reset();\n  },\n\n  /**\n   * @return {boolean}\n   * @inner\n   */\n  isRunning() {\n    return running;\n  },\n\n  /**\n   * @return {void}\n   * @inner\n   */\n  startUnlessRunning() {\n    if (!this.isRunning()) {\n      this.start();\n    }\n  },\n\n  /**\n   * Add error handler to catch rejected promises\n   *\n   * @api\n   * @param {function} fn\n   * @inner\n   */\n  errHandler(fn) {\n    errFn = fn;\n  },\n\n  /**\n   * Stops current promise chain, calls `catch`.\n   * Resets recorder to initial state.\n   *\n   * @api\n   * @inner\n   */\n  reset() {\n    if (promise && running) this.catch();\n    queueId++;\n    sessionId = null;\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false;\n    this.retries = [];\n  },\n\n  /**\n   * @name CodeceptJS.recorder~session\n   * @type {CodeceptJS.RecorderSession}\n   * @inner\n   */\n\n  /**\n   * @alias RecorderSession\n   * @interface\n   */\n  session: {\n    /**\n     * @type {boolean}\n     * @inner\n     */\n    running: false,\n\n    /**\n     * @param {string} name\n     * @inner\n     */\n    start(name) {\n      log(`${currentQueue()}Starting <${name}> session`);\n      tasks.push('--->');\n      oldPromises.push(promise);\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /**\n     * @param {string} name\n     * @inner\n     */\n    restore(name) {\n      tasks.push('<---');\n      log(`${currentQueue()}Finalize <${name}> session`);\n      this.running = false;\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /**\n     * @param {function} fn\n     * @inner\n     */\n    catch(fn) {\n      promise = promise.catch(fn);\n    },\n\n  },\n\n  /**\n   * Adds a promise to a chain.\n   * Promise description should be passed as first parameter.\n   *\n   * @param {string|function} taskName\n   * @param {function} [fn]\n   * @param {boolean} [force=false]\n   * @param {boolean} [retry]\n   *     undefined: `add(fn)` -> `false` and `add('step',fn)` -> `true`\n   *     true: it will retries if `retryOpts` set.\n   *     false: ignore `retryOpts` and won't retry.\n   * @return {Promise<*> | undefined}\n   * @inner\n   */\n  add(taskName, fn = undefined, force = false, retry = undefined) {\n    if (typeof taskName === 'function') {\n      fn = taskName;\n      taskName = fn.toString();\n      if (retry === undefined) retry = false;\n    }\n    if (retry === undefined) retry = true;\n    if (!running && !force) {\n      return;\n    }\n    tasks.push(taskName);\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = Promise.resolve(promise).then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return Promise.resolve(res).then(fn);\n      }\n\n      const retryRules = this.retries.slice().reverse();\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err);\n          }\n          throw err;\n        });\n      });\n    });\n  },\n\n  /**\n   * @param {*} opts\n   * @return {*}\n   * @inner\n   */\n  retry(opts) {\n    if (!promise) return;\n\n    if (opts === null) {\n      opts = {};\n    }\n    if (Number.isInteger(opts)) {\n      opts = { retries: opts };\n    }\n    return this.add(() => this.retries.push(opts));\n  },\n\n  /**\n   * @param {function} [customErrFn]\n   * @return {Promise<*>}\n   * @inner\n   */\n  catch(customErrFn) {\n    return promise = promise.catch((err) => {\n      log(`${currentQueue()}Error | ${err}`);\n      if (!(err instanceof Error)) { // strange things may happen\n        err = new Error(`[Wrapped Error] ${JSON.stringify(err)}`); // we should be prepared for them\n      }\n      if (customErrFn) {\n        customErrFn(err);\n      } else if (errFn) {\n        errFn(err);\n      }\n      this.stop();\n    });\n  },\n\n  /**\n   * @param {function} customErrFn\n   * @return {Promise<*>}\n   * @inner\n   */\n  catchWithoutStop(customErrFn) {\n    return promise = promise.catch((err) => {\n      log(`${currentQueue()}Error | ${err}`);\n      if (!(err instanceof Error)) { // strange things may happen\n        err = new Error(`[Wrapped Error] ${JSON.stringify(err)}`); // we should be prepared for them\n      }\n      if (customErrFn) {\n        customErrFn(err);\n      } else if (errFn) {\n        errFn(err);\n      }\n    });\n  },\n\n  /**\n   * Adds a promise which throws an error into a chain\n   *\n   * @api\n   * @param {*} err\n   * @inner\n   */\n  throw(err) {\n    return this.add(`throw error ${err}`, () => {\n      throw err;\n    });\n  },\n\n  /**\n   * @param {*} err\n   * @inner\n   */\n  saveFirstAsyncError(err) {\n    if (asyncErr === null) {\n      asyncErr = err;\n    }\n  },\n\n  /**\n   * @return {*}\n   * @inner\n   */\n  getAsyncErr() {\n    return asyncErr;\n  },\n\n  /**\n   * @return {void}\n   * @inner\n   */\n  cleanAsyncErr() {\n    asyncErr = null;\n  },\n\n  /**\n   * Stops recording promises\n   * @api\n   * @inner\n   */\n  stop() {\n    debug(this.toString());\n    log(`${currentQueue()}Stopping recording promises`);\n    running = false;\n  },\n\n  /**\n   * Get latest promise in chain.\n   *\n   * @api\n   * @return {Promise<*>}\n   * @inner\n   */\n  promise() {\n    return promise;\n  },\n\n  /**\n   * Get a list of all chained tasks\n   * @return {string}\n   * @inner\n   */\n  scheduled() {\n    return tasks.join('\\n');\n  },\n\n  /**\n   * Get a state of current queue and tasks\n   * @return {string}\n   * @inner\n   */\n  toString() {\n    return `Queue: ${currentQueue()}\\n\\nTasks: ${this.scheduled()}`;\n  },\n\n};\n\nfunction currentQueue() {\n  let session = '';\n  if (sessionId) session = `<${sessionId}> `;\n  return `[${queueId}] ${session}`;\n}\n",
    "test/unit/actor_test.js": "const path = require('path');\nconst expect = require('expect');\n\nconst actor = require('../../lib/actor');\nconst container = require('../../lib/container');\nconst recorder = require('../../lib/recorder');\nconst event = require('../../lib/event');\n\nglobal.codecept_dir = path.join(__dirname, '/..');\nlet I;\nlet counter;\n\ndescribe('Actor', () => {\n  beforeEach(() => {\n    counter = 0;\n    container.clear({\n      MyHelper: {\n        hello: () => 'hello world',\n        bye: () => 'bye world',\n        die: () => { throw new Error('ups'); },\n        _hidden: () => 'hidden',\n        failAfter: (i = 1) => {\n          counter++;\n          if (counter <= i) throw new Error('ups');\n          counter = 0;\n        },\n      },\n      MyHelper2: {\n        greeting: () => 'greetings, world',\n      },\n    }, undefined, undefined);\n    container.translation().vocabulary.actions.hello = 'привет';\n    I = actor();\n    event.cleanDispatcher();\n  });\n\n  it('should init actor on store', () => {\n    const store = require('../../lib/store');\n    expect(store.actor).toBeTruthy();\n  });\n\n  it('should collect pageobject methods in actor', () => {\n    const poI = actor({\n      customStep: () => {},\n    });\n    expect(poI).toHaveProperty('customStep');\n    expect(I).toHaveProperty('customStep');\n  });\n\n  it('should correct run step from Helper inside PageObject', () => {\n    actor({\n      customStep() {\n        return this.hello();\n      },\n    });\n    recorder.start();\n    const promise = I.customStep();\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });\n\n  it('should init pageobject methods as metastep', () => {\n    actor({\n      customStep: () => 3,\n    });\n    expect(I.customStep()).toEqual(3);\n  });\n\n  it('should correct add translation for step from Helper', () => {\n    expect(I).toHaveProperty('привет');\n  });\n\n  it('should correct add translation for step from PageObject', () => {\n    container.translation().vocabulary.actions.customStep = 'кастомный_шаг';\n    actor({\n      customStep: () => 3,\n    });\n    expect(I).toHaveProperty('кастомный_шаг');\n  });\n\n  it('should take all methods from helpers and built in', () => {\n    ['hello', 'bye', 'die', 'failAfter', 'say', 'retry', 'greeting'].forEach(key => {\n      expect(I).toHaveProperty(key);\n    });\n  });\n\n  it('should return promise', () => {\n    recorder.start();\n    const promise = I.hello();\n    expect(promise).toBeInstanceOf(Promise);\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });\n\n  it('should produce step events', () => {\n    recorder.start();\n    let listeners = 0;\n    event.dispatcher.addListener(event.step.before, () => listeners++);\n    event.dispatcher.addListener(event.step.after, () => listeners++);\n    event.dispatcher.addListener(event.step.passed, (step) => {\n      listeners++;\n      expect(step.endTime).toBeTruthy();\n      expect(step.startTime).toBeTruthy();\n    });\n\n    return I.hello().then(() => {\n      expect(listeners).toEqual(3);\n    });\n  });\n\n  it('should retry failed step with #retry', () => {\n    recorder.start();\n    return I.retry({ retries: 2, minTimeout: 0 }).failAfter(1);\n  });\n\n  it('should retry once step with #retry', () => {\n    recorder.start();\n    return I.retry().failAfter(1);\n  });\n\n  it('should alway use the latest global retry options', () => {\n    recorder.start();\n    recorder.retry({\n      retries: 0,\n      minTimeout: 0,\n      when: () => true,\n    });\n    recorder.retry({\n      retries: 1,\n      minTimeout: 0,\n      when: () => true,\n    });\n    I.hello(); // before fix: this changed the order of retries\n    return I.failAfter(1);\n  });\n\n  it('should not delete a global retry option', () => {\n    recorder.start();\n    recorder.retry({\n      retries: 2,\n      minTimeout: 0,\n      when: () => true,\n    });\n    I.retry(1).failAfter(1); // before fix: this changed the order of retries\n    return I.failAfter(2);\n  });\n\n  it('should print handle failed steps', () => {\n    recorder.start();\n    let listeners = 0;\n    event.dispatcher.addListener(event.step.before, () => listeners++);\n    event.dispatcher.addListener(event.step.after, () => listeners++);\n    event.dispatcher.addListener(event.step.failed, (step) => {\n      listeners++;\n      expect(step.endTime).toBeTruthy();\n      expect(step.startTime).toBeTruthy();\n    });\n\n    return I.die()\n      .then(() => listeners = 0)\n      .catch(() => null)\n      .then(() => {\n        expect(listeners).toEqual(3);\n      });\n  });\n});\n",
    "node_modules/mocha/lib/runnable.js": "'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar Pending = require('./pending');\nvar debug = require('debug')('mocha:runnable');\nvar milliseconds = require('ms');\nvar utils = require('./utils');\nvar errors = require('./errors');\nvar createInvalidExceptionError = errors.createInvalidExceptionError;\nvar createMultipleDoneError = errors.createMultipleDoneError;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n * @private\n */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar clearTimeout = global.clearTimeout;\nvar toString = Object.prototype.toString;\n\nmodule.exports = Runnable;\n\n/**\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\n *\n * @class\n * @extends external:EventEmitter\n * @public\n * @param {String} title\n * @param {Function} fn\n */\nfunction Runnable(title, fn) {\n  this.title = title;\n  this.fn = fn;\n  this.body = (fn || '').toString();\n  this.async = fn && fn.length;\n  this.sync = !this.async;\n  this._timeout = 2000;\n  this._slow = 75;\n  this._retries = -1;\n  this.reset();\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\nutils.inherits(Runnable, EventEmitter);\n\n/**\n * Resets the state initially or for a next run.\n */\nRunnable.prototype.reset = function() {\n  this.timedOut = false;\n  this._currentRetry = 0;\n  this.pending = false;\n  delete this.state;\n  delete this.err;\n};\n\n/**\n * Get current timeout value in msecs.\n *\n * @private\n * @returns {number} current timeout threshold value\n */\n/**\n * @summary\n * Set timeout threshold value (msecs).\n *\n * @description\n * A string argument can use shorthand (e.g., \"2s\") and will be converted.\n * The value will be clamped to range [<code>0</code>, <code>2^<sup>31</sup>-1</code>].\n * If clamped value matches either range endpoint, timeouts will be disabled.\n *\n * @private\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value}\n * @param {number|string} ms - Timeout threshold value.\n * @returns {Runnable} this\n * @chainable\n */\nRunnable.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n\n  // Clamp to range\n  var INT_MAX = Math.pow(2, 31) - 1;\n  var range = [0, INT_MAX];\n  ms = utils.clamp(ms, range);\n\n  // see #1652 for reasoning\n  if (ms === range[0] || ms === range[1]) {\n    this._timeout = 0;\n  } else {\n    this._timeout = ms;\n  }\n  debug('timeout %d', this._timeout);\n\n  if (this.timer) {\n    this.resetTimeout();\n  }\n  return this;\n};\n\n/**\n * Set or get slow `ms`.\n *\n * @private\n * @param {number|string} ms\n * @return {Runnable|number} ms or Runnable instance.\n */\nRunnable.prototype.slow = function(ms) {\n  if (!arguments.length || typeof ms === 'undefined') {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Halt and mark as pending.\n *\n * @memberof Mocha.Runnable\n * @public\n */\nRunnable.prototype.skip = function() {\n  this.pending = true;\n  throw new Pending('sync skip; aborting execution');\n};\n\n/**\n * Check if this runnable or its parent suite is marked as pending.\n *\n * @private\n */\nRunnable.prototype.isPending = function() {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Return `true` if this Runnable has failed.\n * @return {boolean}\n * @private\n */\nRunnable.prototype.isFailed = function() {\n  return !this.isPending() && this.state === constants.STATE_FAILED;\n};\n\n/**\n * Return `true` if this Runnable has passed.\n * @return {boolean}\n * @private\n */\nRunnable.prototype.isPassed = function() {\n  return !this.isPending() && this.state === constants.STATE_PASSED;\n};\n\n/**\n * Set or get number of retries.\n *\n * @private\n */\nRunnable.prototype.retries = function(n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  this._retries = n;\n};\n\n/**\n * Set or get current retry\n *\n * @private\n */\nRunnable.prototype.currentRetry = function(n) {\n  if (!arguments.length) {\n    return this._currentRetry;\n  }\n  this._currentRetry = n;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Mocha.Runnable\n * @public\n * @return {string}\n */\nRunnable.prototype.fullTitle = function() {\n  return this.titlePath().join(' ');\n};\n\n/**\n * Return the title path generated by concatenating the parent's title path with the title.\n *\n * @memberof Mocha.Runnable\n * @public\n * @return {string}\n */\nRunnable.prototype.titlePath = function() {\n  return this.parent.titlePath().concat([this.title]);\n};\n\n/**\n * Clear the timeout.\n *\n * @private\n */\nRunnable.prototype.clearTimeout = function() {\n  clearTimeout(this.timer);\n};\n\n/**\n * Reset the timeout.\n *\n * @private\n */\nRunnable.prototype.resetTimeout = function() {\n  var self = this;\n  var ms = this.timeout();\n\n  if (ms === 0) {\n    return;\n  }\n  this.clearTimeout();\n  this.timer = setTimeout(function() {\n    if (self.timeout() === 0) {\n      return;\n    }\n    self.callback(self._timeoutError(ms));\n    self.timedOut = true;\n  }, ms);\n};\n\n/**\n * Set or get a list of whitelisted globals for this test run.\n *\n * @private\n * @param {string[]} globals\n */\nRunnable.prototype.globals = function(globals) {\n  if (!arguments.length) {\n    return this._allowedGlobals;\n  }\n  this._allowedGlobals = globals;\n};\n\n/**\n * Run the test and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @private\n */\nRunnable.prototype.run = function(fn) {\n  var self = this;\n  var start = new Date();\n  var ctx = this.ctx;\n  var finished;\n  var errorWasHandled = false;\n\n  if (this.isPending()) return fn();\n\n  // Sometimes the ctx exists, but it is not runnable\n  if (ctx && ctx.runnable) {\n    ctx.runnable(this);\n  }\n\n  // called multiple times\n  function multiple(err) {\n    if (errorWasHandled) {\n      return;\n    }\n    errorWasHandled = true;\n    self.emit('error', createMultipleDoneError(self, err));\n  }\n\n  // finished\n  function done(err) {\n    var ms = self.timeout();\n    if (self.timedOut) {\n      return;\n    }\n\n    if (finished) {\n      return multiple(err);\n    }\n\n    self.clearTimeout();\n    self.duration = new Date() - start;\n    finished = true;\n    if (!err && self.duration > ms && ms > 0) {\n      err = self._timeoutError(ms);\n    }\n    fn(err);\n  }\n\n  // for .resetTimeout() and Runner#uncaught()\n  this.callback = done;\n\n  if (this.fn && typeof this.fn.call !== 'function') {\n    done(\n      new TypeError(\n        'A runnable must be passed a function as its second argument.'\n      )\n    );\n    return;\n  }\n\n  // explicit async with `done` argument\n  if (this.async) {\n    this.resetTimeout();\n\n    // allows skip() to be used in an explicit async context\n    this.skip = function asyncSkip() {\n      this.pending = true;\n      done();\n      // halt execution, the uncaught handler will ignore the failure.\n      throw new Pending('async skip; aborting execution');\n    };\n\n    try {\n      callFnAsync(this.fn);\n    } catch (err) {\n      // handles async runnables which actually run synchronously\n      errorWasHandled = true;\n      if (err instanceof Pending) {\n        return; // done() is already called in this.skip()\n      } else if (this.allowUncaught) {\n        throw err;\n      }\n      done(Runnable.toValueOrError(err));\n    }\n    return;\n  }\n\n  // sync or promise-returning\n  try {\n    callFn(this.fn);\n  } catch (err) {\n    errorWasHandled = true;\n    if (err instanceof Pending) {\n      return done();\n    } else if (this.allowUncaught) {\n      throw err;\n    }\n    done(Runnable.toValueOrError(err));\n  }\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn about\n          // subsequently constructed Promises.\n          return null;\n        },\n        function(reason) {\n          done(reason || new Error('Promise rejected with no or falsy reason'));\n        }\n      );\n    } else {\n      if (self.asyncOnly) {\n        return done(\n          new Error(\n            '--async-only option in use without declaring `done()` or returning a promise'\n          )\n        );\n      }\n\n      done();\n    }\n  }\n\n  function callFnAsync(fn) {\n    var result = fn.call(ctx, function(err) {\n      if (err instanceof Error || toString.call(err) === '[object Error]') {\n        return done(err);\n      }\n      if (err) {\n        if (Object.prototype.toString.call(err) === '[object Object]') {\n          return done(\n            new Error('done() invoked with non-Error: ' + JSON.stringify(err))\n          );\n        }\n        return done(new Error('done() invoked with non-Error: ' + err));\n      }\n      if (result && utils.isPromise(result)) {\n        return done(\n          new Error(\n            'Resolution method is overspecified. Specify a callback *or* return a Promise; not both.'\n          )\n        );\n      }\n\n      done();\n    });\n  }\n};\n\n/**\n * Instantiates a \"timeout\" error\n *\n * @param {number} ms - Timeout (in milliseconds)\n * @returns {Error} a \"timeout\" error\n * @private\n */\nRunnable.prototype._timeoutError = function(ms) {\n  var msg =\n    'Timeout of ' +\n    ms +\n    'ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.';\n  if (this.file) {\n    msg += ' (' + this.file + ')';\n  }\n  return new Error(msg);\n};\n\nvar constants = utils.defineConstants(\n  /**\n   * {@link Runnable}-related constants.\n   * @public\n   * @memberof Runnable\n   * @readonly\n   * @static\n   * @alias constants\n   * @enum {string}\n   */\n  {\n    /**\n     * Value of `state` prop when a `Runnable` has failed\n     */\n    STATE_FAILED: 'failed',\n    /**\n     * Value of `state` prop when a `Runnable` has passed\n     */\n    STATE_PASSED: 'passed',\n    /**\n     * Value of `state` prop when a `Runnable` has been skipped by user\n     */\n    STATE_PENDING: 'pending'\n  }\n);\n\n/**\n * Given `value`, return identity if truthy, otherwise create an \"invalid exception\" error and return that.\n * @param {*} [value] - Value to return, if present\n * @returns {*|Error} `value`, otherwise an `Error`\n * @private\n */\nRunnable.toValueOrError = function(value) {\n  return (\n    value ||\n    createInvalidExceptionError(\n      'Runnable failed with falsy or undefined exception. Please throw an Error instead.',\n      value\n    )\n  );\n};\n\nRunnable.constants = constants;\n",
    "node_modules/promise-retry/index.js": "'use strict';\n\nvar errcode = require('err-code');\nvar retry = require('retry');\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction isRetryError(err) {\n    return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried');\n}\n\nfunction promiseRetry(fn, options) {\n    var temp;\n    var operation;\n\n    if (typeof fn === 'object' && typeof options === 'function') {\n        // Swap options and fn when using alternate signature (options, fn)\n        temp = options;\n        options = fn;\n        fn = temp;\n    }\n\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried;\n                    }\n\n                    throw errcode('Retrying', 'EPROMISERETRY', { retried: err });\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;\n\n                    if (operation.retry(err || new Error())) {\n                        return;\n                    }\n                }\n\n                reject(err);\n            });\n        });\n    });\n}\n\nmodule.exports = promiseRetry;\n",
    "lib/scenario.js": "const event = require('./event');\nconst recorder = require('./recorder');\nconst assertThrown = require('./assert/throws');\nconst { isAsyncFunction } = require('./utils');\nconst parser = require('./parser');\n\nconst injectHook = function (inject, suite) {\n  try {\n    inject();\n  } catch (err) {\n    recorder.throw(err);\n  }\n  recorder.catch((err) => {\n    event.emit(event.test.failed, suite, err);\n    throw err;\n  });\n  return recorder.promise();\n};\n\n/**\n * Wraps test function, injects support objects from container,\n * starts promise chain with recorder, performs before/after hooks\n * through event system.\n */\nmodule.exports.test = (test) => {\n  const testFn = test.fn;\n  if (!testFn) {\n    return test;\n  }\n\n  test.steps = [];\n  test.timeout(0);\n  test.async = true;\n\n  test.fn = function (done) {\n    recorder.errHandler((err) => {\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      if (test.throws) { // check that test should actually fail\n        try {\n          assertThrown(err, test.throws);\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test);\n          recorder.add(() => done());\n          return;\n        } catch (newErr) {\n          err = newErr;\n        }\n      }\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n\n    if (isAsyncFunction(testFn)) {\n      event.emit(event.test.started, test);\n\n      const catchError = e => {\n        recorder.throw(e);\n        recorder.catch((e) => {\n          const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n          recorder.session.start('teardown');\n          recorder.cleanAsyncErr();\n          event.emit(event.test.failed, test, err);\n          event.emit(event.test.finished, test);\n          recorder.add(() => done(err));\n        });\n      };\n\n      let injectedArguments;\n      try {\n        injectedArguments = getInjectedArguments(testFn, test);\n      } catch (e) {\n        catchError(e);\n        return;\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test);\n        });\n        recorder.add('finish test', () => done());\n        recorder.catch();\n      }).catch(catchError);\n      return;\n    }\n\n    try {\n      event.emit(event.test.started, test);\n      testFn.call(test, getInjectedArguments(testFn, test));\n    } catch (err) {\n      recorder.throw(err);\n    } finally {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish test', () => done());\n      recorder.catch();\n    }\n  };\n  return test;\n};\n\n/**\n * Injects arguments to function from controller\n */\nmodule.exports.injected = function (fn, suite, hookName) {\n  return function (done) {\n    const errHandler = (err) => {\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    };\n\n    recorder.errHandler((err) => {\n      errHandler(err);\n    });\n\n    if (!fn) throw new Error('fn is not defined');\n\n    event.emit(event.hook.started, suite);\n    if (!recorder.isRunning()) {\n      recorder.start();\n      recorder.errHandler((err) => {\n        errHandler(err);\n      });\n    }\n\n    this.test.body = fn.toString();\n\n    if (isAsyncFunction(fn)) {\n      fn.call(this, getInjectedArguments(fn)).then(() => {\n        recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n        recorder.add(`finish ${hookName} hook`, () => done());\n        recorder.catch();\n      }).catch((e) => {\n        recorder.throw(e);\n        recorder.catch((e) => {\n          const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n          errHandler(err);\n        });\n        recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n      });\n      return;\n    }\n\n    try {\n      fn.call(this, getInjectedArguments(fn));\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n      recorder.catch();\n    } catch (err) {\n      recorder.throw(err);\n      recorder.catch((e) => {\n        const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n        errHandler(err);\n      });\n      recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n    }\n  };\n};\n\n/**\n * Starts promise chain, so helpers could enqueue their hooks\n */\nmodule.exports.setup = function (suite) {\n  return injectHook(() => {\n    recorder.startUnlessRunning();\n    event.emit(event.test.before, suite && suite.ctx && suite.ctx.currentTest);\n  }, suite);\n};\n\nmodule.exports.teardown = function (suite) {\n  return injectHook(() => {\n    recorder.startUnlessRunning();\n    event.emit(event.test.after, suite && suite.ctx && suite.ctx.currentTest);\n  }, suite);\n};\n\nmodule.exports.suiteSetup = function (suite) {\n  return injectHook(() => {\n    recorder.startUnlessRunning();\n    event.emit(event.suite.before, suite);\n  }, suite);\n};\n\nmodule.exports.suiteTeardown = function (suite) {\n  return injectHook(() => {\n    recorder.startUnlessRunning();\n    event.emit(event.suite.after, suite);\n  }, suite);\n};\n\nconst getInjectedArguments = (fn, test) => {\n  const container = require('./container');\n  const testArgs = {};\n  const params = parser.getParams(fn) || [];\n  const objects = container.support();\n  for (const key of params) {\n    testArgs[key] = {};\n    if (test && test.inject && test.inject[key]) {\n      // @FIX: need fix got inject\n      testArgs[key] = test.inject[key];\n      continue;\n    }\n    if (!objects[key]) {\n      throw new Error(`Object of type ${key} is not defined in container`);\n    }\n    testArgs[key] = container.support(key);\n  }\n\n  return testArgs;\n};\n\nmodule.exports.getInjectedArguments = getInjectedArguments;\n",
    "lib/interfaces/gherkin.js": "const { Parser } = require('gherkin');\nconst { Context, Suite, Test } = require('mocha');\n\nconst { matchStep } = require('./bdd');\nconst event = require('../event');\nconst scenario = require('../scenario');\nconst Step = require('../step');\nconst DataTableArgument = require('../data/dataTableArgument');\n\nconst parser = new Parser();\nparser.stopAtFirstError = false;\n\nmodule.exports = (text) => {\n  const ast = parser.parse(text);\n\n  const suite = new Suite(ast.feature.name, new Context());\n  const tags = ast.feature.tags.map(t => t.name);\n  suite.title = `${suite.title} ${tags.join(' ')}`.trim();\n  suite.tags = tags || [];\n  suite.comment = ast.feature.description;\n  suite.feature = ast.feature;\n  suite.timeout(0);\n\n  suite.beforeEach('codeceptjs.before', () => scenario.setup(suite));\n  suite.afterEach('codeceptjs.after', () => scenario.teardown(suite));\n  suite.beforeAll('codeceptjs.beforeSuite', () => scenario.suiteSetup(suite));\n  suite.afterAll('codeceptjs.afterSuite', () => scenario.suiteTeardown(suite));\n\n  const runSteps = async (steps) => {\n    for (const step of steps) {\n      const metaStep = new Step.MetaStep(null, step.text);\n      metaStep.actor = step.keyword.trim();\n      const setMetaStep = (step) => {\n        if (step.metaStep) step = step.metaStep; // assign metastep to metastep for nested steps\n        step.metaStep = metaStep;\n      };\n      const fn = matchStep(step.text);\n      if (step.argument) {\n        step.argument.parse = () => {\n          return new DataTableArgument(step.argument);\n        };\n        fn.params.push(step.argument);\n        if (step.argument.type === 'DataTable') metaStep.comment = `\\n${transformTable(step.argument)}`;\n        if (step.argument.content) metaStep.comment = `\\n${step.argument.content}`;\n      }\n      step.startTime = Date.now();\n      step.match = fn.line;\n      event.emit(event.bddStep.before, step);\n      event.dispatcher.on(event.step.before, setMetaStep);\n      try {\n        await fn(...fn.params);\n        step.status = 'passed';\n      } catch (err) {\n        step.status = 'failed';\n        step.err = err;\n        return err;\n      } finally {\n        step.endTime = Date.now();\n        event.dispatcher.removeListener(event.step.before, setMetaStep);\n      }\n      event.emit(event.bddStep.after, step);\n    }\n  };\n\n  for (const child of ast.feature.children) {\n    if (child.type === 'Background') {\n      suite.beforeEach('Before', scenario.injected(async () => runSteps(child.steps), suite, 'before'));\n      continue;\n    }\n    if (child.type === 'ScenarioOutline') {\n      for (const examples of child.examples) {\n        const fields = examples.tableHeader.cells.map(c => c.value);\n        for (const example of examples.tableBody) {\n          let exampleSteps = [...child.steps];\n          const current = {};\n          for (const index in example.cells) {\n            const placeholder = fields[index];\n            const value = example.cells[index].value;\n            current[placeholder] = value;\n            exampleSteps = exampleSteps.map((step) => {\n              step = { ...step };\n              step.text = step.text.replace(`<${placeholder}>`, value);\n              return step;\n            });\n          }\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        }\n      }\n      continue;\n    }\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  }\n\n  return suite;\n};\n\nfunction transformTable(table) {\n  let str = '';\n  for (const id in table.rows) {\n    const cells = table.rows[id].cells;\n    str += cells.map(c => c.value).map(c => c.slice(0, 15).padEnd(15)).join(' | ');\n    str += '\\n';\n  }\n  return str;\n}\nfunction addExampleInTable(exampleSteps, placeholders) {\n  const steps = JSON.parse(JSON.stringify(exampleSteps));\n  for (const placeholder in placeholders) {\n    steps.map((step) => {\n      step = { ...step };\n      if (step.argument && step.argument.type === 'DataTable') {\n        for (const id in step.argument.rows) {\n          const cells = step.argument.rows[id].cells;\n          cells.map(c => (c.value = c.value.replace(`<${placeholder}>`, placeholders[placeholder])));\n        }\n      }\n      return step;\n    });\n  }\n  return steps;\n}\n",
    "test/unit/bdd_test.js": "const { expect } = require('chai');\nconst { Parser } = require('gherkin');\nconst {\n  Given,\n  When,\n  Then,\n  matchStep,\n  clearSteps,\n} = require('../../lib/interfaces/bdd');\nconst run = require('../../lib/interfaces/gherkin');\nconst recorder = require('../../lib/recorder');\nconst container = require('../../lib/container');\nconst actor = require('../../lib/actor');\nconst event = require('../../lib/event');\n\nconst text = `\n  Feature: checkout process\n  In order to buy products\n  As a customer\n  I want to be able to buy several products\n\n  @super\n  Scenario:\n    Given I have product with 600 price\n    And I have product with 1000 price\n    When I go to checkout process\n`;\n\ndescribe('BDD', () => {\n  beforeEach(() => {\n    clearSteps();\n    recorder.start();\n    container.create({});\n  });\n\n  afterEach(() => {\n    container.clear();\n    recorder.stop();\n  });\n\n  it('should parse gherkin input', () => {\n    const parser = new Parser();\n    parser.stopAtFirstError = false;\n    const ast = parser.parse(text);\n    // console.log('Feature', ast.feature);\n    // console.log('Scenario', ast.feature.children);\n    // console.log('Steps', ast.feature.children[0].steps[0]);\n    expect(ast.feature).is.ok;\n    expect(ast.feature.children).is.ok;\n    expect(ast.feature.children[0].steps).is.ok;\n  });\n\n  it('should load step definitions', () => {\n    Given('I am a bird', () => 1);\n    When('I fly over ocean', () => 2);\n    Then(/I see (.*?)/, () => 3);\n    expect(1).is.equal(matchStep('I am a bird')());\n    expect(3).is.equal(matchStep('I see ocean')());\n    expect(3).is.equal(matchStep('I see world')());\n  });\n\n  it('should contain tags', async () => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => sum += 10);\n    const suite = run(text);\n    suite.tests[0].fn(() => {});\n    expect(suite.tests[0].tags).is.ok;\n    expect('@super').is.equal(suite.tests[0].tags[0]);\n  });\n\n  it('should load step definitions', (done) => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => sum += 10);\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n    suite.tests[0].fn(() => {\n      expect(suite.tests[0].steps).is.ok;\n      expect(1610).is.equal(sum);\n      done();\n    });\n  });\n\n  it('should allow failed steps', (done) => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => expect(false).is.false);\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n    let errored = false;\n    suite.tests[0].fn((err) => {\n      errored = !!err;\n      expect(errored).is.exist;\n      done();\n    });\n  });\n\n  it('should work with async functions', (done) => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', async () => {\n      return new Promise((checkoutDone) => {\n        sum += 10;\n        setTimeout(checkoutDone, 0);\n      });\n    });\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n    suite.tests[0].fn(() => {\n      expect(suite.tests[0].steps).is.ok;\n      expect(1610).is.equal(sum);\n      done();\n    });\n  });\n\n  it('should execute scenarios step-by-step ', (done) => {\n    printed = [];\n    container.append({\n      helpers: {\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      },\n    });\n    I = actor();\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, (price) => {\n      I.do('add', sum += parseInt(price, 10));\n    });\n    When('I go to checkout process', () => {\n      I.do('add finish checkout');\n    });\n    const suite = run(text);\n    suite.tests[0].fn(() => {\n      recorder.promise().then(() => {\n        printed.should.include.members([\n          'add 600',\n          'add 1600',\n          'add finish checkout',\n        ]);\n        const lines = recorder.scheduled().split('\\n');\n        lines.should.include.members([\n          'do: \"add\", 600',\n          'step passed',\n          'return result',\n          'do: \"add\", 1600',\n          'step passed',\n          'return result',\n          'do: \"add finish checkout\"',\n          'step passed',\n          'return result',\n          'fire test.passed',\n          'finish test',\n        ]);\n        done();\n      });\n    });\n  });\n\n  it('should match step with params', () => {\n    Given('I am a {word}', param => param);\n    const fn = matchStep('I am a bird');\n    expect('bird').is.equal(fn.params[0]);\n  });\n\n  it('should produce step events', (done) => {\n    const text = `\n    Feature: Emit step event\n\n      Scenario:\n        Then I emit step events\n    `;\n    Then('I emit step events', () => {});\n    let listeners = 0;\n    event.dispatcher.addListener(event.bddStep.before, () => listeners++);\n    event.dispatcher.addListener(event.bddStep.after, () => listeners++);\n\n    const suite = run(text);\n    suite.tests[0].fn(() => {\n      listeners.should.eql(2);\n      done();\n    });\n  });\n\n  it('should use shortened form for step definitions', () => {\n    let fn;\n    Given('I am a {word}', params => params[0]);\n    When('I have {int} wings and {int} eyes', params => params[0] + params[1]);\n    Given('I have ${int} in my pocket', params => params[0]); // eslint-disable-line no-template-curly-in-string\n    Given('I have also ${float} in my pocket', params => params[0]); // eslint-disable-line no-template-curly-in-string\n    fn = matchStep('I am a bird');\n    expect('bird').is.equal(fn(fn.params));\n    fn = matchStep('I have 2 wings and 2 eyes');\n    expect(4).is.equal(fn(fn.params));\n    fn = matchStep('I have $500 in my pocket');\n    expect(500).is.equal(fn(fn.params));\n    fn = matchStep('I have also $500.30 in my pocket');\n    expect(500.30).is.equal(fn(fn.params));\n  });\n\n  it('should attach before hook for Background', () => {\n    const text = `\n    Feature: checkout process\n\n      Background:\n        Given I am logged in as customer\n\n      Scenario:\n        Then I am shopping\n    `;\n    let sum = 0;\n    Given('I am logged in as customer', () => sum++);\n    Then('I am shopping', () => sum++);\n    const suite = run(text);\n    const done = () => { };\n    suite._beforeEach.forEach(hook => hook.run(done));\n    suite.tests[0].fn(done);\n    expect(2).is.equal(sum);\n  });\n\n  it('should execute scenario outlines', (done) => {\n    const text = `\n    @awesome @cool\n    Feature: checkout process\n\n    @super\n    Scenario Outline: order discount\n      Given I have product with price <price>$ in my cart\n      And discount is 10 %\n      Then I should see price is \"<total>\" $\n\n      Examples:\n        | price | total |\n        | 10    | 9     |\n\n      @exampleTag1\n      @exampleTag2\n      Examples:\n        | price | total |\n        | 20    | 18    |\n    `;\n    let cart = 0;\n    let sum = 0;\n    Given('I have product with price {int}$ in my cart', (price) => {\n      cart = price;\n    });\n    Given('discount is {int} %', (discount) => {\n      cart -= cart * discount / 100;\n    });\n    Then('I should see price is {string} $', (total) => {\n      sum = parseInt(total, 10);\n    });\n\n    const suite = run(text);\n\n    expect(suite.tests[0].tags).is.ok;\n    expect(['@awesome', '@cool', '@super']).is.deep.equal(suite.tests[0].tags);\n    expect(['@awesome', '@cool', '@super', '@exampleTag1', '@exampleTag2']).is.deep.equal(suite.tests[1].tags);\n\n    expect(2).is.equal(suite.tests.length);\n    suite.tests[0].fn(() => {\n      expect(9).is.equal(cart);\n      expect(9).is.equal(sum);\n\n      suite.tests[1].fn(() => {\n        expect(18).is.equal(cart);\n        expect(18).is.equal(sum);\n        done();\n      });\n    });\n  });\n\n  it('should provide a parsed DataTable', (done) => {\n    const text = `\n    @awesome @cool\n    Feature: checkout process\n\n    @super\n    Scenario: order products\n      Given I have the following products :\n        | label   | price  |\n        | beer    | 9      |\n        | cookies | 12     |\n      Then I should see the following products :\n        | label   | price  |\n        | beer    | 9      |\n        | cookies | 12     |\n    `;\n\n    let givenParsedRows;\n    let thenParsedRows;\n\n    Given('I have the following products :', (products) => {\n      givenParsedRows = products.parse();\n    });\n    Then('I should see the following products :', (products) => {\n      thenParsedRows = products.parse();\n    });\n\n    const suite = run(text);\n\n    const expectedParsedDataTable = [\n      ['label', 'price'],\n      ['beer', '9'],\n      ['cookies', '12'],\n    ];\n    suite.tests[0].fn(() => {\n      expect(givenParsedRows.rawData).is.deep.equal(expectedParsedDataTable);\n      expect(thenParsedRows.rawData).is.deep.equal(expectedParsedDataTable);\n      done();\n    });\n  });\n});\n",
    "lib/data/dataScenarioConfig.js": "class DataScenarioConfig {\n  constructor(scenarios) {\n    this.scenarios = scenarios;\n  }\n\n  /**\n     * Declares that test throws error.\n     * Can pass an Error object or regex matching expected message.\n     *\n     * @param {*} err\n     */\n  throws(err) {\n    this.scenarios.forEach(scenario => scenario.throws(err));\n    return this;\n  }\n\n  /**\n     * Declares that test should fail.\n     * If test passes - throws an error.\n     * Can pass an Error object or regex matching expected message.\n     *\n     */\n  fails() {\n    this.scenarios.forEach(scenario => scenario.fails());\n    return this;\n  }\n\n  /**\n     * Retry this test for x times\n     *\n     * @param {*} retries\n     */\n  retry(retries) {\n    this.scenarios.forEach(scenario => scenario.retry(retries));\n    return this;\n  }\n\n  /**\n     * Set timeout for this test\n     * @param {*} timeout\n     */\n  timeout(timeout) {\n    this.scenarios.forEach(scenario => scenario.timeout(timeout));\n    return this;\n  }\n\n  /**\n     * Configures a helper.\n     * Helper name can be omitted and values will be applied to first helper.\n     */\n  config(helper, obj) {\n    this.scenarios.forEach(scenario => scenario.config(helper, obj));\n    return this;\n  }\n\n  /**\n     * Append a tag name to scenario title\n     * @param {*} tagName\n     */\n  tag(tagName) {\n    this.scenarios.forEach(scenario => scenario.tag(tagName));\n    return this;\n  }\n\n  /**\n     * Pass in additional objects to inject into test\n     * @param {*} obj\n     */\n  inject(obj) {\n    this.scenarios.forEach(scenario => scenario.inject(obj));\n    return this;\n  }\n\n  /**\n     * Dynamically injects dependencies, see https://codecept.io/pageobjects/#dynamic-injection\n     * @param {*} dependencies\n     */\n  injectDependencies(dependencies) {\n    this.scenarios.forEach(scenario => scenario.injectDependencies(dependencies));\n    return this;\n  }\n}\n\nmodule.exports = DataScenarioConfig;\n",
    "lib/within.js": "const output = require('./output');\nconst store = require('./store');\nconst recorder = require('./recorder');\nconst container = require('./container');\nconst event = require('./event');\nconst Step = require('./step');\nconst { isAsyncFunction } = require('./utils');\n\n/**\n * @param {CodeceptJS.LocatorOrString}  context\n * @param {Function}  fn\n * @return {Promise<*> | undefined}\n */\nfunction within(context, fn) {\n  const helpers = store.dryRun ? {} : container.helpers();\n  const locator = typeof context === 'object' ? JSON.stringify(context) : context;\n\n  return recorder.add('register within wrapper', () => {\n    const metaStep = new Step.MetaStep('Within', `\"${locator}\"`);\n    const defineMetaStep = step => step.metaStep = metaStep;\n    recorder.session.start('within');\n\n    event.dispatcher.on(event.step.before, defineMetaStep);\n\n    Object.keys(helpers).forEach((helper) => {\n      if (helpers[helper]._withinBegin) recorder.add(`[${helper}] start within`, () => helpers[helper]._withinBegin(context));\n    });\n\n    const finalize = () => {\n      event.dispatcher.removeListener(event.step.before, defineMetaStep);\n      recorder.add('Finalize session within session', () => {\n        output.stepShift = 1;\n        recorder.session.restore('within');\n      });\n    };\n    const finishHelpers = () => {\n      Object.keys(helpers).forEach((helper) => {\n        if (helpers[helper]._withinEnd) recorder.add(`[${helper}] finish within`, () => helpers[helper]._withinEnd());\n      });\n    };\n\n    if (isAsyncFunction(fn)) {\n      return fn().then((res) => {\n        finishHelpers();\n        finalize();\n        return recorder.promise().then(() => res);\n      }).catch((e) => {\n        finalize();\n        recorder.throw(e);\n      });\n    }\n\n    let res;\n    try {\n      res = fn();\n    } catch (err) {\n      recorder.throw(err);\n    } finally {\n      finishHelpers();\n      recorder.catch((err) => {\n        output.stepShift = 1;\n        throw err;\n      });\n    }\n    finalize();\n    return recorder.promise().then(() => res);\n  }, false, false);\n}\n\nmodule.exports = within;\n",
    "lib/session.js": "const recorder = require('./recorder');\nconst container = require('./container');\nconst event = require('./event');\nconst output = require('./output');\nconst store = require('./store');\nconst { isAsyncFunction } = require('./utils');\n\nconst sessionColors = [\n  'cyan',\n  'blue',\n  'red',\n  'magenta',\n  'yellow',\n];\n\nconst savedSessions = {};\n\n/**\n * @param {CodeceptJS.LocatorOrString}  sessionName\n * @param {Function | Object<string, *>}  config\n * @param {Function}  [fn]\n * @return {Promise<*> | undefined}\n */\nfunction session(sessionName, config, fn) {\n  if (typeof config === 'function') {\n    if (typeof fn === 'function') {\n      config = config();\n    } else {\n      // no config but with function\n      fn = config;\n      config = {};\n    }\n  }\n  // session helpers won't use beforeSuite and afterSuite hooks...\n  // restart: false options are not allowed as well\n  // but those helpers should be already started so inside listener/helpers.js the `_init` method should already be called\n\n  const helpers = container.helpers();\n\n  if (!savedSessions[sessionName]) {\n    for (const helper in helpers) {\n      if (!helpers[helper]._session) continue;\n      savedSessions[sessionName] = {\n        start: () => null,\n        stop: () => null,\n        loadVars: () => null,\n        restoreVars: () => null,\n        ...(store.dryRun ? {} : helpers[helper]._session()),\n      };\n      break;\n    }\n\n    const closeBrowsers = () => {\n      const session = savedSessions[sessionName];\n      if (!session) return;\n      session.stop(session.vars);\n      delete savedSessions[sessionName];\n    };\n\n    event.dispatcher.once(event.test.after, () => {\n      recorder.add('close session browsers', closeBrowsers);\n    });\n\n    if (!savedSessions[sessionName]) {\n      throw new Error('Configured helpers do not support starting sessions. Please use a helper with session support.');\n    }\n\n    recorder.add('save vars', async () => {\n      savedSessions[sessionName].vars = await savedSessions[sessionName].start(sessionName, config);\n    });\n  }\n\n  // pick random color\n  const color = sessionColors[Object.keys(savedSessions).indexOf(sessionName) % sessionColors.length];\n\n  const addContextToStep = (step) => {\n    step.actor = `${output.colors[color](sessionName)}: I`;\n  };\n\n  if (!fn) return; // no current session steps\n\n  return recorder.add('register session wrapper', async () => {\n    const session = savedSessions[sessionName];\n    recorder.session.start(`session:${sessionName}`);\n    event.dispatcher.on(event.step.after, addContextToStep);\n    recorder.add('switch to browser', () => {\n      const session = savedSessions[sessionName];\n      return session.loadVars(session.vars);\n    });\n\n    const finalize = () => {\n      recorder.add('Finalize session', async () => {\n        output.stepShift = 0;\n        event.dispatcher.removeListener(event.step.after, addContextToStep);\n        await session.restoreVars();\n        recorder.session.restore(`session:${sessionName}`);\n      });\n    };\n\n    // Indicate when executing this function that we are in a session\n    if (isAsyncFunction(fn)) {\n      return fn.apply(null).then((res) => {\n        finalize();\n        return recorder.promise().then(() => res);\n      }).catch((e) => {\n        output.stepShift = 0;\n        session.restoreVars(sessionName);\n        event.dispatcher.removeListener(event.step.after, addContextToStep);\n        recorder.throw(e);\n        return recorder.promise();\n      });\n    }\n\n    let res;\n    try {\n      res = fn.apply(null);\n    } catch (err) {\n      recorder.throw(err);\n    } finally {\n      recorder.catch((e) => {\n        session.restoreVars(sessionName);\n        output.stepShift = 0;\n        event.dispatcher.removeListener(event.step.after, addContextToStep);\n        throw e;\n      });\n    }\n    finalize();\n    return recorder.promise().then(() => res);\n  }, false, false);\n}\n\nmodule.exports = session;\n",
    "test/unit/recorder_test.js": "const { expect } = require('chai');\n\nconst recorder = require('../../lib/recorder');\n\ndescribe('Recorder', () => {\n  beforeEach(() => recorder.start());\n\n  it('should create a promise', () => {\n    expect(recorder.promise()).to.be.instanceof(Promise);\n  });\n\n  it('should execute error handler on error', (done) => {\n    recorder.errHandler(() => done());\n    recorder.throw(new Error('err'));\n    recorder.catch();\n  });\n\n  describe('#session', () => {\n    it('can be started saving previous promise chain', () => {\n      let order = '';\n      recorder.add(() => order += 'a');\n      recorder.add(() => {\n        recorder.session.start();\n        recorder.add(() => order += 'c');\n        recorder.add(() => order += 'd');\n      });\n      recorder.add(() => recorder.session.restore());\n      recorder.add(() => order += 'b');\n      return recorder.promise()\n        .then(() => expect(order).is.equal('acdb'));\n    });\n  });\n\n  describe('#add', () => {\n    it('should add steps to promise', () => {\n      let counter = 0;\n      recorder.add(() => counter++);\n      recorder.add(() => counter++);\n      recorder.add(() => expect(counter).eql(2));\n      return recorder.promise();\n    });\n\n    it('should not add steps when stopped', () => {\n      let counter = 0;\n      recorder.add(() => counter++);\n      recorder.stop();\n      recorder.add(() => counter++);\n      return recorder.promise()\n        .then(() => expect(counter).eql(1));\n    });\n  });\n\n  describe('#retry', () => {\n    it('should retry failed steps when asked', () => {\n      let counter = 0;\n      recorder.retry(2);\n      recorder.add(() => {\n        counter++;\n        if (counter < 3) {\n          throw new Error('ups');\n        }\n      }, undefined, undefined, true);\n      return recorder.promise();\n    });\n\n    it('should create a chain of retries', () => {\n      let counter = 0;\n      const errorText = 'noerror';\n      recorder.retry({ retries: 2, when: (err) => { return err.message === errorText; } });\n      recorder.retry({ retries: 2, when: (err) => { return err.message === 'othererror'; } });\n\n      recorder.add(() => {\n        counter++;\n        if (counter < 3) {\n          throw new Error(errorText);\n        }\n      }, undefined, undefined, true);\n      return recorder.promise();\n    });\n  });\n});\n",
    "test/unit/scenario_test.js": "const { expect } = require('chai');\nconst sinon = require('sinon');\n\nconst scenario = require('../../lib/scenario');\nconst recorder = require('../../lib/recorder');\nconst event = require('../../lib/event');\n\nlet test;\nlet fn;\nlet before;\nlet after;\nlet beforeSuite;\nlet afterSuite;\nlet failed;\nlet started;\n\ndescribe('Scenario', () => {\n  beforeEach(() => {\n    test = { timeout: () => { } };\n    fn = sinon.spy();\n    test.fn = fn;\n  });\n  beforeEach(() => recorder.reset());\n  afterEach(() => event.cleanDispatcher());\n\n  it('should wrap test function', () => {\n    scenario.test(test).fn(() => {});\n    expect(fn.called).is.ok;\n  });\n\n  it('should work with async func', () => {\n    let counter = 0;\n    test.fn = () => {\n      recorder.add('test', async () => {\n        await counter++;\n        await counter++;\n        await counter++;\n        counter++;\n      });\n    };\n\n    scenario.setup();\n    scenario.test(test).fn(() => null);\n    recorder.add('validation', () => expect(counter).to.eq(4));\n    return recorder.promise();\n  });\n\n  describe('events', () => {\n    beforeEach(() => {\n      event.dispatcher.on(event.test.before, before = sinon.spy());\n      event.dispatcher.on(event.test.after, after = sinon.spy());\n      event.dispatcher.on(event.test.started, started = sinon.spy());\n      event.dispatcher.on(event.suite.before, beforeSuite = sinon.spy());\n      event.dispatcher.on(event.suite.after, afterSuite = sinon.spy());\n      scenario.suiteSetup();\n      scenario.setup();\n    });\n\n    it('should fire events', () => {\n      scenario.test(test).fn(() => null);\n      expect(started.called).is.ok;\n      scenario.teardown();\n      scenario.suiteTeardown();\n      return recorder.promise()\n        .then(() => expect(beforeSuite.called).is.ok)\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok);\n    });\n\n    it('should fire failed event on error', () => {\n      event.dispatcher.on(event.test.failed, failed = sinon.spy());\n      scenario.setup();\n      test.fn = () => {\n        throw new Error('ups');\n      };\n      scenario.test(test).fn(() => {});\n      return recorder.promise()\n        .then(() => expect(failed.called).is.ok)\n        .catch(() => null);\n    });\n\n    it('should fire failed event on async error', () => {\n      test.fn = () => {\n        recorder.throw(new Error('ups'));\n      };\n      scenario.test(test).fn(() => {});\n      return recorder.promise()\n        .then(() => expect(failed.called).is.ok)\n        .catch(() => null);\n    });\n  });\n});\n",
    "lib/codecept.js": "const { existsSync, readFileSync } = require('fs');\nconst glob = require('glob');\nconst fsPath = require('path');\nconst { resolve } = require('path');\n\nconst container = require('./container');\nconst Config = require('./config');\nconst event = require('./event');\nconst runHook = require('./hooks');\nconst output = require('./output');\n\n/**\n * CodeceptJS runner\n */\nclass Codecept {\n  /**\n   * Create CodeceptJS runner.\n   * Config and options should be passed\n   *\n   * @param {*} config\n   * @param {*} opts\n   */\n  constructor(config, opts) {\n    this.config = Config.create(config);\n    this.opts = opts;\n    this.testFiles = new Array(0);\n    this.requireModules(config.require);\n  }\n\n  /**\n   * Require modules before codeceptjs running\n   *\n   * @param {string[]} requiringModules\n   */\n  requireModules(requiringModules) {\n    if (requiringModules) {\n      requiringModules.forEach((requiredModule) => {\n        const isLocalFile = existsSync(requiredModule) || existsSync(`${requiredModule}.js`);\n        if (isLocalFile) {\n          requiredModule = resolve(requiredModule);\n        }\n        require(requiredModule);\n      });\n    }\n  }\n\n  /**\n   * Initialize CodeceptJS at specific directory.\n   * If async initialization is required, pass callback as second parameter.\n   *\n   * @param {string} dir\n   */\n  init(dir) {\n    this.initGlobals(dir);\n    // initializing listeners\n    container.create(this.config, this.opts);\n    this.runHooks();\n  }\n\n  /**\n   * Creates global variables\n   *\n   * @param {string} dir\n   */\n  initGlobals(dir) {\n    global.codecept_dir = dir;\n    global.output_dir = fsPath.resolve(dir, this.config.output);\n\n    if (!this.config.noGlobals) {\n      global.actor = global.codecept_actor = require('./actor');\n      global.Helper = global.codecept_helper = require('./helper');\n      global.pause = require('./pause');\n      global.within = require('./within');\n      global.session = require('./session');\n      global.DataTable = require('./data/table');\n      global.locate = locator => require('./locator').build(locator);\n      global.inject = container.support;\n      global.share = container.share;\n      global.secret = require('./secret').secret;\n      global.codeceptjs = require('./index'); // load all objects\n\n      // BDD\n      const stepDefinitions = require('./interfaces/bdd');\n      global.Given = stepDefinitions.Given;\n      global.When = stepDefinitions.When;\n      global.Then = stepDefinitions.Then;\n    }\n  }\n\n  /**\n   * Executes hooks.\n   */\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook));\n  }\n\n  /**\n   * Executes bootstrap.\n   *\n   */\n  async bootstrap() {\n    return runHook(this.config.bootstrap, 'bootstrap');\n  }\n\n  /**\n   * Executes teardown.\n\n   */\n  async teardown() {\n    return runHook(this.config.teardown, 'teardown');\n  }\n\n  /**\n   * Loads tests by pattern or by config.tests\n   *\n   * @param {string} [pattern]\n   */\n  loadTests(pattern) {\n    const options = {\n      cwd: global.codecept_dir,\n    };\n\n    let patterns = [pattern];\n    if (!pattern) {\n      patterns = [];\n      if (this.config.tests && !this.opts.features) patterns.push(this.config.tests);\n      if (this.config.gherkin.features && !this.opts.tests) patterns.push(this.config.gherkin.features);\n    }\n\n    for (pattern of patterns) {\n      glob.sync(pattern, options).forEach((file) => {\n        if (!fsPath.isAbsolute(file)) {\n          file = fsPath.join(global.codecept_dir, file);\n        }\n        this.testFiles.push(fsPath.resolve(file));\n      });\n    }\n  }\n\n  /**\n   * Run a specific test or all loaded tests.\n   *\n   * @param {string} [test]\n   */\n  async run(test) {\n    return new Promise((resolve, reject) => {\n      const mocha = container.mocha();\n      mocha.files = this.testFiles;\n      if (test) {\n        if (!fsPath.isAbsolute(test)) {\n          test = fsPath.join(global.codecept_dir, test);\n        }\n        mocha.files = mocha.files.filter(t => fsPath.basename(t, '.js') === test || t === test);\n      }\n      const done = () => {\n        event.emit(event.all.result, this);\n        event.emit(event.all.after, this);\n        resolve();\n      };\n\n      try {\n        event.emit(event.all.before, this);\n        mocha.run(() => done());\n      } catch (e) {\n        output.error(e.stack);\n        reject(e);\n      }\n    });\n  }\n\n  static version() {\n    return JSON.parse(readFileSync(`${__dirname}/../package.json`, 'utf8')).version;\n  }\n}\n\nmodule.exports = Codecept;\n",
    "lib/workers.js": "/* eslint-disable max-classes-per-file */\nconst { EventEmitter } = require('events');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { Worker } = require('worker_threads');\nconst { Suite, Test, reporters: { Base } } = require('mocha');\nconst Codecept = require('./codecept');\nconst MochaFactory = require('./mochaFactory');\nconst Container = require('./container');\nconst { getTestRoot } = require('./command/utils');\nconst { isFunction, fileExists } = require('./utils');\nconst mainConfig = require('./config');\nconst output = require('./output');\nconst event = require('./event');\nconst recorder = require('./recorder');\nconst runHook = require('./hooks');\nconst WorkerStorage = require('./workerStorage');\n\nconst pathToWorker = path.join(__dirname, 'command', 'workers', 'runTests.js');\n\nconst initializeCodecept = (configPath, options = {}) => {\n  const codecept = new Codecept(mainConfig.load(configPath || '.'), options);\n  codecept.init(getTestRoot(configPath));\n  codecept.loadTests();\n\n  return codecept;\n};\n\nconst createOutputDir = (configPath) => {\n  const config = mainConfig.load(configPath || '.');\n  const testRoot = getTestRoot(configPath);\n  const outputDir = path.isAbsolute(config.output) ? config.output : path.join(testRoot, config.output);\n\n  if (!fileExists(outputDir)) {\n    output.print(`creating output directory: ${outputDir}`);\n    mkdirp.sync(outputDir);\n  }\n};\n\nconst populateGroups = (numberOfWorkers) => {\n  const groups = [];\n  for (let i = 0; i < numberOfWorkers; i++) {\n    groups[i] = [];\n  }\n\n  return groups;\n};\n\nconst createWorker = (workerObject) => {\n  const worker = new Worker(pathToWorker, {\n    workerData: {\n      options: simplifyObject(workerObject.options),\n      tests: workerObject.tests,\n      testRoot: workerObject.testRoot,\n      workerIndex: workerObject.workerIndex + 1,\n    },\n  });\n  worker.on('error', err => output.error(`Worker Error: ${err.stack}`));\n\n  WorkerStorage.addWorker(worker);\n  return worker;\n};\n\nconst simplifyObject = (object) => {\n  return Object.keys(object)\n    .filter((k) => k.indexOf('_') !== 0)\n    .filter((k) => typeof object[k] !== 'function')\n    .filter((k) => typeof object[k] !== 'object')\n    .reduce((obj, key) => {\n      obj[key] = object[key];\n      return obj;\n    }, {});\n};\n\nconst repackTest = (test) => {\n  test = Object.assign(new Test(test.title || '', () => { }), test);\n  test.parent = Object.assign(new Suite(test.parent.title), test.parent);\n  return test;\n};\n\nconst createWorkerObjects = (testGroups, config, testRoot, options) => {\n  return testGroups.map((tests, index) => {\n    const workerObj = new WorkerObject(index);\n    workerObj.addConfig(config);\n    workerObj.addTests(tests);\n    workerObj.setTestRoot(testRoot);\n    workerObj.addOptions(options);\n    return workerObj;\n  });\n};\n\nconst indexOfSmallestElement = (groups) => {\n  let i = 0;\n  for (let j = 1; j < groups.length; j++) {\n    if (groups[j - 1].length > groups[j].length) {\n      i = j;\n    }\n  }\n  return i;\n};\n\nconst convertToMochaTests = (testGroup) => {\n  const group = [];\n  if (testGroup instanceof Array) {\n    const mocha = MochaFactory.create({}, {});\n    mocha.files = testGroup;\n    mocha.loadFiles();\n    mocha.suite.eachTest((test) => {\n      const { id } = test;\n      group.push(id);\n    });\n    mocha.unloadFiles();\n  }\n\n  return group;\n};\n\nclass WorkerObject {\n  /**\n   * @param {Number} workerIndex - Unique ID for worker\n   */\n  constructor(workerIndex) {\n    this.workerIndex = workerIndex;\n    this.options = {};\n    this.tests = [];\n    this.testRoot = getTestRoot();\n  }\n\n  addConfig(config) {\n    const oldConfig = JSON.parse(this.options.override || '{}');\n    const newConfig = {\n      ...oldConfig,\n      ...config,\n    };\n    this.options.override = JSON.stringify(newConfig);\n  }\n\n  addTestFiles(testGroup) {\n    this.addTests(convertToMochaTests(testGroup));\n  }\n\n  addTests(tests) {\n    this.tests = this.tests.concat(tests);\n  }\n\n  setTestRoot(path) {\n    this.testRoot = getTestRoot(path);\n  }\n\n  addOptions(opts) {\n    this.options = {\n      ...this.options,\n      ...opts,\n    };\n  }\n}\n\nclass Workers extends EventEmitter {\n  /**\n   * @param {Number} numberOfWorkers\n   * @param {Object} config\n   */\n  constructor(numberOfWorkers, config = { by: 'test' }) {\n    super();\n    this.setMaxListeners(50);\n    this.codecept = initializeCodecept(config.testConfig, config.options);\n    this.finishedTests = {};\n    this.errors = [];\n    this.numberOfWorkers = 0;\n    this.closedWorkers = 0;\n    this.workers = [];\n    this.stats = {\n      passes: 0,\n      failures: 0,\n      tests: 0,\n      pending: 0,\n    };\n    this.testGroups = [];\n\n    createOutputDir(config.testConfig);\n    if (numberOfWorkers) this._initWorkers(numberOfWorkers, config);\n  }\n\n  _initWorkers(numberOfWorkers, config) {\n    this.splitTestsByGroups(numberOfWorkers, config);\n    this.workers = createWorkerObjects(this.testGroups, this.codecept.config, config.testConfig, config.options);\n    this.numberOfWorkers = this.workers.length;\n  }\n\n  /**\n   * This splits tests by groups.\n   * Strategy for group split is taken from a constructor's config.by value:\n   *\n   * `config.by` can be:\n   *\n   * - `suite`\n   * - `test`\n   * - function(numberOfWorkers)\n   *\n   * This method can be overridden for a better split.\n   */\n  splitTestsByGroups(numberOfWorkers, config) {\n    if (isFunction(config.by)) {\n      const createTests = config.by;\n      const testGroups = createTests(numberOfWorkers);\n      if (!(testGroups instanceof Array)) {\n        throw new Error('Test group should be an array');\n      }\n      for (const testGroup of testGroups) {\n        this.testGroups.push(convertToMochaTests(testGroup));\n      }\n    } else if (typeof numberOfWorkers === 'number' && numberOfWorkers > 0) {\n      this.testGroups = config.by === 'suite' ? this.createGroupsOfSuites(numberOfWorkers) : this.createGroupsOfTests(numberOfWorkers);\n    }\n  }\n\n  /**\n   * Creates a new worker\n   *\n   * @returns {WorkerObject}\n   */\n  spawn() {\n    const worker = new WorkerObject(this.numberOfWorkers);\n    this.workers.push(worker);\n    this.numberOfWorkers += 1;\n    return worker;\n  }\n\n  /**\n   * @param {Number} numberOfWorkers\n   */\n  createGroupsOfTests(numberOfWorkers) {\n    const files = this.codecept.testFiles;\n    const mocha = Container.mocha();\n    mocha.files = files;\n    mocha.loadFiles();\n\n    const groups = populateGroups(numberOfWorkers);\n    let groupCounter = 0;\n\n    mocha.suite.eachTest((test) => {\n      const i = groupCounter % groups.length;\n      if (test) {\n        const { id } = test;\n        groups[i].push(id);\n        groupCounter++;\n      }\n    });\n    return groups;\n  }\n\n  /**\n   * @param {Number} numberOfWorkers\n   */\n  createGroupsOfSuites(numberOfWorkers) {\n    const files = this.codecept.testFiles;\n    const groups = populateGroups(numberOfWorkers);\n\n    const mocha = Container.mocha();\n    mocha.files = files;\n    mocha.loadFiles();\n    mocha.suite.suites.forEach((suite) => {\n      const i = indexOfSmallestElement(groups);\n      suite.tests.forEach((test) => {\n        if (test) {\n          const { id } = test;\n          groups[i].push(id);\n        }\n      });\n    });\n    return groups;\n  }\n\n  /**\n   * @param {Object} config\n   */\n  overrideConfig(config) {\n    for (const worker of this.workers) {\n      worker.addConfig(config);\n    }\n  }\n\n  async bootstrapAll() {\n    return runHook(this.codecept.config.bootstrapAll, 'bootstrapAll');\n  }\n\n  async teardownAll() {\n    return runHook(this.codecept.config.teardownAll, 'teardownAll');\n  }\n\n  run() {\n    this.stats.start = new Date();\n    recorder.startUnlessRunning();\n    event.dispatcher.emit(event.workers.before);\n    recorder.add('starting workers', () => {\n      for (const worker of this.workers) {\n        const workerThread = createWorker(worker);\n        this._listenWorkerEvents(workerThread);\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /**\n   * @returns {Array<WorkerObject>}\n   */\n  getWorkers() {\n    return this.workers;\n  }\n\n  /**\n   * @returns {Boolean}\n   */\n  isFailed() {\n    return (this.stats.failures || this.errors.length) > 0;\n  }\n\n  _listenWorkerEvents(worker) {\n    worker.on('message', (message) => {\n      output.process(message.workerIndex);\n      switch (message.event) {\n        case event.hook.failed:\n          this.emit(event.hook.failed, repackTest(message.data));\n          this.errors.push(message.data.err);\n          break;\n        case event.test.failed:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.failed, repackTest(message.data));\n          break;\n        case event.test.passed:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.passed, repackTest(message.data));\n          break;\n        case event.test.skipped:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.skipped, repackTest(message.data));\n          break;\n        case event.test.finished: this.emit(event.test.finished, repackTest(message.data)); break;\n        case event.test.after:\n          this.emit(event.test.after, repackTest(message.data));\n          break;\n        case event.all.after:\n          this._appendStats(message.data); break;\n      }\n    });\n\n    worker.on('error', (err) => {\n      this.errors.push(err);\n    });\n\n    worker.on('exit', () => {\n      this.closedWorkers += 1;\n      if (this.closedWorkers === this.numberOfWorkers) {\n        this._finishRun();\n      }\n    });\n  }\n\n  _finishRun() {\n    event.dispatcher.emit(event.workers.after);\n    if (this.isFailed()) {\n      process.exitCode = 1;\n    } else {\n      process.exitCode = 0;\n    }\n    this.emit(event.all.result, !this.isFailed(), this.finishedTests, this.stats);\n    this.emit('end'); // internal event\n  }\n\n  _appendStats(newStats) {\n    this.stats.passes += newStats.passes;\n    this.stats.failures += newStats.failures;\n    this.stats.tests += newStats.tests;\n    this.stats.pending += newStats.pending;\n  }\n\n  _updateFinishedTests(test) {\n    const { id } = test;\n    if (this.finishedTests[id]) {\n      const stats = { passes: 0, failures: -1, tests: 0 };\n      this._appendStats(stats);\n    }\n    this.finishedTests[id] = test;\n  }\n\n  printResults() {\n    this.stats.end = new Date();\n    this.stats.duration = this.stats.end - this.stats.start;\n    output.print();\n    if (this.stats.tests === 0 || (this.stats.passes && !this.errors.length)) {\n      output.result(this.stats.passes, this.stats.failures, this.stats.pending, `${this.stats.duration || 0 / 1000}s`);\n    }\n    if (this.stats.failures) {\n      output.print();\n      output.print('-- FAILURES:');\n      const failedList = Object.keys(this.finishedTests)\n        .filter(key => this.finishedTests[key].err)\n        .map(key => this.finishedTests[key]);\n      Base.list(failedList);\n    }\n  }\n}\n\nmodule.exports = Workers;\n"
  }
}