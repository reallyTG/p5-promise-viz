{
  "promises": {
    "0": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912152518353",
      "endTime": "1471912152543450",
      "elapsedTime": "25097",
      "asyncId": 93,
      "triggerAsyncId": 92,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        94
      ],
      "uniqueid": 0
    },
    "1": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912153226119",
      "endTime": "1471912154256168",
      "elapsedTime": "1030049",
      "asyncId": 94,
      "triggerAsyncId": 93,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        95
      ],
      "uniqueid": 1
    },
    "2": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912153397740",
      "endTime": "1471912154328123",
      "elapsedTime": "930383",
      "asyncId": 95,
      "triggerAsyncId": 94,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        96
      ],
      "uniqueid": 2
    },
    "3": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912153729111",
      "endTime": "1471912154375001",
      "elapsedTime": "645890",
      "asyncId": 97,
      "triggerAsyncId": 96,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        98,
        126
      ],
      "uniqueid": 3
    },
    "4": {
      "source": "test/unit/actor_test.js:58:20:58:20",
      "startTime": "1471912153872550",
      "endTime": "1471912154917587",
      "elapsedTime": "1045037",
      "asyncId": 98,
      "triggerAsyncId": 97,
      "io": "",
      "userCode": true,
      "line": "\n    recorder.start();\n    const promise = I.customStep();\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });\n\n  it('should init pageobject methods as metastep', () => ",
      "startLine": 58,
      "startCol": 20,
      "endLine": 58,
      "endCol": 20,
      "file": "test/unit/actor_test.js",
      "triggers": [
        100
      ],
      "uniqueid": 4
    },
    "5": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912154073806",
      "endTime": "1471912155083197",
      "elapsedTime": "1009391",
      "asyncId": 100,
      "triggerAsyncId": 98,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 5
    },
    "6": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912157655305",
      "endTime": "1471912157674671",
      "elapsedTime": "19366",
      "asyncId": 127,
      "triggerAsyncId": 125,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        128
      ],
      "uniqueid": 6
    },
    "7": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912157844940",
      "endTime": "1471912158768240",
      "elapsedTime": "923300",
      "asyncId": 128,
      "triggerAsyncId": 127,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        129
      ],
      "uniqueid": 7
    },
    "8": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912157992507",
      "endTime": "1471912158808285",
      "elapsedTime": "815778",
      "asyncId": 129,
      "triggerAsyncId": 128,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        130
      ],
      "uniqueid": 8
    },
    "9": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912158259647",
      "endTime": "1471912158838481",
      "elapsedTime": "578834",
      "asyncId": 131,
      "triggerAsyncId": 130,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        132,
        140
      ],
      "uniqueid": 9
    },
    "10": {
      "source": "test/unit/actor_test.js:90:20:90:20",
      "startTime": "1471912158560080",
      "endTime": "1471912158979636",
      "elapsedTime": "419556",
      "asyncId": 132,
      "triggerAsyncId": 131,
      "io": "",
      "userCode": true,
      "line": "\n    const promise = I.hello();\n    expect(promise).toBeInstanceOf(Promise);\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });\n\n  it('should produce step events', () => ",
      "startLine": 90,
      "startCol": 20,
      "endLine": 90,
      "endCol": 20,
      "file": "test/unit/actor_test.js",
      "triggers": [
        134
      ],
      "uniqueid": 10
    },
    "11": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912158691776",
      "endTime": "1471912159108647",
      "elapsedTime": "416871",
      "asyncId": 134,
      "triggerAsyncId": 132,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 11
    },
    "12": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912159559742",
      "endTime": "1471912159578557",
      "elapsedTime": "18815",
      "asyncId": 141,
      "triggerAsyncId": 139,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        142
      ],
      "uniqueid": 12
    },
    "13": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912159806464",
      "endTime": "1471912160553333",
      "elapsedTime": "746869",
      "asyncId": 142,
      "triggerAsyncId": 141,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        143
      ],
      "uniqueid": 13
    },
    "14": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912159977815",
      "endTime": "1471912160791860",
      "elapsedTime": "814045",
      "asyncId": 143,
      "triggerAsyncId": 142,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        144
      ],
      "uniqueid": 14
    },
    "15": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912160249304",
      "endTime": "1471912160824942",
      "elapsedTime": "575638",
      "asyncId": 145,
      "triggerAsyncId": 144,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        146,
        154
      ],
      "uniqueid": 15
    },
    "16": {
      "source": "test/unit/actor_test.js:104:22:104:22",
      "startTime": "1471912160366393",
      "endTime": "1471912160950618",
      "elapsedTime": "584225",
      "asyncId": 146,
      "triggerAsyncId": 145,
      "io": "",
      "userCode": true,
      "line": "\n    });\n\n    return I.hello().then(() => {\n      expect(listeners).toEqual(3);\n    });\n  })",
      "startLine": 104,
      "startCol": 22,
      "endLine": 104,
      "endCol": 22,
      "file": "test/unit/actor_test.js",
      "triggers": [
        148
      ],
      "uniqueid": 16
    },
    "17": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912160489504",
      "endTime": "1471912161065573",
      "elapsedTime": "576069",
      "asyncId": 148,
      "triggerAsyncId": 146,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 17
    },
    "18": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912161509745",
      "endTime": "1471912161528781",
      "elapsedTime": "19036",
      "asyncId": 155,
      "triggerAsyncId": 153,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        156
      ],
      "uniqueid": 18
    },
    "19": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912161741128",
      "endTime": "1471912162730692",
      "elapsedTime": "989564",
      "asyncId": 156,
      "triggerAsyncId": 155,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        157
      ],
      "uniqueid": 19
    },
    "20": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912161870721",
      "endTime": "1471912162779533",
      "elapsedTime": "908812",
      "asyncId": 157,
      "triggerAsyncId": 156,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        158
      ],
      "uniqueid": 20
    },
    "21": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912162127331",
      "endTime": "1471912165460415",
      "elapsedTime": "3333084",
      "asyncId": 158,
      "triggerAsyncId": 157,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        159,
        164,
        165
      ],
      "uniqueid": 21
    },
    "22": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912162280298",
      "endTime": "1471912166201743",
      "elapsedTime": "3921445",
      "asyncId": 159,
      "triggerAsyncId": 158,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        160,
        173,
        174
      ],
      "uniqueid": 22
    },
    "23": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912162535897",
      "endTime": "1471912166247168",
      "elapsedTime": "3711271",
      "asyncId": 161,
      "triggerAsyncId": 160,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        163,
        183
      ],
      "uniqueid": 23
    },
    "24": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912162663756",
      "endTime": "1471912166358898",
      "elapsedTime": "3695142",
      "asyncId": 163,
      "triggerAsyncId": 161,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 24
    },
    "25": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912163074496",
      "endTime": "1471912165433845",
      "elapsedTime": "2359349",
      "asyncId": 164,
      "triggerAsyncId": 158,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 25
    },
    "26": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912163233073",
      "endTime": "1471912163250125",
      "elapsedTime": "17052",
      "asyncId": 165,
      "triggerAsyncId": 158,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        166
      ],
      "uniqueid": 26
    },
    "27": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912163324965",
      "endTime": "1471912163639183",
      "elapsedTime": "314218",
      "asyncId": 166,
      "triggerAsyncId": 165,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        167
      ],
      "uniqueid": 27
    },
    "28": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912163396519",
      "endTime": "1471912163829710",
      "elapsedTime": "433191",
      "asyncId": 167,
      "triggerAsyncId": 166,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 28
    },
    "29": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912165562766",
      "endTime": "1471912166175093",
      "elapsedTime": "612327",
      "asyncId": 173,
      "triggerAsyncId": 159,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 29
    },
    "30": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912165643047",
      "endTime": "1471912165658786",
      "elapsedTime": "15739",
      "asyncId": 174,
      "triggerAsyncId": 159,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        175
      ],
      "uniqueid": 30
    },
    "31": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912165733757",
      "endTime": "1471912166097408",
      "elapsedTime": "363651",
      "asyncId": 175,
      "triggerAsyncId": 174,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        176
      ],
      "uniqueid": 31
    },
    "32": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912165803027",
      "endTime": "1471912166187908",
      "elapsedTime": "384881",
      "asyncId": 176,
      "triggerAsyncId": 175,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 32
    },
    "33": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912166789174",
      "endTime": "1471912166808079",
      "elapsedTime": "18905",
      "asyncId": 184,
      "triggerAsyncId": 182,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        185
      ],
      "uniqueid": 33
    },
    "34": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912166952860",
      "endTime": "1471912167864177",
      "elapsedTime": "911317",
      "asyncId": 185,
      "triggerAsyncId": 184,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        186
      ],
      "uniqueid": 34
    },
    "35": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912167092161",
      "endTime": "1471912167883443",
      "elapsedTime": "791282",
      "asyncId": 186,
      "triggerAsyncId": 185,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        187
      ],
      "uniqueid": 35
    },
    "36": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912167276968",
      "endTime": "1471912169777551",
      "elapsedTime": "2500583",
      "asyncId": 187,
      "triggerAsyncId": 186,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        188,
        193,
        194
      ],
      "uniqueid": 36
    },
    "37": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912167424854",
      "endTime": "1471912170460440",
      "elapsedTime": "3035586",
      "asyncId": 188,
      "triggerAsyncId": 187,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        189,
        202,
        203
      ],
      "uniqueid": 37
    },
    "38": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912167685142",
      "endTime": "1471912170499834",
      "elapsedTime": "2814692",
      "asyncId": 190,
      "triggerAsyncId": 189,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        192,
        212
      ],
      "uniqueid": 38
    },
    "39": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912167815677",
      "endTime": "1471912170603448",
      "elapsedTime": "2787771",
      "asyncId": 192,
      "triggerAsyncId": 190,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 39
    },
    "40": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912167955819",
      "endTime": "1471912169751162",
      "elapsedTime": "1795343",
      "asyncId": 193,
      "triggerAsyncId": 187,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 40
    },
    "41": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912168040107",
      "endTime": "1471912168056658",
      "elapsedTime": "16551",
      "asyncId": 194,
      "triggerAsyncId": 187,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        195
      ],
      "uniqueid": 41
    },
    "42": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912168129394",
      "endTime": "1471912168302448",
      "elapsedTime": "173054",
      "asyncId": 195,
      "triggerAsyncId": 194,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        196
      ],
      "uniqueid": 42
    },
    "43": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912168202210",
      "endTime": "1471912168419557",
      "elapsedTime": "217347",
      "asyncId": 196,
      "triggerAsyncId": 195,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 43
    },
    "44": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912169861318",
      "endTime": "1471912170434231",
      "elapsedTime": "572913",
      "asyncId": 202,
      "triggerAsyncId": 188,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 44
    },
    "45": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912169937291",
      "endTime": "1471912169953411",
      "elapsedTime": "16120",
      "asyncId": 203,
      "triggerAsyncId": 188,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        204
      ],
      "uniqueid": 45
    },
    "46": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912170030615",
      "endTime": "1471912170361816",
      "elapsedTime": "331201",
      "asyncId": 204,
      "triggerAsyncId": 203,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        205
      ],
      "uniqueid": 46
    },
    "47": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912170106838",
      "endTime": "1471912170446705",
      "elapsedTime": "339867",
      "asyncId": 205,
      "triggerAsyncId": 204,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 47
    },
    "48": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912171062939",
      "endTime": "1471912171081764",
      "elapsedTime": "18825",
      "asyncId": 213,
      "triggerAsyncId": 211,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        214
      ],
      "uniqueid": 48
    },
    "49": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912171226756",
      "endTime": "1471912172718801",
      "elapsedTime": "1492045",
      "asyncId": 214,
      "triggerAsyncId": 213,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        215
      ],
      "uniqueid": 49
    },
    "50": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912171382578",
      "endTime": "1471912172735301",
      "elapsedTime": "1352723",
      "asyncId": 215,
      "triggerAsyncId": 214,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        216
      ],
      "uniqueid": 50
    },
    "51": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912171556584",
      "endTime": "1471912173208358",
      "elapsedTime": "1651774",
      "asyncId": 216,
      "triggerAsyncId": 215,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        217,
        226,
        227
      ],
      "uniqueid": 51
    },
    "52": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912171700984",
      "endTime": "1471912173860549",
      "elapsedTime": "2159565",
      "asyncId": 217,
      "triggerAsyncId": 216,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        218,
        231,
        232
      ],
      "uniqueid": 52
    },
    "53": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912171959799",
      "endTime": "1471912174323787",
      "elapsedTime": "2363988",
      "asyncId": 219,
      "triggerAsyncId": 218,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        220,
        236,
        237
      ],
      "uniqueid": 53
    },
    "54": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912172132322",
      "endTime": "1471912176188910",
      "elapsedTime": "4056588",
      "asyncId": 220,
      "triggerAsyncId": 219,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        221,
        241,
        242
      ],
      "uniqueid": 54
    },
    "55": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912172279237",
      "endTime": "1471912176835822",
      "elapsedTime": "4556585",
      "asyncId": 221,
      "triggerAsyncId": 220,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        222,
        250,
        251
      ],
      "uniqueid": 55
    },
    "56": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912172533894",
      "endTime": "1471912177301524",
      "elapsedTime": "4767630",
      "asyncId": 223,
      "triggerAsyncId": 222,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        225,
        255,
        256,
        265
      ],
      "uniqueid": 56
    },
    "57": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912172672915",
      "endTime": "1471912177430937",
      "elapsedTime": "4758022",
      "asyncId": 225,
      "triggerAsyncId": 223,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 57
    },
    "58": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912172820000",
      "endTime": "1471912173182409",
      "elapsedTime": "362409",
      "asyncId": 226,
      "triggerAsyncId": 216,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 58
    },
    "59": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912172892827",
      "endTime": "1471912172908887",
      "elapsedTime": "16060",
      "asyncId": 227,
      "triggerAsyncId": 216,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        228
      ],
      "uniqueid": 59
    },
    "60": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912172974379",
      "endTime": "1471912173110414",
      "elapsedTime": "136035",
      "asyncId": 228,
      "triggerAsyncId": 227,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        229
      ],
      "uniqueid": 60
    },
    "61": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912173055772",
      "endTime": "1471912173194933",
      "elapsedTime": "139161",
      "asyncId": 229,
      "triggerAsyncId": 228,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 61
    },
    "62": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912173295631",
      "endTime": "1471912173833929",
      "elapsedTime": "538298",
      "asyncId": 231,
      "triggerAsyncId": 217,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 62
    },
    "63": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912173367586",
      "endTime": "1471912173383506",
      "elapsedTime": "15920",
      "asyncId": 232,
      "triggerAsyncId": 217,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        233
      ],
      "uniqueid": 63
    },
    "64": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912173453026",
      "endTime": "1471912173762425",
      "elapsedTime": "309399",
      "asyncId": 233,
      "triggerAsyncId": 232,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        234
      ],
      "uniqueid": 64
    },
    "65": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912173525552",
      "endTime": "1471912173846713",
      "elapsedTime": "321161",
      "asyncId": 234,
      "triggerAsyncId": 233,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 65
    },
    "66": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912173952962",
      "endTime": "1471912174297868",
      "elapsedTime": "344906",
      "asyncId": 236,
      "triggerAsyncId": 219,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 66
    },
    "67": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912174032862",
      "endTime": "1471912174048581",
      "elapsedTime": "15719",
      "asyncId": 237,
      "triggerAsyncId": 219,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        238
      ],
      "uniqueid": 67
    },
    "68": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912174119714",
      "endTime": "1471912174230742",
      "elapsedTime": "111028",
      "asyncId": 238,
      "triggerAsyncId": 237,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        239
      ],
      "uniqueid": 68
    },
    "69": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912174197821",
      "endTime": "1471912174310352",
      "elapsedTime": "112531",
      "asyncId": 239,
      "triggerAsyncId": 238,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 69
    },
    "70": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912174400310",
      "endTime": "1471912176162892",
      "elapsedTime": "1762582",
      "asyncId": 241,
      "triggerAsyncId": 220,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 70
    },
    "71": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912174470071",
      "endTime": "1471912174485460",
      "elapsedTime": "15389",
      "asyncId": 242,
      "triggerAsyncId": 220,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        243
      ],
      "uniqueid": 71
    },
    "72": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912174552726",
      "endTime": "1471912174718967",
      "elapsedTime": "166241",
      "asyncId": 243,
      "triggerAsyncId": 242,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        244
      ],
      "uniqueid": 72
    },
    "73": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912174623017",
      "endTime": "1471912174807683",
      "elapsedTime": "184666",
      "asyncId": 244,
      "triggerAsyncId": 243,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 73
    },
    "74": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912176266987",
      "endTime": "1471912176809232",
      "elapsedTime": "542245",
      "asyncId": 250,
      "triggerAsyncId": 221,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 74
    },
    "75": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912176346025",
      "endTime": "1471912176361804",
      "elapsedTime": "15779",
      "asyncId": 251,
      "triggerAsyncId": 221,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        252
      ],
      "uniqueid": 75
    },
    "76": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912176431885",
      "endTime": "1471912176732418",
      "elapsedTime": "300533",
      "asyncId": 252,
      "triggerAsyncId": 251,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        253
      ],
      "uniqueid": 76
    },
    "77": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912176497298",
      "endTime": "1471912176822016",
      "elapsedTime": "324718",
      "asyncId": 253,
      "triggerAsyncId": 252,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 77
    },
    "78": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912176927324",
      "endTime": "1471912177273853",
      "elapsedTime": "346529",
      "asyncId": 255,
      "triggerAsyncId": 223,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 78
    },
    "79": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912177009437",
      "endTime": "1471912177026579",
      "elapsedTime": "17142",
      "asyncId": 256,
      "triggerAsyncId": 223,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        257
      ],
      "uniqueid": 79
    },
    "80": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912177101610",
      "endTime": "1471912177200315",
      "elapsedTime": "98705",
      "asyncId": 257,
      "triggerAsyncId": 256,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        258
      ],
      "uniqueid": 80
    },
    "81": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912177167754",
      "endTime": "1471912177287298",
      "elapsedTime": "119544",
      "asyncId": 258,
      "triggerAsyncId": 257,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 81
    },
    "82": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912177873716",
      "endTime": "1471912177892011",
      "elapsedTime": "18295",
      "asyncId": 266,
      "triggerAsyncId": 264,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        267
      ],
      "uniqueid": 82
    },
    "83": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912178032944",
      "endTime": "1471912180110426",
      "elapsedTime": "2077482",
      "asyncId": 267,
      "triggerAsyncId": 266,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        268
      ],
      "uniqueid": 83
    },
    "84": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912178174770",
      "endTime": "1471912180127257",
      "elapsedTime": "1952487",
      "asyncId": 268,
      "triggerAsyncId": 267,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        269
      ],
      "uniqueid": 84
    },
    "85": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912178305746",
      "endTime": "1471912180146273",
      "elapsedTime": "1840527",
      "asyncId": 269,
      "triggerAsyncId": 268,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        270
      ],
      "uniqueid": 85
    },
    "86": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912178476315",
      "endTime": "1471912182058244",
      "elapsedTime": "3581929",
      "asyncId": 270,
      "triggerAsyncId": 269,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        271,
        280,
        281
      ],
      "uniqueid": 86
    },
    "87": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912178623921",
      "endTime": "1471912182747545",
      "elapsedTime": "4123624",
      "asyncId": 271,
      "triggerAsyncId": 270,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        272,
        289,
        290
      ],
      "uniqueid": 87
    },
    "88": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912178892875",
      "endTime": "1471912183199332",
      "elapsedTime": "4306457",
      "asyncId": 273,
      "triggerAsyncId": 272,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        274,
        294,
        295
      ],
      "uniqueid": 88
    },
    "89": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912179071209",
      "endTime": "1471912185322629",
      "elapsedTime": "6251420",
      "asyncId": 274,
      "triggerAsyncId": 273,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        275,
        299,
        300
      ],
      "uniqueid": 89
    },
    "90": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912179229175",
      "endTime": "1471912186469297",
      "elapsedTime": "7240122",
      "asyncId": 275,
      "triggerAsyncId": 274,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        276,
        312,
        313
      ],
      "uniqueid": 90
    },
    "91": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912179909770",
      "endTime": "1471912186920271",
      "elapsedTime": "7010501",
      "asyncId": 277,
      "triggerAsyncId": 276,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        279,
        317,
        318,
        327
      ],
      "uniqueid": 91
    },
    "92": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912180062786",
      "endTime": "1471912187055715",
      "elapsedTime": "6992929",
      "asyncId": 279,
      "triggerAsyncId": 277,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 92
    },
    "93": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912180220081",
      "endTime": "1471912182030903",
      "elapsedTime": "1810822",
      "asyncId": 280,
      "triggerAsyncId": 270,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 93
    },
    "94": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912180301013",
      "endTime": "1471912180317614",
      "elapsedTime": "16601",
      "asyncId": 281,
      "triggerAsyncId": 270,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        282
      ],
      "uniqueid": 94
    },
    "95": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912180389188",
      "endTime": "1471912180539059",
      "elapsedTime": "149871",
      "asyncId": 282,
      "triggerAsyncId": 281,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        283
      ],
      "uniqueid": 95
    },
    "96": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912180458338",
      "endTime": "1471912180629117",
      "elapsedTime": "170779",
      "asyncId": 283,
      "triggerAsyncId": 282,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 96
    },
    "97": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912182135659",
      "endTime": "1471912182721156",
      "elapsedTime": "585497",
      "asyncId": 289,
      "triggerAsyncId": 271,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 97
    },
    "98": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912182212884",
      "endTime": "1471912182233262",
      "elapsedTime": "20378",
      "asyncId": 290,
      "triggerAsyncId": 271,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        291
      ],
      "uniqueid": 98
    },
    "99": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912182318983",
      "endTime": "1471912182651385",
      "elapsedTime": "332402",
      "asyncId": 291,
      "triggerAsyncId": 290,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        292
      ],
      "uniqueid": 99
    },
    "100": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912182401327",
      "endTime": "1471912182734050",
      "elapsedTime": "332723",
      "asyncId": 292,
      "triggerAsyncId": 291,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 100
    },
    "101": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912182841191",
      "endTime": "1471912183172802",
      "elapsedTime": "331611",
      "asyncId": 294,
      "triggerAsyncId": 273,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 101
    },
    "102": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912182908587",
      "endTime": "1471912182924477",
      "elapsedTime": "15890",
      "asyncId": 295,
      "triggerAsyncId": 273,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        296
      ],
      "uniqueid": 102
    },
    "103": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912182994147",
      "endTime": "1471912183106387",
      "elapsedTime": "112240",
      "asyncId": 296,
      "triggerAsyncId": 295,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        297
      ],
      "uniqueid": 103
    },
    "104": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912183072905",
      "endTime": "1471912183185576",
      "elapsedTime": "112671",
      "asyncId": 297,
      "triggerAsyncId": 296,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 104
    },
    "105": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912183273431",
      "endTime": "1471912185290409",
      "elapsedTime": "2016978",
      "asyncId": 299,
      "triggerAsyncId": 274,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 105
    },
    "106": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912183339675",
      "endTime": "1471912183356105",
      "elapsedTime": "16430",
      "asyncId": 300,
      "triggerAsyncId": 274,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        301
      ],
      "uniqueid": 106
    },
    "107": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912183421738",
      "endTime": "1471912183580345",
      "elapsedTime": "158607",
      "asyncId": 301,
      "triggerAsyncId": 300,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        302
      ],
      "uniqueid": 107
    },
    "108": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912183485187",
      "endTime": "1471912183668671",
      "elapsedTime": "183484",
      "asyncId": 302,
      "triggerAsyncId": 301,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 108
    },
    "109": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912185417226",
      "endTime": "1471912186443208",
      "elapsedTime": "1025982",
      "asyncId": 312,
      "triggerAsyncId": 275,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 109
    },
    "110": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912185489531",
      "endTime": "1471912185506042",
      "elapsedTime": "16511",
      "asyncId": 313,
      "triggerAsyncId": 275,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        314
      ],
      "uniqueid": 110
    },
    "111": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912185567517",
      "endTime": "1471912186368057",
      "elapsedTime": "800540",
      "asyncId": 314,
      "triggerAsyncId": 313,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        315
      ],
      "uniqueid": 111
    },
    "112": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912185630425",
      "endTime": "1471912186455901",
      "elapsedTime": "825476",
      "asyncId": 315,
      "triggerAsyncId": 314,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 112
    },
    "113": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912186567490",
      "endTime": "1471912186894182",
      "elapsedTime": "326692",
      "asyncId": 317,
      "triggerAsyncId": 277,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 113
    },
    "114": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912186647490",
      "endTime": "1471912186664282",
      "elapsedTime": "16792",
      "asyncId": 318,
      "triggerAsyncId": 277,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        319
      ],
      "uniqueid": 114
    },
    "115": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912186727991",
      "endTime": "1471912186828980",
      "elapsedTime": "100989",
      "asyncId": 319,
      "triggerAsyncId": 318,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        320
      ],
      "uniqueid": 115
    },
    "116": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912186796630",
      "endTime": "1471912186906977",
      "elapsedTime": "110347",
      "asyncId": 320,
      "triggerAsyncId": 319,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 116
    },
    "117": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912187546835",
      "endTime": "1471912187565209",
      "elapsedTime": "18374",
      "asyncId": 328,
      "triggerAsyncId": 326,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        329
      ],
      "uniqueid": 117
    },
    "118": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912187762739",
      "endTime": "1471912188733407",
      "elapsedTime": "970668",
      "asyncId": 329,
      "triggerAsyncId": 328,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        330
      ],
      "uniqueid": 118
    },
    "119": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912187924833",
      "endTime": "1471912188749768",
      "elapsedTime": "824935",
      "asyncId": 330,
      "triggerAsyncId": 329,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        331
      ],
      "uniqueid": 119
    },
    "120": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912188175843",
      "endTime": "1471912189054208",
      "elapsedTime": "878365",
      "asyncId": 332,
      "triggerAsyncId": 331,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        333,
        428
      ],
      "uniqueid": 120
    },
    "121": {
      "source": "test/unit/actor_test.js:158:8:158:8",
      "startTime": "1471912188291279",
      "endTime": "1471912189069036",
      "elapsedTime": "777757",
      "asyncId": 333,
      "triggerAsyncId": 332,
      "io": "",
      "userCode": true,
      "line": "\n\n    return I.die()\n      .then(() => listeners = 0)\n      .catch(() => null)\n      .then(() => {\n        expect(listeners).toEqual(3)",
      "startLine": 158,
      "startCol": 8,
      "endLine": 158,
      "endCol": 8,
      "file": "test/unit/actor_test.js",
      "triggers": [
        334
      ],
      "uniqueid": 121
    },
    "122": {
      "source": "test/unit/actor_test.js:160:8:160:8",
      "startTime": "1471912188522713",
      "endTime": "1471912189228365",
      "elapsedTime": "705652",
      "asyncId": 335,
      "triggerAsyncId": 334,
      "io": "",
      "userCode": true,
      "line": "\n      .then(() => listeners = 0)\n      .catch(() => null)\n      .then(() => {\n        expect(listeners).toEqual(3);\n      });\n  })",
      "startLine": 160,
      "startCol": 8,
      "endLine": 160,
      "endCol": 8,
      "file": "test/unit/actor_test.js",
      "triggers": [
        337
      ],
      "uniqueid": 122
    },
    "123": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912188638440",
      "endTime": "1471912189347127",
      "elapsedTime": "708687",
      "asyncId": 337,
      "triggerAsyncId": 335,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 123
    },
    "124": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912195154505",
      "endTime": "1471912195171967",
      "elapsedTime": "17462",
      "asyncId": 429,
      "triggerAsyncId": 427,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        435
      ],
      "uniqueid": 124
    },
    "125": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912198747825",
      "endTime": "1471912198765238",
      "elapsedTime": "17413",
      "asyncId": 436,
      "triggerAsyncId": 434,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        442
      ],
      "uniqueid": 125
    },
    "126": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912201071498",
      "endTime": "1471912201088660",
      "elapsedTime": "17162",
      "asyncId": 443,
      "triggerAsyncId": 441,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        460
      ],
      "uniqueid": 126
    },
    "127": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912206463418",
      "endTime": "1471912208235487",
      "elapsedTime": "1772069",
      "asyncId": 445,
      "triggerAsyncId": 441,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        449
      ],
      "uniqueid": 127
    },
    "128": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912206695112",
      "endTime": "1471912208207134",
      "elapsedTime": "1512022",
      "asyncId": 446,
      "triggerAsyncId": 441,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        447
      ],
      "uniqueid": 128
    },
    "129": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912206920874",
      "endTime": "1471912207060526",
      "elapsedTime": "139652",
      "asyncId": 447,
      "triggerAsyncId": 446,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        448
      ],
      "uniqueid": 129
    },
    "130": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912207041731",
      "endTime": "1471912207715172",
      "elapsedTime": "673441",
      "asyncId": 448,
      "triggerAsyncId": 447,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 130
    },
    "131": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912207183657",
      "endTime": "1471912208470347",
      "elapsedTime": "1286690",
      "asyncId": 449,
      "triggerAsyncId": 445,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        450
      ],
      "uniqueid": 131
    },
    "132": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912208346284",
      "endTime": "1471912208520431",
      "elapsedTime": "174147",
      "asyncId": 460,
      "triggerAsyncId": 443,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        461
      ],
      "uniqueid": 132
    },
    "133": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912208402460",
      "endTime": "1471912208569813",
      "elapsedTime": "167353",
      "asyncId": 461,
      "triggerAsyncId": 460,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        462
      ],
      "uniqueid": 133
    },
    "134": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912208860598",
      "endTime": "1471912208878361",
      "elapsedTime": "17763",
      "asyncId": 467,
      "triggerAsyncId": 465,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        480
      ],
      "uniqueid": 134
    },
    "135": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912210257284",
      "endTime": "1471912211494782",
      "elapsedTime": "1237498",
      "asyncId": 469,
      "triggerAsyncId": 465,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        473
      ],
      "uniqueid": 135
    },
    "136": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912210379873",
      "endTime": "1471912211468002",
      "elapsedTime": "1088129",
      "asyncId": 470,
      "triggerAsyncId": 465,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        471
      ],
      "uniqueid": 136
    },
    "137": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912210554250",
      "endTime": "1471912210690094",
      "elapsedTime": "135844",
      "asyncId": 471,
      "triggerAsyncId": 470,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        472
      ],
      "uniqueid": 137
    },
    "138": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912210670398",
      "endTime": "1471912211121863",
      "elapsedTime": "451465",
      "asyncId": 472,
      "triggerAsyncId": 471,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 138
    },
    "139": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912210821431",
      "endTime": "1471912211693304",
      "elapsedTime": "871873",
      "asyncId": 473,
      "triggerAsyncId": 469,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        474
      ],
      "uniqueid": 139
    },
    "140": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912211566005",
      "endTime": "1471912211714584",
      "elapsedTime": "148579",
      "asyncId": 480,
      "triggerAsyncId": 467,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        481
      ],
      "uniqueid": 140
    },
    "141": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912211619806",
      "endTime": "1471912211945366",
      "elapsedTime": "325560",
      "asyncId": 481,
      "triggerAsyncId": 480,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        482
      ],
      "uniqueid": 141
    },
    "142": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912212257030",
      "endTime": "1471912212273591",
      "elapsedTime": "16561",
      "asyncId": 489,
      "triggerAsyncId": 487,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        502
      ],
      "uniqueid": 142
    },
    "143": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912213251903",
      "endTime": "1471912214459645",
      "elapsedTime": "1207742",
      "asyncId": 491,
      "triggerAsyncId": 487,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        495
      ],
      "uniqueid": 143
    },
    "144": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912213373481",
      "endTime": "1471912214428096",
      "elapsedTime": "1054615",
      "asyncId": 492,
      "triggerAsyncId": 487,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        493
      ],
      "uniqueid": 144
    },
    "145": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912213538951",
      "endTime": "1471912213675426",
      "elapsedTime": "136475",
      "asyncId": 493,
      "triggerAsyncId": 492,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        494
      ],
      "uniqueid": 145
    },
    "146": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912213657693",
      "endTime": "1471912214104270",
      "elapsedTime": "446577",
      "asyncId": 494,
      "triggerAsyncId": 493,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 146
    },
    "147": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912213808235",
      "endTime": "1471912214654871",
      "elapsedTime": "846636",
      "asyncId": 495,
      "triggerAsyncId": 491,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        496
      ],
      "uniqueid": 147
    },
    "148": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912214535447",
      "endTime": "1471912214677133",
      "elapsedTime": "141686",
      "asyncId": 502,
      "triggerAsyncId": 489,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        503
      ],
      "uniqueid": 148
    },
    "149": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912214587415",
      "endTime": "1471912214845268",
      "elapsedTime": "257853",
      "asyncId": 503,
      "triggerAsyncId": 502,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        504
      ],
      "uniqueid": 149
    },
    "150": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912215941261",
      "endTime": "1471912215959284",
      "elapsedTime": "18023",
      "asyncId": 511,
      "triggerAsyncId": 509,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        527
      ],
      "uniqueid": 150
    },
    "151": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912216913612",
      "endTime": "1471912219412573",
      "elapsedTime": "2498961",
      "asyncId": 513,
      "triggerAsyncId": 509,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        517
      ],
      "uniqueid": 151
    },
    "152": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912217047182",
      "endTime": "1471912219379471",
      "elapsedTime": "2332289",
      "asyncId": 514,
      "triggerAsyncId": 509,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        515
      ],
      "uniqueid": 152
    },
    "153": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912217211260",
      "endTime": "1471912217350981",
      "elapsedTime": "139721",
      "asyncId": 515,
      "triggerAsyncId": 514,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        516
      ],
      "uniqueid": 153
    },
    "154": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912217332917",
      "endTime": "1471912217764586",
      "elapsedTime": "431669",
      "asyncId": 516,
      "triggerAsyncId": 515,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 154
    },
    "155": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912217476145",
      "endTime": "1471912219617797",
      "elapsedTime": "2141652",
      "asyncId": 517,
      "triggerAsyncId": 513,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        518
      ],
      "uniqueid": 155
    },
    "156": {
      "source": "lib/interfaces/gherkin.js:51:15:51:15",
      "startTime": "1471912217973537",
      "endTime": "1471912219336320",
      "elapsedTime": "1362783",
      "asyncId": 522,
      "triggerAsyncId": 520,
      "io": false,
      "userCode": true,
      "line": "\n      event.dispatcher.on(event.step.before, setMetaStep);\n      try {\n        await fn(...fn.params);\n        step.status = 'passed';\n      } catch (err) {\n        step.status = 'failed'",
      "startLine": 51,
      "startCol": 15,
      "endLine": 51,
      "endCol": 15,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 156
    },
    "157": {
      "source": "test/unit/bdd_test.js:103:14:103:14",
      "startTime": "1471912218034952",
      "endTime": "1471912219300393",
      "elapsedTime": "1265441",
      "asyncId": 523,
      "triggerAsyncId": 520,
      "io": "",
      "userCode": true,
      "line": "\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', async () => {\n      return new Promise((checkoutDone) => {\n        sum += 10;\n        setTimeout(checkoutDone, 0);\n      })",
      "startLine": 103,
      "startCol": 14,
      "endLine": 103,
      "endCol": 14,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 157
    },
    "158": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912219498253",
      "endTime": "1471912219639668",
      "elapsedTime": "141415",
      "asyncId": 527,
      "triggerAsyncId": 511,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        528
      ],
      "uniqueid": 158
    },
    "159": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912219550351",
      "endTime": "1471912219801321",
      "elapsedTime": "250970",
      "asyncId": 528,
      "triggerAsyncId": 527,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        529
      ],
      "uniqueid": 159
    },
    "160": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912220107013",
      "endTime": "1471912220124306",
      "elapsedTime": "17293",
      "asyncId": 536,
      "triggerAsyncId": 534,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        540
      ],
      "uniqueid": 160
    },
    "161": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912223151526",
      "endTime": "1471912226098356",
      "elapsedTime": "2946830",
      "asyncId": 538,
      "triggerAsyncId": 534,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        546
      ],
      "uniqueid": 161
    },
    "162": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912223272292",
      "endTime": "1471912225899123",
      "elapsedTime": "2626831",
      "asyncId": 539,
      "triggerAsyncId": 534,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        544
      ],
      "uniqueid": 162
    },
    "163": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912223523463",
      "endTime": "1471912225864798",
      "elapsedTime": "2341335",
      "asyncId": 540,
      "triggerAsyncId": 536,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        541,
        548
      ],
      "uniqueid": 163
    },
    "164": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912223676890",
      "endTime": "1471912226080763",
      "elapsedTime": "2403873",
      "asyncId": 541,
      "triggerAsyncId": 540,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        542
      ],
      "uniqueid": 164
    },
    "165": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912223950372",
      "endTime": "1471912226403738",
      "elapsedTime": "2453366",
      "asyncId": 543,
      "triggerAsyncId": 542,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        550
      ],
      "uniqueid": 165
    },
    "166": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912224076589",
      "endTime": "1471912224212103",
      "elapsedTime": "135514",
      "asyncId": 544,
      "triggerAsyncId": 539,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        545
      ],
      "uniqueid": 166
    },
    "167": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912224190943",
      "endTime": "1471912225170248",
      "elapsedTime": "979305",
      "asyncId": 545,
      "triggerAsyncId": 544,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 167
    },
    "168": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912224338139",
      "endTime": "1471912226307057",
      "elapsedTime": "1968918",
      "asyncId": 546,
      "triggerAsyncId": 538,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        547
      ],
      "uniqueid": 168
    },
    "169": {
      "source": "test/unit/bdd_test.js:123:28:123:28",
      "startTime": "1471912224601873",
      "endTime": "1471912224619997",
      "elapsedTime": "18124",
      "asyncId": 548,
      "triggerAsyncId": 540,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 28,
      "endLine": 123,
      "endCol": 28,
      "file": "test/unit/bdd_test.js",
      "triggers": [
        549
      ],
      "uniqueid": 169
    },
    "170": {
      "source": "test/unit/bdd_test.js:123:38:123:38",
      "startTime": "1471912224680340",
      "endTime": "1471912225262771",
      "elapsedTime": "582431",
      "asyncId": 549,
      "triggerAsyncId": 548,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 38,
      "endLine": 123,
      "endCol": 38,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 170
    },
    "171": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912224816665",
      "endTime": "1471912226669496",
      "elapsedTime": "1852831",
      "asyncId": 550,
      "triggerAsyncId": 543,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        551,
        568
      ],
      "uniqueid": 171
    },
    "172": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912224900843",
      "endTime": "1471912226818044",
      "elapsedTime": "1917201",
      "asyncId": 551,
      "triggerAsyncId": 550,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        552
      ],
      "uniqueid": 172
    },
    "173": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912225045985",
      "endTime": "1471912226923351",
      "elapsedTime": "1877366",
      "asyncId": 553,
      "triggerAsyncId": 552,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        558
      ],
      "uniqueid": 173
    },
    "174": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912225511016",
      "endTime": "1471912227199468",
      "elapsedTime": "1688452",
      "asyncId": 558,
      "triggerAsyncId": 553,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        559,
        572
      ],
      "uniqueid": 174
    },
    "175": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912225598550",
      "endTime": "1471912227347886",
      "elapsedTime": "1749336",
      "asyncId": 559,
      "triggerAsyncId": 558,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        560
      ],
      "uniqueid": 175
    },
    "176": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912225727481",
      "endTime": "1471912227446561",
      "elapsedTime": "1719080",
      "asyncId": 561,
      "triggerAsyncId": 560,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        564
      ],
      "uniqueid": 176
    },
    "177": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912226183686",
      "endTime": "1471912227477840",
      "elapsedTime": "1294154",
      "asyncId": 564,
      "triggerAsyncId": 561,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        565
      ],
      "uniqueid": 177
    },
    "178": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912226232738",
      "endTime": "1471912227594408",
      "elapsedTime": "1361670",
      "asyncId": 565,
      "triggerAsyncId": 564,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        566
      ],
      "uniqueid": 178
    },
    "179": {
      "source": "test/unit/bdd_test.js:123:28:123:28",
      "startTime": "1471912226499197",
      "endTime": "1471912226515257",
      "elapsedTime": "16060",
      "asyncId": 568,
      "triggerAsyncId": 550,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 28,
      "endLine": 123,
      "endCol": 28,
      "file": "test/unit/bdd_test.js",
      "triggers": [
        569
      ],
      "uniqueid": 179
    },
    "180": {
      "source": "test/unit/bdd_test.js:123:38:123:38",
      "startTime": "1471912226570951",
      "endTime": "1471912226605586",
      "elapsedTime": "34635",
      "asyncId": 569,
      "triggerAsyncId": 568,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 38,
      "endLine": 123,
      "endCol": 38,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 180
    },
    "181": {
      "source": "test/unit/bdd_test.js:123:28:123:28",
      "startTime": "1471912227022798",
      "endTime": "1471912227039369",
      "elapsedTime": "16571",
      "asyncId": 572,
      "triggerAsyncId": 558,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 28,
      "endLine": 123,
      "endCol": 28,
      "file": "test/unit/bdd_test.js",
      "triggers": [
        573
      ],
      "uniqueid": 181
    },
    "182": {
      "source": "test/unit/bdd_test.js:123:38:123:38",
      "startTime": "1471912227094752",
      "endTime": "1471912227129097",
      "elapsedTime": "34345",
      "asyncId": 573,
      "triggerAsyncId": 572,
      "io": false,
      "userCode": true,
      "line": "\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      }",
      "startLine": 123,
      "startCol": 38,
      "endLine": 123,
      "endCol": 38,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 182
    },
    "183": {
      "source": "test/unit/bdd_test.js:138:26:138:26",
      "startTime": "1471912227577667",
      "endTime": "1471912227974600",
      "elapsedTime": "396933",
      "asyncId": 576,
      "triggerAsyncId": 566,
      "io": "",
      "userCode": true,
      "line": "\n    const suite = run(text);\n    suite.tests[0].fn(() => {\n      recorder.promise().then(() => {\n        printed.should.include.members([\n          'add 600',\n          'add 1600'",
      "startLine": 138,
      "startCol": 26,
      "endLine": 138,
      "endCol": 26,
      "file": "test/unit/bdd_test.js",
      "triggers": [],
      "uniqueid": 183
    },
    "184": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912228262500",
      "endTime": "1471912228279762",
      "elapsedTime": "17262",
      "asyncId": 583,
      "triggerAsyncId": 581,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        589
      ],
      "uniqueid": 184
    },
    "185": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912229275587",
      "endTime": "1471912229292950",
      "elapsedTime": "17363",
      "asyncId": 590,
      "triggerAsyncId": 588,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        599
      ],
      "uniqueid": 185
    },
    "186": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912229950892",
      "endTime": "1471912230815812",
      "elapsedTime": "864920",
      "asyncId": 592,
      "triggerAsyncId": 588,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        596
      ],
      "uniqueid": 186
    },
    "187": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912230075405",
      "endTime": "1471912230733798",
      "elapsedTime": "658393",
      "asyncId": 593,
      "triggerAsyncId": 588,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        594
      ],
      "uniqueid": 187
    },
    "188": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912230297341",
      "endTime": "1471912230426814",
      "elapsedTime": "129473",
      "asyncId": 594,
      "triggerAsyncId": 593,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        595
      ],
      "uniqueid": 188
    },
    "189": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912230408940",
      "endTime": "1471912230747745",
      "elapsedTime": "338805",
      "asyncId": 595,
      "triggerAsyncId": 594,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 189
    },
    "190": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912230553501",
      "endTime": "1471912231009675",
      "elapsedTime": "456174",
      "asyncId": 596,
      "triggerAsyncId": 592,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        597
      ],
      "uniqueid": 190
    },
    "191": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912230881836",
      "endTime": "1471912231032368",
      "elapsedTime": "150532",
      "asyncId": 599,
      "triggerAsyncId": 590,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        600
      ],
      "uniqueid": 191
    },
    "192": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912230933002",
      "endTime": "1471912231254854",
      "elapsedTime": "321852",
      "asyncId": 600,
      "triggerAsyncId": 599,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        601
      ],
      "uniqueid": 192
    },
    "193": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912231553233",
      "endTime": "1471912231569855",
      "elapsedTime": "16622",
      "asyncId": 608,
      "triggerAsyncId": 606,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        614
      ],
      "uniqueid": 193
    },
    "194": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912233472979",
      "endTime": "1471912233490312",
      "elapsedTime": "17333",
      "asyncId": 615,
      "triggerAsyncId": 613,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        616
      ],
      "uniqueid": 194
    },
    "195": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912234556609",
      "endTime": "1471912237262327",
      "elapsedTime": "2705718",
      "asyncId": 617,
      "triggerAsyncId": 616,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 195
    },
    "196": {
      "source": "lib/scenario.js:137:10:137:10",
      "startTime": "1471912235006802",
      "endTime": "1471912237277706",
      "elapsedTime": "2270904",
      "asyncId": 618,
      "triggerAsyncId": 613,
      "io": "",
      "userCode": true,
      "line": "\n\n    if (isAsyncFunction(fn)) {\n      fn.call(this, getInjectedArguments(fn)).then(() => {\n        recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n        recorder.add(`finish ${hookName} hook`, () => done());\n        recorder.catch()",
      "startLine": 137,
      "startCol": 10,
      "endLine": 137,
      "endCol": 10,
      "file": "lib/scenario.js",
      "triggers": [
        622
      ],
      "uniqueid": 196
    },
    "197": {
      "source": "lib/interfaces/gherkin.js:67:64:67:64",
      "startTime": "1471912235142927",
      "endTime": "1471912237054849",
      "elapsedTime": "1911922",
      "asyncId": 619,
      "triggerAsyncId": 613,
      "io": "",
      "userCode": true,
      "line": "\n  for (const child of ast.feature.children) {\n    if (child.type === 'Background') {\n      suite.beforeEach('Before', scenario.injected(async () => runSteps(child.steps), suite, 'before'));\n      continue;\n    }\n    if (child.type === 'ScenarioOutline') ",
      "startLine": 67,
      "startCol": 64,
      "endLine": 67,
      "endCol": 64,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        620,
        632
      ],
      "uniqueid": 197
    },
    "198": {
      "source": "lib/interfaces/gherkin.js:67:64:67:64",
      "startTime": "1471912235387215",
      "endTime": "1471912235545331",
      "elapsedTime": "158116",
      "asyncId": 620,
      "triggerAsyncId": 619,
      "io": "",
      "userCode": true,
      "line": "\n  for (const child of ast.feature.children) {\n    if (child.type === 'Background') {\n      suite.beforeEach('Before', scenario.injected(async () => runSteps(child.steps), suite, 'before'));\n      continue;\n    }\n    if (child.type === 'ScenarioOutline') ",
      "startLine": 67,
      "startCol": 64,
      "endLine": 67,
      "endCol": 64,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        621
      ],
      "uniqueid": 198
    },
    "199": {
      "source": "lib/interfaces/gherkin.js:67:64:67:64",
      "startTime": "1471912235524402",
      "endTime": "1471912237069656",
      "elapsedTime": "1545254",
      "asyncId": 621,
      "triggerAsyncId": 620,
      "io": "",
      "userCode": true,
      "line": "\n  for (const child of ast.feature.children) {\n    if (child.type === 'Background') {\n      suite.beforeEach('Before', scenario.injected(async () => runSteps(child.steps), suite, 'before'));\n      continue;\n    }\n    if (child.type === 'ScenarioOutline') ",
      "startLine": 67,
      "startCol": 64,
      "endLine": 67,
      "endCol": 64,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 199
    },
    "200": {
      "source": "lib/scenario.js:137:47:137:47",
      "startTime": "1471912235688379",
      "endTime": "1471912237557670",
      "elapsedTime": "1869291",
      "asyncId": 622,
      "triggerAsyncId": 618,
      "io": "",
      "userCode": true,
      "line": "\n\n    if (isAsyncFunction(fn)) {\n      fn.call(this, getInjectedArguments(fn)).then(() => {\n        recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n        recorder.add(`finish ${hookName} hook`, () => done());\n        recorder.catch()",
      "startLine": 137,
      "startCol": 47,
      "endLine": 137,
      "endCol": 47,
      "file": "lib/scenario.js",
      "triggers": [
        623
      ],
      "uniqueid": 200
    },
    "201": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912236098798",
      "endTime": "1471912237305187",
      "elapsedTime": "1206389",
      "asyncId": 624,
      "triggerAsyncId": 613,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        628
      ],
      "uniqueid": 201
    },
    "202": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912236217921",
      "endTime": "1471912237149375",
      "elapsedTime": "931454",
      "asyncId": 625,
      "triggerAsyncId": 613,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        626,
        633
      ],
      "uniqueid": 202
    },
    "203": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912236496703",
      "endTime": "1471912236632858",
      "elapsedTime": "136155",
      "asyncId": 626,
      "triggerAsyncId": 625,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        627
      ],
      "uniqueid": 203
    },
    "204": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912236613251",
      "endTime": "1471912237163963",
      "elapsedTime": "550712",
      "asyncId": 627,
      "triggerAsyncId": 626,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 204
    },
    "205": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912236764294",
      "endTime": "1471912237749800",
      "elapsedTime": "985506",
      "asyncId": 628,
      "triggerAsyncId": 624,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        629
      ],
      "uniqueid": 205
    },
    "206": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912237420764",
      "endTime": "1471912237793813",
      "elapsedTime": "373049",
      "asyncId": 634,
      "triggerAsyncId": 616,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        635
      ],
      "uniqueid": 206
    },
    "207": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912237479444",
      "endTime": "1471912237866048",
      "elapsedTime": "386604",
      "asyncId": 635,
      "triggerAsyncId": 634,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        636
      ],
      "uniqueid": 207
    },
    "208": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912237616781",
      "endTime": "1471912237901845",
      "elapsedTime": "285064",
      "asyncId": 637,
      "triggerAsyncId": 636,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        638
      ],
      "uniqueid": 208
    },
    "209": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912237674870",
      "endTime": "1471912237916653",
      "elapsedTime": "241783",
      "asyncId": 638,
      "triggerAsyncId": 637,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        639
      ],
      "uniqueid": 209
    },
    "210": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912238222055",
      "endTime": "1471912238238315",
      "elapsedTime": "16260",
      "asyncId": 644,
      "triggerAsyncId": 642,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        657
      ],
      "uniqueid": 210
    },
    "211": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912240436573",
      "endTime": "1471912242520877",
      "elapsedTime": "2084304",
      "asyncId": 646,
      "triggerAsyncId": 642,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        650
      ],
      "uniqueid": 211
    },
    "212": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1471912240678947",
      "endTime": "1471912242492524",
      "elapsedTime": "1813577",
      "asyncId": 647,
      "triggerAsyncId": 642,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        648
      ],
      "uniqueid": 212
    },
    "213": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1471912240999217",
      "endTime": "1471912241143908",
      "elapsedTime": "144691",
      "asyncId": 648,
      "triggerAsyncId": 647,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        649
      ],
      "uniqueid": 213
    },
    "214": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1471912241125443",
      "endTime": "1471912241842927",
      "elapsedTime": "717484",
      "asyncId": 649,
      "triggerAsyncId": 648,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 214
    },
    "215": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912241276216",
      "endTime": "1471912242725200",
      "elapsedTime": "1448984",
      "asyncId": 650,
      "triggerAsyncId": 646,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        651
      ],
      "uniqueid": 215
    },
    "216": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912242600205",
      "endTime": "1471912242747521",
      "elapsedTime": "147316",
      "asyncId": 657,
      "triggerAsyncId": 644,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        658
      ],
      "uniqueid": 216
    },
    "217": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912242655890",
      "endTime": "1471912243574210",
      "elapsedTime": "918320",
      "asyncId": 658,
      "triggerAsyncId": 657,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        659,
        660,
        661
      ],
      "uniqueid": 217
    },
    "218": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912243063684",
      "endTime": "1471912244422329",
      "elapsedTime": "1358645",
      "asyncId": 660,
      "triggerAsyncId": 658,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        664
      ],
      "uniqueid": 218
    },
    "219": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1471912243147801",
      "endTime": "1471912244395679",
      "elapsedTime": "1247878",
      "asyncId": 661,
      "triggerAsyncId": 658,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        662
      ],
      "uniqueid": 219
    },
    "220": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1471912243332217",
      "endTime": "1471912243423959",
      "elapsedTime": "91742",
      "asyncId": 662,
      "triggerAsyncId": 661,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        663
      ],
      "uniqueid": 220
    },
    "221": {
      "source": "lib/interfaces/gherkin.js:88:52:88:52",
      "startTime": "1471912243404672",
      "endTime": "1471912243863402",
      "elapsedTime": "458730",
      "asyncId": 663,
      "triggerAsyncId": 662,
      "io": "",
      "userCode": true,
      "line": "\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        ",
      "startLine": 88,
      "startCol": 52,
      "endLine": 88,
      "endCol": 52,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 221
    },
    "222": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912243497196",
      "endTime": "1471912244626861",
      "elapsedTime": "1129665",
      "asyncId": 664,
      "triggerAsyncId": 660,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        665
      ],
      "uniqueid": 222
    },
    "223": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912244494203",
      "endTime": "1471912244650536",
      "elapsedTime": "156333",
      "asyncId": 671,
      "triggerAsyncId": 659,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        672
      ],
      "uniqueid": 223
    },
    "224": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912244549537",
      "endTime": "1471912244809964",
      "elapsedTime": "260427",
      "asyncId": 672,
      "triggerAsyncId": 671,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        673
      ],
      "uniqueid": 224
    },
    "225": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912245107542",
      "endTime": "1471912245124544",
      "elapsedTime": "17002",
      "asyncId": 680,
      "triggerAsyncId": 678,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        691
      ],
      "uniqueid": 225
    },
    "226": {
      "source": "lib/scenario.js:78:14:78:14",
      "startTime": "1471912246089641",
      "endTime": "1471912247434210",
      "elapsedTime": "1344569",
      "asyncId": 682,
      "triggerAsyncId": 678,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 14,
      "endLine": 78,
      "endCol": 14,
      "file": "lib/scenario.js",
      "triggers": [
        686
      ],
      "uniqueid": 226
    },
    "227": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912246210969",
      "endTime": "1471912247399205",
      "elapsedTime": "1188236",
      "asyncId": 683,
      "triggerAsyncId": 678,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        684
      ],
      "uniqueid": 227
    },
    "228": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912246574059",
      "endTime": "1471912246710725",
      "elapsedTime": "136666",
      "asyncId": 684,
      "triggerAsyncId": 683,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [
        685
      ],
      "uniqueid": 228
    },
    "229": {
      "source": "lib/interfaces/gherkin.js:97:46:97:46",
      "startTime": "1471912246691499",
      "endTime": "1471912247314827",
      "elapsedTime": "623328",
      "asyncId": 685,
      "triggerAsyncId": 684,
      "io": "",
      "userCode": true,
      "line": "\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  ",
      "startLine": 97,
      "startCol": 46,
      "endLine": 97,
      "endCol": 46,
      "file": "lib/interfaces/gherkin.js",
      "triggers": [],
      "uniqueid": 229
    },
    "230": {
      "source": "lib/scenario.js:78:44:78:44",
      "startTime": "1471912246839677",
      "endTime": "1471912247656567",
      "elapsedTime": "816890",
      "asyncId": 686,
      "triggerAsyncId": 682,
      "io": false,
      "userCode": true,
      "line": "\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test)",
      "startLine": 78,
      "startCol": 44,
      "endLine": 78,
      "endCol": 44,
      "file": "lib/scenario.js",
      "triggers": [
        687
      ],
      "uniqueid": 230
    },
    "231": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912247526503",
      "endTime": "1471912247679239",
      "elapsedTime": "152736",
      "asyncId": 691,
      "triggerAsyncId": 680,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        692
      ],
      "uniqueid": 231
    },
    "232": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912247587607",
      "endTime": "1471912247921924",
      "elapsedTime": "334317",
      "asyncId": 692,
      "triggerAsyncId": 691,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        693
      ],
      "uniqueid": 232
    },
    "233": {
      "source": "lib/data/dataScenarioConfig.js:52:49:52:49",
      "startTime": "1471912269099471",
      "endTime": "1471912269138695",
      "elapsedTime": "39224",
      "asyncId": 987,
      "triggerAsyncId": 986,
      "io": "",
      "userCode": true,
      "line": "\n     */\n  config(helper, obj) {\n    this.scenarios.forEach(scenario => scenario.config(helper, obj));\n    return this;\n  }",
      "startLine": 52,
      "startCol": 49,
      "endLine": 52,
      "endCol": 49,
      "file": "lib/data/dataScenarioConfig.js",
      "triggers": [],
      "uniqueid": 233
    },
    "234": {
      "source": "lib/data/dataScenarioConfig.js:52:49:52:49",
      "startTime": "1471912269245134",
      "endTime": "1471912269265202",
      "elapsedTime": "20068",
      "asyncId": 988,
      "triggerAsyncId": 986,
      "io": "",
      "userCode": true,
      "line": "\n     */\n  config(helper, obj) {\n    this.scenarios.forEach(scenario => scenario.config(helper, obj));\n    return this;\n  }",
      "startLine": 52,
      "startCol": 49,
      "endLine": 52,
      "endCol": 49,
      "file": "lib/data/dataScenarioConfig.js",
      "triggers": [],
      "uniqueid": 234
    },
    "235": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912344196285",
      "endTime": "1471912344216463",
      "elapsedTime": "20178",
      "asyncId": 1331,
      "triggerAsyncId": 1328,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1333
      ],
      "uniqueid": 235
    },
    "236": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912344690201",
      "endTime": "1471912345090360",
      "elapsedTime": "400159",
      "asyncId": 1333,
      "triggerAsyncId": 1331,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1334
      ],
      "uniqueid": 236
    },
    "237": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912344879184",
      "endTime": "1471912349575692",
      "elapsedTime": "4696508",
      "asyncId": 1334,
      "triggerAsyncId": 1333,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1337,
        1338,
        1339,
        1357
      ],
      "uniqueid": 237
    },
    "238": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912345238668",
      "endTime": "1471912349544182",
      "elapsedTime": "4305514",
      "asyncId": 1338,
      "triggerAsyncId": 1334,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1342
      ],
      "uniqueid": 238
    },
    "239": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912345314520",
      "endTime": "1471912345330630",
      "elapsedTime": "16110",
      "asyncId": 1339,
      "triggerAsyncId": 1334,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1340
      ],
      "uniqueid": 239
    },
    "240": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912345399238",
      "endTime": "1471912345624931",
      "elapsedTime": "225693",
      "asyncId": 1340,
      "triggerAsyncId": 1339,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1341
      ],
      "uniqueid": 240
    },
    "241": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912345466284",
      "endTime": "1471912345729136",
      "elapsedTime": "262852",
      "asyncId": 1341,
      "triggerAsyncId": 1340,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 241
    },
    "242": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912350101847",
      "endTime": "1471912350119821",
      "elapsedTime": "17974",
      "asyncId": 1359,
      "triggerAsyncId": 1356,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1361
      ],
      "uniqueid": 242
    },
    "243": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912350454688",
      "endTime": "1471912351130283",
      "elapsedTime": "675595",
      "asyncId": 1361,
      "triggerAsyncId": 1359,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1362
      ],
      "uniqueid": 243
    },
    "244": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912350581265",
      "endTime": "1471912351145292",
      "elapsedTime": "564027",
      "asyncId": 1362,
      "triggerAsyncId": 1361,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1363
      ],
      "uniqueid": 244
    },
    "245": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912350824581",
      "endTime": "1471912354072094",
      "elapsedTime": "3247513",
      "asyncId": 1363,
      "triggerAsyncId": 1362,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1364,
        1368
      ],
      "uniqueid": 245
    },
    "246": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912350927373",
      "endTime": "1471912354189454",
      "elapsedTime": "3262081",
      "asyncId": 1364,
      "triggerAsyncId": 1363,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 246
    },
    "247": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1471912351409066",
      "endTime": "1471912351427420",
      "elapsedTime": "18354",
      "asyncId": 1368,
      "triggerAsyncId": 1363,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1369
      ],
      "uniqueid": 247
    },
    "248": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912351562483",
      "endTime": "1471912353907666",
      "elapsedTime": "2345183",
      "asyncId": 1369,
      "triggerAsyncId": 1368,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1370,
        1373,
        1374
      ],
      "uniqueid": 248
    },
    "249": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912351816068",
      "endTime": "1471912354046646",
      "elapsedTime": "2230578",
      "asyncId": 1371,
      "triggerAsyncId": 1370,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1372,
        1384
      ],
      "uniqueid": 249
    },
    "250": {
      "source": "lib/within.js:66:31:66:31",
      "startTime": "1471912351878254",
      "endTime": "1471912354059720",
      "elapsedTime": "2181466",
      "asyncId": 1372,
      "triggerAsyncId": 1371,
      "io": "",
      "userCode": true,
      "line": "\n    }\n    finalize();\n    return recorder.promise().then(() => res);\n  }, false, false);\n}",
      "startLine": 66,
      "startCol": 31,
      "endLine": 66,
      "endCol": 31,
      "file": "lib/within.js",
      "triggers": [
        1377
      ],
      "uniqueid": 250
    },
    "251": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912351967762",
      "endTime": "1471912353881857",
      "elapsedTime": "1914095",
      "asyncId": 1373,
      "triggerAsyncId": 1369,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1378
      ],
      "uniqueid": 251
    },
    "252": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912352047451",
      "endTime": "1471912352067148",
      "elapsedTime": "19697",
      "asyncId": 1374,
      "triggerAsyncId": 1369,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1375
      ],
      "uniqueid": 252
    },
    "253": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912352138341",
      "endTime": "1471912352363453",
      "elapsedTime": "225112",
      "asyncId": 1375,
      "triggerAsyncId": 1374,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1376
      ],
      "uniqueid": 253
    },
    "254": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912352206299",
      "endTime": "1471912352446248",
      "elapsedTime": "239949",
      "asyncId": 1376,
      "triggerAsyncId": 1375,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 254
    },
    "255": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912354723875",
      "endTime": "1471912354742950",
      "elapsedTime": "19075",
      "asyncId": 1391,
      "triggerAsyncId": 1388,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1393
      ],
      "uniqueid": 255
    },
    "256": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912355103195",
      "endTime": "1471912355767389",
      "elapsedTime": "664194",
      "asyncId": 1393,
      "triggerAsyncId": 1391,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1394
      ],
      "uniqueid": 256
    },
    "257": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912355239330",
      "endTime": "1471912355782137",
      "elapsedTime": "542807",
      "asyncId": 1394,
      "triggerAsyncId": 1393,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1395
      ],
      "uniqueid": 257
    },
    "258": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912355370806",
      "endTime": "1471912355796183",
      "elapsedTime": "425377",
      "asyncId": 1395,
      "triggerAsyncId": 1394,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1396
      ],
      "uniqueid": 258
    },
    "259": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912355493436",
      "endTime": "1471912356282234",
      "elapsedTime": "788798",
      "asyncId": 1396,
      "triggerAsyncId": 1395,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1397,
        1400,
        1401,
        1405
      ],
      "uniqueid": 259
    },
    "260": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912355594365",
      "endTime": "1471912356397299",
      "elapsedTime": "802934",
      "asyncId": 1397,
      "triggerAsyncId": 1396,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 260
    },
    "261": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912355874951",
      "endTime": "1471912356257477",
      "elapsedTime": "382526",
      "asyncId": 1400,
      "triggerAsyncId": 1396,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1404
      ],
      "uniqueid": 261
    },
    "262": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912355951464",
      "endTime": "1471912355967273",
      "elapsedTime": "15809",
      "asyncId": 1401,
      "triggerAsyncId": 1396,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1402
      ],
      "uniqueid": 262
    },
    "263": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912356043055",
      "endTime": "1471912356191063",
      "elapsedTime": "148008",
      "asyncId": 1402,
      "triggerAsyncId": 1401,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1403
      ],
      "uniqueid": 263
    },
    "264": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912356117735",
      "endTime": "1471912356269800",
      "elapsedTime": "152065",
      "asyncId": 1403,
      "triggerAsyncId": 1402,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 264
    },
    "265": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912356891885",
      "endTime": "1471912356908647",
      "elapsedTime": "16762",
      "asyncId": 1413,
      "triggerAsyncId": 1410,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1415
      ],
      "uniqueid": 265
    },
    "266": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912357255256",
      "endTime": "1471912358017213",
      "elapsedTime": "761957",
      "asyncId": 1415,
      "triggerAsyncId": 1413,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1416
      ],
      "uniqueid": 266
    },
    "267": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912357381002",
      "endTime": "1471912358033274",
      "elapsedTime": "652272",
      "asyncId": 1416,
      "triggerAsyncId": 1415,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1417
      ],
      "uniqueid": 267
    },
    "268": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912357503161",
      "endTime": "1471912358047590",
      "elapsedTime": "544429",
      "asyncId": 1417,
      "triggerAsyncId": 1416,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1418
      ],
      "uniqueid": 268
    },
    "269": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912357628415",
      "endTime": "1471912358061707",
      "elapsedTime": "433292",
      "asyncId": 1418,
      "triggerAsyncId": 1417,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1419
      ],
      "uniqueid": 269
    },
    "270": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912357744402",
      "endTime": "1471912358539923",
      "elapsedTime": "795521",
      "asyncId": 1419,
      "triggerAsyncId": 1418,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1420,
        1423,
        1424,
        1428
      ],
      "uniqueid": 270
    },
    "271": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912357843768",
      "endTime": "1471912358657212",
      "elapsedTime": "813444",
      "asyncId": 1420,
      "triggerAsyncId": 1419,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 271
    },
    "272": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912358138821",
      "endTime": "1471912358514004",
      "elapsedTime": "375183",
      "asyncId": 1423,
      "triggerAsyncId": 1419,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1427
      ],
      "uniqueid": 272
    },
    "273": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912358214693",
      "endTime": "1471912358230693",
      "elapsedTime": "16000",
      "asyncId": 1424,
      "triggerAsyncId": 1419,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1425
      ],
      "uniqueid": 273
    },
    "274": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912358299272",
      "endTime": "1471912358447479",
      "elapsedTime": "148207",
      "asyncId": 1425,
      "triggerAsyncId": 1424,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1426
      ],
      "uniqueid": 274
    },
    "275": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912358373531",
      "endTime": "1471912358526808",
      "elapsedTime": "153277",
      "asyncId": 1426,
      "triggerAsyncId": 1425,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 275
    },
    "276": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912359158341",
      "endTime": "1471912359176114",
      "elapsedTime": "17773",
      "asyncId": 1436,
      "triggerAsyncId": 1433,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1438
      ],
      "uniqueid": 276
    },
    "277": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912359522292",
      "endTime": "1471912360422789",
      "elapsedTime": "900497",
      "asyncId": 1438,
      "triggerAsyncId": 1436,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1439
      ],
      "uniqueid": 277
    },
    "278": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912359649882",
      "endTime": "1471912360438088",
      "elapsedTime": "788206",
      "asyncId": 1439,
      "triggerAsyncId": 1438,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1440
      ],
      "uniqueid": 278
    },
    "279": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912359773663",
      "endTime": "1471912360452605",
      "elapsedTime": "678942",
      "asyncId": 1440,
      "triggerAsyncId": 1439,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1441
      ],
      "uniqueid": 279
    },
    "280": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912359895271",
      "endTime": "1471912360466151",
      "elapsedTime": "570880",
      "asyncId": 1441,
      "triggerAsyncId": 1440,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1442
      ],
      "uniqueid": 280
    },
    "281": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912360028491",
      "endTime": "1471912360479836",
      "elapsedTime": "451345",
      "asyncId": 1442,
      "triggerAsyncId": 1441,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1443
      ],
      "uniqueid": 281
    },
    "282": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912360151311",
      "endTime": "1471912361022522",
      "elapsedTime": "871211",
      "asyncId": 1443,
      "triggerAsyncId": 1442,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1444,
        1447,
        1448,
        1452
      ],
      "uniqueid": 282
    },
    "283": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912360251809",
      "endTime": "1471912361135324",
      "elapsedTime": "883515",
      "asyncId": 1444,
      "triggerAsyncId": 1443,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 283
    },
    "284": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912360563112",
      "endTime": "1471912360978139",
      "elapsedTime": "415027",
      "asyncId": 1447,
      "triggerAsyncId": 1443,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1451
      ],
      "uniqueid": 284
    },
    "285": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912360654423",
      "endTime": "1471912360673509",
      "elapsedTime": "19086",
      "asyncId": 1448,
      "triggerAsyncId": 1443,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1449
      ],
      "uniqueid": 285
    },
    "286": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912360757105",
      "endTime": "1471912360909421",
      "elapsedTime": "152316",
      "asyncId": 1449,
      "triggerAsyncId": 1448,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1450
      ],
      "uniqueid": 286
    },
    "287": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912360832938",
      "endTime": "1471912360991364",
      "elapsedTime": "158426",
      "asyncId": 1450,
      "triggerAsyncId": 1449,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 287
    },
    "288": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912361635962",
      "endTime": "1471912361654997",
      "elapsedTime": "19035",
      "asyncId": 1460,
      "triggerAsyncId": 1457,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1462
      ],
      "uniqueid": 288
    },
    "289": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912361999773",
      "endTime": "1471912363024943",
      "elapsedTime": "1025170",
      "asyncId": 1462,
      "triggerAsyncId": 1460,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1463
      ],
      "uniqueid": 289
    },
    "290": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912362132281",
      "endTime": "1471912363040422",
      "elapsedTime": "908141",
      "asyncId": 1463,
      "triggerAsyncId": 1462,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1464
      ],
      "uniqueid": 290
    },
    "291": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912362255191",
      "endTime": "1471912363054479",
      "elapsedTime": "799288",
      "asyncId": 1464,
      "triggerAsyncId": 1463,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1465
      ],
      "uniqueid": 291
    },
    "292": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912362376389",
      "endTime": "1471912363068515",
      "elapsedTime": "692126",
      "asyncId": 1465,
      "triggerAsyncId": 1464,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1466
      ],
      "uniqueid": 292
    },
    "293": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912362498417",
      "endTime": "1471912363081850",
      "elapsedTime": "583433",
      "asyncId": 1466,
      "triggerAsyncId": 1465,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1467
      ],
      "uniqueid": 293
    },
    "294": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912362622950",
      "endTime": "1471912363094844",
      "elapsedTime": "471894",
      "asyncId": 1467,
      "triggerAsyncId": 1466,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1468
      ],
      "uniqueid": 294
    },
    "295": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912362746452",
      "endTime": "1471912363589341",
      "elapsedTime": "842889",
      "asyncId": 1468,
      "triggerAsyncId": 1467,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1469,
        1472,
        1473,
        1477
      ],
      "uniqueid": 295
    },
    "296": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912362848543",
      "endTime": "1471912363729243",
      "elapsedTime": "880700",
      "asyncId": 1469,
      "triggerAsyncId": 1468,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 296
    },
    "297": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912363172069",
      "endTime": "1471912363557681",
      "elapsedTime": "385612",
      "asyncId": 1472,
      "triggerAsyncId": 1468,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1476
      ],
      "uniqueid": 297
    },
    "298": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912363249854",
      "endTime": "1471912363265694",
      "elapsedTime": "15840",
      "asyncId": 1473,
      "triggerAsyncId": 1468,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1474
      ],
      "uniqueid": 298
    },
    "299": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912363338270",
      "endTime": "1471912363485436",
      "elapsedTime": "147166",
      "asyncId": 1474,
      "triggerAsyncId": 1473,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1475
      ],
      "uniqueid": 299
    },
    "300": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912363411668",
      "endTime": "1471912363573411",
      "elapsedTime": "161743",
      "asyncId": 1475,
      "triggerAsyncId": 1474,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 300
    },
    "301": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912364234890",
      "endTime": "1471912364252723",
      "elapsedTime": "17833",
      "asyncId": 1485,
      "triggerAsyncId": 1482,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1487
      ],
      "uniqueid": 301
    },
    "302": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912364584945",
      "endTime": "1471912366071750",
      "elapsedTime": "1486805",
      "asyncId": 1487,
      "triggerAsyncId": 1485,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1488
      ],
      "uniqueid": 302
    },
    "303": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912364710461",
      "endTime": "1471912366086939",
      "elapsedTime": "1376478",
      "asyncId": 1488,
      "triggerAsyncId": 1487,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1489
      ],
      "uniqueid": 303
    },
    "304": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912364833982",
      "endTime": "1471912366101005",
      "elapsedTime": "1267023",
      "asyncId": 1489,
      "triggerAsyncId": 1488,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1490
      ],
      "uniqueid": 304
    },
    "305": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912364955159",
      "endTime": "1471912366114811",
      "elapsedTime": "1159652",
      "asyncId": 1490,
      "triggerAsyncId": 1489,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1491
      ],
      "uniqueid": 305
    },
    "306": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912365084140",
      "endTime": "1471912366128226",
      "elapsedTime": "1044086",
      "asyncId": 1491,
      "triggerAsyncId": 1490,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1492
      ],
      "uniqueid": 306
    },
    "307": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912365209405",
      "endTime": "1471912366141671",
      "elapsedTime": "932266",
      "asyncId": 1492,
      "triggerAsyncId": 1491,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1493
      ],
      "uniqueid": 307
    },
    "308": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912365331604",
      "endTime": "1471912366154896",
      "elapsedTime": "823292",
      "asyncId": 1493,
      "triggerAsyncId": 1492,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1494
      ],
      "uniqueid": 308
    },
    "309": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912365674656",
      "endTime": "1471912366895133",
      "elapsedTime": "1220477",
      "asyncId": 1494,
      "triggerAsyncId": 1493,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1495,
        1499,
        1500
      ],
      "uniqueid": 309
    },
    "310": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912365795022",
      "endTime": "1471912370502379",
      "elapsedTime": "4707357",
      "asyncId": 1495,
      "triggerAsyncId": 1494,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1496,
        1507,
        1509
      ],
      "uniqueid": 310
    },
    "311": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912365894548",
      "endTime": "1471912370617485",
      "elapsedTime": "4722937",
      "asyncId": 1496,
      "triggerAsyncId": 1495,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 311
    },
    "312": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912366229826",
      "endTime": "1471912366870456",
      "elapsedTime": "640630",
      "asyncId": 1499,
      "triggerAsyncId": 1494,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1506
      ],
      "uniqueid": 312
    },
    "313": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912366307862",
      "endTime": "1471912366323883",
      "elapsedTime": "16021",
      "asyncId": 1500,
      "triggerAsyncId": 1494,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1501
      ],
      "uniqueid": 313
    },
    "314": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912366393543",
      "endTime": "1471912366776520",
      "elapsedTime": "382977",
      "asyncId": 1501,
      "triggerAsyncId": 1500,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1502,
        1503
      ],
      "uniqueid": 314
    },
    "315": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912366471188",
      "endTime": "1471912366882649",
      "elapsedTime": "411461",
      "asyncId": 1502,
      "triggerAsyncId": 1501,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 315
    },
    "316": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912366592486",
      "endTime": "1471912366844427",
      "elapsedTime": "251941",
      "asyncId": 1503,
      "triggerAsyncId": 1501,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        1504
      ],
      "uniqueid": 316
    },
    "317": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912366682194",
      "endTime": "1471912366763356",
      "elapsedTime": "81162",
      "asyncId": 1504,
      "triggerAsyncId": 1503,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        1505
      ],
      "uniqueid": 317
    },
    "318": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912366744551",
      "endTime": "1471912366857141",
      "elapsedTime": "112590",
      "asyncId": 1505,
      "triggerAsyncId": 1504,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 318
    },
    "319": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912367087483",
      "endTime": "1471912370478134",
      "elapsedTime": "3390651",
      "asyncId": 1507,
      "triggerAsyncId": 1495,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1520
      ],
      "uniqueid": 319
    },
    "320": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1471912367211826",
      "endTime": "1471912367229118",
      "elapsedTime": "17292",
      "asyncId": 1509,
      "triggerAsyncId": 1495,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1510
      ],
      "uniqueid": 320
    },
    "321": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912367297777",
      "endTime": "1471912368237687",
      "elapsedTime": "939910",
      "asyncId": 1510,
      "triggerAsyncId": 1509,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1511,
        1515,
        1516
      ],
      "uniqueid": 321
    },
    "322": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912367406851",
      "endTime": "1471912370317092",
      "elapsedTime": "2910241",
      "asyncId": 1511,
      "triggerAsyncId": 1510,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1512,
        1522,
        1523
      ],
      "uniqueid": 322
    },
    "323": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912367589463",
      "endTime": "1471912370451474",
      "elapsedTime": "2862011",
      "asyncId": 1513,
      "triggerAsyncId": 1512,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1514,
        1532
      ],
      "uniqueid": 323
    },
    "324": {
      "source": "lib/session.js:128:31:128:31",
      "startTime": "1471912367649656",
      "endTime": "1471912370464969",
      "elapsedTime": "2815313",
      "asyncId": 1514,
      "triggerAsyncId": 1513,
      "io": "",
      "userCode": true,
      "line": "\n    }\n    finalize();\n    return recorder.promise().then(() => res);\n  }, false, false);\n}",
      "startLine": 128,
      "startCol": 31,
      "endLine": 128,
      "endCol": 31,
      "file": "lib/session.js",
      "triggers": [
        1519
      ],
      "uniqueid": 324
    },
    "325": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912367747158",
      "endTime": "1471912368212610",
      "elapsedTime": "465452",
      "asyncId": 1515,
      "triggerAsyncId": 1510,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1521
      ],
      "uniqueid": 325
    },
    "326": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912367819143",
      "endTime": "1471912367835604",
      "elapsedTime": "16461",
      "asyncId": 1516,
      "triggerAsyncId": 1510,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1517
      ],
      "uniqueid": 326
    },
    "327": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912367904273",
      "endTime": "1471912368146837",
      "elapsedTime": "242564",
      "asyncId": 1517,
      "triggerAsyncId": 1516,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1518
      ],
      "uniqueid": 327
    },
    "328": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912367970988",
      "endTime": "1471912368224943",
      "elapsedTime": "253955",
      "asyncId": 1518,
      "triggerAsyncId": 1517,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 328
    },
    "329": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912368314992",
      "endTime": "1471912370289060",
      "elapsedTime": "1974068",
      "asyncId": 1522,
      "triggerAsyncId": 1511,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1526
      ],
      "uniqueid": 329
    },
    "330": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912368393108",
      "endTime": "1471912368409118",
      "elapsedTime": "16010",
      "asyncId": 1523,
      "triggerAsyncId": 1511,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1524
      ],
      "uniqueid": 330
    },
    "331": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912368485411",
      "endTime": "1471912368715963",
      "elapsedTime": "230552",
      "asyncId": 1524,
      "triggerAsyncId": 1523,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1525
      ],
      "uniqueid": 331
    },
    "332": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912368557777",
      "endTime": "1471912368799149",
      "elapsedTime": "241372",
      "asyncId": 1525,
      "triggerAsyncId": 1524,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 332
    },
    "333": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912371110869",
      "endTime": "1471912371128151",
      "elapsedTime": "17282",
      "asyncId": 1539,
      "triggerAsyncId": 1536,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1540
      ],
      "uniqueid": 333
    },
    "334": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912371335099",
      "endTime": "1471912371880871",
      "elapsedTime": "545772",
      "asyncId": 1540,
      "triggerAsyncId": 1539,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1541
      ],
      "uniqueid": 334
    },
    "335": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912371461496",
      "endTime": "1471912371895649",
      "elapsedTime": "434153",
      "asyncId": 1541,
      "triggerAsyncId": 1540,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1542
      ],
      "uniqueid": 335
    },
    "336": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912371574988",
      "endTime": "1471912372371090",
      "elapsedTime": "796102",
      "asyncId": 1542,
      "triggerAsyncId": 1541,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1543,
        1546,
        1547
      ],
      "uniqueid": 336
    },
    "337": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912371709059",
      "endTime": "1471912372830240",
      "elapsedTime": "1121181",
      "asyncId": 1543,
      "triggerAsyncId": 1542,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1545,
        1551,
        1552,
        1564
      ],
      "uniqueid": 337
    },
    "338": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912371828824",
      "endTime": "1471912372934465",
      "elapsedTime": "1105641",
      "asyncId": 1545,
      "triggerAsyncId": 1543,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 338
    },
    "339": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912371961833",
      "endTime": "1471912372346774",
      "elapsedTime": "384941",
      "asyncId": 1546,
      "triggerAsyncId": 1542,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1550
      ],
      "uniqueid": 339
    },
    "340": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912372046572",
      "endTime": "1471912372062622",
      "elapsedTime": "16050",
      "asyncId": 1547,
      "triggerAsyncId": 1542,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1548
      ],
      "uniqueid": 340
    },
    "341": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912372131431",
      "endTime": "1471912372274469",
      "elapsedTime": "143038",
      "asyncId": 1548,
      "triggerAsyncId": 1547,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1549
      ],
      "uniqueid": 341
    },
    "342": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912372195861",
      "endTime": "1471912372358827",
      "elapsedTime": "162966",
      "asyncId": 1549,
      "triggerAsyncId": 1548,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 342
    },
    "343": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912372449045",
      "endTime": "1471912372805573",
      "elapsedTime": "356528",
      "asyncId": 1551,
      "triggerAsyncId": 1543,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1555
      ],
      "uniqueid": 343
    },
    "344": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912372515961",
      "endTime": "1471912372531029",
      "elapsedTime": "15068",
      "asyncId": 1552,
      "triggerAsyncId": 1543,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1553
      ],
      "uniqueid": 344
    },
    "345": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912372598626",
      "endTime": "1471912372738859",
      "elapsedTime": "140233",
      "asyncId": 1553,
      "triggerAsyncId": 1552,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1554
      ],
      "uniqueid": 345
    },
    "346": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912372671863",
      "endTime": "1471912372817816",
      "elapsedTime": "145953",
      "asyncId": 1554,
      "triggerAsyncId": 1553,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 346
    },
    "347": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912373424032",
      "endTime": "1471912373440793",
      "elapsedTime": "16761",
      "asyncId": 1566,
      "triggerAsyncId": 1563,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1568
      ],
      "uniqueid": 347
    },
    "348": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912374179146",
      "endTime": "1471912375291790",
      "elapsedTime": "1112644",
      "asyncId": 1568,
      "triggerAsyncId": 1566,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1569,
        1572,
        1581
      ],
      "uniqueid": 348
    },
    "349": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912374287048",
      "endTime": "1471912375346793",
      "elapsedTime": "1059745",
      "asyncId": 1569,
      "triggerAsyncId": 1568,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 349
    },
    "350": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912374626344",
      "endTime": "1471912375205148",
      "elapsedTime": "578804",
      "asyncId": 1572,
      "triggerAsyncId": 1568,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1574,
        1576
      ],
      "uniqueid": 350
    },
    "351": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912374868608",
      "endTime": "1471912374941805",
      "elapsedTime": "73197",
      "asyncId": 1574,
      "triggerAsyncId": 1572,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1575
      ],
      "uniqueid": 351
    },
    "352": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912374925214",
      "endTime": "1471912375220647",
      "elapsedTime": "295433",
      "asyncId": 1575,
      "triggerAsyncId": 1574,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 352
    },
    "353": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912375726845",
      "endTime": "1471912375744659",
      "elapsedTime": "17814",
      "asyncId": 1583,
      "triggerAsyncId": 1580,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1585
      ],
      "uniqueid": 353
    },
    "354": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912376211493",
      "endTime": "1471912377138620",
      "elapsedTime": "927127",
      "asyncId": 1585,
      "triggerAsyncId": 1583,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1586,
        1590
      ],
      "uniqueid": 354
    },
    "355": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912376329795",
      "endTime": "1471912377626233",
      "elapsedTime": "1296438",
      "asyncId": 1586,
      "triggerAsyncId": 1585,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1587,
        1595,
        1603
      ],
      "uniqueid": 355
    },
    "356": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912376428430",
      "endTime": "1471912377692978",
      "elapsedTime": "1264548",
      "asyncId": 1587,
      "triggerAsyncId": 1586,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 356
    },
    "357": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912376651798",
      "endTime": "1471912377052969",
      "elapsedTime": "401171",
      "asyncId": 1590,
      "triggerAsyncId": 1585,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1592,
        1594
      ],
      "uniqueid": 357
    },
    "358": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912376832055",
      "endTime": "1471912376899171",
      "elapsedTime": "67116",
      "asyncId": 1592,
      "triggerAsyncId": 1590,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1593
      ],
      "uniqueid": 358
    },
    "359": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912376883832",
      "endTime": "1471912377069640",
      "elapsedTime": "185808",
      "asyncId": 1593,
      "triggerAsyncId": 1592,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 359
    },
    "360": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912377208200",
      "endTime": "1471912377540342",
      "elapsedTime": "332142",
      "asyncId": 1595,
      "triggerAsyncId": 1586,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1596,
        1598
      ],
      "uniqueid": 360
    },
    "361": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912377339125",
      "endTime": "1471912377406050",
      "elapsedTime": "66925",
      "asyncId": 1596,
      "triggerAsyncId": 1595,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1597
      ],
      "uniqueid": 361
    },
    "362": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912377390862",
      "endTime": "1471912377554779",
      "elapsedTime": "163917",
      "asyncId": 1597,
      "triggerAsyncId": 1596,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 362
    },
    "363": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912378092476",
      "endTime": "1471912378110079",
      "elapsedTime": "17603",
      "asyncId": 1605,
      "triggerAsyncId": 1602,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1607
      ],
      "uniqueid": 363
    },
    "364": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912378516230",
      "endTime": "1471912379552591",
      "elapsedTime": "1036361",
      "asyncId": 1607,
      "triggerAsyncId": 1605,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1608,
        1613
      ],
      "uniqueid": 364
    },
    "365": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912378636846",
      "endTime": "1471912380041016",
      "elapsedTime": "1404170",
      "asyncId": 1608,
      "triggerAsyncId": 1607,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1609,
        1618
      ],
      "uniqueid": 365
    },
    "366": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912378756179",
      "endTime": "1471912380512910",
      "elapsedTime": "1756731",
      "asyncId": 1609,
      "triggerAsyncId": 1608,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1610,
        1622,
        1630
      ],
      "uniqueid": 366
    },
    "367": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912378854283",
      "endTime": "1471912380566931",
      "elapsedTime": "1712648",
      "asyncId": 1610,
      "triggerAsyncId": 1609,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 367
    },
    "368": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912379071009",
      "endTime": "1471912379469275",
      "elapsedTime": "398266",
      "asyncId": 1613,
      "triggerAsyncId": 1607,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1615,
        1617
      ],
      "uniqueid": 368
    },
    "369": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912379259553",
      "endTime": "1471912379334984",
      "elapsedTime": "75431",
      "asyncId": 1615,
      "triggerAsyncId": 1613,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1616
      ],
      "uniqueid": 369
    },
    "370": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912379318393",
      "endTime": "1471912379483662",
      "elapsedTime": "165269",
      "asyncId": 1616,
      "triggerAsyncId": 1615,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 370
    },
    "371": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912379619306",
      "endTime": "1471912379950717",
      "elapsedTime": "331411",
      "asyncId": 1618,
      "triggerAsyncId": 1608,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1619,
        1621
      ],
      "uniqueid": 371
    },
    "372": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912379755121",
      "endTime": "1471912379826795",
      "elapsedTime": "71674",
      "asyncId": 1619,
      "triggerAsyncId": 1618,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1620
      ],
      "uniqueid": 372
    },
    "373": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912379810394",
      "endTime": "1471912379965104",
      "elapsedTime": "154710",
      "asyncId": 1620,
      "triggerAsyncId": 1619,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 373
    },
    "374": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912380113141",
      "endTime": "1471912380430546",
      "elapsedTime": "317405",
      "asyncId": 1622,
      "triggerAsyncId": 1609,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1623,
        1625
      ],
      "uniqueid": 374
    },
    "375": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912380236011",
      "endTime": "1471912380306062",
      "elapsedTime": "70051",
      "asyncId": 1623,
      "triggerAsyncId": 1622,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1624
      ],
      "uniqueid": 375
    },
    "376": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912380290063",
      "endTime": "1471912380445073",
      "elapsedTime": "155010",
      "asyncId": 1624,
      "triggerAsyncId": 1623,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 376
    },
    "377": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912380975987",
      "endTime": "1471912380993901",
      "elapsedTime": "17914",
      "asyncId": 1632,
      "triggerAsyncId": 1629,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1634
      ],
      "uniqueid": 377
    },
    "378": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912381420851",
      "endTime": "1471912382513287",
      "elapsedTime": "1092436",
      "asyncId": 1634,
      "triggerAsyncId": 1632,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1635,
        1641
      ],
      "uniqueid": 378
    },
    "379": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912381537179",
      "endTime": "1471912383041546",
      "elapsedTime": "1504367",
      "asyncId": 1635,
      "triggerAsyncId": 1634,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1636,
        1646
      ],
      "uniqueid": 379
    },
    "380": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912381656723",
      "endTime": "1471912383519171",
      "elapsedTime": "1862448",
      "asyncId": 1636,
      "triggerAsyncId": 1635,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1637,
        1650
      ],
      "uniqueid": 380
    },
    "381": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912381773571",
      "endTime": "1471912384006043",
      "elapsedTime": "2232472",
      "asyncId": 1637,
      "triggerAsyncId": 1636,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1638,
        1654,
        1665
      ],
      "uniqueid": 381
    },
    "382": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912381873018",
      "endTime": "1471912384110669",
      "elapsedTime": "2237651",
      "asyncId": 1638,
      "triggerAsyncId": 1637,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 382
    },
    "383": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912382091487",
      "endTime": "1471912382426915",
      "elapsedTime": "335428",
      "asyncId": 1641,
      "triggerAsyncId": 1634,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1643,
        1645
      ],
      "uniqueid": 383
    },
    "384": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912382227021",
      "endTime": "1471912382293585",
      "elapsedTime": "66564",
      "asyncId": 1643,
      "triggerAsyncId": 1641,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1644
      ],
      "uniqueid": 384
    },
    "385": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912382278076",
      "endTime": "1471912382441573",
      "elapsedTime": "163497",
      "asyncId": 1644,
      "triggerAsyncId": 1643,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 385
    },
    "386": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912382579892",
      "endTime": "1471912382943353",
      "elapsedTime": "363461",
      "asyncId": 1646,
      "triggerAsyncId": 1635,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1647,
        1649
      ],
      "uniqueid": 386
    },
    "387": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912382735423",
      "endTime": "1471912382814180",
      "elapsedTime": "78757",
      "asyncId": 1647,
      "triggerAsyncId": 1646,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1648
      ],
      "uniqueid": 387
    },
    "388": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912382798702",
      "endTime": "1471912382958050",
      "elapsedTime": "159348",
      "asyncId": 1648,
      "triggerAsyncId": 1647,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 388
    },
    "389": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912383112870",
      "endTime": "1471912383430445",
      "elapsedTime": "317575",
      "asyncId": 1650,
      "triggerAsyncId": 1636,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1651,
        1653
      ],
      "uniqueid": 389
    },
    "390": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912383240719",
      "endTime": "1471912383310019",
      "elapsedTime": "69300",
      "asyncId": 1651,
      "triggerAsyncId": 1650,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1652
      ],
      "uniqueid": 390
    },
    "391": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912383294320",
      "endTime": "1471912383444591",
      "elapsedTime": "150271",
      "asyncId": 1652,
      "triggerAsyncId": 1651,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 391
    },
    "392": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912383593039",
      "endTime": "1471912383911736",
      "elapsedTime": "318697",
      "asyncId": 1654,
      "triggerAsyncId": 1637,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1655,
        1657
      ],
      "uniqueid": 392
    },
    "393": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912383719717",
      "endTime": "1471912383790189",
      "elapsedTime": "70472",
      "asyncId": 1655,
      "triggerAsyncId": 1654,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [
        1656
      ],
      "uniqueid": 393
    },
    "394": {
      "source": "lib/recorder.js:181:19:181:19",
      "startTime": "1471912383774199",
      "endTime": "1471912383926564",
      "elapsedTime": "152365",
      "asyncId": 1656,
      "triggerAsyncId": 1655,
      "io": "",
      "userCode": true,
      "line": "\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse()",
      "startLine": 181,
      "startCol": 19,
      "endLine": 181,
      "endCol": 19,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 394
    },
    "395": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912384650400",
      "endTime": "1471912384668554",
      "elapsedTime": "18154",
      "asyncId": 1667,
      "triggerAsyncId": 1664,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1669
      ],
      "uniqueid": 395
    },
    "396": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912385018309",
      "endTime": "1471912386219158",
      "elapsedTime": "1200849",
      "asyncId": 1669,
      "triggerAsyncId": 1667,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1670,
        1674,
        1683
      ],
      "uniqueid": 396
    },
    "397": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912385121533",
      "endTime": "1471912386279822",
      "elapsedTime": "1158289",
      "asyncId": 1670,
      "triggerAsyncId": 1669,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 397
    },
    "398": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1471912385450899",
      "endTime": "1471912385468342",
      "elapsedTime": "17443",
      "asyncId": 1674,
      "triggerAsyncId": 1669,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1675
      ],
      "uniqueid": 398
    },
    "399": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912385564873",
      "endTime": "1471912385838536",
      "elapsedTime": "273663",
      "asyncId": 1675,
      "triggerAsyncId": 1674,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1676
      ],
      "uniqueid": 399
    },
    "400": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912385634413",
      "endTime": "1471912386151431",
      "elapsedTime": "517018",
      "asyncId": 1676,
      "triggerAsyncId": 1675,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1677
      ],
      "uniqueid": 400
    },
    "401": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912385791487",
      "endTime": "1471912386204972",
      "elapsedTime": "413485",
      "asyncId": 1678,
      "triggerAsyncId": 1677,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1679,
        1680
      ],
      "uniqueid": 401
    },
    "402": {
      "source": "lib/recorder.js:137:25:137:25",
      "startTime": "1471912386134450",
      "endTime": "1471912386427468",
      "elapsedTime": "293018",
      "asyncId": 1681,
      "triggerAsyncId": 1680,
      "io": false,
      "userCode": true,
      "line": "\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /*",
      "startLine": 137,
      "startCol": 25,
      "endLine": 137,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1682,
        1688
      ],
      "uniqueid": 402
    },
    "403": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912386852795",
      "endTime": "1471912386870468",
      "elapsedTime": "17673",
      "asyncId": 1690,
      "triggerAsyncId": 1687,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1692
      ],
      "uniqueid": 403
    },
    "404": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912387159690",
      "endTime": "1471912388324502",
      "elapsedTime": "1164812",
      "asyncId": 1692,
      "triggerAsyncId": 1690,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1693,
        1697,
        1706
      ],
      "uniqueid": 404
    },
    "405": {
      "source": "node_modules/mocha/lib/runnable.js:358:21:358:21",
      "startTime": "1471912387258265",
      "endTime": "1471912388382781",
      "elapsedTime": "1124516",
      "asyncId": 1693,
      "triggerAsyncId": 1692,
      "io": false,
      "userCode": true,
      "line": "\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then",
      "startLine": 358,
      "startCol": 21,
      "endLine": 358,
      "endCol": 21,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 405
    },
    "406": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1471912387533530",
      "endTime": "1471912387550983",
      "elapsedTime": "17453",
      "asyncId": 1697,
      "triggerAsyncId": 1692,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1698
      ],
      "uniqueid": 406
    },
    "407": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912387668112",
      "endTime": "1471912387948468",
      "elapsedTime": "280356",
      "asyncId": 1698,
      "triggerAsyncId": 1697,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1699
      ],
      "uniqueid": 407
    },
    "408": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912387746008",
      "endTime": "1471912388026293",
      "elapsedTime": "280285",
      "asyncId": 1699,
      "triggerAsyncId": 1698,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1700
      ],
      "uniqueid": 408
    },
    "409": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912387883175",
      "endTime": "1471912388310977",
      "elapsedTime": "427802",
      "asyncId": 1701,
      "triggerAsyncId": 1700,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1702,
        1703
      ],
      "uniqueid": 409
    },
    "410": {
      "source": "lib/recorder.js:137:25:137:25",
      "startTime": "1471912388276823",
      "endTime": "1471912388506112",
      "elapsedTime": "229289",
      "asyncId": 1704,
      "triggerAsyncId": 1703,
      "io": false,
      "userCode": true,
      "line": "\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /*",
      "startLine": 137,
      "startCol": 25,
      "endLine": 137,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1705,
        1714
      ],
      "uniqueid": 410
    },
    "411": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912389103441",
      "endTime": "1471912389121465",
      "elapsedTime": "18024",
      "asyncId": 1716,
      "triggerAsyncId": 1713,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1721
      ],
      "uniqueid": 411
    },
    "412": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912389562481",
      "endTime": "1471912389579583",
      "elapsedTime": "17102",
      "asyncId": 1723,
      "triggerAsyncId": 1720,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1725
      ],
      "uniqueid": 412
    },
    "413": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912389794315",
      "endTime": "1471912389979372",
      "elapsedTime": "185057",
      "asyncId": 1725,
      "triggerAsyncId": 1723,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1726
      ],
      "uniqueid": 413
    },
    "414": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912390544911",
      "endTime": "1471912390562834",
      "elapsedTime": "17923",
      "asyncId": 1736,
      "triggerAsyncId": 1733,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1738
      ],
      "uniqueid": 414
    },
    "415": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912390782566",
      "endTime": "1471912391291550",
      "elapsedTime": "508984",
      "asyncId": 1738,
      "triggerAsyncId": 1736,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1739
      ],
      "uniqueid": 415
    },
    "416": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912390875250",
      "endTime": "1471912391585230",
      "elapsedTime": "709980",
      "asyncId": 1739,
      "triggerAsyncId": 1738,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1740,
        1746
      ],
      "uniqueid": 416
    },
    "417": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912390965288",
      "endTime": "1471912391821963",
      "elapsedTime": "856675",
      "asyncId": 1740,
      "triggerAsyncId": 1739,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1741
      ],
      "uniqueid": 417
    },
    "418": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912391068021",
      "endTime": "1471912391883539",
      "elapsedTime": "815518",
      "asyncId": 1741,
      "triggerAsyncId": 1740,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1742
      ],
      "uniqueid": 418
    },
    "419": {
      "source": "test/unit/recorder_test.js:30:10:30:10",
      "startTime": "1471912391155905",
      "endTime": "1471912391935486",
      "elapsedTime": "779581",
      "asyncId": 1742,
      "triggerAsyncId": 1741,
      "io": "",
      "userCode": true,
      "line": "\n      recorder.add(() => order += 'b');\n      return recorder.promise()\n        .then(() => expect(order).is.equal('acdb'));\n    });\n  });",
      "startLine": 30,
      "startCol": 10,
      "endLine": 30,
      "endCol": 10,
      "file": "test/unit/recorder_test.js",
      "triggers": [
        1744
      ],
      "uniqueid": 419
    },
    "420": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912391246214",
      "endTime": "1471912392061301",
      "elapsedTime": "815087",
      "asyncId": 1744,
      "triggerAsyncId": 1742,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 420
    },
    "421": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1471912391437042",
      "endTime": "1471912391454685",
      "elapsedTime": "17643",
      "asyncId": 1746,
      "triggerAsyncId": 1739,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1747
      ],
      "uniqueid": 421
    },
    "422": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912391514577",
      "endTime": "1471912391621978",
      "elapsedTime": "107401",
      "asyncId": 1747,
      "triggerAsyncId": 1746,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1748
      ],
      "uniqueid": 422
    },
    "423": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912391569159",
      "endTime": "1471912391857610",
      "elapsedTime": "288451",
      "asyncId": 1748,
      "triggerAsyncId": 1747,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1749
      ],
      "uniqueid": 423
    },
    "424": {
      "source": "lib/recorder.js:137:25:137:25",
      "startTime": "1471912391804290",
      "endTime": "1471912392133276",
      "elapsedTime": "328986",
      "asyncId": 1750,
      "triggerAsyncId": 1749,
      "io": false,
      "userCode": true,
      "line": "\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /*",
      "startLine": 137,
      "startCol": 25,
      "endLine": 137,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1760
      ],
      "uniqueid": 424
    },
    "425": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912392549115",
      "endTime": "1471912392566418",
      "elapsedTime": "17303",
      "asyncId": 1762,
      "triggerAsyncId": 1759,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1764
      ],
      "uniqueid": 425
    },
    "426": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912392777944",
      "endTime": "1471912393114785",
      "elapsedTime": "336841",
      "asyncId": 1764,
      "triggerAsyncId": 1762,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1765
      ],
      "uniqueid": 426
    },
    "427": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912392870737",
      "endTime": "1471912393141334",
      "elapsedTime": "270597",
      "asyncId": 1765,
      "triggerAsyncId": 1764,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1766
      ],
      "uniqueid": 427
    },
    "428": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912392962079",
      "endTime": "1471912393179666",
      "elapsedTime": "217587",
      "asyncId": 1766,
      "triggerAsyncId": 1765,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1768,
        1775
      ],
      "uniqueid": 428
    },
    "429": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912393070662",
      "endTime": "1471912393273923",
      "elapsedTime": "203261",
      "asyncId": 1768,
      "triggerAsyncId": 1766,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 429
    },
    "430": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912393592509",
      "endTime": "1471912393610133",
      "elapsedTime": "17624",
      "asyncId": 1777,
      "triggerAsyncId": 1774,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1779
      ],
      "uniqueid": 430
    },
    "431": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912393833200",
      "endTime": "1471912394147319",
      "elapsedTime": "314119",
      "asyncId": 1779,
      "triggerAsyncId": 1777,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1781,
        1793
      ],
      "uniqueid": 431
    },
    "432": {
      "source": "test/unit/recorder_test.js:49:10:49:10",
      "startTime": "1471912393981939",
      "endTime": "1471912394184438",
      "elapsedTime": "202499",
      "asyncId": 1781,
      "triggerAsyncId": 1779,
      "io": "",
      "userCode": true,
      "line": "\n      recorder.add(() => counter++);\n      return recorder.promise()\n        .then(() => expect(counter).eql(1));\n    });\n  });",
      "startLine": 49,
      "startCol": 10,
      "endLine": 49,
      "endCol": 10,
      "file": "test/unit/recorder_test.js",
      "triggers": [
        1783
      ],
      "uniqueid": 432
    },
    "433": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912394088949",
      "endTime": "1471912394278534",
      "elapsedTime": "189585",
      "asyncId": 1783,
      "triggerAsyncId": 1781,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 433
    },
    "434": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912394689103",
      "endTime": "1471912394709712",
      "elapsedTime": "20609",
      "asyncId": 1795,
      "triggerAsyncId": 1792,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1797
      ],
      "uniqueid": 434
    },
    "435": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912394934423",
      "endTime": "1471912395164293",
      "elapsedTime": "229870",
      "asyncId": 1797,
      "triggerAsyncId": 1795,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1798
      ],
      "uniqueid": 435
    },
    "436": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912395041333",
      "endTime": "1471912399457415",
      "elapsedTime": "4416082",
      "asyncId": 1798,
      "triggerAsyncId": 1797,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1800,
        1801,
        1802,
        1821
      ],
      "uniqueid": 436
    },
    "437": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912395139117",
      "endTime": "1471912399552643",
      "elapsedTime": "4413526",
      "asyncId": 1800,
      "triggerAsyncId": 1798,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 437
    },
    "438": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912395228103",
      "endTime": "1471912399430344",
      "elapsedTime": "4202241",
      "asyncId": 1801,
      "triggerAsyncId": 1798,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 438
    },
    "439": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912395306620",
      "endTime": "1471912395322730",
      "elapsedTime": "16110",
      "asyncId": 1802,
      "triggerAsyncId": 1798,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1803
      ],
      "uniqueid": 439
    },
    "440": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912395387923",
      "endTime": "1471912395537362",
      "elapsedTime": "149439",
      "asyncId": 1803,
      "triggerAsyncId": 1802,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1804
      ],
      "uniqueid": 440
    },
    "441": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912395454287",
      "endTime": "1471912395625247",
      "elapsedTime": "170960",
      "asyncId": 1804,
      "triggerAsyncId": 1803,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 441
    },
    "442": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912399910363",
      "endTime": "1471912399928487",
      "elapsedTime": "18124",
      "asyncId": 1823,
      "triggerAsyncId": 1820,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1825
      ],
      "uniqueid": 442
    },
    "443": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912400179487",
      "endTime": "1471912400505819",
      "elapsedTime": "326332",
      "asyncId": 1825,
      "triggerAsyncId": 1823,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1826
      ],
      "uniqueid": 443
    },
    "444": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912400287400",
      "endTime": "1471912400521809",
      "elapsedTime": "234409",
      "asyncId": 1826,
      "triggerAsyncId": 1825,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1827
      ],
      "uniqueid": 444
    },
    "445": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912400383409",
      "endTime": "1471912404854464",
      "elapsedTime": "4471055",
      "asyncId": 1827,
      "triggerAsyncId": 1826,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1829,
        1830,
        1831,
        1854
      ],
      "uniqueid": 445
    },
    "446": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912400480611",
      "endTime": "1471912404950975",
      "elapsedTime": "4470364",
      "asyncId": 1829,
      "triggerAsyncId": 1827,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 446
    },
    "447": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912400584005",
      "endTime": "1471912404821853",
      "elapsedTime": "4237848",
      "asyncId": 1830,
      "triggerAsyncId": 1827,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 447
    },
    "448": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912400657944",
      "endTime": "1471912400673954",
      "elapsedTime": "16010",
      "asyncId": 1831,
      "triggerAsyncId": 1827,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1832
      ],
      "uniqueid": 448
    },
    "449": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912400738204",
      "endTime": "1471912400908884",
      "elapsedTime": "170680",
      "asyncId": 1832,
      "triggerAsyncId": 1831,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1833
      ],
      "uniqueid": 449
    },
    "450": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912400803426",
      "endTime": "1471912400997410",
      "elapsedTime": "193984",
      "asyncId": 1833,
      "triggerAsyncId": 1832,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 450
    },
    "451": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912406831938",
      "endTime": "1471912406854481",
      "elapsedTime": "22543",
      "asyncId": 1856,
      "triggerAsyncId": 1853,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1857
      ],
      "uniqueid": 451
    },
    "452": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912407154873",
      "endTime": "1471912407611088",
      "elapsedTime": "456215",
      "asyncId": 1857,
      "triggerAsyncId": 1856,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1858
      ],
      "uniqueid": 452
    },
    "453": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912407299554",
      "endTime": "1471912407643408",
      "elapsedTime": "343854",
      "asyncId": 1858,
      "triggerAsyncId": 1857,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1859
      ],
      "uniqueid": 453
    },
    "454": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912408159956",
      "endTime": "1471912408179422",
      "elapsedTime": "19466",
      "asyncId": 1866,
      "triggerAsyncId": 1863,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1867
      ],
      "uniqueid": 454
    },
    "455": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912408446703",
      "endTime": "1471912411123046",
      "elapsedTime": "2676343",
      "asyncId": 1867,
      "triggerAsyncId": 1866,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1868
      ],
      "uniqueid": 455
    },
    "456": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912408614918",
      "endTime": "1471912411141330",
      "elapsedTime": "2526412",
      "asyncId": 1868,
      "triggerAsyncId": 1867,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1869
      ],
      "uniqueid": 456
    },
    "457": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912408786399",
      "endTime": "1471912411157881",
      "elapsedTime": "2371482",
      "asyncId": 1869,
      "triggerAsyncId": 1868,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1870
      ],
      "uniqueid": 457
    },
    "458": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912408949585",
      "endTime": "1471912411171747",
      "elapsedTime": "2222162",
      "asyncId": 1870,
      "triggerAsyncId": 1869,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1871
      ],
      "uniqueid": 458
    },
    "459": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912409125063",
      "endTime": "1471912411185213",
      "elapsedTime": "2060150",
      "asyncId": 1871,
      "triggerAsyncId": 1870,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1872
      ],
      "uniqueid": 459
    },
    "460": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912409297076",
      "endTime": "1471912411199700",
      "elapsedTime": "1902624",
      "asyncId": 1872,
      "triggerAsyncId": 1871,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1873
      ],
      "uniqueid": 460
    },
    "461": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912409460692",
      "endTime": "1471912411212954",
      "elapsedTime": "1752262",
      "asyncId": 1873,
      "triggerAsyncId": 1872,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1874
      ],
      "uniqueid": 461
    },
    "462": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912410345760",
      "endTime": "1471912412218949",
      "elapsedTime": "1873189",
      "asyncId": 1875,
      "triggerAsyncId": 1874,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1876,
        1882,
        1883
      ],
      "uniqueid": 462
    },
    "463": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912410494078",
      "endTime": "1471912412657199",
      "elapsedTime": "2163121",
      "asyncId": 1876,
      "triggerAsyncId": 1875,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1877,
        1894,
        1895
      ],
      "uniqueid": 463
    },
    "464": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912410634611",
      "endTime": "1471912413093387",
      "elapsedTime": "2458776",
      "asyncId": 1877,
      "triggerAsyncId": 1876,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1878,
        1899,
        1900
      ],
      "uniqueid": 464
    },
    "465": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912410914656",
      "endTime": "1471912415242813",
      "elapsedTime": "4328157",
      "asyncId": 1879,
      "triggerAsyncId": 1878,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1881,
        1904,
        1905,
        1916
      ],
      "uniqueid": 465
    },
    "466": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912411067221",
      "endTime": "1471912415352708",
      "elapsedTime": "4285487",
      "asyncId": 1881,
      "triggerAsyncId": 1879,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 466
    },
    "467": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912411297483",
      "endTime": "1471912412085699",
      "elapsedTime": "788216",
      "asyncId": 1882,
      "triggerAsyncId": 1875,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1889
      ],
      "uniqueid": 467
    },
    "468": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912411373185",
      "endTime": "1471912411388864",
      "elapsedTime": "15679",
      "asyncId": 1883,
      "triggerAsyncId": 1875,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1884
      ],
      "uniqueid": 468
    },
    "469": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912411465297",
      "endTime": "1471912411902546",
      "elapsedTime": "437249",
      "asyncId": 1884,
      "triggerAsyncId": 1883,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1885,
        1886
      ],
      "uniqueid": 469
    },
    "470": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912411538735",
      "endTime": "1471912412096940",
      "elapsedTime": "558205",
      "asyncId": 1885,
      "triggerAsyncId": 1884,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 470
    },
    "471": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912411657707",
      "endTime": "1471912412239116",
      "elapsedTime": "581409",
      "asyncId": 1886,
      "triggerAsyncId": 1884,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        1887,
        1890,
        1892
      ],
      "uniqueid": 471
    },
    "472": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912411717820",
      "endTime": "1471912411891485",
      "elapsedTime": "173665",
      "asyncId": 1887,
      "triggerAsyncId": 1886,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        1888
      ],
      "uniqueid": 472
    },
    "473": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912411871558",
      "endTime": "1471912412074768",
      "elapsedTime": "203210",
      "asyncId": 1888,
      "triggerAsyncId": 1887,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 473
    },
    "474": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912412317283",
      "endTime": "1471912412635639",
      "elapsedTime": "318356",
      "asyncId": 1894,
      "triggerAsyncId": 1876,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1898
      ],
      "uniqueid": 474
    },
    "475": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912412387545",
      "endTime": "1471912412399938",
      "elapsedTime": "12393",
      "asyncId": 1895,
      "triggerAsyncId": 1876,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1896
      ],
      "uniqueid": 475
    },
    "476": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912412473656",
      "endTime": "1471912412576939",
      "elapsedTime": "103283",
      "asyncId": 1896,
      "triggerAsyncId": 1895,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1897
      ],
      "uniqueid": 476
    },
    "477": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912412543747",
      "endTime": "1471912412645508",
      "elapsedTime": "101761",
      "asyncId": 1897,
      "triggerAsyncId": 1896,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 477
    },
    "478": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912412730066",
      "endTime": "1471912413070093",
      "elapsedTime": "340027",
      "asyncId": 1899,
      "triggerAsyncId": 1877,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1903
      ],
      "uniqueid": 478
    },
    "479": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912412805648",
      "endTime": "1471912412818742",
      "elapsedTime": "13094",
      "asyncId": 1900,
      "triggerAsyncId": 1877,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1901
      ],
      "uniqueid": 479
    },
    "480": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912412883704",
      "endTime": "1471912412995043",
      "elapsedTime": "111339",
      "asyncId": 1901,
      "triggerAsyncId": 1900,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1902
      ],
      "uniqueid": 480
    },
    "481": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912412950720",
      "endTime": "1471912413082807",
      "elapsedTime": "132087",
      "asyncId": 1902,
      "triggerAsyncId": 1901,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 481
    },
    "482": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912413175300",
      "endTime": "1471912415220180",
      "elapsedTime": "2044880",
      "asyncId": 1904,
      "triggerAsyncId": 1879,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1908
      ],
      "uniqueid": 482
    },
    "483": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912413244620",
      "endTime": "1471912413261562",
      "elapsedTime": "16942",
      "asyncId": 1905,
      "triggerAsyncId": 1879,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1906
      ],
      "uniqueid": 483
    },
    "484": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912415008624",
      "endTime": "1471912415152063",
      "elapsedTime": "143439",
      "asyncId": 1906,
      "triggerAsyncId": 1905,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1907
      ],
      "uniqueid": 484
    },
    "485": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912415088363",
      "endTime": "1471912415232423",
      "elapsedTime": "144060",
      "asyncId": 1907,
      "triggerAsyncId": 1906,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 485
    },
    "486": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912415967039",
      "endTime": "1471912415983520",
      "elapsedTime": "16481",
      "asyncId": 1918,
      "triggerAsyncId": 1915,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1920
      ],
      "uniqueid": 486
    },
    "487": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912416713597",
      "endTime": "1471912419198162",
      "elapsedTime": "2484565",
      "asyncId": 1921,
      "triggerAsyncId": 1920,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1922
      ],
      "uniqueid": 487
    },
    "488": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912416824405",
      "endTime": "1471912419210014",
      "elapsedTime": "2385609",
      "asyncId": 1922,
      "triggerAsyncId": 1921,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1923
      ],
      "uniqueid": 488
    },
    "489": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912416937757",
      "endTime": "1471912419222858",
      "elapsedTime": "2285101",
      "asyncId": 1923,
      "triggerAsyncId": 1922,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1924
      ],
      "uniqueid": 489
    },
    "490": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912417053745",
      "endTime": "1471912419233508",
      "elapsedTime": "2179763",
      "asyncId": 1924,
      "triggerAsyncId": 1923,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1925
      ],
      "uniqueid": 490
    },
    "491": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912417160845",
      "endTime": "1471912419246903",
      "elapsedTime": "2086058",
      "asyncId": 1925,
      "triggerAsyncId": 1924,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1926
      ],
      "uniqueid": 491
    },
    "492": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912417266644",
      "endTime": "1471912419257753",
      "elapsedTime": "1991109",
      "asyncId": 1926,
      "triggerAsyncId": 1925,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1927
      ],
      "uniqueid": 492
    },
    "493": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912417375067",
      "endTime": "1471912419271379",
      "elapsedTime": "1896312",
      "asyncId": 1927,
      "triggerAsyncId": 1926,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1928
      ],
      "uniqueid": 493
    },
    "494": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912417755609",
      "endTime": "1471912419665978",
      "elapsedTime": "1910369",
      "asyncId": 1929,
      "triggerAsyncId": 1928,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1930,
        1941,
        1942
      ],
      "uniqueid": 494
    },
    "495": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912417878510",
      "endTime": "1471912420076977",
      "elapsedTime": "2198467",
      "asyncId": 1930,
      "triggerAsyncId": 1929,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1931,
        1946,
        1947
      ],
      "uniqueid": 495
    },
    "496": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912418240778",
      "endTime": "1471912420521670",
      "elapsedTime": "2280892",
      "asyncId": 1932,
      "triggerAsyncId": 1931,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1933,
        1951,
        1952
      ],
      "uniqueid": 496
    },
    "497": {
      "source": "test/unit/scenario_test.js:65:10:65:10",
      "startTime": "1471912418706350",
      "endTime": "1471912420592734",
      "elapsedTime": "1886384",
      "asyncId": 1935,
      "triggerAsyncId": 1934,
      "io": "",
      "userCode": true,
      "line": "\n      scenario.suiteTeardown();\n      return recorder.promise()\n        .then(() => expect(beforeSuite.called).is.ok)\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok)",
      "startLine": 65,
      "startCol": 10,
      "endLine": 65,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        1936
      ],
      "uniqueid": 497
    },
    "498": {
      "source": "test/unit/scenario_test.js:66:10:66:10",
      "startTime": "1471912418808842",
      "endTime": "1471912420622519",
      "elapsedTime": "1813677",
      "asyncId": 1936,
      "triggerAsyncId": 1935,
      "io": "",
      "userCode": true,
      "line": "\n      return recorder.promise()\n        .then(() => expect(beforeSuite.called).is.ok)\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok);\n    })",
      "startLine": 66,
      "startCol": 10,
      "endLine": 66,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        1937
      ],
      "uniqueid": 498
    },
    "499": {
      "source": "test/unit/scenario_test.js:67:10:67:10",
      "startTime": "1471912418918227",
      "endTime": "1471912420652656",
      "elapsedTime": "1734429",
      "asyncId": 1937,
      "triggerAsyncId": 1936,
      "io": "",
      "userCode": true,
      "line": "\n        .then(() => expect(beforeSuite.called).is.ok)\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok);\n    });",
      "startLine": 67,
      "startCol": 10,
      "endLine": 67,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        1938
      ],
      "uniqueid": 499
    },
    "500": {
      "source": "test/unit/scenario_test.js:68:10:68:10",
      "startTime": "1471912419030117",
      "endTime": "1471912420680829",
      "elapsedTime": "1650712",
      "asyncId": 1938,
      "triggerAsyncId": 1937,
      "io": "",
      "userCode": true,
      "line": "\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok);\n    });\n\n    it('should fire failed event on error', () => ",
      "startLine": 68,
      "startCol": 10,
      "endLine": 68,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        1940
      ],
      "uniqueid": 500
    },
    "501": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912419160922",
      "endTime": "1471912420778462",
      "elapsedTime": "1617540",
      "asyncId": 1940,
      "triggerAsyncId": 1938,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 501
    },
    "502": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912419343574",
      "endTime": "1471912419644117",
      "elapsedTime": "300543",
      "asyncId": 1941,
      "triggerAsyncId": 1929,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 502
    },
    "503": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912419408044",
      "endTime": "1471912419420398",
      "elapsedTime": "12354",
      "asyncId": 1942,
      "triggerAsyncId": 1929,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1943
      ],
      "uniqueid": 503
    },
    "504": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912419493184",
      "endTime": "1471912419587010",
      "elapsedTime": "93826",
      "asyncId": 1943,
      "triggerAsyncId": 1942,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1944
      ],
      "uniqueid": 504
    },
    "505": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912419556974",
      "endTime": "1471912419655658",
      "elapsedTime": "98684",
      "asyncId": 1944,
      "triggerAsyncId": 1943,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 505
    },
    "506": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912419735919",
      "endTime": "1471912420057030",
      "elapsedTime": "321111",
      "asyncId": 1946,
      "triggerAsyncId": 1930,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 506
    },
    "507": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912419797865",
      "endTime": "1471912419810098",
      "elapsedTime": "12233",
      "asyncId": 1947,
      "triggerAsyncId": 1930,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1948
      ],
      "uniqueid": 507
    },
    "508": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912419877885",
      "endTime": "1471912419984765",
      "elapsedTime": "106880",
      "asyncId": 1948,
      "triggerAsyncId": 1947,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1949
      ],
      "uniqueid": 508
    },
    "509": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912419940151",
      "endTime": "1471912420067049",
      "elapsedTime": "126898",
      "asyncId": 1949,
      "triggerAsyncId": 1948,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 509
    },
    "510": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912420159051",
      "endTime": "1471912420501733",
      "elapsedTime": "342682",
      "asyncId": 1951,
      "triggerAsyncId": 1932,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 510
    },
    "511": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912420221909",
      "endTime": "1471912420234042",
      "elapsedTime": "12133",
      "asyncId": 1952,
      "triggerAsyncId": 1932,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1953
      ],
      "uniqueid": 511
    },
    "512": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912420301428",
      "endTime": "1471912420437733",
      "elapsedTime": "136305",
      "asyncId": 1953,
      "triggerAsyncId": 1952,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1954
      ],
      "uniqueid": 512
    },
    "513": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912420364075",
      "endTime": "1471912420511672",
      "elapsedTime": "147597",
      "asyncId": 1954,
      "triggerAsyncId": 1953,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 513
    },
    "514": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912421278027",
      "endTime": "1471912421294538",
      "elapsedTime": "16511",
      "asyncId": 1964,
      "triggerAsyncId": 1961,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        1966
      ],
      "uniqueid": 514
    },
    "515": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912421951549",
      "endTime": "1471912425622906",
      "elapsedTime": "3671357",
      "asyncId": 1967,
      "triggerAsyncId": 1966,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1968
      ],
      "uniqueid": 515
    },
    "516": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912422072315",
      "endTime": "1471912425634818",
      "elapsedTime": "3562503",
      "asyncId": 1968,
      "triggerAsyncId": 1967,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1969
      ],
      "uniqueid": 516
    },
    "517": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912422180247",
      "endTime": "1471912425645708",
      "elapsedTime": "3465461",
      "asyncId": 1969,
      "triggerAsyncId": 1968,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1970
      ],
      "uniqueid": 517
    },
    "518": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912422292267",
      "endTime": "1471912425658212",
      "elapsedTime": "3365945",
      "asyncId": 1970,
      "triggerAsyncId": 1969,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1971
      ],
      "uniqueid": 518
    },
    "519": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912422399508",
      "endTime": "1471912425669012",
      "elapsedTime": "3269504",
      "asyncId": 1971,
      "triggerAsyncId": 1970,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1972
      ],
      "uniqueid": 519
    },
    "520": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912422505396",
      "endTime": "1471912425679382",
      "elapsedTime": "3173986",
      "asyncId": 1972,
      "triggerAsyncId": 1971,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1973
      ],
      "uniqueid": 520
    },
    "521": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912422614220",
      "endTime": "1471912425689681",
      "elapsedTime": "3075461",
      "asyncId": 1973,
      "triggerAsyncId": 1972,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1974
      ],
      "uniqueid": 521
    },
    "522": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912423056869",
      "endTime": "1471912425711872",
      "elapsedTime": "2655003",
      "asyncId": 1975,
      "triggerAsyncId": 1974,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1976
      ],
      "uniqueid": 522
    },
    "523": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912423207782",
      "endTime": "1471912425722142",
      "elapsedTime": "2514360",
      "asyncId": 1976,
      "triggerAsyncId": 1975,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1977
      ],
      "uniqueid": 523
    },
    "524": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912423356270",
      "endTime": "1471912425732301",
      "elapsedTime": "2376031",
      "asyncId": 1977,
      "triggerAsyncId": 1976,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1978
      ],
      "uniqueid": 524
    },
    "525": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912423654168",
      "endTime": "1471912425745315",
      "elapsedTime": "2091147",
      "asyncId": 1978,
      "triggerAsyncId": 1977,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1979
      ],
      "uniqueid": 525
    },
    "526": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912423855535",
      "endTime": "1471912425755925",
      "elapsedTime": "1900390",
      "asyncId": 1979,
      "triggerAsyncId": 1978,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1980
      ],
      "uniqueid": 526
    },
    "527": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912424020053",
      "endTime": "1471912425766465",
      "elapsedTime": "1746412",
      "asyncId": 1980,
      "triggerAsyncId": 1979,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1981
      ],
      "uniqueid": 527
    },
    "528": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912424171427",
      "endTime": "1471912425776964",
      "elapsedTime": "1605537",
      "asyncId": 1981,
      "triggerAsyncId": 1980,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1982
      ],
      "uniqueid": 528
    },
    "529": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912424841482",
      "endTime": "1471912426195148",
      "elapsedTime": "1353666",
      "asyncId": 1983,
      "triggerAsyncId": 1982,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1984,
        1991,
        1992
      ],
      "uniqueid": 529
    },
    "530": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912424967438",
      "endTime": "1471912426213742",
      "elapsedTime": "1246304",
      "asyncId": 1984,
      "triggerAsyncId": 1983,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1985
      ],
      "uniqueid": 530
    },
    "531": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912425125133",
      "endTime": "1471912426223902",
      "elapsedTime": "1098769",
      "asyncId": 1985,
      "triggerAsyncId": 1984,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1986
      ],
      "uniqueid": 531
    },
    "532": {
      "source": "test/unit/scenario_test.js:79:10:79:10",
      "startTime": "1471912425357118",
      "endTime": "1471912427286942",
      "elapsedTime": "1929824",
      "asyncId": 1987,
      "triggerAsyncId": 1986,
      "io": "",
      "userCode": true,
      "line": "\n      scenario.test(test).fn(() => {});\n      return recorder.promise()\n        .then(() => expect(failed.called).is.ok)\n        .catch(() => null);\n    });",
      "startLine": 79,
      "startCol": 10,
      "endLine": 79,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        1988
      ],
      "uniqueid": 532
    },
    "533": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912425585165",
      "endTime": "1471912427835911",
      "elapsedTime": "2250746",
      "asyncId": 1990,
      "triggerAsyncId": 1988,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 533
    },
    "534": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912425854349",
      "endTime": "1471912426172946",
      "elapsedTime": "318597",
      "asyncId": 1991,
      "triggerAsyncId": 1983,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 534
    },
    "535": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912425923168",
      "endTime": "1471912425937465",
      "elapsedTime": "14297",
      "asyncId": 1992,
      "triggerAsyncId": 1983,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1993
      ],
      "uniqueid": 535
    },
    "536": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912425997678",
      "endTime": "1471912426109066",
      "elapsedTime": "111388",
      "asyncId": 1993,
      "triggerAsyncId": 1992,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        1994
      ],
      "uniqueid": 536
    },
    "537": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912426069192",
      "endTime": "1471912426183075",
      "elapsedTime": "113883",
      "asyncId": 1994,
      "triggerAsyncId": 1993,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 537
    },
    "538": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1471912426456547",
      "endTime": "1471912426471435",
      "elapsedTime": "14888",
      "asyncId": 1997,
      "triggerAsyncId": 1986,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        1998
      ],
      "uniqueid": 538
    },
    "539": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912426574819",
      "endTime": "1471912427848254",
      "elapsedTime": "1273435",
      "asyncId": 1998,
      "triggerAsyncId": 1997,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        1999,
        2003,
        2004
      ],
      "uniqueid": 539
    },
    "540": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912426643157",
      "endTime": "1471912428601705",
      "elapsedTime": "1958548",
      "asyncId": 1999,
      "triggerAsyncId": 1998,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2000,
        2012,
        2013
      ],
      "uniqueid": 540
    },
    "541": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912426711805",
      "endTime": "1471912429334057",
      "elapsedTime": "2622252",
      "asyncId": 2000,
      "triggerAsyncId": 1999,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2001,
        2020,
        2021
      ],
      "uniqueid": 541
    },
    "542": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912426782878",
      "endTime": "1471912430079894",
      "elapsedTime": "3297016",
      "asyncId": 2001,
      "triggerAsyncId": 2000,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2002,
        2028,
        2029
      ],
      "uniqueid": 542
    },
    "543": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912426867437",
      "endTime": "1471912430128315",
      "elapsedTime": "3260878",
      "asyncId": 2002,
      "triggerAsyncId": 2001,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 543
    },
    "544": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912427010775",
      "endTime": "1471912427743938",
      "elapsedTime": "733163",
      "asyncId": 2003,
      "triggerAsyncId": 1998,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 544
    },
    "545": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912427081568",
      "endTime": "1471912427094552",
      "elapsedTime": "12984",
      "asyncId": 2004,
      "triggerAsyncId": 1998,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2005
      ],
      "uniqueid": 545
    },
    "546": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912427161498",
      "endTime": "1471912427552089",
      "elapsedTime": "390591",
      "asyncId": 2005,
      "triggerAsyncId": 2004,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2006,
        2007
      ],
      "uniqueid": 546
    },
    "547": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912427227431",
      "endTime": "1471912427753536",
      "elapsedTime": "526105",
      "asyncId": 2006,
      "triggerAsyncId": 2005,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 547
    },
    "548": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912427344370",
      "endTime": "1471912427719372",
      "elapsedTime": "375002",
      "asyncId": 2007,
      "triggerAsyncId": 2005,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2008
      ],
      "uniqueid": 548
    },
    "549": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912427481266",
      "endTime": "1471912427541710",
      "elapsedTime": "60444",
      "asyncId": 2008,
      "triggerAsyncId": 2007,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2009
      ],
      "uniqueid": 549
    },
    "550": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912427528746",
      "endTime": "1471912427732688",
      "elapsedTime": "203942",
      "asyncId": 2009,
      "triggerAsyncId": 2008,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 550
    },
    "551": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912427933233",
      "endTime": "1471912428582309",
      "elapsedTime": "649076",
      "asyncId": 2012,
      "triggerAsyncId": 1999,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 551
    },
    "552": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912428006781",
      "endTime": "1471912428021619",
      "elapsedTime": "14838",
      "asyncId": 2013,
      "triggerAsyncId": 1999,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2014
      ],
      "uniqueid": 552
    },
    "553": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912428087021",
      "endTime": "1471912428414445",
      "elapsedTime": "327424",
      "asyncId": 2014,
      "triggerAsyncId": 2013,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2015,
        2016
      ],
      "uniqueid": 553
    },
    "554": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912428149638",
      "endTime": "1471912428591817",
      "elapsedTime": "442179",
      "asyncId": 2015,
      "triggerAsyncId": 2014,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 554
    },
    "555": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912428215021",
      "endTime": "1471912428557192",
      "elapsedTime": "342171",
      "asyncId": 2016,
      "triggerAsyncId": 2014,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2017
      ],
      "uniqueid": 555
    },
    "556": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912428343762",
      "endTime": "1471912428402412",
      "elapsedTime": "58650",
      "asyncId": 2017,
      "triggerAsyncId": 2016,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2018
      ],
      "uniqueid": 556
    },
    "557": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912428389688",
      "endTime": "1471912428568844",
      "elapsedTime": "179156",
      "asyncId": 2018,
      "triggerAsyncId": 2017,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 557
    },
    "558": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912428672658",
      "endTime": "1471912429313489",
      "elapsedTime": "640831",
      "asyncId": 2020,
      "triggerAsyncId": 2000,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 558
    },
    "559": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912428740826",
      "endTime": "1471912428754191",
      "elapsedTime": "13365",
      "asyncId": 2021,
      "triggerAsyncId": 2000,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2022
      ],
      "uniqueid": 559
    },
    "560": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912428818271",
      "endTime": "1471912429147337",
      "elapsedTime": "329066",
      "asyncId": 2022,
      "triggerAsyncId": 2021,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2023,
        2024
      ],
      "uniqueid": 560
    },
    "561": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912428887080",
      "endTime": "1471912429324098",
      "elapsedTime": "437018",
      "asyncId": 2023,
      "triggerAsyncId": 2022,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 561
    },
    "562": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912428949507",
      "endTime": "1471912429291087",
      "elapsedTime": "341580",
      "asyncId": 2024,
      "triggerAsyncId": 2022,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2025
      ],
      "uniqueid": 562
    },
    "563": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912429077747",
      "endTime": "1471912429136958",
      "elapsedTime": "59211",
      "asyncId": 2025,
      "triggerAsyncId": 2024,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2026
      ],
      "uniqueid": 563
    },
    "564": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912429124014",
      "endTime": "1471912429302508",
      "elapsedTime": "178494",
      "asyncId": 2026,
      "triggerAsyncId": 2025,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 564
    },
    "565": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912429412815",
      "endTime": "1471912430058484",
      "elapsedTime": "645669",
      "asyncId": 2028,
      "triggerAsyncId": 2001,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 565
    },
    "566": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912429478357",
      "endTime": "1471912429498816",
      "elapsedTime": "20459",
      "asyncId": 2029,
      "triggerAsyncId": 2001,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2030
      ],
      "uniqueid": 566
    },
    "567": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912429564679",
      "endTime": "1471912429882274",
      "elapsedTime": "317595",
      "asyncId": 2030,
      "triggerAsyncId": 2029,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2031,
        2032
      ],
      "uniqueid": 567
    },
    "568": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912429627176",
      "endTime": "1471912430067982",
      "elapsedTime": "440806",
      "asyncId": 2031,
      "triggerAsyncId": 2030,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 568
    },
    "569": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912429688691",
      "endTime": "1471912430035862",
      "elapsedTime": "347171",
      "asyncId": 2032,
      "triggerAsyncId": 2030,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2033
      ],
      "uniqueid": 569
    },
    "570": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912429811792",
      "endTime": "1471912429871924",
      "elapsedTime": "60132",
      "asyncId": 2033,
      "triggerAsyncId": 2032,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2034
      ],
      "uniqueid": 570
    },
    "571": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912429859191",
      "endTime": "1471912430047233",
      "elapsedTime": "188042",
      "asyncId": 2034,
      "triggerAsyncId": 2033,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 571
    },
    "572": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912430502906",
      "endTime": "1471912430519517",
      "elapsedTime": "16611",
      "asyncId": 2041,
      "triggerAsyncId": 2039,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2043
      ],
      "uniqueid": 572
    },
    "573": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912431144759",
      "endTime": "1471912431160799",
      "elapsedTime": "16040",
      "asyncId": 2045,
      "triggerAsyncId": 2042,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2046
      ],
      "uniqueid": 573
    },
    "574": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912431432979",
      "endTime": "1471912433500491",
      "elapsedTime": "2067512",
      "asyncId": 2047,
      "triggerAsyncId": 2046,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2048
      ],
      "uniqueid": 574
    },
    "575": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912431542814",
      "endTime": "1471912433512023",
      "elapsedTime": "1969209",
      "asyncId": 2048,
      "triggerAsyncId": 2047,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2049
      ],
      "uniqueid": 575
    },
    "576": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912431653391",
      "endTime": "1471912433522883",
      "elapsedTime": "1869492",
      "asyncId": 2049,
      "triggerAsyncId": 2048,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2050
      ],
      "uniqueid": 576
    },
    "577": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912431759801",
      "endTime": "1471912433534926",
      "elapsedTime": "1775125",
      "asyncId": 2050,
      "triggerAsyncId": 2049,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2051
      ],
      "uniqueid": 577
    },
    "578": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912431867913",
      "endTime": "1471912433545365",
      "elapsedTime": "1677452",
      "asyncId": 2051,
      "triggerAsyncId": 2050,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2052
      ],
      "uniqueid": 578
    },
    "579": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912431974042",
      "endTime": "1471912433555755",
      "elapsedTime": "1581713",
      "asyncId": 2052,
      "triggerAsyncId": 2051,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2053
      ],
      "uniqueid": 579
    },
    "580": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912432090530",
      "endTime": "1471912433567627",
      "elapsedTime": "1477097",
      "asyncId": 2053,
      "triggerAsyncId": 2052,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2054
      ],
      "uniqueid": 580
    },
    "581": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912432693099",
      "endTime": "1471912434010356",
      "elapsedTime": "1317257",
      "asyncId": 2055,
      "triggerAsyncId": 2054,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2056,
        2063,
        2064
      ],
      "uniqueid": 581
    },
    "582": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912432847398",
      "endTime": "1471912434030975",
      "elapsedTime": "1183577",
      "asyncId": 2056,
      "triggerAsyncId": 2055,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2057
      ],
      "uniqueid": 582
    },
    "583": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912432979665",
      "endTime": "1471912434041344",
      "elapsedTime": "1061679",
      "asyncId": 2057,
      "triggerAsyncId": 2056,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2058
      ],
      "uniqueid": 583
    },
    "584": {
      "source": "test/unit/scenario_test.js:89:10:89:10",
      "startTime": "1471912433215607",
      "endTime": "1471912435053831",
      "elapsedTime": "1838224",
      "asyncId": 2059,
      "triggerAsyncId": 2058,
      "io": "",
      "userCode": true,
      "line": "\n      scenario.test(test).fn(() => {});\n      return recorder.promise()\n        .then(() => expect(failed.called).is.ok)\n        .catch(() => null);\n    });\n  })",
      "startLine": 89,
      "startCol": 10,
      "endLine": 89,
      "endCol": 10,
      "file": "test/unit/scenario_test.js",
      "triggers": [
        2060
      ],
      "uniqueid": 584
    },
    "585": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471912433440058",
      "endTime": "1471912435616545",
      "elapsedTime": "2176487",
      "asyncId": 2062,
      "triggerAsyncId": 2060,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 585
    },
    "586": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912433649550",
      "endTime": "1471912433982404",
      "elapsedTime": "332854",
      "asyncId": 2063,
      "triggerAsyncId": 2055,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2067
      ],
      "uniqueid": 586
    },
    "587": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912433722707",
      "endTime": "1471912433735802",
      "elapsedTime": "13095",
      "asyncId": 2064,
      "triggerAsyncId": 2055,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2065
      ],
      "uniqueid": 587
    },
    "588": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912433807446",
      "endTime": "1471912433919907",
      "elapsedTime": "112461",
      "asyncId": 2065,
      "triggerAsyncId": 2064,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2066
      ],
      "uniqueid": 588
    },
    "589": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912433879241",
      "endTime": "1471912433993985",
      "elapsedTime": "114744",
      "asyncId": 2066,
      "triggerAsyncId": 2065,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 589
    },
    "590": {
      "source": "lib/recorder.js:124:25:124:25",
      "startTime": "1471912434201705",
      "endTime": "1471912434218396",
      "elapsedTime": "16691",
      "asyncId": 2069,
      "triggerAsyncId": 2058,
      "io": false,
      "userCode": true,
      "line": "\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /*",
      "startLine": 124,
      "startCol": 25,
      "endLine": 124,
      "endCol": 25,
      "file": "lib/recorder.js",
      "triggers": [
        2070
      ],
      "uniqueid": 590
    },
    "591": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912434301011",
      "endTime": "1471912435629248",
      "elapsedTime": "1328237",
      "asyncId": 2070,
      "triggerAsyncId": 2069,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2071,
        2075,
        2076
      ],
      "uniqueid": 591
    },
    "592": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912434382303",
      "endTime": "1471912436489159",
      "elapsedTime": "2106856",
      "asyncId": 2071,
      "triggerAsyncId": 2070,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2072,
        2084,
        2085
      ],
      "uniqueid": 592
    },
    "593": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912434453967",
      "endTime": "1471912437833608",
      "elapsedTime": "3379641",
      "asyncId": 2072,
      "triggerAsyncId": 2071,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2073,
        2092,
        2093
      ],
      "uniqueid": 593
    },
    "594": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912434526483",
      "endTime": "1471912438625391",
      "elapsedTime": "4098908",
      "asyncId": 2073,
      "triggerAsyncId": 2072,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2074,
        2100,
        2101
      ],
      "uniqueid": 594
    },
    "595": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912434618054",
      "endTime": "1471912438668902",
      "elapsedTime": "4050848",
      "asyncId": 2074,
      "triggerAsyncId": 2073,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2764
      ],
      "uniqueid": 595
    },
    "596": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912434753839",
      "endTime": "1471912435523841",
      "elapsedTime": "770002",
      "asyncId": 2075,
      "triggerAsyncId": 2070,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2082
      ],
      "uniqueid": 596
    },
    "597": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912434829450",
      "endTime": "1471912434843096",
      "elapsedTime": "13646",
      "asyncId": 2076,
      "triggerAsyncId": 2070,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2077
      ],
      "uniqueid": 597
    },
    "598": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912434911334",
      "endTime": "1471912435322414",
      "elapsedTime": "411080",
      "asyncId": 2077,
      "triggerAsyncId": 2076,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2078,
        2079
      ],
      "uniqueid": 598
    },
    "599": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912434984340",
      "endTime": "1471912435533960",
      "elapsedTime": "549620",
      "asyncId": 2078,
      "triggerAsyncId": 2077,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 599
    },
    "600": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912435116618",
      "endTime": "1471912435498694",
      "elapsedTime": "382076",
      "asyncId": 2079,
      "triggerAsyncId": 2077,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2080
      ],
      "uniqueid": 600
    },
    "601": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912435246422",
      "endTime": "1471912435310241",
      "elapsedTime": "63819",
      "asyncId": 2080,
      "triggerAsyncId": 2079,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2081
      ],
      "uniqueid": 601
    },
    "602": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912435297036",
      "endTime": "1471912435510666",
      "elapsedTime": "213630",
      "asyncId": 2081,
      "triggerAsyncId": 2080,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 602
    },
    "603": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912435719037",
      "endTime": "1471912436467669",
      "elapsedTime": "748632",
      "asyncId": 2084,
      "triggerAsyncId": 2071,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2091
      ],
      "uniqueid": 603
    },
    "604": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912435810578",
      "endTime": "1471912435828873",
      "elapsedTime": "18295",
      "asyncId": 2085,
      "triggerAsyncId": 2071,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2086
      ],
      "uniqueid": 604
    },
    "605": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912435912820",
      "endTime": "1471912436285057",
      "elapsedTime": "372237",
      "asyncId": 2086,
      "triggerAsyncId": 2085,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2087,
        2088
      ],
      "uniqueid": 605
    },
    "606": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912435986397",
      "endTime": "1471912436477327",
      "elapsedTime": "490930",
      "asyncId": 2087,
      "triggerAsyncId": 2086,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 606
    },
    "607": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912436084050",
      "endTime": "1471912436445157",
      "elapsedTime": "361107",
      "asyncId": 2088,
      "triggerAsyncId": 2086,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2089
      ],
      "uniqueid": 607
    },
    "608": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912436209415",
      "endTime": "1471912436274427",
      "elapsedTime": "65012",
      "asyncId": 2089,
      "triggerAsyncId": 2088,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2090
      ],
      "uniqueid": 608
    },
    "609": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912436261563",
      "endTime": "1471912436456698",
      "elapsedTime": "195135",
      "asyncId": 2090,
      "triggerAsyncId": 2089,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 609
    },
    "610": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912437116244",
      "endTime": "1471912437814151",
      "elapsedTime": "697907",
      "asyncId": 2092,
      "triggerAsyncId": 2072,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2099
      ],
      "uniqueid": 610
    },
    "611": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912437190904",
      "endTime": "1471912437204539",
      "elapsedTime": "13635",
      "asyncId": 2093,
      "triggerAsyncId": 2072,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2094
      ],
      "uniqueid": 611
    },
    "612": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912437277356",
      "endTime": "1471912437630527",
      "elapsedTime": "353171",
      "asyncId": 2094,
      "triggerAsyncId": 2093,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2095,
        2096
      ],
      "uniqueid": 612
    },
    "613": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912437346124",
      "endTime": "1471912437823649",
      "elapsedTime": "477525",
      "asyncId": 2095,
      "triggerAsyncId": 2094,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 613
    },
    "614": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912437412689",
      "endTime": "1471912437790246",
      "elapsedTime": "377557",
      "asyncId": 2096,
      "triggerAsyncId": 2094,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2097
      ],
      "uniqueid": 614
    },
    "615": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912437546700",
      "endTime": "1471912437619577",
      "elapsedTime": "72877",
      "asyncId": 2097,
      "triggerAsyncId": 2096,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2098
      ],
      "uniqueid": 615
    },
    "616": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912437604719",
      "endTime": "1471912437801628",
      "elapsedTime": "196909",
      "asyncId": 2098,
      "triggerAsyncId": 2097,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 616
    },
    "617": {
      "source": "node_modules/promise-retry/index.js:25:12:25:12",
      "startTime": "1471912437909900",
      "endTime": "1471912438602698",
      "elapsedTime": "692798",
      "asyncId": 2100,
      "triggerAsyncId": 2073,
      "io": false,
      "userCode": true,
      "line": "\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () ",
      "startLine": 25,
      "startCol": 12,
      "endLine": 25,
      "endCol": 12,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2107
      ],
      "uniqueid": 617
    },
    "618": {
      "source": "node_modules/promise-retry/index.js:27:21:27:21",
      "startTime": "1471912437980262",
      "endTime": "1471912437994739",
      "elapsedTime": "14477",
      "asyncId": 2101,
      "triggerAsyncId": 2073,
      "io": "",
      "userCode": true,
      "line": "\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) ",
      "startLine": 27,
      "startCol": 21,
      "endLine": 27,
      "endCol": 21,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2102
      ],
      "uniqueid": 618
    },
    "619": {
      "source": "node_modules/promise-retry/index.js:28:14:28:14",
      "startTime": "1471912438073697",
      "endTime": "1471912438423172",
      "elapsedTime": "349475",
      "asyncId": 2102,
      "triggerAsyncId": 2101,
      "io": "",
      "userCode": true,
      "line": "\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried",
      "startLine": 28,
      "startCol": 14,
      "endLine": 28,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [
        2103,
        2104
      ],
      "uniqueid": 619
    },
    "620": {
      "source": "node_modules/promise-retry/index.js:37:14:37:14",
      "startTime": "1471912438143668",
      "endTime": "1471912438612236",
      "elapsedTime": "468568",
      "asyncId": 2103,
      "triggerAsyncId": 2102,
      "io": "",
      "userCode": true,
      "line": "\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;",
      "startLine": 37,
      "startCol": 14,
      "endLine": 37,
      "endCol": 14,
      "file": "node_modules/promise-retry/index.js",
      "triggers": [],
      "uniqueid": 620
    },
    "621": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912438210844",
      "endTime": "1471912438580076",
      "elapsedTime": "369232",
      "asyncId": 2104,
      "triggerAsyncId": 2102,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2105
      ],
      "uniqueid": 621
    },
    "622": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912438339415",
      "endTime": "1471912438412312",
      "elapsedTime": "72897",
      "asyncId": 2105,
      "triggerAsyncId": 2104,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [
        2106
      ],
      "uniqueid": 622
    },
    "623": {
      "source": "lib/recorder.js:188:14:188:14",
      "startTime": "1471912438398906",
      "endTime": "1471912438591668",
      "elapsedTime": "192762",
      "asyncId": 2106,
      "triggerAsyncId": 2105,
      "io": "",
      "userCode": true,
      "line": "\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err)",
      "startLine": 188,
      "startCol": 14,
      "endLine": 188,
      "endCol": 14,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 623
    },
    "624": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1471912487795261",
      "endTime": "1471912487931546",
      "elapsedTime": "136285",
      "asyncId": 2760,
      "triggerAsyncId": 2758,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 624
    },
    "625": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1471912488395135",
      "endTime": "1471912488478992",
      "elapsedTime": "83857",
      "asyncId": 2761,
      "triggerAsyncId": 2758,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 625
    },
    "626": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1471912488850056",
      "endTime": "1471912488968679",
      "elapsedTime": "118623",
      "asyncId": 2762,
      "triggerAsyncId": 2758,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 626
    },
    "627": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1471912489274531",
      "endTime": "1471912489354812",
      "elapsedTime": "80281",
      "asyncId": 2763,
      "triggerAsyncId": 2758,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 627
    },
    "628": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471912504276362",
      "endTime": "1471912504295097",
      "elapsedTime": "18735",
      "asyncId": 2766,
      "triggerAsyncId": 2758,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        2767
      ],
      "uniqueid": 628
    },
    "629": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912504406355",
      "endTime": "1471912507746812",
      "elapsedTime": "3340457",
      "asyncId": 2767,
      "triggerAsyncId": 2766,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2799
      ],
      "uniqueid": 629
    },
    "630": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1471912504506653",
      "endTime": "1471912668664938",
      "elapsedTime": "164158285",
      "asyncId": 2768,
      "triggerAsyncId": 2758,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 630
    },
    "631": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1471912670270806",
      "endTime": "1471912670297927",
      "elapsedTime": "27121",
      "asyncId": 2795,
      "triggerAsyncId": 2793,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 631
    },
    "632": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1471912670419104",
      "endTime": "1471912670438771",
      "elapsedTime": "19667",
      "asyncId": 2796,
      "triggerAsyncId": 2793,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 632
    },
    "633": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1471912670551842",
      "endTime": "1471912670576809",
      "elapsedTime": "24967",
      "asyncId": 2797,
      "triggerAsyncId": 2793,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 633
    },
    "634": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1471912670687717",
      "endTime": "1471912670712013",
      "elapsedTime": "24296",
      "asyncId": 2798,
      "triggerAsyncId": 2793,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 634
    },
    "635": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912672449898",
      "endTime": "1471912674136657",
      "elapsedTime": "1686759",
      "asyncId": 2799,
      "triggerAsyncId": 2767,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2831
      ],
      "uniqueid": 635
    },
    "636": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1471912672554113",
      "endTime": "1471912824431595",
      "elapsedTime": "151877482",
      "asyncId": 2800,
      "triggerAsyncId": 2793,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 636
    },
    "637": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1471912825287799",
      "endTime": "1471912825313878",
      "elapsedTime": "26079",
      "asyncId": 2827,
      "triggerAsyncId": 2825,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 637
    },
    "638": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1471912825432289",
      "endTime": "1471912825450794",
      "elapsedTime": "18505",
      "asyncId": 2828,
      "triggerAsyncId": 2825,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 638
    },
    "639": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1471912825566140",
      "endTime": "1471912825594964",
      "elapsedTime": "28824",
      "asyncId": 2829,
      "triggerAsyncId": 2825,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 639
    },
    "640": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1471912825705110",
      "endTime": "1471912825726941",
      "elapsedTime": "21831",
      "asyncId": 2830,
      "triggerAsyncId": 2825,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 640
    },
    "641": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912827167620",
      "endTime": "1471912828781703",
      "elapsedTime": "1614083",
      "asyncId": 2831,
      "triggerAsyncId": 2799,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2863
      ],
      "uniqueid": 641
    },
    "642": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1471912827271484",
      "endTime": "1471912982698545",
      "elapsedTime": "155427061",
      "asyncId": 2832,
      "triggerAsyncId": 2825,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 642
    },
    "643": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1471912983578083",
      "endTime": "1471912983610523",
      "elapsedTime": "32440",
      "asyncId": 2859,
      "triggerAsyncId": 2857,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 643
    },
    "644": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1471912983727172",
      "endTime": "1471912983749464",
      "elapsedTime": "22292",
      "asyncId": 2860,
      "triggerAsyncId": 2857,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 644
    },
    "645": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1471912983886390",
      "endTime": "1471912983911166",
      "elapsedTime": "24776",
      "asyncId": 2861,
      "triggerAsyncId": 2857,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 645
    },
    "646": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1471912984034898",
      "endTime": "1471912984057581",
      "elapsedTime": "22683",
      "asyncId": 2862,
      "triggerAsyncId": 2857,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 646
    },
    "647": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471912984790033",
      "endTime": "1471912986467254",
      "elapsedTime": "1677221",
      "asyncId": 2863,
      "triggerAsyncId": 2831,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2895
      ],
      "uniqueid": 647
    },
    "648": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1471912984893226",
      "endTime": "1471913099671988",
      "elapsedTime": "114778762",
      "asyncId": 2864,
      "triggerAsyncId": 2857,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 648
    },
    "649": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1471913100473509",
      "endTime": "1471913100497134",
      "elapsedTime": "23625",
      "asyncId": 2891,
      "triggerAsyncId": 2889,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 649
    },
    "650": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1471913100612530",
      "endTime": "1471913100630944",
      "elapsedTime": "18414",
      "asyncId": 2892,
      "triggerAsyncId": 2889,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 650
    },
    "651": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1471913100747753",
      "endTime": "1471913100767640",
      "elapsedTime": "19887",
      "asyncId": 2893,
      "triggerAsyncId": 2889,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 651
    },
    "652": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1471913100879289",
      "endTime": "1471913100900870",
      "elapsedTime": "21581",
      "asyncId": 2894,
      "triggerAsyncId": 2889,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 652
    },
    "653": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471913102111357",
      "endTime": "1471913103723868",
      "elapsedTime": "1612511",
      "asyncId": 2895,
      "triggerAsyncId": 2863,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2927
      ],
      "uniqueid": 653
    },
    "654": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1471913102214841",
      "endTime": "1471913220949103",
      "elapsedTime": "118734262",
      "asyncId": 2896,
      "triggerAsyncId": 2889,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 654
    },
    "655": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1471913221760592",
      "endTime": "1471913221785209",
      "elapsedTime": "24617",
      "asyncId": 2923,
      "triggerAsyncId": 2921,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 655
    },
    "656": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1471913221901737",
      "endTime": "1471913221920632",
      "elapsedTime": "18895",
      "asyncId": 2924,
      "triggerAsyncId": 2921,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 656
    },
    "657": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1471913222055525",
      "endTime": "1471913222076274",
      "elapsedTime": "20749",
      "asyncId": 2925,
      "triggerAsyncId": 2921,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 657
    },
    "658": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1471913222189315",
      "endTime": "1471913222213952",
      "elapsedTime": "24637",
      "asyncId": 2926,
      "triggerAsyncId": 2921,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 658
    },
    "659": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471913222850374",
      "endTime": "1471913224556520",
      "elapsedTime": "1706146",
      "asyncId": 2927,
      "triggerAsyncId": 2895,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        2929
      ],
      "uniqueid": 659
    },
    "660": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1471913222953457",
      "endTime": "1471913364953277",
      "elapsedTime": "141999820",
      "asyncId": 2928,
      "triggerAsyncId": 2921,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [],
      "uniqueid": 660
    },
    "661": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471913223065937",
      "endTime": "1471913224655675",
      "elapsedTime": "1589738",
      "asyncId": 2929,
      "triggerAsyncId": 2927,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 661
    }
  },
  "files": {
    "lib/recorder.js": "const debug = require('debug')('codeceptjs:recorder');\nconst promiseRetry = require('promise-retry');\n\nconst { log } = require('./output');\n\nlet promise;\nlet running = false;\nlet errFn;\nlet queueId = 0;\nlet sessionId = null;\nlet asyncErr = null;\n\nlet tasks = [];\nlet oldPromises = [];\n\nconst defaultRetryOptions = {\n  retries: 0,\n  minTimeout: 150,\n  maxTimeout: 10000,\n};\n\n/**\n * Singleton object to record all test steps as promises and run them in chain.\n * @alias recorder\n * @interface\n */\nmodule.exports = {\n\n  /**\n   * @type {Array<Object<string, *>>}\n   * @inner\n   */\n  retries: [],\n\n  /**\n   * Start recording promises\n   *\n   * @api\n   * @inner\n   */\n  start() {\n    running = true;\n    asyncErr = null;\n    errFn = null;\n    this.reset();\n  },\n\n  /**\n   * @return {boolean}\n   * @inner\n   */\n  isRunning() {\n    return running;\n  },\n\n  /**\n   * @return {void}\n   * @inner\n   */\n  startUnlessRunning() {\n    if (!this.isRunning()) {\n      this.start();\n    }\n  },\n\n  /**\n   * Add error handler to catch rejected promises\n   *\n   * @api\n   * @param {function} fn\n   * @inner\n   */\n  errHandler(fn) {\n    errFn = fn;\n  },\n\n  /**\n   * Stops current promise chain, calls `catch`.\n   * Resets recorder to initial state.\n   *\n   * @api\n   * @inner\n   */\n  reset() {\n    if (promise && running) this.catch();\n    queueId++;\n    sessionId = null;\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false;\n    this.retries = [];\n  },\n\n  /**\n   * @name CodeceptJS.recorder~session\n   * @type {CodeceptJS.RecorderSession}\n   * @inner\n   */\n\n  /**\n   * @alias RecorderSession\n   * @interface\n   */\n  session: {\n    /**\n     * @type {boolean}\n     * @inner\n     */\n    running: false,\n\n    /**\n     * @param {string} name\n     * @inner\n     */\n    start(name) {\n      log(`${currentQueue()}Starting <${name}> session`);\n      tasks.push('--->');\n      oldPromises.push(promise);\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /**\n     * @param {string} name\n     * @inner\n     */\n    restore(name) {\n      tasks.push('<---');\n      log(`${currentQueue()}Finalize <${name}> session`);\n      this.running = false;\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /**\n     * @param {function} fn\n     * @inner\n     */\n    catch(fn) {\n      promise = promise.catch(fn);\n    },\n\n  },\n\n  /**\n   * Adds a promise to a chain.\n   * Promise description should be passed as first parameter.\n   *\n   * @param {string|function} taskName\n   * @param {function} [fn]\n   * @param {boolean} [force=false]\n   * @param {boolean} [retry]\n   *     undefined: `add(fn)` -> `false` and `add('step',fn)` -> `true`\n   *     true: it will retries if `retryOpts` set.\n   *     false: ignore `retryOpts` and won't retry.\n   * @return {Promise<*> | undefined}\n   * @inner\n   */\n  add(taskName, fn = undefined, force = false, retry = undefined) {\n    if (typeof taskName === 'function') {\n      fn = taskName;\n      taskName = fn.toString();\n      if (retry === undefined) retry = false;\n    }\n    if (retry === undefined) retry = true;\n    if (!running && !force) {\n      return;\n    }\n    tasks.push(taskName);\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse();\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err);\n          }\n          throw err;\n        }\n        /*\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err);\n          }\n          throw err;\n        });\n        */\n      });\n    });\n  },\n\n  /**\n   * @param {*} opts\n   * @return {*}\n   * @inner\n   */\n  retry(opts) {\n    if (!promise) return;\n\n    if (opts === null) {\n      opts = {};\n    }\n    if (Number.isInteger(opts)) {\n      opts = { retries: opts };\n    }\n    return this.add(() => this.retries.push(opts));\n  },\n\n  /**\n   * @param {function} [customErrFn]\n   * @return {Promise<*>}\n   * @inner\n   */\n  catch(customErrFn) {\n    return promise = promise.catch((err) => {\n      log(`${currentQueue()}Error | ${err}`);\n      if (!(err instanceof Error)) { // strange things may happen\n        err = new Error(`[Wrapped Error] ${JSON.stringify(err)}`); // we should be prepared for them\n      }\n      if (customErrFn) {\n        customErrFn(err);\n      } else if (errFn) {\n        errFn(err);\n      }\n      this.stop();\n    });\n  },\n\n  /**\n   * @param {function} customErrFn\n   * @return {Promise<*>}\n   * @inner\n   */\n  catchWithoutStop(customErrFn) {\n    return promise = promise.catch((err) => {\n      log(`${currentQueue()}Error | ${err}`);\n      if (!(err instanceof Error)) { // strange things may happen\n        err = new Error(`[Wrapped Error] ${JSON.stringify(err)}`); // we should be prepared for them\n      }\n      if (customErrFn) {\n        customErrFn(err);\n      } else if (errFn) {\n        errFn(err);\n      }\n    });\n  },\n\n  /**\n   * Adds a promise which throws an error into a chain\n   *\n   * @api\n   * @param {*} err\n   * @inner\n   */\n  throw(err) {\n    return this.add(`throw error ${err}`, () => {\n      throw err;\n    });\n  },\n\n  /**\n   * @param {*} err\n   * @inner\n   */\n  saveFirstAsyncError(err) {\n    if (asyncErr === null) {\n      asyncErr = err;\n    }\n  },\n\n  /**\n   * @return {*}\n   * @inner\n   */\n  getAsyncErr() {\n    return asyncErr;\n  },\n\n  /**\n   * @return {void}\n   * @inner\n   */\n  cleanAsyncErr() {\n    asyncErr = null;\n  },\n\n  /**\n   * Stops recording promises\n   * @api\n   * @inner\n   */\n  stop() {\n    debug(this.toString());\n    log(`${currentQueue()}Stopping recording promises`);\n    running = false;\n  },\n\n  /**\n   * Get latest promise in chain.\n   *\n   * @api\n   * @return {Promise<*>}\n   * @inner\n   */\n  promise() {\n    return promise;\n  },\n\n  /**\n   * Get a list of all chained tasks\n   * @return {string}\n   * @inner\n   */\n  scheduled() {\n    return tasks.join('\\n');\n  },\n\n  /**\n   * Get a state of current queue and tasks\n   * @return {string}\n   * @inner\n   */\n  toString() {\n    return `Queue: ${currentQueue()}\\n\\nTasks: ${this.scheduled()}`;\n  },\n\n};\n\nfunction currentQueue() {\n  let session = '';\n  if (sessionId) session = `<${sessionId}> `;\n  return `[${queueId}] ${session}`;\n}\n",
    "test/unit/actor_test.js": "const path = require('path');\nconst expect = require('expect');\n\nconst actor = require('../../lib/actor');\nconst container = require('../../lib/container');\nconst recorder = require('../../lib/recorder');\nconst event = require('../../lib/event');\n\nglobal.codecept_dir = path.join(__dirname, '/..');\nlet I;\nlet counter;\n\ndescribe('Actor', () => {\n  beforeEach(() => {\n    counter = 0;\n    container.clear({\n      MyHelper: {\n        hello: () => 'hello world',\n        bye: () => 'bye world',\n        die: () => { throw new Error('ups'); },\n        _hidden: () => 'hidden',\n        failAfter: (i = 1) => {\n          counter++;\n          if (counter <= i) throw new Error('ups');\n          counter = 0;\n        },\n      },\n      MyHelper2: {\n        greeting: () => 'greetings, world',\n      },\n    }, undefined, undefined);\n    container.translation().vocabulary.actions.hello = 'привет';\n    I = actor();\n    event.cleanDispatcher();\n  });\n\n  it('should init actor on store', () => {\n    const store = require('../../lib/store');\n    expect(store.actor).toBeTruthy();\n  });\n\n  it('should collect pageobject methods in actor', () => {\n    const poI = actor({\n      customStep: () => {},\n    });\n    expect(poI).toHaveProperty('customStep');\n    expect(I).toHaveProperty('customStep');\n  });\n\n  it('should correct run step from Helper inside PageObject', () => {\n    actor({\n      customStep() {\n        return this.hello();\n      },\n    });\n    recorder.start();\n    const promise = I.customStep();\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });\n\n  it('should init pageobject methods as metastep', () => {\n    actor({\n      customStep: () => 3,\n    });\n    expect(I.customStep()).toEqual(3);\n  });\n\n  it('should correct add translation for step from Helper', () => {\n    expect(I).toHaveProperty('привет');\n  });\n\n  it('should correct add translation for step from PageObject', () => {\n    container.translation().vocabulary.actions.customStep = 'кастомный_шаг';\n    actor({\n      customStep: () => 3,\n    });\n    expect(I).toHaveProperty('кастомный_шаг');\n  });\n\n  it('should take all methods from helpers and built in', () => {\n    ['hello', 'bye', 'die', 'failAfter', 'say', 'retry', 'greeting'].forEach(key => {\n      expect(I).toHaveProperty(key);\n    });\n  });\n\n  it('should return promise', () => {\n    recorder.start();\n    const promise = I.hello();\n    expect(promise).toBeInstanceOf(Promise);\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });\n\n  it('should produce step events', () => {\n    recorder.start();\n    let listeners = 0;\n    event.dispatcher.addListener(event.step.before, () => listeners++);\n    event.dispatcher.addListener(event.step.after, () => listeners++);\n    event.dispatcher.addListener(event.step.passed, (step) => {\n      listeners++;\n      expect(step.endTime).toBeTruthy();\n      expect(step.startTime).toBeTruthy();\n    });\n\n    return I.hello().then(() => {\n      expect(listeners).toEqual(3);\n    });\n  });\n\n  it('should retry failed step with #retry', () => {\n    recorder.start();\n    return I.retry({ retries: 2, minTimeout: 0 }).failAfter(1);\n  });\n\n  it('should retry once step with #retry', () => {\n    recorder.start();\n    return I.retry().failAfter(1);\n  });\n\n  it('should alway use the latest global retry options', () => {\n    recorder.start();\n    recorder.retry({\n      retries: 0,\n      minTimeout: 0,\n      when: () => true,\n    });\n    recorder.retry({\n      retries: 1,\n      minTimeout: 0,\n      when: () => true,\n    });\n    I.hello(); // before fix: this changed the order of retries\n    return I.failAfter(1);\n  });\n\n  it('should not delete a global retry option', () => {\n    recorder.start();\n    recorder.retry({\n      retries: 2,\n      minTimeout: 0,\n      when: () => true,\n    });\n    I.retry(1).failAfter(1); // before fix: this changed the order of retries\n    return I.failAfter(2);\n  });\n\n  it('should print handle failed steps', () => {\n    recorder.start();\n    let listeners = 0;\n    event.dispatcher.addListener(event.step.before, () => listeners++);\n    event.dispatcher.addListener(event.step.after, () => listeners++);\n    event.dispatcher.addListener(event.step.failed, (step) => {\n      listeners++;\n      expect(step.endTime).toBeTruthy();\n      expect(step.startTime).toBeTruthy();\n    });\n\n    return I.die()\n      .then(() => listeners = 0)\n      .catch(() => null)\n      .then(() => {\n        expect(listeners).toEqual(3);\n      });\n  });\n});\n",
    "node_modules/mocha/lib/runnable.js": "'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar Pending = require('./pending');\nvar debug = require('debug')('mocha:runnable');\nvar milliseconds = require('ms');\nvar utils = require('./utils');\nvar errors = require('./errors');\nvar createInvalidExceptionError = errors.createInvalidExceptionError;\nvar createMultipleDoneError = errors.createMultipleDoneError;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n * @private\n */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar clearTimeout = global.clearTimeout;\nvar toString = Object.prototype.toString;\n\nmodule.exports = Runnable;\n\n/**\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\n *\n * @class\n * @extends external:EventEmitter\n * @public\n * @param {String} title\n * @param {Function} fn\n */\nfunction Runnable(title, fn) {\n  this.title = title;\n  this.fn = fn;\n  this.body = (fn || '').toString();\n  this.async = fn && fn.length;\n  this.sync = !this.async;\n  this._timeout = 2000;\n  this._slow = 75;\n  this._retries = -1;\n  this.reset();\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\nutils.inherits(Runnable, EventEmitter);\n\n/**\n * Resets the state initially or for a next run.\n */\nRunnable.prototype.reset = function() {\n  this.timedOut = false;\n  this._currentRetry = 0;\n  this.pending = false;\n  delete this.state;\n  delete this.err;\n};\n\n/**\n * Get current timeout value in msecs.\n *\n * @private\n * @returns {number} current timeout threshold value\n */\n/**\n * @summary\n * Set timeout threshold value (msecs).\n *\n * @description\n * A string argument can use shorthand (e.g., \"2s\") and will be converted.\n * The value will be clamped to range [<code>0</code>, <code>2^<sup>31</sup>-1</code>].\n * If clamped value matches either range endpoint, timeouts will be disabled.\n *\n * @private\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value}\n * @param {number|string} ms - Timeout threshold value.\n * @returns {Runnable} this\n * @chainable\n */\nRunnable.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n\n  // Clamp to range\n  var INT_MAX = Math.pow(2, 31) - 1;\n  var range = [0, INT_MAX];\n  ms = utils.clamp(ms, range);\n\n  // see #1652 for reasoning\n  if (ms === range[0] || ms === range[1]) {\n    this._timeout = 0;\n  } else {\n    this._timeout = ms;\n  }\n  debug('timeout %d', this._timeout);\n\n  if (this.timer) {\n    this.resetTimeout();\n  }\n  return this;\n};\n\n/**\n * Set or get slow `ms`.\n *\n * @private\n * @param {number|string} ms\n * @return {Runnable|number} ms or Runnable instance.\n */\nRunnable.prototype.slow = function(ms) {\n  if (!arguments.length || typeof ms === 'undefined') {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Halt and mark as pending.\n *\n * @memberof Mocha.Runnable\n * @public\n */\nRunnable.prototype.skip = function() {\n  this.pending = true;\n  throw new Pending('sync skip; aborting execution');\n};\n\n/**\n * Check if this runnable or its parent suite is marked as pending.\n *\n * @private\n */\nRunnable.prototype.isPending = function() {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Return `true` if this Runnable has failed.\n * @return {boolean}\n * @private\n */\nRunnable.prototype.isFailed = function() {\n  return !this.isPending() && this.state === constants.STATE_FAILED;\n};\n\n/**\n * Return `true` if this Runnable has passed.\n * @return {boolean}\n * @private\n */\nRunnable.prototype.isPassed = function() {\n  return !this.isPending() && this.state === constants.STATE_PASSED;\n};\n\n/**\n * Set or get number of retries.\n *\n * @private\n */\nRunnable.prototype.retries = function(n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  this._retries = n;\n};\n\n/**\n * Set or get current retry\n *\n * @private\n */\nRunnable.prototype.currentRetry = function(n) {\n  if (!arguments.length) {\n    return this._currentRetry;\n  }\n  this._currentRetry = n;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Mocha.Runnable\n * @public\n * @return {string}\n */\nRunnable.prototype.fullTitle = function() {\n  return this.titlePath().join(' ');\n};\n\n/**\n * Return the title path generated by concatenating the parent's title path with the title.\n *\n * @memberof Mocha.Runnable\n * @public\n * @return {string}\n */\nRunnable.prototype.titlePath = function() {\n  return this.parent.titlePath().concat([this.title]);\n};\n\n/**\n * Clear the timeout.\n *\n * @private\n */\nRunnable.prototype.clearTimeout = function() {\n  clearTimeout(this.timer);\n};\n\n/**\n * Reset the timeout.\n *\n * @private\n */\nRunnable.prototype.resetTimeout = function() {\n  var self = this;\n  var ms = this.timeout();\n\n  if (ms === 0) {\n    return;\n  }\n  this.clearTimeout();\n  this.timer = setTimeout(function() {\n    if (self.timeout() === 0) {\n      return;\n    }\n    self.callback(self._timeoutError(ms));\n    self.timedOut = true;\n  }, ms);\n};\n\n/**\n * Set or get a list of whitelisted globals for this test run.\n *\n * @private\n * @param {string[]} globals\n */\nRunnable.prototype.globals = function(globals) {\n  if (!arguments.length) {\n    return this._allowedGlobals;\n  }\n  this._allowedGlobals = globals;\n};\n\n/**\n * Run the test and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @private\n */\nRunnable.prototype.run = function(fn) {\n  var self = this;\n  var start = new Date();\n  var ctx = this.ctx;\n  var finished;\n  var errorWasHandled = false;\n\n  if (this.isPending()) return fn();\n\n  // Sometimes the ctx exists, but it is not runnable\n  if (ctx && ctx.runnable) {\n    ctx.runnable(this);\n  }\n\n  // called multiple times\n  function multiple(err) {\n    if (errorWasHandled) {\n      return;\n    }\n    errorWasHandled = true;\n    self.emit('error', createMultipleDoneError(self, err));\n  }\n\n  // finished\n  function done(err) {\n    var ms = self.timeout();\n    if (self.timedOut) {\n      return;\n    }\n\n    if (finished) {\n      return multiple(err);\n    }\n\n    self.clearTimeout();\n    self.duration = new Date() - start;\n    finished = true;\n    if (!err && self.duration > ms && ms > 0) {\n      err = self._timeoutError(ms);\n    }\n    fn(err);\n  }\n\n  // for .resetTimeout() and Runner#uncaught()\n  this.callback = done;\n\n  if (this.fn && typeof this.fn.call !== 'function') {\n    done(\n      new TypeError(\n        'A runnable must be passed a function as its second argument.'\n      )\n    );\n    return;\n  }\n\n  // explicit async with `done` argument\n  if (this.async) {\n    this.resetTimeout();\n\n    // allows skip() to be used in an explicit async context\n    this.skip = function asyncSkip() {\n      this.pending = true;\n      done();\n      // halt execution, the uncaught handler will ignore the failure.\n      throw new Pending('async skip; aborting execution');\n    };\n\n    try {\n      callFnAsync(this.fn);\n    } catch (err) {\n      // handles async runnables which actually run synchronously\n      errorWasHandled = true;\n      if (err instanceof Pending) {\n        return; // done() is already called in this.skip()\n      } else if (this.allowUncaught) {\n        throw err;\n      }\n      done(Runnable.toValueOrError(err));\n    }\n    return;\n  }\n\n  // sync or promise-returning\n  try {\n    callFn(this.fn);\n  } catch (err) {\n    errorWasHandled = true;\n    if (err instanceof Pending) {\n      return done();\n    } else if (this.allowUncaught) {\n      throw err;\n    }\n    done(Runnable.toValueOrError(err));\n  }\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn about\n          // subsequently constructed Promises.\n          return null;\n        },\n        function(reason) {\n          done(reason || new Error('Promise rejected with no or falsy reason'));\n        }\n      );\n    } else {\n      if (self.asyncOnly) {\n        return done(\n          new Error(\n            '--async-only option in use without declaring `done()` or returning a promise'\n          )\n        );\n      }\n\n      done();\n    }\n  }\n\n  function callFnAsync(fn) {\n    var result = fn.call(ctx, function(err) {\n      if (err instanceof Error || toString.call(err) === '[object Error]') {\n        return done(err);\n      }\n      if (err) {\n        if (Object.prototype.toString.call(err) === '[object Object]') {\n          return done(\n            new Error('done() invoked with non-Error: ' + JSON.stringify(err))\n          );\n        }\n        return done(new Error('done() invoked with non-Error: ' + err));\n      }\n      if (result && utils.isPromise(result)) {\n        return done(\n          new Error(\n            'Resolution method is overspecified. Specify a callback *or* return a Promise; not both.'\n          )\n        );\n      }\n\n      done();\n    });\n  }\n};\n\n/**\n * Instantiates a \"timeout\" error\n *\n * @param {number} ms - Timeout (in milliseconds)\n * @returns {Error} a \"timeout\" error\n * @private\n */\nRunnable.prototype._timeoutError = function(ms) {\n  var msg =\n    'Timeout of ' +\n    ms +\n    'ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.';\n  if (this.file) {\n    msg += ' (' + this.file + ')';\n  }\n  return new Error(msg);\n};\n\nvar constants = utils.defineConstants(\n  /**\n   * {@link Runnable}-related constants.\n   * @public\n   * @memberof Runnable\n   * @readonly\n   * @static\n   * @alias constants\n   * @enum {string}\n   */\n  {\n    /**\n     * Value of `state` prop when a `Runnable` has failed\n     */\n    STATE_FAILED: 'failed',\n    /**\n     * Value of `state` prop when a `Runnable` has passed\n     */\n    STATE_PASSED: 'passed',\n    /**\n     * Value of `state` prop when a `Runnable` has been skipped by user\n     */\n    STATE_PENDING: 'pending'\n  }\n);\n\n/**\n * Given `value`, return identity if truthy, otherwise create an \"invalid exception\" error and return that.\n * @param {*} [value] - Value to return, if present\n * @returns {*|Error} `value`, otherwise an `Error`\n * @private\n */\nRunnable.toValueOrError = function(value) {\n  return (\n    value ||\n    createInvalidExceptionError(\n      'Runnable failed with falsy or undefined exception. Please throw an Error instead.',\n      value\n    )\n  );\n};\n\nRunnable.constants = constants;\n",
    "node_modules/promise-retry/index.js": "'use strict';\n\nvar errcode = require('err-code');\nvar retry = require('retry');\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction isRetryError(err) {\n    return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried');\n}\n\nfunction promiseRetry(fn, options) {\n    var temp;\n    var operation;\n\n    if (typeof fn === 'object' && typeof options === 'function') {\n        // Swap options and fn when using alternate signature (options, fn)\n        temp = options;\n        options = fn;\n        fn = temp;\n    }\n\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried;\n                    }\n\n                    throw errcode('Retrying', 'EPROMISERETRY', { retried: err });\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;\n\n                    if (operation.retry(err || new Error())) {\n                        return;\n                    }\n                }\n\n                reject(err);\n            });\n        });\n    });\n}\n\nmodule.exports = promiseRetry;\n",
    "lib/scenario.js": "const event = require('./event');\nconst recorder = require('./recorder');\nconst assertThrown = require('./assert/throws');\nconst { isAsyncFunction } = require('./utils');\nconst parser = require('./parser');\n\nconst injectHook = function (inject, suite) {\n  try {\n    inject();\n  } catch (err) {\n    recorder.throw(err);\n  }\n  recorder.catch((err) => {\n    event.emit(event.test.failed, suite, err);\n    throw err;\n  });\n  return recorder.promise();\n};\n\n/**\n * Wraps test function, injects support objects from container,\n * starts promise chain with recorder, performs before/after hooks\n * through event system.\n */\nmodule.exports.test = (test) => {\n  const testFn = test.fn;\n  if (!testFn) {\n    return test;\n  }\n\n  test.steps = [];\n  test.timeout(0);\n  test.async = true;\n\n  test.fn = function (done) {\n    recorder.errHandler((err) => {\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      if (test.throws) { // check that test should actually fail\n        try {\n          assertThrown(err, test.throws);\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test);\n          recorder.add(() => done());\n          return;\n        } catch (newErr) {\n          err = newErr;\n        }\n      }\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n\n    if (isAsyncFunction(testFn)) {\n      event.emit(event.test.started, test);\n\n      const catchError = e => {\n        recorder.throw(e);\n        recorder.catch((e) => {\n          const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n          recorder.session.start('teardown');\n          recorder.cleanAsyncErr();\n          event.emit(event.test.failed, test, err);\n          event.emit(event.test.finished, test);\n          recorder.add(() => done(err));\n        });\n      };\n\n      let injectedArguments;\n      try {\n        injectedArguments = getInjectedArguments(testFn, test);\n      } catch (e) {\n        catchError(e);\n        return;\n      }\n\n      testFn.call(test, injectedArguments).then(() => {\n        recorder.add('fire test.passed', () => {\n          event.emit(event.test.passed, test);\n          event.emit(event.test.finished, test);\n        });\n        recorder.add('finish test', () => done());\n        recorder.catch();\n      }).catch(catchError);\n      return;\n    }\n\n    try {\n      event.emit(event.test.started, test);\n      testFn.call(test, getInjectedArguments(testFn, test));\n    } catch (err) {\n      recorder.throw(err);\n    } finally {\n      recorder.add('fire test.passed', () => {\n        event.emit(event.test.passed, test);\n        event.emit(event.test.finished, test);\n      });\n      recorder.add('finish test', () => done());\n      recorder.catch();\n    }\n  };\n  return test;\n};\n\n/**\n * Injects arguments to function from controller\n */\nmodule.exports.injected = function (fn, suite, hookName) {\n  return function (done) {\n    const errHandler = (err) => {\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, suite, err);\n      if (hookName === 'after') event.emit(event.test.after, suite);\n      if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n      recorder.add(() => done(err));\n    };\n\n    recorder.errHandler((err) => {\n      errHandler(err);\n    });\n\n    if (!fn) throw new Error('fn is not defined');\n\n    event.emit(event.hook.started, suite);\n    if (!recorder.isRunning()) {\n      recorder.start();\n      recorder.errHandler((err) => {\n        errHandler(err);\n      });\n    }\n\n    this.test.body = fn.toString();\n\n    if (isAsyncFunction(fn)) {\n      fn.call(this, getInjectedArguments(fn)).then(() => {\n        recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n        recorder.add(`finish ${hookName} hook`, () => done());\n        recorder.catch();\n      }).catch((e) => {\n        recorder.throw(e);\n        recorder.catch((e) => {\n          const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n          errHandler(err);\n        });\n        recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n      });\n      return;\n    }\n\n    try {\n      fn.call(this, getInjectedArguments(fn));\n      recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n      recorder.add(`finish ${hookName} hook`, () => done());\n      recorder.catch();\n    } catch (err) {\n      recorder.throw(err);\n      recorder.catch((e) => {\n        const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n        errHandler(err);\n      });\n      recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n    }\n  };\n};\n\n/**\n * Starts promise chain, so helpers could enqueue their hooks\n */\nmodule.exports.setup = function (suite) {\n  return injectHook(() => {\n    recorder.startUnlessRunning();\n    event.emit(event.test.before, suite && suite.ctx && suite.ctx.currentTest);\n  }, suite);\n};\n\nmodule.exports.teardown = function (suite) {\n  return injectHook(() => {\n    recorder.startUnlessRunning();\n    event.emit(event.test.after, suite && suite.ctx && suite.ctx.currentTest);\n  }, suite);\n};\n\nmodule.exports.suiteSetup = function (suite) {\n  return injectHook(() => {\n    recorder.startUnlessRunning();\n    event.emit(event.suite.before, suite);\n  }, suite);\n};\n\nmodule.exports.suiteTeardown = function (suite) {\n  return injectHook(() => {\n    recorder.startUnlessRunning();\n    event.emit(event.suite.after, suite);\n  }, suite);\n};\n\nconst getInjectedArguments = (fn, test) => {\n  const container = require('./container');\n  const testArgs = {};\n  const params = parser.getParams(fn) || [];\n  const objects = container.support();\n  for (const key of params) {\n    testArgs[key] = {};\n    if (test && test.inject && test.inject[key]) {\n      // @FIX: need fix got inject\n      testArgs[key] = test.inject[key];\n      continue;\n    }\n    if (!objects[key]) {\n      throw new Error(`Object of type ${key} is not defined in container`);\n    }\n    testArgs[key] = container.support(key);\n  }\n\n  return testArgs;\n};\n\nmodule.exports.getInjectedArguments = getInjectedArguments;\n",
    "lib/interfaces/gherkin.js": "const { Parser } = require('gherkin');\nconst { Context, Suite, Test } = require('mocha');\n\nconst { matchStep } = require('./bdd');\nconst event = require('../event');\nconst scenario = require('../scenario');\nconst Step = require('../step');\nconst DataTableArgument = require('../data/dataTableArgument');\n\nconst parser = new Parser();\nparser.stopAtFirstError = false;\n\nmodule.exports = (text) => {\n  const ast = parser.parse(text);\n\n  const suite = new Suite(ast.feature.name, new Context());\n  const tags = ast.feature.tags.map(t => t.name);\n  suite.title = `${suite.title} ${tags.join(' ')}`.trim();\n  suite.tags = tags || [];\n  suite.comment = ast.feature.description;\n  suite.feature = ast.feature;\n  suite.timeout(0);\n\n  suite.beforeEach('codeceptjs.before', () => scenario.setup(suite));\n  suite.afterEach('codeceptjs.after', () => scenario.teardown(suite));\n  suite.beforeAll('codeceptjs.beforeSuite', () => scenario.suiteSetup(suite));\n  suite.afterAll('codeceptjs.afterSuite', () => scenario.suiteTeardown(suite));\n\n  const runSteps = async (steps) => {\n    for (const step of steps) {\n      const metaStep = new Step.MetaStep(null, step.text);\n      metaStep.actor = step.keyword.trim();\n      const setMetaStep = (step) => {\n        if (step.metaStep) step = step.metaStep; // assign metastep to metastep for nested steps\n        step.metaStep = metaStep;\n      };\n      const fn = matchStep(step.text);\n      if (step.argument) {\n        step.argument.parse = () => {\n          return new DataTableArgument(step.argument);\n        };\n        fn.params.push(step.argument);\n        if (step.argument.type === 'DataTable') metaStep.comment = `\\n${transformTable(step.argument)}`;\n        if (step.argument.content) metaStep.comment = `\\n${step.argument.content}`;\n      }\n      step.startTime = Date.now();\n      step.match = fn.line;\n      event.emit(event.bddStep.before, step);\n      event.dispatcher.on(event.step.before, setMetaStep);\n      try {\n        await fn(...fn.params);\n        step.status = 'passed';\n      } catch (err) {\n        step.status = 'failed';\n        step.err = err;\n        return err;\n      } finally {\n        step.endTime = Date.now();\n        event.dispatcher.removeListener(event.step.before, setMetaStep);\n      }\n      event.emit(event.bddStep.after, step);\n    }\n  };\n\n  for (const child of ast.feature.children) {\n    if (child.type === 'Background') {\n      suite.beforeEach('Before', scenario.injected(async () => runSteps(child.steps), suite, 'before'));\n      continue;\n    }\n    if (child.type === 'ScenarioOutline') {\n      for (const examples of child.examples) {\n        const fields = examples.tableHeader.cells.map(c => c.value);\n        for (const example of examples.tableBody) {\n          let exampleSteps = [...child.steps];\n          const current = {};\n          for (const index in example.cells) {\n            const placeholder = fields[index];\n            const value = example.cells[index].value;\n            current[placeholder] = value;\n            exampleSteps = exampleSteps.map((step) => {\n              step = { ...step };\n              step.text = step.text.replace(`<${placeholder}>`, value);\n              return step;\n            });\n          }\n          const tags = child.tags.map(t => t.name).concat(examples.tags.map(t => t.name));\n          const title = `${child.name} ${JSON.stringify(current)} ${tags.join(' ')}`.trim();\n          const test = new Test(title, async () => runSteps(addExampleInTable(exampleSteps, current)));\n          test.tags = suite.tags.concat(tags);\n          suite.addTest(scenario.test(test));\n        }\n      }\n      continue;\n    }\n    const tags = child.tags.map(t => t.name);\n    const title = `${child.name} ${tags.join(' ')}`.trim();\n    const test = new Test(title, async () => runSteps(child.steps));\n    test.tags = suite.tags.concat(tags);\n    suite.addTest(scenario.test(test));\n  }\n\n  return suite;\n};\n\nfunction transformTable(table) {\n  let str = '';\n  for (const id in table.rows) {\n    const cells = table.rows[id].cells;\n    str += cells.map(c => c.value).map(c => c.slice(0, 15).padEnd(15)).join(' | ');\n    str += '\\n';\n  }\n  return str;\n}\nfunction addExampleInTable(exampleSteps, placeholders) {\n  const steps = JSON.parse(JSON.stringify(exampleSteps));\n  for (const placeholder in placeholders) {\n    steps.map((step) => {\n      step = { ...step };\n      if (step.argument && step.argument.type === 'DataTable') {\n        for (const id in step.argument.rows) {\n          const cells = step.argument.rows[id].cells;\n          cells.map(c => (c.value = c.value.replace(`<${placeholder}>`, placeholders[placeholder])));\n        }\n      }\n      return step;\n    });\n  }\n  return steps;\n}\n",
    "test/unit/bdd_test.js": "const { expect } = require('chai');\nconst { Parser } = require('gherkin');\nconst {\n  Given,\n  When,\n  Then,\n  matchStep,\n  clearSteps,\n} = require('../../lib/interfaces/bdd');\nconst run = require('../../lib/interfaces/gherkin');\nconst recorder = require('../../lib/recorder');\nconst container = require('../../lib/container');\nconst actor = require('../../lib/actor');\nconst event = require('../../lib/event');\n\nconst text = `\n  Feature: checkout process\n  In order to buy products\n  As a customer\n  I want to be able to buy several products\n\n  @super\n  Scenario:\n    Given I have product with 600 price\n    And I have product with 1000 price\n    When I go to checkout process\n`;\n\ndescribe('BDD', () => {\n  beforeEach(() => {\n    clearSteps();\n    recorder.start();\n    container.create({});\n  });\n\n  afterEach(() => {\n    container.clear();\n    recorder.stop();\n  });\n\n  it('should parse gherkin input', () => {\n    const parser = new Parser();\n    parser.stopAtFirstError = false;\n    const ast = parser.parse(text);\n    // console.log('Feature', ast.feature);\n    // console.log('Scenario', ast.feature.children);\n    // console.log('Steps', ast.feature.children[0].steps[0]);\n    expect(ast.feature).is.ok;\n    expect(ast.feature.children).is.ok;\n    expect(ast.feature.children[0].steps).is.ok;\n  });\n\n  it('should load step definitions', () => {\n    Given('I am a bird', () => 1);\n    When('I fly over ocean', () => 2);\n    Then(/I see (.*?)/, () => 3);\n    expect(1).is.equal(matchStep('I am a bird')());\n    expect(3).is.equal(matchStep('I see ocean')());\n    expect(3).is.equal(matchStep('I see world')());\n  });\n\n  it('should contain tags', async () => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => sum += 10);\n    const suite = run(text);\n    suite.tests[0].fn(() => {});\n    expect(suite.tests[0].tags).is.ok;\n    expect('@super').is.equal(suite.tests[0].tags[0]);\n  });\n\n  it('should load step definitions', (done) => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => sum += 10);\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n    suite.tests[0].fn(() => {\n      expect(suite.tests[0].steps).is.ok;\n      expect(1610).is.equal(sum);\n      done();\n    });\n  });\n\n  it('should allow failed steps', (done) => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => expect(false).is.false);\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n    let errored = false;\n    suite.tests[0].fn((err) => {\n      errored = !!err;\n      expect(errored).is.exist;\n      done();\n    });\n  });\n\n  it('should work with async functions', (done) => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', async () => {\n      return new Promise((checkoutDone) => {\n        sum += 10;\n        setTimeout(checkoutDone, 0);\n      });\n    });\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n    suite.tests[0].fn(() => {\n      expect(suite.tests[0].steps).is.ok;\n      expect(1610).is.equal(sum);\n      done();\n    });\n  });\n\n  it('should execute scenarios step-by-step ', (done) => {\n    printed = [];\n    container.append({\n      helpers: {\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          },\n        },\n      },\n    });\n    I = actor();\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, (price) => {\n      I.do('add', sum += parseInt(price, 10));\n    });\n    When('I go to checkout process', () => {\n      I.do('add finish checkout');\n    });\n    const suite = run(text);\n    suite.tests[0].fn(() => {\n      recorder.promise().then(() => {\n        printed.should.include.members([\n          'add 600',\n          'add 1600',\n          'add finish checkout',\n        ]);\n        const lines = recorder.scheduled().split('\\n');\n        lines.should.include.members([\n          'do: \"add\", 600',\n          'step passed',\n          'return result',\n          'do: \"add\", 1600',\n          'step passed',\n          'return result',\n          'do: \"add finish checkout\"',\n          'step passed',\n          'return result',\n          'fire test.passed',\n          'finish test',\n        ]);\n        done();\n      });\n    });\n  });\n\n  it('should match step with params', () => {\n    Given('I am a {word}', param => param);\n    const fn = matchStep('I am a bird');\n    expect('bird').is.equal(fn.params[0]);\n  });\n\n  it('should produce step events', (done) => {\n    const text = `\n    Feature: Emit step event\n\n      Scenario:\n        Then I emit step events\n    `;\n    Then('I emit step events', () => {});\n    let listeners = 0;\n    event.dispatcher.addListener(event.bddStep.before, () => listeners++);\n    event.dispatcher.addListener(event.bddStep.after, () => listeners++);\n\n    const suite = run(text);\n    suite.tests[0].fn(() => {\n      listeners.should.eql(2);\n      done();\n    });\n  });\n\n  it('should use shortened form for step definitions', () => {\n    let fn;\n    Given('I am a {word}', params => params[0]);\n    When('I have {int} wings and {int} eyes', params => params[0] + params[1]);\n    Given('I have ${int} in my pocket', params => params[0]); // eslint-disable-line no-template-curly-in-string\n    Given('I have also ${float} in my pocket', params => params[0]); // eslint-disable-line no-template-curly-in-string\n    fn = matchStep('I am a bird');\n    expect('bird').is.equal(fn(fn.params));\n    fn = matchStep('I have 2 wings and 2 eyes');\n    expect(4).is.equal(fn(fn.params));\n    fn = matchStep('I have $500 in my pocket');\n    expect(500).is.equal(fn(fn.params));\n    fn = matchStep('I have also $500.30 in my pocket');\n    expect(500.30).is.equal(fn(fn.params));\n  });\n\n  it('should attach before hook for Background', () => {\n    const text = `\n    Feature: checkout process\n\n      Background:\n        Given I am logged in as customer\n\n      Scenario:\n        Then I am shopping\n    `;\n    let sum = 0;\n    Given('I am logged in as customer', () => sum++);\n    Then('I am shopping', () => sum++);\n    const suite = run(text);\n    const done = () => { };\n    suite._beforeEach.forEach(hook => hook.run(done));\n    suite.tests[0].fn(done);\n    expect(2).is.equal(sum);\n  });\n\n  it('should execute scenario outlines', (done) => {\n    const text = `\n    @awesome @cool\n    Feature: checkout process\n\n    @super\n    Scenario Outline: order discount\n      Given I have product with price <price>$ in my cart\n      And discount is 10 %\n      Then I should see price is \"<total>\" $\n\n      Examples:\n        | price | total |\n        | 10    | 9     |\n\n      @exampleTag1\n      @exampleTag2\n      Examples:\n        | price | total |\n        | 20    | 18    |\n    `;\n    let cart = 0;\n    let sum = 0;\n    Given('I have product with price {int}$ in my cart', (price) => {\n      cart = price;\n    });\n    Given('discount is {int} %', (discount) => {\n      cart -= cart * discount / 100;\n    });\n    Then('I should see price is {string} $', (total) => {\n      sum = parseInt(total, 10);\n    });\n\n    const suite = run(text);\n\n    expect(suite.tests[0].tags).is.ok;\n    expect(['@awesome', '@cool', '@super']).is.deep.equal(suite.tests[0].tags);\n    expect(['@awesome', '@cool', '@super', '@exampleTag1', '@exampleTag2']).is.deep.equal(suite.tests[1].tags);\n\n    expect(2).is.equal(suite.tests.length);\n    suite.tests[0].fn(() => {\n      expect(9).is.equal(cart);\n      expect(9).is.equal(sum);\n\n      suite.tests[1].fn(() => {\n        expect(18).is.equal(cart);\n        expect(18).is.equal(sum);\n        done();\n      });\n    });\n  });\n\n  it('should provide a parsed DataTable', (done) => {\n    const text = `\n    @awesome @cool\n    Feature: checkout process\n\n    @super\n    Scenario: order products\n      Given I have the following products :\n        | label   | price  |\n        | beer    | 9      |\n        | cookies | 12     |\n      Then I should see the following products :\n        | label   | price  |\n        | beer    | 9      |\n        | cookies | 12     |\n    `;\n\n    let givenParsedRows;\n    let thenParsedRows;\n\n    Given('I have the following products :', (products) => {\n      givenParsedRows = products.parse();\n    });\n    Then('I should see the following products :', (products) => {\n      thenParsedRows = products.parse();\n    });\n\n    const suite = run(text);\n\n    const expectedParsedDataTable = [\n      ['label', 'price'],\n      ['beer', '9'],\n      ['cookies', '12'],\n    ];\n    suite.tests[0].fn(() => {\n      expect(givenParsedRows.rawData).is.deep.equal(expectedParsedDataTable);\n      expect(thenParsedRows.rawData).is.deep.equal(expectedParsedDataTable);\n      done();\n    });\n  });\n});\n",
    "lib/data/dataScenarioConfig.js": "class DataScenarioConfig {\n  constructor(scenarios) {\n    this.scenarios = scenarios;\n  }\n\n  /**\n     * Declares that test throws error.\n     * Can pass an Error object or regex matching expected message.\n     *\n     * @param {*} err\n     */\n  throws(err) {\n    this.scenarios.forEach(scenario => scenario.throws(err));\n    return this;\n  }\n\n  /**\n     * Declares that test should fail.\n     * If test passes - throws an error.\n     * Can pass an Error object or regex matching expected message.\n     *\n     */\n  fails() {\n    this.scenarios.forEach(scenario => scenario.fails());\n    return this;\n  }\n\n  /**\n     * Retry this test for x times\n     *\n     * @param {*} retries\n     */\n  retry(retries) {\n    this.scenarios.forEach(scenario => scenario.retry(retries));\n    return this;\n  }\n\n  /**\n     * Set timeout for this test\n     * @param {*} timeout\n     */\n  timeout(timeout) {\n    this.scenarios.forEach(scenario => scenario.timeout(timeout));\n    return this;\n  }\n\n  /**\n     * Configures a helper.\n     * Helper name can be omitted and values will be applied to first helper.\n     */\n  config(helper, obj) {\n    this.scenarios.forEach(scenario => scenario.config(helper, obj));\n    return this;\n  }\n\n  /**\n     * Append a tag name to scenario title\n     * @param {*} tagName\n     */\n  tag(tagName) {\n    this.scenarios.forEach(scenario => scenario.tag(tagName));\n    return this;\n  }\n\n  /**\n     * Pass in additional objects to inject into test\n     * @param {*} obj\n     */\n  inject(obj) {\n    this.scenarios.forEach(scenario => scenario.inject(obj));\n    return this;\n  }\n\n  /**\n     * Dynamically injects dependencies, see https://codecept.io/pageobjects/#dynamic-injection\n     * @param {*} dependencies\n     */\n  injectDependencies(dependencies) {\n    this.scenarios.forEach(scenario => scenario.injectDependencies(dependencies));\n    return this;\n  }\n}\n\nmodule.exports = DataScenarioConfig;\n",
    "lib/within.js": "const output = require('./output');\nconst store = require('./store');\nconst recorder = require('./recorder');\nconst container = require('./container');\nconst event = require('./event');\nconst Step = require('./step');\nconst { isAsyncFunction } = require('./utils');\n\n/**\n * @param {CodeceptJS.LocatorOrString}  context\n * @param {Function}  fn\n * @return {Promise<*> | undefined}\n */\nfunction within(context, fn) {\n  const helpers = store.dryRun ? {} : container.helpers();\n  const locator = typeof context === 'object' ? JSON.stringify(context) : context;\n\n  return recorder.add('register within wrapper', () => {\n    const metaStep = new Step.MetaStep('Within', `\"${locator}\"`);\n    const defineMetaStep = step => step.metaStep = metaStep;\n    recorder.session.start('within');\n\n    event.dispatcher.on(event.step.before, defineMetaStep);\n\n    Object.keys(helpers).forEach((helper) => {\n      if (helpers[helper]._withinBegin) recorder.add(`[${helper}] start within`, () => helpers[helper]._withinBegin(context));\n    });\n\n    const finalize = () => {\n      event.dispatcher.removeListener(event.step.before, defineMetaStep);\n      recorder.add('Finalize session within session', () => {\n        output.stepShift = 1;\n        recorder.session.restore('within');\n      });\n    };\n    const finishHelpers = () => {\n      Object.keys(helpers).forEach((helper) => {\n        if (helpers[helper]._withinEnd) recorder.add(`[${helper}] finish within`, () => helpers[helper]._withinEnd());\n      });\n    };\n\n    if (isAsyncFunction(fn)) {\n      return fn().then((res) => {\n        finishHelpers();\n        finalize();\n        return recorder.promise().then(() => res);\n      }).catch((e) => {\n        finalize();\n        recorder.throw(e);\n      });\n    }\n\n    let res;\n    try {\n      res = fn();\n    } catch (err) {\n      recorder.throw(err);\n    } finally {\n      finishHelpers();\n      recorder.catch((err) => {\n        output.stepShift = 1;\n        throw err;\n      });\n    }\n    finalize();\n    return recorder.promise().then(() => res);\n  }, false, false);\n}\n\nmodule.exports = within;\n",
    "lib/session.js": "const recorder = require('./recorder');\nconst container = require('./container');\nconst event = require('./event');\nconst output = require('./output');\nconst store = require('./store');\nconst { isAsyncFunction } = require('./utils');\n\nconst sessionColors = [\n  'cyan',\n  'blue',\n  'red',\n  'magenta',\n  'yellow',\n];\n\nconst savedSessions = {};\n\n/**\n * @param {CodeceptJS.LocatorOrString}  sessionName\n * @param {Function | Object<string, *>}  config\n * @param {Function}  [fn]\n * @return {Promise<*> | undefined}\n */\nfunction session(sessionName, config, fn) {\n  if (typeof config === 'function') {\n    if (typeof fn === 'function') {\n      config = config();\n    } else {\n      // no config but with function\n      fn = config;\n      config = {};\n    }\n  }\n  // session helpers won't use beforeSuite and afterSuite hooks...\n  // restart: false options are not allowed as well\n  // but those helpers should be already started so inside listener/helpers.js the `_init` method should already be called\n\n  const helpers = container.helpers();\n\n  if (!savedSessions[sessionName]) {\n    for (const helper in helpers) {\n      if (!helpers[helper]._session) continue;\n      savedSessions[sessionName] = {\n        start: () => null,\n        stop: () => null,\n        loadVars: () => null,\n        restoreVars: () => null,\n        ...(store.dryRun ? {} : helpers[helper]._session()),\n      };\n      break;\n    }\n\n    const closeBrowsers = () => {\n      const session = savedSessions[sessionName];\n      if (!session) return;\n      session.stop(session.vars);\n      delete savedSessions[sessionName];\n    };\n\n    event.dispatcher.once(event.test.after, () => {\n      recorder.add('close session browsers', closeBrowsers);\n    });\n\n    if (!savedSessions[sessionName]) {\n      throw new Error('Configured helpers do not support starting sessions. Please use a helper with session support.');\n    }\n\n    recorder.add('save vars', async () => {\n      savedSessions[sessionName].vars = await savedSessions[sessionName].start(sessionName, config);\n    });\n  }\n\n  // pick random color\n  const color = sessionColors[Object.keys(savedSessions).indexOf(sessionName) % sessionColors.length];\n\n  const addContextToStep = (step) => {\n    step.actor = `${output.colors[color](sessionName)}: I`;\n  };\n\n  if (!fn) return; // no current session steps\n\n  return recorder.add('register session wrapper', async () => {\n    const session = savedSessions[sessionName];\n    recorder.session.start(`session:${sessionName}`);\n    event.dispatcher.on(event.step.after, addContextToStep);\n    recorder.add('switch to browser', () => {\n      const session = savedSessions[sessionName];\n      return session.loadVars(session.vars);\n    });\n\n    const finalize = () => {\n      recorder.add('Finalize session', async () => {\n        output.stepShift = 0;\n        event.dispatcher.removeListener(event.step.after, addContextToStep);\n        await session.restoreVars();\n        recorder.session.restore(`session:${sessionName}`);\n      });\n    };\n\n    // Indicate when executing this function that we are in a session\n    if (isAsyncFunction(fn)) {\n      return fn.apply(null).then((res) => {\n        finalize();\n        return recorder.promise().then(() => res);\n      }).catch((e) => {\n        output.stepShift = 0;\n        session.restoreVars(sessionName);\n        event.dispatcher.removeListener(event.step.after, addContextToStep);\n        recorder.throw(e);\n        return recorder.promise();\n      });\n    }\n\n    let res;\n    try {\n      res = fn.apply(null);\n    } catch (err) {\n      recorder.throw(err);\n    } finally {\n      recorder.catch((e) => {\n        session.restoreVars(sessionName);\n        output.stepShift = 0;\n        event.dispatcher.removeListener(event.step.after, addContextToStep);\n        throw e;\n      });\n    }\n    finalize();\n    return recorder.promise().then(() => res);\n  }, false, false);\n}\n\nmodule.exports = session;\n",
    "test/unit/recorder_test.js": "const { expect } = require('chai');\n\nconst recorder = require('../../lib/recorder');\n\ndescribe('Recorder', () => {\n  beforeEach(() => recorder.start());\n\n  it('should create a promise', () => {\n    expect(recorder.promise()).to.be.instanceof(Promise);\n  });\n\n  it('should execute error handler on error', (done) => {\n    recorder.errHandler(() => done());\n    recorder.throw(new Error('err'));\n    recorder.catch();\n  });\n\n  describe('#session', () => {\n    it('can be started saving previous promise chain', () => {\n      let order = '';\n      recorder.add(() => order += 'a');\n      recorder.add(() => {\n        recorder.session.start();\n        recorder.add(() => order += 'c');\n        recorder.add(() => order += 'd');\n      });\n      recorder.add(() => recorder.session.restore());\n      recorder.add(() => order += 'b');\n      return recorder.promise()\n        .then(() => expect(order).is.equal('acdb'));\n    });\n  });\n\n  describe('#add', () => {\n    it('should add steps to promise', () => {\n      let counter = 0;\n      recorder.add(() => counter++);\n      recorder.add(() => counter++);\n      recorder.add(() => expect(counter).eql(2));\n      return recorder.promise();\n    });\n\n    it('should not add steps when stopped', () => {\n      let counter = 0;\n      recorder.add(() => counter++);\n      recorder.stop();\n      recorder.add(() => counter++);\n      return recorder.promise()\n        .then(() => expect(counter).eql(1));\n    });\n  });\n\n  describe('#retry', () => {\n    it('should retry failed steps when asked', () => {\n      let counter = 0;\n      recorder.retry(2);\n      recorder.add(() => {\n        counter++;\n        if (counter < 3) {\n          throw new Error('ups');\n        }\n      }, undefined, undefined, true);\n      return recorder.promise();\n    });\n\n    it('should create a chain of retries', () => {\n      let counter = 0;\n      const errorText = 'noerror';\n      recorder.retry({ retries: 2, when: (err) => { return err.message === errorText; } });\n      recorder.retry({ retries: 2, when: (err) => { return err.message === 'othererror'; } });\n\n      recorder.add(() => {\n        counter++;\n        if (counter < 3) {\n          throw new Error(errorText);\n        }\n      }, undefined, undefined, true);\n      return recorder.promise();\n    });\n  });\n});\n",
    "test/unit/scenario_test.js": "const { expect } = require('chai');\nconst sinon = require('sinon');\n\nconst scenario = require('../../lib/scenario');\nconst recorder = require('../../lib/recorder');\nconst event = require('../../lib/event');\n\nlet test;\nlet fn;\nlet before;\nlet after;\nlet beforeSuite;\nlet afterSuite;\nlet failed;\nlet started;\n\ndescribe('Scenario', () => {\n  beforeEach(() => {\n    test = { timeout: () => { } };\n    fn = sinon.spy();\n    test.fn = fn;\n  });\n  beforeEach(() => recorder.reset());\n  afterEach(() => event.cleanDispatcher());\n\n  it('should wrap test function', () => {\n    scenario.test(test).fn(() => {});\n    expect(fn.called).is.ok;\n  });\n\n  it('should work with async func', () => {\n    let counter = 0;\n    test.fn = () => {\n      recorder.add('test', async () => {\n        await counter++;\n        await counter++;\n        await counter++;\n        counter++;\n      });\n    };\n\n    scenario.setup();\n    scenario.test(test).fn(() => null);\n    recorder.add('validation', () => expect(counter).to.eq(4));\n    return recorder.promise();\n  });\n\n  describe('events', () => {\n    beforeEach(() => {\n      event.dispatcher.on(event.test.before, before = sinon.spy());\n      event.dispatcher.on(event.test.after, after = sinon.spy());\n      event.dispatcher.on(event.test.started, started = sinon.spy());\n      event.dispatcher.on(event.suite.before, beforeSuite = sinon.spy());\n      event.dispatcher.on(event.suite.after, afterSuite = sinon.spy());\n      scenario.suiteSetup();\n      scenario.setup();\n    });\n\n    it('should fire events', () => {\n      scenario.test(test).fn(() => null);\n      expect(started.called).is.ok;\n      scenario.teardown();\n      scenario.suiteTeardown();\n      return recorder.promise()\n        .then(() => expect(beforeSuite.called).is.ok)\n        .then(() => expect(afterSuite.called).is.ok)\n        .then(() => expect(before.called).is.ok)\n        .then(() => expect(after.called).is.ok);\n    });\n\n    it('should fire failed event on error', () => {\n      event.dispatcher.on(event.test.failed, failed = sinon.spy());\n      scenario.setup();\n      test.fn = () => {\n        throw new Error('ups');\n      };\n      scenario.test(test).fn(() => {});\n      return recorder.promise()\n        .then(() => expect(failed.called).is.ok)\n        .catch(() => null);\n    });\n\n    it('should fire failed event on async error', () => {\n      test.fn = () => {\n        recorder.throw(new Error('ups'));\n      };\n      scenario.test(test).fn(() => {});\n      return recorder.promise()\n        .then(() => expect(failed.called).is.ok)\n        .catch(() => null);\n    });\n  });\n});\n",
    "lib/codecept.js": "const { existsSync, readFileSync } = require('fs');\nconst glob = require('glob');\nconst fsPath = require('path');\nconst { resolve } = require('path');\n\nconst container = require('./container');\nconst Config = require('./config');\nconst event = require('./event');\nconst runHook = require('./hooks');\nconst output = require('./output');\n\n/**\n * CodeceptJS runner\n */\nclass Codecept {\n  /**\n   * Create CodeceptJS runner.\n   * Config and options should be passed\n   *\n   * @param {*} config\n   * @param {*} opts\n   */\n  constructor(config, opts) {\n    this.config = Config.create(config);\n    this.opts = opts;\n    this.testFiles = new Array(0);\n    this.requireModules(config.require);\n  }\n\n  /**\n   * Require modules before codeceptjs running\n   *\n   * @param {string[]} requiringModules\n   */\n  requireModules(requiringModules) {\n    if (requiringModules) {\n      requiringModules.forEach((requiredModule) => {\n        const isLocalFile = existsSync(requiredModule) || existsSync(`${requiredModule}.js`);\n        if (isLocalFile) {\n          requiredModule = resolve(requiredModule);\n        }\n        require(requiredModule);\n      });\n    }\n  }\n\n  /**\n   * Initialize CodeceptJS at specific directory.\n   * If async initialization is required, pass callback as second parameter.\n   *\n   * @param {string} dir\n   */\n  init(dir) {\n    this.initGlobals(dir);\n    // initializing listeners\n    container.create(this.config, this.opts);\n    this.runHooks();\n  }\n\n  /**\n   * Creates global variables\n   *\n   * @param {string} dir\n   */\n  initGlobals(dir) {\n    global.codecept_dir = dir;\n    global.output_dir = fsPath.resolve(dir, this.config.output);\n\n    if (!this.config.noGlobals) {\n      global.actor = global.codecept_actor = require('./actor');\n      global.Helper = global.codecept_helper = require('./helper');\n      global.pause = require('./pause');\n      global.within = require('./within');\n      global.session = require('./session');\n      global.DataTable = require('./data/table');\n      global.locate = locator => require('./locator').build(locator);\n      global.inject = container.support;\n      global.share = container.share;\n      global.secret = require('./secret').secret;\n      global.codeceptjs = require('./index'); // load all objects\n\n      // BDD\n      const stepDefinitions = require('./interfaces/bdd');\n      global.Given = stepDefinitions.Given;\n      global.When = stepDefinitions.When;\n      global.Then = stepDefinitions.Then;\n    }\n  }\n\n  /**\n   * Executes hooks.\n   */\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook));\n  }\n\n  /**\n   * Executes bootstrap.\n   *\n   */\n  async bootstrap() {\n    return runHook(this.config.bootstrap, 'bootstrap');\n  }\n\n  /**\n   * Executes teardown.\n\n   */\n  async teardown() {\n    return runHook(this.config.teardown, 'teardown');\n  }\n\n  /**\n   * Loads tests by pattern or by config.tests\n   *\n   * @param {string} [pattern]\n   */\n  loadTests(pattern) {\n    const options = {\n      cwd: global.codecept_dir,\n    };\n\n    let patterns = [pattern];\n    if (!pattern) {\n      patterns = [];\n      if (this.config.tests && !this.opts.features) patterns.push(this.config.tests);\n      if (this.config.gherkin.features && !this.opts.tests) patterns.push(this.config.gherkin.features);\n    }\n\n    for (pattern of patterns) {\n      glob.sync(pattern, options).forEach((file) => {\n        if (!fsPath.isAbsolute(file)) {\n          file = fsPath.join(global.codecept_dir, file);\n        }\n        this.testFiles.push(fsPath.resolve(file));\n      });\n    }\n  }\n\n  /**\n   * Run a specific test or all loaded tests.\n   *\n   * @param {string} [test]\n   */\n  async run(test) {\n    return new Promise((resolve, reject) => {\n      const mocha = container.mocha();\n      mocha.files = this.testFiles;\n      if (test) {\n        if (!fsPath.isAbsolute(test)) {\n          test = fsPath.join(global.codecept_dir, test);\n        }\n        mocha.files = mocha.files.filter(t => fsPath.basename(t, '.js') === test || t === test);\n      }\n      const done = () => {\n        event.emit(event.all.result, this);\n        event.emit(event.all.after, this);\n        resolve();\n      };\n\n      try {\n        event.emit(event.all.before, this);\n        mocha.run(() => done());\n      } catch (e) {\n        output.error(e.stack);\n        reject(e);\n      }\n    });\n  }\n\n  static version() {\n    return JSON.parse(readFileSync(`${__dirname}/../package.json`, 'utf8')).version;\n  }\n}\n\nmodule.exports = Codecept;\n",
    "lib/workers.js": "/* eslint-disable max-classes-per-file */\nconst { EventEmitter } = require('events');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { Worker } = require('worker_threads');\nconst { Suite, Test, reporters: { Base } } = require('mocha');\nconst Codecept = require('./codecept');\nconst MochaFactory = require('./mochaFactory');\nconst Container = require('./container');\nconst { getTestRoot } = require('./command/utils');\nconst { isFunction, fileExists } = require('./utils');\nconst mainConfig = require('./config');\nconst output = require('./output');\nconst event = require('./event');\nconst recorder = require('./recorder');\nconst runHook = require('./hooks');\nconst WorkerStorage = require('./workerStorage');\n\nconst pathToWorker = path.join(__dirname, 'command', 'workers', 'runTests.js');\n\nconst initializeCodecept = (configPath, options = {}) => {\n  const codecept = new Codecept(mainConfig.load(configPath || '.'), options);\n  codecept.init(getTestRoot(configPath));\n  codecept.loadTests();\n\n  return codecept;\n};\n\nconst createOutputDir = (configPath) => {\n  const config = mainConfig.load(configPath || '.');\n  const testRoot = getTestRoot(configPath);\n  const outputDir = path.isAbsolute(config.output) ? config.output : path.join(testRoot, config.output);\n\n  if (!fileExists(outputDir)) {\n    output.print(`creating output directory: ${outputDir}`);\n    mkdirp.sync(outputDir);\n  }\n};\n\nconst populateGroups = (numberOfWorkers) => {\n  const groups = [];\n  for (let i = 0; i < numberOfWorkers; i++) {\n    groups[i] = [];\n  }\n\n  return groups;\n};\n\nconst createWorker = (workerObject) => {\n  const worker = new Worker(pathToWorker, {\n    workerData: {\n      options: simplifyObject(workerObject.options),\n      tests: workerObject.tests,\n      testRoot: workerObject.testRoot,\n      workerIndex: workerObject.workerIndex + 1,\n    },\n  });\n  worker.on('error', err => output.error(`Worker Error: ${err.stack}`));\n\n  WorkerStorage.addWorker(worker);\n  return worker;\n};\n\nconst simplifyObject = (object) => {\n  return Object.keys(object)\n    .filter((k) => k.indexOf('_') !== 0)\n    .filter((k) => typeof object[k] !== 'function')\n    .filter((k) => typeof object[k] !== 'object')\n    .reduce((obj, key) => {\n      obj[key] = object[key];\n      return obj;\n    }, {});\n};\n\nconst repackTest = (test) => {\n  test = Object.assign(new Test(test.title || '', () => { }), test);\n  test.parent = Object.assign(new Suite(test.parent.title), test.parent);\n  return test;\n};\n\nconst createWorkerObjects = (testGroups, config, testRoot, options) => {\n  return testGroups.map((tests, index) => {\n    const workerObj = new WorkerObject(index);\n    workerObj.addConfig(config);\n    workerObj.addTests(tests);\n    workerObj.setTestRoot(testRoot);\n    workerObj.addOptions(options);\n    return workerObj;\n  });\n};\n\nconst indexOfSmallestElement = (groups) => {\n  let i = 0;\n  for (let j = 1; j < groups.length; j++) {\n    if (groups[j - 1].length > groups[j].length) {\n      i = j;\n    }\n  }\n  return i;\n};\n\nconst convertToMochaTests = (testGroup) => {\n  const group = [];\n  if (testGroup instanceof Array) {\n    const mocha = MochaFactory.create({}, {});\n    mocha.files = testGroup;\n    mocha.loadFiles();\n    mocha.suite.eachTest((test) => {\n      const { id } = test;\n      group.push(id);\n    });\n    mocha.unloadFiles();\n  }\n\n  return group;\n};\n\nclass WorkerObject {\n  /**\n   * @param {Number} workerIndex - Unique ID for worker\n   */\n  constructor(workerIndex) {\n    this.workerIndex = workerIndex;\n    this.options = {};\n    this.tests = [];\n    this.testRoot = getTestRoot();\n  }\n\n  addConfig(config) {\n    const oldConfig = JSON.parse(this.options.override || '{}');\n    const newConfig = {\n      ...oldConfig,\n      ...config,\n    };\n    this.options.override = JSON.stringify(newConfig);\n  }\n\n  addTestFiles(testGroup) {\n    this.addTests(convertToMochaTests(testGroup));\n  }\n\n  addTests(tests) {\n    this.tests = this.tests.concat(tests);\n  }\n\n  setTestRoot(path) {\n    this.testRoot = getTestRoot(path);\n  }\n\n  addOptions(opts) {\n    this.options = {\n      ...this.options,\n      ...opts,\n    };\n  }\n}\n\nclass Workers extends EventEmitter {\n  /**\n   * @param {Number} numberOfWorkers\n   * @param {Object} config\n   */\n  constructor(numberOfWorkers, config = { by: 'test' }) {\n    super();\n    this.setMaxListeners(50);\n    this.codecept = initializeCodecept(config.testConfig, config.options);\n    this.finishedTests = {};\n    this.errors = [];\n    this.numberOfWorkers = 0;\n    this.closedWorkers = 0;\n    this.workers = [];\n    this.stats = {\n      passes: 0,\n      failures: 0,\n      tests: 0,\n      pending: 0,\n    };\n    this.testGroups = [];\n\n    createOutputDir(config.testConfig);\n    if (numberOfWorkers) this._initWorkers(numberOfWorkers, config);\n  }\n\n  _initWorkers(numberOfWorkers, config) {\n    this.splitTestsByGroups(numberOfWorkers, config);\n    this.workers = createWorkerObjects(this.testGroups, this.codecept.config, config.testConfig, config.options);\n    this.numberOfWorkers = this.workers.length;\n  }\n\n  /**\n   * This splits tests by groups.\n   * Strategy for group split is taken from a constructor's config.by value:\n   *\n   * `config.by` can be:\n   *\n   * - `suite`\n   * - `test`\n   * - function(numberOfWorkers)\n   *\n   * This method can be overridden for a better split.\n   */\n  splitTestsByGroups(numberOfWorkers, config) {\n    if (isFunction(config.by)) {\n      const createTests = config.by;\n      const testGroups = createTests(numberOfWorkers);\n      if (!(testGroups instanceof Array)) {\n        throw new Error('Test group should be an array');\n      }\n      for (const testGroup of testGroups) {\n        this.testGroups.push(convertToMochaTests(testGroup));\n      }\n    } else if (typeof numberOfWorkers === 'number' && numberOfWorkers > 0) {\n      this.testGroups = config.by === 'suite' ? this.createGroupsOfSuites(numberOfWorkers) : this.createGroupsOfTests(numberOfWorkers);\n    }\n  }\n\n  /**\n   * Creates a new worker\n   *\n   * @returns {WorkerObject}\n   */\n  spawn() {\n    const worker = new WorkerObject(this.numberOfWorkers);\n    this.workers.push(worker);\n    this.numberOfWorkers += 1;\n    return worker;\n  }\n\n  /**\n   * @param {Number} numberOfWorkers\n   */\n  createGroupsOfTests(numberOfWorkers) {\n    const files = this.codecept.testFiles;\n    const mocha = Container.mocha();\n    mocha.files = files;\n    mocha.loadFiles();\n\n    const groups = populateGroups(numberOfWorkers);\n    let groupCounter = 0;\n\n    mocha.suite.eachTest((test) => {\n      const i = groupCounter % groups.length;\n      if (test) {\n        const { id } = test;\n        groups[i].push(id);\n        groupCounter++;\n      }\n    });\n    return groups;\n  }\n\n  /**\n   * @param {Number} numberOfWorkers\n   */\n  createGroupsOfSuites(numberOfWorkers) {\n    const files = this.codecept.testFiles;\n    const groups = populateGroups(numberOfWorkers);\n\n    const mocha = Container.mocha();\n    mocha.files = files;\n    mocha.loadFiles();\n    mocha.suite.suites.forEach((suite) => {\n      const i = indexOfSmallestElement(groups);\n      suite.tests.forEach((test) => {\n        if (test) {\n          const { id } = test;\n          groups[i].push(id);\n        }\n      });\n    });\n    return groups;\n  }\n\n  /**\n   * @param {Object} config\n   */\n  overrideConfig(config) {\n    for (const worker of this.workers) {\n      worker.addConfig(config);\n    }\n  }\n\n  async bootstrapAll() {\n    return runHook(this.codecept.config.bootstrapAll, 'bootstrapAll');\n  }\n\n  async teardownAll() {\n    return runHook(this.codecept.config.teardownAll, 'teardownAll');\n  }\n\n  run() {\n    this.stats.start = new Date();\n    recorder.startUnlessRunning();\n    event.dispatcher.emit(event.workers.before);\n    recorder.add('starting workers', () => {\n      for (const worker of this.workers) {\n        const workerThread = createWorker(worker);\n        this._listenWorkerEvents(workerThread);\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /**\n   * @returns {Array<WorkerObject>}\n   */\n  getWorkers() {\n    return this.workers;\n  }\n\n  /**\n   * @returns {Boolean}\n   */\n  isFailed() {\n    return (this.stats.failures || this.errors.length) > 0;\n  }\n\n  _listenWorkerEvents(worker) {\n    worker.on('message', (message) => {\n      output.process(message.workerIndex);\n      switch (message.event) {\n        case event.hook.failed:\n          this.emit(event.hook.failed, repackTest(message.data));\n          this.errors.push(message.data.err);\n          break;\n        case event.test.failed:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.failed, repackTest(message.data));\n          break;\n        case event.test.passed:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.passed, repackTest(message.data));\n          break;\n        case event.test.skipped:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.skipped, repackTest(message.data));\n          break;\n        case event.test.finished: this.emit(event.test.finished, repackTest(message.data)); break;\n        case event.test.after:\n          this.emit(event.test.after, repackTest(message.data));\n          break;\n        case event.all.after:\n          this._appendStats(message.data); break;\n      }\n    });\n\n    worker.on('error', (err) => {\n      this.errors.push(err);\n    });\n\n    worker.on('exit', () => {\n      this.closedWorkers += 1;\n      if (this.closedWorkers === this.numberOfWorkers) {\n        this._finishRun();\n      }\n    });\n  }\n\n  _finishRun() {\n    event.dispatcher.emit(event.workers.after);\n    if (this.isFailed()) {\n      process.exitCode = 1;\n    } else {\n      process.exitCode = 0;\n    }\n    this.emit(event.all.result, !this.isFailed(), this.finishedTests, this.stats);\n    this.emit('end'); // internal event\n  }\n\n  _appendStats(newStats) {\n    this.stats.passes += newStats.passes;\n    this.stats.failures += newStats.failures;\n    this.stats.tests += newStats.tests;\n    this.stats.pending += newStats.pending;\n  }\n\n  _updateFinishedTests(test) {\n    const { id } = test;\n    if (this.finishedTests[id]) {\n      const stats = { passes: 0, failures: -1, tests: 0 };\n      this._appendStats(stats);\n    }\n    this.finishedTests[id] = test;\n  }\n\n  printResults() {\n    this.stats.end = new Date();\n    this.stats.duration = this.stats.end - this.stats.start;\n    output.print();\n    if (this.stats.tests === 0 || (this.stats.passes && !this.errors.length)) {\n      output.result(this.stats.passes, this.stats.failures, this.stats.pending, `${this.stats.duration || 0 / 1000}s`);\n    }\n    if (this.stats.failures) {\n      output.print();\n      output.print('-- FAILURES:');\n      const failedList = Object.keys(this.finishedTests)\n        .filter(key => this.finishedTests[key].err)\n        .map(key => this.finishedTests[key]);\n      Base.list(failedList);\n    }\n  }\n}\n\nmodule.exports = Workers;\n"
  }
}