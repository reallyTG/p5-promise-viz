{
  "promises": {
    "0": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1471916790043119",
      "endTime": "1471916790165508",
      "elapsedTime": "122389",
      "asyncId": 12,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 0
    },
    "1": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1471916790632192",
      "endTime": "1471916790729324",
      "elapsedTime": "97132",
      "asyncId": 13,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1
    },
    "2": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1471916791164219",
      "endTime": "1471916791299111",
      "elapsedTime": "134892",
      "asyncId": 14,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 2
    },
    "3": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1471916791654246",
      "endTime": "1471916791749946",
      "elapsedTime": "95700",
      "asyncId": 15,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 3
    },
    "4": {
      "source": "lib/command/run-workers.js:47:19:47:19",
      "startTime": "1471916797367218",
      "endTime": "1471916798305565",
      "elapsedTime": "938347",
      "asyncId": 16,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n\n  try {\n    await workers.bootstrapAll();\n    await workers.run();\n  } finally {\n    await workers.teardownAll()",
      "startLine": 47,
      "startCol": 19,
      "endLine": 47,
      "endCol": 19,
      "file": "lib/command/run-workers.js",
      "triggers": [
        18
      ],
      "uniqueid": 4
    },
    "5": {
      "source": "lib/workers.js:284:12:284:12",
      "startTime": "1471916797530533",
      "endTime": "1471916797557534",
      "elapsedTime": "27001",
      "asyncId": 17,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n\n  async bootstrapAll() {\n    return runHook(this.codecept.config.bootstrapAll, 'bootstrapAll');\n  }\n\n  async teardownAll() ",
      "startLine": 284,
      "startCol": 12,
      "endLine": 284,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [
        19
      ],
      "uniqueid": 5
    },
    "6": {
      "source": "node_modules/commander/index.js:315:8:315:8",
      "startTime": "1471916797729306",
      "endTime": "1471916798957326",
      "elapsedTime": "1228020",
      "asyncId": 18,
      "triggerAsyncId": 16,
      "io": false,
      "userCode": true,
      "line": "\n    }\n\n    fn.apply(self, args);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name",
      "startLine": 315,
      "startCol": 8,
      "endLine": 315,
      "endCol": 8,
      "file": "node_modules/commander/index.js",
      "triggers": [
        20,
        22
      ],
      "uniqueid": 6
    },
    "7": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471916798571663",
      "endTime": "1471916798596380",
      "elapsedTime": "24717",
      "asyncId": 20,
      "triggerAsyncId": 18,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        21
      ],
      "uniqueid": 7
    },
    "8": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471916798762872",
      "endTime": "1471916802850268",
      "elapsedTime": "4087396",
      "asyncId": 21,
      "triggerAsyncId": 20,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 8
    },
    "9": {
      "source": "lib/workers.js:301:12:301:12",
      "startTime": "1471916798839876",
      "endTime": "1471916994678181",
      "elapsedTime": "195838305",
      "asyncId": 22,
      "triggerAsyncId": 18,
      "io": false,
      "userCode": true,
      "line": "\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /*",
      "startLine": 301,
      "startCol": 12,
      "endLine": 301,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [
        23
      ],
      "uniqueid": 9
    },
    "10": {
      "source": "lib/command/run-workers.js:50:19:50:19",
      "startTime": "1471916994947716",
      "endTime": "1471916995244852",
      "elapsedTime": "297136",
      "asyncId": 47,
      "triggerAsyncId": 23,
      "io": false,
      "userCode": true,
      "line": "\n    await workers.run();\n  } finally {\n    await workers.teardownAll();\n  }\n};",
      "startLine": 50,
      "startCol": 19,
      "endLine": 50,
      "endCol": 19,
      "file": "lib/command/run-workers.js",
      "triggers": [
        49
      ],
      "uniqueid": 10
    },
    "11": {
      "source": "lib/workers.js:288:12:288:12",
      "startTime": "1471916995034298",
      "endTime": "1471916995060647",
      "elapsedTime": "26349",
      "asyncId": 48,
      "triggerAsyncId": 23,
      "io": false,
      "userCode": true,
      "line": "\n\n  async teardownAll() {\n    return runHook(this.codecept.config.teardownAll, 'teardownAll');\n  }\n\n  run() ",
      "startLine": 288,
      "startCol": 12,
      "endLine": 288,
      "endCol": 12,
      "file": "lib/workers.js",
      "triggers": [
        50
      ],
      "uniqueid": 11
    }
  },
  "files": {
    "lib/codecept.js": "const { existsSync, readFileSync } = require('fs');\nconst glob = require('glob');\nconst fsPath = require('path');\nconst { resolve } = require('path');\n\nconst container = require('./container');\nconst Config = require('./config');\nconst event = require('./event');\nconst runHook = require('./hooks');\nconst output = require('./output');\n\n/**\n * CodeceptJS runner\n */\nclass Codecept {\n  /**\n   * Create CodeceptJS runner.\n   * Config and options should be passed\n   *\n   * @param {*} config\n   * @param {*} opts\n   */\n  constructor(config, opts) {\n    this.config = Config.create(config);\n    this.opts = opts;\n    this.testFiles = new Array(0);\n    this.requireModules(config.require);\n  }\n\n  /**\n   * Require modules before codeceptjs running\n   *\n   * @param {string[]} requiringModules\n   */\n  requireModules(requiringModules) {\n    if (requiringModules) {\n      requiringModules.forEach((requiredModule) => {\n        const isLocalFile = existsSync(requiredModule) || existsSync(`${requiredModule}.js`);\n        if (isLocalFile) {\n          requiredModule = resolve(requiredModule);\n        }\n        require(requiredModule);\n      });\n    }\n  }\n\n  /**\n   * Initialize CodeceptJS at specific directory.\n   * If async initialization is required, pass callback as second parameter.\n   *\n   * @param {string} dir\n   */\n  init(dir) {\n    this.initGlobals(dir);\n    // initializing listeners\n    container.create(this.config, this.opts);\n    this.runHooks();\n  }\n\n  /**\n   * Creates global variables\n   *\n   * @param {string} dir\n   */\n  initGlobals(dir) {\n    global.codecept_dir = dir;\n    global.output_dir = fsPath.resolve(dir, this.config.output);\n\n    if (!this.config.noGlobals) {\n      global.actor = global.codecept_actor = require('./actor');\n      global.Helper = global.codecept_helper = require('./helper');\n      global.pause = require('./pause');\n      global.within = require('./within');\n      global.session = require('./session');\n      global.DataTable = require('./data/table');\n      global.locate = locator => require('./locator').build(locator);\n      global.inject = container.support;\n      global.share = container.share;\n      global.secret = require('./secret').secret;\n      global.codeceptjs = require('./index'); // load all objects\n\n      // BDD\n      const stepDefinitions = require('./interfaces/bdd');\n      global.Given = stepDefinitions.Given;\n      global.When = stepDefinitions.When;\n      global.Then = stepDefinitions.Then;\n    }\n  }\n\n  /**\n   * Executes hooks.\n   */\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook));\n  }\n\n  /**\n   * Executes bootstrap.\n   *\n   */\n  async bootstrap() {\n    return runHook(this.config.bootstrap, 'bootstrap');\n  }\n\n  /**\n   * Executes teardown.\n\n   */\n  async teardown() {\n    return runHook(this.config.teardown, 'teardown');\n  }\n\n  /**\n   * Loads tests by pattern or by config.tests\n   *\n   * @param {string} [pattern]\n   */\n  loadTests(pattern) {\n    const options = {\n      cwd: global.codecept_dir,\n    };\n\n    let patterns = [pattern];\n    if (!pattern) {\n      patterns = [];\n      if (this.config.tests && !this.opts.features) patterns.push(this.config.tests);\n      if (this.config.gherkin.features && !this.opts.tests) patterns.push(this.config.gherkin.features);\n    }\n\n    for (pattern of patterns) {\n      glob.sync(pattern, options).forEach((file) => {\n        if (!fsPath.isAbsolute(file)) {\n          file = fsPath.join(global.codecept_dir, file);\n        }\n        this.testFiles.push(fsPath.resolve(file));\n      });\n    }\n  }\n\n  /**\n   * Run a specific test or all loaded tests.\n   *\n   * @param {string} [test]\n   */\n  async run(test) {\n    return new Promise((resolve, reject) => {\n      const mocha = container.mocha();\n      mocha.files = this.testFiles;\n      if (test) {\n        if (!fsPath.isAbsolute(test)) {\n          test = fsPath.join(global.codecept_dir, test);\n        }\n        mocha.files = mocha.files.filter(t => fsPath.basename(t, '.js') === test || t === test);\n      }\n      const done = () => {\n        event.emit(event.all.result, this);\n        event.emit(event.all.after, this);\n        resolve();\n      };\n\n      try {\n        event.emit(event.all.before, this);\n        mocha.run(() => done());\n      } catch (e) {\n        output.error(e.stack);\n        reject(e);\n      }\n    });\n  }\n\n  static version() {\n    return JSON.parse(readFileSync(`${__dirname}/../package.json`, 'utf8')).version;\n  }\n}\n\nmodule.exports = Codecept;\n",
    "lib/command/run-workers.js": "// For Node version >=10.5.0, have to use experimental flag\nconst { satisfyNodeVersion } = require('./utils');\nconst { tryOrDefault } = require('../utils');\nconst output = require('../output');\nconst event = require('../event');\nconst Workers = require('../workers');\n\nmodule.exports = async function (workerCount, options) {\n  satisfyNodeVersion(\n    '>=11.7.0',\n    'Required minimum Node version of 11.7.0 to work with \"run-workers\"',\n  );\n\n  process.env.profile = options.profile;\n\n  const { config: testConfig, override = '' } = options;\n  const overrideConfigs = tryOrDefault(() => JSON.parse(override), {});\n  const by = options.suites ? 'suite' : 'test';\n  delete options.parent;\n  const config = {\n    by,\n    testConfig,\n    options,\n  };\n\n  const numberOfWorkers = parseInt(workerCount, 10);\n\n  output.print(`CodeceptJS v${require('../codecept').version()}`);\n  output.print(`Running tests in ${output.styles.bold(numberOfWorkers)} workers...`);\n  output.print();\n\n  const workers = new Workers(numberOfWorkers, config);\n  workers.overrideConfig(overrideConfigs);\n  workers.on(event.test.failed, (failedTest) => {\n    output.test.failed(failedTest);\n  });\n\n  workers.on(event.test.passed, (successTest) => {\n    output.test.passed(successTest);\n  });\n\n  workers.on(event.all.result, () => {\n    workers.printResults();\n  });\n\n  try {\n    await workers.bootstrapAll();\n    await workers.run();\n  } finally {\n    await workers.teardownAll();\n  }\n};\n",
    "node_modules/commander/index.js": "/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar fs = require('fs');\n\n/**\n * Inherit `Command` from `EventEmitter.prototype`.\n */\n\nrequire('util').inherits(Command, EventEmitter);\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\n\n/**\n * Expose `Command`.\n */\n\nexports.Command = Command;\n\n/**\n * Expose `Option`.\n */\n\nexports.Option = Option;\n\n/**\n * Initialize a new `Option` with the given `flags` and `description`.\n *\n * @param {String} flags\n * @param {String} description\n * @api public\n */\n\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = flags.indexOf('<') >= 0;\n  this.optional = flags.indexOf('[') >= 0;\n  this.bool = flags.indexOf('-no-') === -1;\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n\n/**\n * Return option name.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.name = function() {\n  return this.long\n    .replace('--', '')\n    .replace('no-', '');\n};\n\n/**\n * Return option name, in a camelcase format that can be used\n * as a object attribute key.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.attributeName = function() {\n  return camelcase(this.name());\n};\n\n/**\n * Check if `arg` matches the short or long flag.\n *\n * @param {String} arg\n * @return {Boolean}\n * @api private\n */\n\nOption.prototype.is = function(arg) {\n  return this.short === arg || this.long === arg;\n};\n\n/**\n * Initialize a new `Command`.\n *\n * @param {String} name\n * @api public\n */\n\nfunction Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = {};\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n}\n\n/**\n * Add command `name`.\n *\n * The `.action()` callback is invoked when the\n * command `name` is specified via __ARGV__,\n * and the remaining arguments are applied to the\n * function for access.\n *\n * When the `name` is \"*\" an un-matched command\n * will be passed as the first arg, followed by\n * the rest of __ARGV__ remaining.\n *\n * Examples:\n *\n *      program\n *        .version('0.0.1')\n *        .option('-C, --chdir <path>', 'change the working directory')\n *        .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n *        .option('-T, --no-tests', 'ignore test hook')\n *\n *      program\n *        .command('setup')\n *        .description('run remote setup commands')\n *        .action(function() {\n *          console.log('setup');\n *        });\n *\n *      program\n *        .command('exec <cmd>')\n *        .description('run the given remote command')\n *        .action(function(cmd) {\n *          console.log('exec \"%s\"', cmd);\n *        });\n *\n *      program\n *        .command('teardown <dir> [otherDirs...]')\n *        .description('run teardown commands')\n *        .action(function(dir, otherDirs) {\n *          console.log('dir \"%s\"', dir);\n *          if (otherDirs) {\n *            otherDirs.forEach(function (oDir) {\n *              console.log('dir \"%s\"', oDir);\n *            });\n *          }\n *        });\n *\n *      program\n *        .command('*')\n *        .description('deploy the given env')\n *        .action(function(env) {\n *          console.log('deploying \"%s\"', env);\n *        });\n *\n *      program.parse(process.argv);\n  *\n * @param {String} name\n * @param {String} [desc] for git-style sub-commands\n * @return {Command} the new command\n * @api public\n */\n\nCommand.prototype.command = function(name, desc, opts) {\n  if (typeof desc === 'object' && desc !== null) {\n    opts = desc;\n    desc = null;\n  }\n  opts = opts || {};\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n    this._execs[cmd._name] = true;\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n  cmd._noHelp = !!opts.noHelp;\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n\n  if (desc) return this;\n  return cmd;\n};\n\n/**\n * Define argument syntax for the top-level command.\n *\n * @api public\n */\n\nCommand.prototype.arguments = function(desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};\n\n/**\n * Add an implicit `help [cmd]` subcommand\n * which invokes `--help` for the given command.\n *\n * @api private\n */\n\nCommand.prototype.addImplicitHelpCommand = function() {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n\n/**\n * Parse expected `args`.\n *\n * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parseExpectedArgs = function(args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};\n\n/**\n * Register callback `fn` for the command.\n *\n * Examples:\n *\n *      program\n *        .command('help')\n *        .description('display verbose help')\n *        .action(function() {\n *           // output help here\n *        });\n *\n * @param {Function} fn\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.action = function(fn) {\n  var self = this;\n  var listener = function(args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n\n    var parsed = self.parseOptions(unknown);\n\n    // Output help if necessary\n    outputHelpIfNecessary(self, parsed.unknown);\n\n    // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    }\n\n    // Leftover arguments need to be pushed back. Fixes issue #56\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function(arg, i) {\n      if (arg.required && args[i] == null) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    });\n\n    // Always append ourselves to the end of the arguments,\n    // to make sure we match the number of arguments the user\n    // expects\n    if (self._args.length) {\n      args[self._args.length] = self;\n    } else {\n      args.push(self);\n    }\n\n    fn.apply(self, args);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on('command:' + name, listener);\n  if (this._alias) parent.on('command:' + this._alias, listener);\n  return this;\n};\n\n/**\n * Define option with `flags`, `description` and optional\n * coercion `fn`.\n *\n * The `flags` string should contain both the short and long flags,\n * separated by comma, a pipe or space. The following are all valid\n * all will output this way when `--help` is used.\n *\n *    \"-p, --pepper\"\n *    \"-p|--pepper\"\n *    \"-p --pepper\"\n *\n * Examples:\n *\n *     // simple boolean defaulting to false\n *     program.option('-p, --pepper', 'add pepper');\n *\n *     --pepper\n *     program.pepper\n *     // => Boolean\n *\n *     // simple boolean defaulting to true\n *     program.option('-C, --no-cheese', 'remove cheese');\n *\n *     program.cheese\n *     // => true\n *\n *     --no-cheese\n *     program.cheese\n *     // => false\n *\n *     // required argument\n *     program.option('-C, --chdir <path>', 'change the working directory');\n *\n *     --chdir /tmp\n *     program.chdir\n *     // => \"/tmp\"\n *\n *     // optional argument\n *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] or default\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.option = function(flags, description, fn, defaultValue) {\n  var self = this,\n    option = new Option(flags, description),\n    oname = option.name(),\n    name = option.attributeName();\n\n  // default as 3rd arg\n  if (typeof fn !== 'function') {\n    if (fn instanceof RegExp) {\n      var regex = fn;\n      fn = function(val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n    } else {\n      defaultValue = fn;\n      fn = null;\n    }\n  }\n\n  // preassign default value only for --no-*, [optional], or <required>\n  if (!option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (!option.bool) defaultValue = true;\n    // preassign only if we have a default\n    if (defaultValue !== undefined) {\n      self[name] = defaultValue;\n      option.defaultValue = defaultValue;\n    }\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on('option:' + oname, function(val) {\n    // coercion\n    if (val !== null && fn) {\n      val = fn(val, self[name] === undefined ? defaultValue : self[name]);\n    }\n\n    // unassigned or bool\n    if (typeof self[name] === 'boolean' || typeof self[name] === 'undefined') {\n      // if no value, bool true, and we have a default, then use it!\n      if (val == null) {\n        self[name] = option.bool\n          ? defaultValue || true\n          : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (val !== null) {\n      // reassign\n      self[name] = val;\n    }\n  });\n\n  return this;\n};\n\n/**\n * Allow unknown options on the command line.\n *\n * @param {Boolean} arg if `true` or omitted, no error will be thrown\n * for unknown options.\n * @api public\n */\nCommand.prototype.allowUnknownOption = function(arg) {\n  this._allowUnknownOption = arguments.length === 0 || arg;\n  return this;\n};\n\n/**\n * Parse `argv`, settings options and invoking commands when defined.\n *\n * @param {Array} argv\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parse = function(argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand();\n\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  this._name = this._name || basename(argv[1], '.js');\n\n  // github-style sub-commands with no sub-command\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push('--help');\n  }\n\n  // process argv\n  var parsed = this.parseOptions(this.normalize(argv.slice(2)));\n  var args = this.args = parsed.args;\n\n  var result = this.parseArgs(this.args, parsed.unknown);\n\n  // executable sub-commands\n  var name = result.args[0];\n\n  var aliasCommand = null;\n  // check alias of sub commands\n  if (name) {\n    aliasCommand = this.commands.filter(function(command) {\n      return command.alias() === name;\n    })[0];\n  }\n\n  if (this._execs[name] === true) {\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (aliasCommand) {\n    // is alias of a subCommand\n    args[0] = aliasCommand._name;\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (this.defaultExecutable) {\n    // use the default subcommand\n    args.unshift(this.defaultExecutable);\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  }\n\n  return result;\n};\n\n/**\n * Execute a sub-command executable.\n *\n * @param {Array} argv\n * @param {Array} args\n * @param {Array} unknown\n * @api private\n */\n\nCommand.prototype.executeSubCommand = function(argv, args, unknown) {\n  args = args.concat(unknown);\n\n  if (!args.length) this.help();\n  if (args[0] === 'help' && args.length === 1) this.help();\n\n  // <cmd> --help\n  if (args[0] === 'help') {\n    args[0] = args[1];\n    args[1] = '--help';\n  }\n\n  // executable\n  var f = argv[1];\n  // name of the subcommand, link `pm-install`\n  var bin = basename(f, path.extname(f)) + '-' + args[0];\n\n  // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n  var baseDir;\n\n  var resolvedLink = fs.realpathSync(f);\n\n  baseDir = dirname(resolvedLink);\n\n  // prefer local `./<bin>` to bin in the $PATH\n  var localBin = path.join(baseDir, bin);\n\n  // whether bin file is a js script with explicit `.js` or `.ts` extension\n  var isExplicitJS = false;\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin + '.ts')) {\n    bin = localBin + '.ts';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n\n  var proc;\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = (process.execArgv || []).concat(args);\n\n      proc = spawn(process.argv[0], args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    } else {\n      proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    }\n  } else {\n    args.unshift(bin);\n    proc = spawn(process.execPath, args, { stdio: 'inherit' });\n  }\n\n  var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n  signals.forEach(function(signal) {\n    process.on(signal, function() {\n      if (proc.killed === false && proc.exitCode === null) {\n        proc.kill(signal);\n      }\n    });\n  });\n  proc.on('close', process.exit.bind(process));\n  proc.on('error', function(err) {\n    if (err.code === 'ENOENT') {\n      console.error('error: %s(1) does not exist, try --help', bin);\n    } else if (err.code === 'EACCES') {\n      console.error('error: %s(1) not executable. try chmod or run with root', bin);\n    }\n    process.exit(1);\n  });\n\n  // Store the reference to the child process\n  this.runningCommand = proc;\n};\n\n/**\n * Normalize `args`, splitting joined short flags. For example\n * the arg \"-abc\" is equivalent to \"-a -b -c\".\n * This also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".\n *\n * @param {Array} args\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.normalize = function(args) {\n  var ret = [],\n    arg,\n    lastOpt,\n    index;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i - 1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 1 && arg[0] === '-' && arg[1] !== '-') {\n      arg.slice(1).split('').forEach(function(c) {\n        ret.push('-' + c);\n      });\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Parse command `args`.\n *\n * When listener(s) are available those\n * callbacks are invoked, otherwise the \"*\"\n * event is emitted and those actions are invoked.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api private\n */\n\nCommand.prototype.parseArgs = function(args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners('command:' + name).length) {\n      this.emit('command:' + args.shift(), args, unknown);\n    } else {\n      this.emit('command:*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n\n    // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n    if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n    }\n    if (this.commands.length === 0 &&\n        this._args.filter(function(a) { return a.required; }).length === 0) {\n      this.emit('command:*');\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an option matching `arg` if any.\n *\n * @param {String} arg\n * @return {Option}\n * @api private\n */\n\nCommand.prototype.optionFor = function(arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n\n/**\n * Parse options from `argv` returning `argv`\n * void of these options.\n *\n * @param {Array} argv\n * @return {Array}\n * @api public\n */\n\nCommand.prototype.parseOptions = function(argv) {\n  var args = [],\n    len = argv.length,\n    literal,\n    option,\n    arg;\n\n  var unknownOptions = [];\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n\n    // literal args after --\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    if (arg === '--') {\n      literal = true;\n      continue;\n    }\n\n    // find matching Option\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (arg == null) return this.optionMissingArgument(option);\n        this.emit('option:' + option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i + 1];\n        if (arg == null || (arg[0] === '-' && arg !== '-')) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit('option:' + option.name(), arg);\n      // bool\n      } else {\n        this.emit('option:' + option.name());\n      }\n      continue;\n    }\n\n    // looks like an option\n    if (arg.length > 1 && arg[0] === '-') {\n      unknownOptions.push(arg);\n\n      // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n      if ((i + 1) < argv.length && argv[i + 1][0] !== '-') {\n        unknownOptions.push(argv[++i]);\n      }\n      continue;\n    }\n\n    // arg\n    args.push(arg);\n  }\n\n  return { args: args, unknown: unknownOptions };\n};\n\n/**\n * Return an object containing options as key-value pairs\n *\n * @return {Object}\n * @api public\n */\nCommand.prototype.opts = function() {\n  var result = {},\n    len = this.options.length;\n\n  for (var i = 0; i < len; i++) {\n    var key = this.options[i].attributeName();\n    result[key] = key === this._versionOptionName ? this._version : this[key];\n  }\n  return result;\n};\n\n/**\n * Argument `name` is missing.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.missingArgument = function(name) {\n  console.error(\"error: missing required argument `%s'\", name);\n  process.exit(1);\n};\n\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {String} option\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.optionMissingArgument = function(option, flag) {\n  if (flag) {\n    console.error(\"error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"error: option `%s' argument missing\", option.flags);\n  }\n  process.exit(1);\n};\n\n/**\n * Unknown option `flag`.\n *\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.unknownOption = function(flag) {\n  if (this._allowUnknownOption) return;\n  console.error(\"error: unknown option `%s'\", flag);\n  process.exit(1);\n};\n\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.variadicArgNotLast = function(name) {\n  console.error(\"error: variadic arguments must be last `%s'\", name);\n  process.exit(1);\n};\n\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-V, --version\" flag\n * which will print the version number when passed.\n *\n * @param {String} str\n * @param {String} [flags]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.version = function(str, flags) {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  var versionOption = new Option(flags, 'output the version number');\n  this._versionOptionName = versionOption.long.substr(2) || 'version';\n  this.options.push(versionOption);\n  this.on('option:' + this._versionOptionName, function() {\n    process.stdout.write(str + '\\n');\n    process.exit(0);\n  });\n  return this;\n};\n\n/**\n * Set the description to `str`.\n *\n * @param {String} str\n * @param {Object} argsDescription\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.description = function(str, argsDescription) {\n  if (arguments.length === 0) return this._description;\n  this._description = str;\n  this._argsDescription = argsDescription;\n  return this;\n};\n\n/**\n * Set an alias for the command\n *\n * @param {String} alias\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.alias = function(alias) {\n  var command = this;\n  if (this.commands.length !== 0) {\n    command = this.commands[this.commands.length - 1];\n  }\n\n  if (arguments.length === 0) return command._alias;\n\n  if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n  command._alias = alias;\n  return this;\n};\n\n/**\n * Set / get the command usage `str`.\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.usage = function(str) {\n  var args = this._args.map(function(arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]' +\n    (this.commands.length ? ' [command]' : '') +\n    (this._args.length ? ' ' + args.join(' ') : '');\n\n  if (arguments.length === 0) return this._usage || usage;\n  this._usage = str;\n\n  return this;\n};\n\n/**\n * Get or set the name of the command\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.name = function(str) {\n  if (arguments.length === 0) return this._name;\n  this._name = str;\n  return this;\n};\n\n/**\n * Return prepared commands.\n *\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.prepareCommands = function() {\n  return this.commands.filter(function(cmd) {\n    return !cmd._noHelp;\n  }).map(function(cmd) {\n    var args = cmd._args.map(function(arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [\n      cmd._name +\n        (cmd._alias ? '|' + cmd._alias : '') +\n        (cmd.options.length ? ' [options]' : '') +\n        (args ? ' ' + args : ''),\n      cmd._description\n    ];\n  });\n};\n\n/**\n * Return the largest command length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestCommandLength = function() {\n  var commands = this.prepareCommands();\n  return commands.reduce(function(max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n};\n\n/**\n * Return the largest option length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestOptionLength = function() {\n  var options = [].slice.call(this.options);\n  options.push({\n    flags: '-h, --help'\n  });\n  return options.reduce(function(max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n\n/**\n * Return the largest arg length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestArgLength = function() {\n  return this._args.reduce(function(max, arg) {\n    return Math.max(max, arg.name.length);\n  }, 0);\n};\n\n/**\n * Return the pad width.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.padWidth = function() {\n  var width = this.largestOptionLength();\n  if (this._argsDescription && this._args.length) {\n    if (this.largestArgLength() > width) {\n      width = this.largestArgLength();\n    }\n  }\n\n  if (this.commands && this.commands.length) {\n    if (this.largestCommandLength() > width) {\n      width = this.largestCommandLength();\n    }\n  }\n\n  return width;\n};\n\n/**\n * Return help for options.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.optionHelp = function() {\n  var width = this.padWidth();\n\n  // Append the help information\n  return this.options.map(function(option) {\n    return pad(option.flags, width) + '  ' + option.description +\n      ((option.bool && option.defaultValue !== undefined) ? ' (default: ' + JSON.stringify(option.defaultValue) + ')' : '');\n  }).concat([pad('-h, --help', width) + '  ' + 'output usage information'])\n    .join('\\n');\n};\n\n/**\n * Return command help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.commandHelp = function() {\n  if (!this.commands.length) return '';\n\n  var commands = this.prepareCommands();\n  var width = this.padWidth();\n\n  return [\n    'Commands:',\n    commands.map(function(cmd) {\n      var desc = cmd[1] ? '  ' + cmd[1] : '';\n      return (desc ? pad(cmd[0], width) : cmd[0]) + desc;\n    }).join('\\n').replace(/^/gm, '  '),\n    ''\n  ].join('\\n');\n};\n\n/**\n * Return program help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.helpInformation = function() {\n  var desc = [];\n  if (this._description) {\n    desc = [\n      this._description,\n      ''\n    ];\n\n    var argsDescription = this._argsDescription;\n    if (argsDescription && this._args.length) {\n      var width = this.padWidth();\n      desc.push('Arguments:');\n      desc.push('');\n      this._args.forEach(function(arg) {\n        desc.push('  ' + pad(arg.name, width) + '  ' + argsDescription[arg.name]);\n      });\n      desc.push('');\n    }\n  }\n\n  var cmdName = this._name;\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n  var usage = [\n    'Usage: ' + cmdName + ' ' + this.usage(),\n    ''\n  ];\n\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n\n  var options = [\n    'Options:',\n    '' + this.optionHelp().replace(/^/gm, '  '),\n    ''\n  ];\n\n  return usage\n    .concat(desc)\n    .concat(options)\n    .concat(cmds)\n    .join('\\n');\n};\n\n/**\n * Output help information for this command\n *\n * @api public\n */\n\nCommand.prototype.outputHelp = function(cb) {\n  if (!cb) {\n    cb = function(passthru) {\n      return passthru;\n    };\n  }\n  process.stdout.write(cb(this.helpInformation()));\n  this.emit('--help');\n};\n\n/**\n * Output help information and exit.\n *\n * @api public\n */\n\nCommand.prototype.help = function(cb) {\n  this.outputHelp(cb);\n  process.exit();\n};\n\n/**\n * Camel-case the given `flag`\n *\n * @param {String} flag\n * @return {String}\n * @api private\n */\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce(function(str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Pad `str` to `width`.\n *\n * @param {String} str\n * @param {Number} width\n * @return {String}\n * @api private\n */\n\nfunction pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n/**\n * Output help information if necessary\n *\n * @param {Command} command to output help for\n * @param {Array} array of options to search for -h or --help\n * @api private\n */\n\nfunction outputHelpIfNecessary(cmd, options) {\n  options = options || [];\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] === '--help' || options[i] === '-h') {\n      cmd.outputHelp();\n      process.exit(0);\n    }\n  }\n}\n\n/**\n * Takes an argument an returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {String}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\n// for versions before node v0.8 when there weren't `fs.existsSync`\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n",
    "lib/workers.js": "/* eslint-disable max-classes-per-file */\nconst { EventEmitter } = require('events');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { Worker } = require('worker_threads');\nconst { Suite, Test, reporters: { Base } } = require('mocha');\nconst Codecept = require('./codecept');\nconst MochaFactory = require('./mochaFactory');\nconst Container = require('./container');\nconst { getTestRoot } = require('./command/utils');\nconst { isFunction, fileExists } = require('./utils');\nconst mainConfig = require('./config');\nconst output = require('./output');\nconst event = require('./event');\nconst recorder = require('./recorder');\nconst runHook = require('./hooks');\nconst WorkerStorage = require('./workerStorage');\n\nconst pathToWorker = path.join(__dirname, 'command', 'workers', 'runTests.js');\n\nconst initializeCodecept = (configPath, options = {}) => {\n  const codecept = new Codecept(mainConfig.load(configPath || '.'), options);\n  codecept.init(getTestRoot(configPath));\n  codecept.loadTests();\n\n  return codecept;\n};\n\nconst createOutputDir = (configPath) => {\n  const config = mainConfig.load(configPath || '.');\n  const testRoot = getTestRoot(configPath);\n  const outputDir = path.isAbsolute(config.output) ? config.output : path.join(testRoot, config.output);\n\n  if (!fileExists(outputDir)) {\n    output.print(`creating output directory: ${outputDir}`);\n    mkdirp.sync(outputDir);\n  }\n};\n\nconst populateGroups = (numberOfWorkers) => {\n  const groups = [];\n  for (let i = 0; i < numberOfWorkers; i++) {\n    groups[i] = [];\n  }\n\n  return groups;\n};\n\nconst createWorker = (workerObject) => {\n  const worker = new Worker(pathToWorker, {\n    workerData: {\n      options: simplifyObject(workerObject.options),\n      tests: workerObject.tests,\n      testRoot: workerObject.testRoot,\n      workerIndex: workerObject.workerIndex + 1,\n    },\n  });\n  worker.on('error', err => output.error(`Worker Error: ${err.stack}`));\n\n  WorkerStorage.addWorker(worker);\n  return worker;\n};\n\nconst simplifyObject = (object) => {\n  return Object.keys(object)\n    .filter((k) => k.indexOf('_') !== 0)\n    .filter((k) => typeof object[k] !== 'function')\n    .filter((k) => typeof object[k] !== 'object')\n    .reduce((obj, key) => {\n      obj[key] = object[key];\n      return obj;\n    }, {});\n};\n\nconst repackTest = (test) => {\n  test = Object.assign(new Test(test.title || '', () => { }), test);\n  test.parent = Object.assign(new Suite(test.parent.title), test.parent);\n  return test;\n};\n\nconst createWorkerObjects = (testGroups, config, testRoot, options) => {\n  return testGroups.map((tests, index) => {\n    const workerObj = new WorkerObject(index);\n    workerObj.addConfig(config);\n    workerObj.addTests(tests);\n    workerObj.setTestRoot(testRoot);\n    workerObj.addOptions(options);\n    return workerObj;\n  });\n};\n\nconst indexOfSmallestElement = (groups) => {\n  let i = 0;\n  for (let j = 1; j < groups.length; j++) {\n    if (groups[j - 1].length > groups[j].length) {\n      i = j;\n    }\n  }\n  return i;\n};\n\nconst convertToMochaTests = (testGroup) => {\n  const group = [];\n  if (testGroup instanceof Array) {\n    const mocha = MochaFactory.create({}, {});\n    mocha.files = testGroup;\n    mocha.loadFiles();\n    mocha.suite.eachTest((test) => {\n      const { id } = test;\n      group.push(id);\n    });\n    mocha.unloadFiles();\n  }\n\n  return group;\n};\n\nclass WorkerObject {\n  /**\n   * @param {Number} workerIndex - Unique ID for worker\n   */\n  constructor(workerIndex) {\n    this.workerIndex = workerIndex;\n    this.options = {};\n    this.tests = [];\n    this.testRoot = getTestRoot();\n  }\n\n  addConfig(config) {\n    const oldConfig = JSON.parse(this.options.override || '{}');\n    const newConfig = {\n      ...oldConfig,\n      ...config,\n    };\n    this.options.override = JSON.stringify(newConfig);\n  }\n\n  addTestFiles(testGroup) {\n    this.addTests(convertToMochaTests(testGroup));\n  }\n\n  addTests(tests) {\n    this.tests = this.tests.concat(tests);\n  }\n\n  setTestRoot(path) {\n    this.testRoot = getTestRoot(path);\n  }\n\n  addOptions(opts) {\n    this.options = {\n      ...this.options,\n      ...opts,\n    };\n  }\n}\n\nclass Workers extends EventEmitter {\n  /**\n   * @param {Number} numberOfWorkers\n   * @param {Object} config\n   */\n  constructor(numberOfWorkers, config = { by: 'test' }) {\n    super();\n    this.setMaxListeners(50);\n    this.codecept = initializeCodecept(config.testConfig, config.options);\n    this.finishedTests = {};\n    this.errors = [];\n    this.numberOfWorkers = 0;\n    this.closedWorkers = 0;\n    this.workers = [];\n    this.stats = {\n      passes: 0,\n      failures: 0,\n      tests: 0,\n      pending: 0,\n    };\n    this.testGroups = [];\n\n    createOutputDir(config.testConfig);\n    if (numberOfWorkers) this._initWorkers(numberOfWorkers, config);\n  }\n\n  _initWorkers(numberOfWorkers, config) {\n    this.splitTestsByGroups(numberOfWorkers, config);\n    this.workers = createWorkerObjects(this.testGroups, this.codecept.config, config.testConfig, config.options);\n    this.numberOfWorkers = this.workers.length;\n  }\n\n  /**\n   * This splits tests by groups.\n   * Strategy for group split is taken from a constructor's config.by value:\n   *\n   * `config.by` can be:\n   *\n   * - `suite`\n   * - `test`\n   * - function(numberOfWorkers)\n   *\n   * This method can be overridden for a better split.\n   */\n  splitTestsByGroups(numberOfWorkers, config) {\n    if (isFunction(config.by)) {\n      const createTests = config.by;\n      const testGroups = createTests(numberOfWorkers);\n      if (!(testGroups instanceof Array)) {\n        throw new Error('Test group should be an array');\n      }\n      for (const testGroup of testGroups) {\n        this.testGroups.push(convertToMochaTests(testGroup));\n      }\n    } else if (typeof numberOfWorkers === 'number' && numberOfWorkers > 0) {\n      this.testGroups = config.by === 'suite' ? this.createGroupsOfSuites(numberOfWorkers) : this.createGroupsOfTests(numberOfWorkers);\n    }\n  }\n\n  /**\n   * Creates a new worker\n   *\n   * @returns {WorkerObject}\n   */\n  spawn() {\n    const worker = new WorkerObject(this.numberOfWorkers);\n    this.workers.push(worker);\n    this.numberOfWorkers += 1;\n    return worker;\n  }\n\n  /**\n   * @param {Number} numberOfWorkers\n   */\n  createGroupsOfTests(numberOfWorkers) {\n    const files = this.codecept.testFiles;\n    const mocha = Container.mocha();\n    mocha.files = files;\n    mocha.loadFiles();\n\n    const groups = populateGroups(numberOfWorkers);\n    let groupCounter = 0;\n\n    mocha.suite.eachTest((test) => {\n      const i = groupCounter % groups.length;\n      if (test) {\n        const { id } = test;\n        groups[i].push(id);\n        groupCounter++;\n      }\n    });\n    return groups;\n  }\n\n  /**\n   * @param {Number} numberOfWorkers\n   */\n  createGroupsOfSuites(numberOfWorkers) {\n    const files = this.codecept.testFiles;\n    const groups = populateGroups(numberOfWorkers);\n\n    const mocha = Container.mocha();\n    mocha.files = files;\n    mocha.loadFiles();\n    mocha.suite.suites.forEach((suite) => {\n      const i = indexOfSmallestElement(groups);\n      suite.tests.forEach((test) => {\n        if (test) {\n          const { id } = test;\n          groups[i].push(id);\n        }\n      });\n    });\n    return groups;\n  }\n\n  /**\n   * @param {Object} config\n   */\n  overrideConfig(config) {\n    for (const worker of this.workers) {\n      worker.addConfig(config);\n    }\n  }\n\n  async bootstrapAll() {\n    return runHook(this.codecept.config.bootstrapAll, 'bootstrapAll');\n  }\n\n  async teardownAll() {\n    return runHook(this.codecept.config.teardownAll, 'teardownAll');\n  }\n\n  run() {\n    this.stats.start = new Date();\n    recorder.startUnlessRunning();\n    event.dispatcher.emit(event.workers.before);\n    recorder.add('starting workers', () => {\n      for (const worker of this.workers) {\n        const workerThread = createWorker(worker);\n        this._listenWorkerEvents(workerThread);\n      }\n    });\n    return new Promise(resolve => this.on('end', resolve));\n  }\n\n  /**\n   * @returns {Array<WorkerObject>}\n   */\n  getWorkers() {\n    return this.workers;\n  }\n\n  /**\n   * @returns {Boolean}\n   */\n  isFailed() {\n    return (this.stats.failures || this.errors.length) > 0;\n  }\n\n  _listenWorkerEvents(worker) {\n    worker.on('message', (message) => {\n      output.process(message.workerIndex);\n      switch (message.event) {\n        case event.hook.failed:\n          this.emit(event.hook.failed, repackTest(message.data));\n          this.errors.push(message.data.err);\n          break;\n        case event.test.failed:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.failed, repackTest(message.data));\n          break;\n        case event.test.passed:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.passed, repackTest(message.data));\n          break;\n        case event.test.skipped:\n          this._updateFinishedTests(repackTest(message.data));\n          this.emit(event.test.skipped, repackTest(message.data));\n          break;\n        case event.test.finished: this.emit(event.test.finished, repackTest(message.data)); break;\n        case event.test.after:\n          this.emit(event.test.after, repackTest(message.data));\n          break;\n        case event.all.after:\n          this._appendStats(message.data); break;\n      }\n    });\n\n    worker.on('error', (err) => {\n      this.errors.push(err);\n    });\n\n    worker.on('exit', () => {\n      this.closedWorkers += 1;\n      if (this.closedWorkers === this.numberOfWorkers) {\n        this._finishRun();\n      }\n    });\n  }\n\n  _finishRun() {\n    event.dispatcher.emit(event.workers.after);\n    if (this.isFailed()) {\n      process.exitCode = 1;\n    } else {\n      process.exitCode = 0;\n    }\n    this.emit(event.all.result, !this.isFailed(), this.finishedTests, this.stats);\n    this.emit('end'); // internal event\n  }\n\n  _appendStats(newStats) {\n    this.stats.passes += newStats.passes;\n    this.stats.failures += newStats.failures;\n    this.stats.tests += newStats.tests;\n    this.stats.pending += newStats.pending;\n  }\n\n  _updateFinishedTests(test) {\n    const { id } = test;\n    if (this.finishedTests[id]) {\n      const stats = { passes: 0, failures: -1, tests: 0 };\n      this._appendStats(stats);\n    }\n    this.finishedTests[id] = test;\n  }\n\n  printResults() {\n    this.stats.end = new Date();\n    this.stats.duration = this.stats.end - this.stats.start;\n    output.print();\n    if (this.stats.tests === 0 || (this.stats.passes && !this.errors.length)) {\n      output.result(this.stats.passes, this.stats.failures, this.stats.pending, `${this.stats.duration || 0 / 1000}s`);\n    }\n    if (this.stats.failures) {\n      output.print();\n      output.print('-- FAILURES:');\n      const failedList = Object.keys(this.finishedTests)\n        .filter(key => this.finishedTests[key].err)\n        .map(key => this.finishedTests[key]);\n      Base.list(failedList);\n    }\n  }\n}\n\nmodule.exports = Workers;\n",
    "lib/recorder.js": "const debug = require('debug')('codeceptjs:recorder');\nconst promiseRetry = require('promise-retry');\n\nconst { log } = require('./output');\n\nlet promise;\nlet running = false;\nlet errFn;\nlet queueId = 0;\nlet sessionId = null;\nlet asyncErr = null;\n\nlet tasks = [];\nlet oldPromises = [];\n\nconst defaultRetryOptions = {\n  retries: 0,\n  minTimeout: 150,\n  maxTimeout: 10000,\n};\n\n/**\n * Singleton object to record all test steps as promises and run them in chain.\n * @alias recorder\n * @interface\n */\nmodule.exports = {\n\n  /**\n   * @type {Array<Object<string, *>>}\n   * @inner\n   */\n  retries: [],\n\n  /**\n   * Start recording promises\n   *\n   * @api\n   * @inner\n   */\n  start() {\n    running = true;\n    asyncErr = null;\n    errFn = null;\n    this.reset();\n  },\n\n  /**\n   * @return {boolean}\n   * @inner\n   */\n  isRunning() {\n    return running;\n  },\n\n  /**\n   * @return {void}\n   * @inner\n   */\n  startUnlessRunning() {\n    if (!this.isRunning()) {\n      this.start();\n    }\n  },\n\n  /**\n   * Add error handler to catch rejected promises\n   *\n   * @api\n   * @param {function} fn\n   * @inner\n   */\n  errHandler(fn) {\n    errFn = fn;\n  },\n\n  /**\n   * Stops current promise chain, calls `catch`.\n   * Resets recorder to initial state.\n   *\n   * @api\n   * @inner\n   */\n  reset() {\n    if (promise && running) this.catch();\n    queueId++;\n    sessionId = null;\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false;\n    this.retries = [];\n  },\n\n  /**\n   * @name CodeceptJS.recorder~session\n   * @type {CodeceptJS.RecorderSession}\n   * @inner\n   */\n\n  /**\n   * @alias RecorderSession\n   * @interface\n   */\n  session: {\n    /**\n     * @type {boolean}\n     * @inner\n     */\n    running: false,\n\n    /**\n     * @param {string} name\n     * @inner\n     */\n    start(name) {\n      log(`${currentQueue()}Starting <${name}> session`);\n      tasks.push('--->');\n      oldPromises.push(promise);\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /**\n     * @param {string} name\n     * @inner\n     */\n    restore(name) {\n      tasks.push('<---');\n      log(`${currentQueue()}Finalize <${name}> session`);\n      this.running = false;\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /**\n     * @param {function} fn\n     * @inner\n     */\n    catch(fn) {\n      promise = promise.catch(fn);\n    },\n\n  },\n\n  /**\n   * Adds a promise to a chain.\n   * Promise description should be passed as first parameter.\n   *\n   * @param {string|function} taskName\n   * @param {function} [fn]\n   * @param {boolean} [force=false]\n   * @param {boolean} [retry]\n   *     undefined: `add(fn)` -> `false` and `add('step',fn)` -> `true`\n   *     true: it will retries if `retryOpts` set.\n   *     false: ignore `retryOpts` and won't retry.\n   * @return {Promise<*> | undefined}\n   * @inner\n   */\n  add(taskName, fn = undefined, force = false, retry = undefined) {\n    if (typeof taskName === 'function') {\n      fn = taskName;\n      taskName = fn.toString();\n      if (retry === undefined) retry = false;\n    }\n    if (retry === undefined) retry = true;\n    if (!running && !force) {\n      return;\n    }\n    tasks.push(taskName);\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse();\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err);\n          }\n          throw err;\n        }\n        /*\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err);\n          }\n          throw err;\n        });\n        */\n      });\n    });\n  },\n\n  /**\n   * @param {*} opts\n   * @return {*}\n   * @inner\n   */\n  retry(opts) {\n    if (!promise) return;\n\n    if (opts === null) {\n      opts = {};\n    }\n    if (Number.isInteger(opts)) {\n      opts = { retries: opts };\n    }\n    return this.add(() => this.retries.push(opts));\n  },\n\n  /**\n   * @param {function} [customErrFn]\n   * @return {Promise<*>}\n   * @inner\n   */\n  catch(customErrFn) {\n    return promise = promise.catch((err) => {\n      log(`${currentQueue()}Error | ${err}`);\n      if (!(err instanceof Error)) { // strange things may happen\n        err = new Error(`[Wrapped Error] ${JSON.stringify(err)}`); // we should be prepared for them\n      }\n      if (customErrFn) {\n        customErrFn(err);\n      } else if (errFn) {\n        errFn(err);\n      }\n      this.stop();\n    });\n  },\n\n  /**\n   * @param {function} customErrFn\n   * @return {Promise<*>}\n   * @inner\n   */\n  catchWithoutStop(customErrFn) {\n    return promise = promise.catch((err) => {\n      log(`${currentQueue()}Error | ${err}`);\n      if (!(err instanceof Error)) { // strange things may happen\n        err = new Error(`[Wrapped Error] ${JSON.stringify(err)}`); // we should be prepared for them\n      }\n      if (customErrFn) {\n        customErrFn(err);\n      } else if (errFn) {\n        errFn(err);\n      }\n    });\n  },\n\n  /**\n   * Adds a promise which throws an error into a chain\n   *\n   * @api\n   * @param {*} err\n   * @inner\n   */\n  throw(err) {\n    return this.add(`throw error ${err}`, () => {\n      throw err;\n    });\n  },\n\n  /**\n   * @param {*} err\n   * @inner\n   */\n  saveFirstAsyncError(err) {\n    if (asyncErr === null) {\n      asyncErr = err;\n    }\n  },\n\n  /**\n   * @return {*}\n   * @inner\n   */\n  getAsyncErr() {\n    return asyncErr;\n  },\n\n  /**\n   * @return {void}\n   * @inner\n   */\n  cleanAsyncErr() {\n    asyncErr = null;\n  },\n\n  /**\n   * Stops recording promises\n   * @api\n   * @inner\n   */\n  stop() {\n    debug(this.toString());\n    log(`${currentQueue()}Stopping recording promises`);\n    running = false;\n  },\n\n  /**\n   * Get latest promise in chain.\n   *\n   * @api\n   * @return {Promise<*>}\n   * @inner\n   */\n  promise() {\n    return promise;\n  },\n\n  /**\n   * Get a list of all chained tasks\n   * @return {string}\n   * @inner\n   */\n  scheduled() {\n    return tasks.join('\\n');\n  },\n\n  /**\n   * Get a state of current queue and tasks\n   * @return {string}\n   * @inner\n   */\n  toString() {\n    return `Queue: ${currentQueue()}\\n\\nTasks: ${this.scheduled()}`;\n  },\n\n};\n\nfunction currentQueue() {\n  let session = '';\n  if (sessionId) session = `<${sessionId}> `;\n  return `[${queueId}] ${session}`;\n}\n"
  }
}