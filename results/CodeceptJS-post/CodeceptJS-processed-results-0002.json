{
  "promises": {
    "0": {
      "source": "lib/codecept.js:95:5:95:5",
      "startTime": "1471914684806506",
      "endTime": "1471914684955626",
      "elapsedTime": "149120",
      "asyncId": 12,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'))",
      "startLine": 95,
      "startCol": 5,
      "endLine": 95,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 0
    },
    "1": {
      "source": "lib/codecept.js:96:5:96:5",
      "startTime": "1471914685480258",
      "endTime": "1471914685579384",
      "elapsedTime": "99126",
      "asyncId": 13,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));",
      "startLine": 96,
      "startCol": 5,
      "endLine": 96,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 1
    },
    "2": {
      "source": "lib/codecept.js:97:5:97:5",
      "startTime": "1471914686015922",
      "endTime": "1471914686175591",
      "elapsedTime": "159669",
      "asyncId": 14,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hook",
      "startLine": 97,
      "startCol": 5,
      "endLine": 97,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 2
    },
    "3": {
      "source": "lib/codecept.js:98:5:98:5",
      "startTime": "1471914686522681",
      "endTime": "1471914686620594",
      "elapsedTime": "97913",
      "asyncId": 15,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook))",
      "startLine": 98,
      "startCol": 5,
      "endLine": 98,
      "endCol": 5,
      "file": "lib/codecept.js",
      "triggers": [],
      "uniqueid": 3
    },
    "4": {
      "source": "lib/command/run.js:25:20:25:20",
      "startTime": "1471914686809278",
      "endTime": "1471914687732988",
      "elapsedTime": "923710",
      "asyncId": 16,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n  try {\n    codecept.init(testRoot);\n    await codecept.bootstrap();\n    codecept.loadTests();\n    await codecept.run(test);\n  } catch (err) ",
      "startLine": 25,
      "startCol": 20,
      "endLine": 25,
      "endCol": 20,
      "file": "lib/command/run.js",
      "triggers": [
        18
      ],
      "uniqueid": 4
    },
    "5": {
      "source": "lib/codecept.js:109:12:109:12",
      "startTime": "1471914686968676",
      "endTime": "1471914686997621",
      "elapsedTime": "28945",
      "asyncId": 17,
      "triggerAsyncId": 1,
      "io": false,
      "userCode": true,
      "line": "\n   */\n  async bootstrap() {\n    return runHook(this.config.bootstrap, 'bootstrap');\n  }\n\n  /*",
      "startLine": 109,
      "startCol": 12,
      "endLine": 109,
      "endCol": 12,
      "file": "lib/codecept.js",
      "triggers": [
        19
      ],
      "uniqueid": 5
    },
    "6": {
      "source": "node_modules/commander/index.js:315:8:315:8",
      "startTime": "1471914687182968",
      "endTime": "1471914693287743",
      "elapsedTime": "6104775",
      "asyncId": 18,
      "triggerAsyncId": 16,
      "io": false,
      "userCode": true,
      "line": "\n    }\n\n    fn.apply(self, args);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name",
      "startLine": 315,
      "startCol": 8,
      "endLine": 315,
      "endCol": 8,
      "file": "node_modules/commander/index.js",
      "triggers": [
        20,
        21
      ],
      "uniqueid": 6
    },
    "7": {
      "source": "lib/command/run.js:27:20:27:20",
      "startTime": "1471914689347883",
      "endTime": "1471914718951724",
      "elapsedTime": "29603841",
      "asyncId": 20,
      "triggerAsyncId": 18,
      "io": false,
      "userCode": true,
      "line": "\n    await codecept.bootstrap();\n    codecept.loadTests();\n    await codecept.run(test);\n  } catch (err) {\n    printError(err);\n    process.exitCode = 1",
      "startLine": 27,
      "startCol": 20,
      "endLine": 27,
      "endCol": 20,
      "file": "lib/command/run.js",
      "triggers": [
        24
      ],
      "uniqueid": 7
    },
    "8": {
      "source": "lib/codecept.js:153:12:153:12",
      "startTime": "1471914689424957",
      "endTime": "1471914718864120",
      "elapsedTime": "29439163",
      "asyncId": 21,
      "triggerAsyncId": 18,
      "io": false,
      "userCode": true,
      "line": "\n   */\n  async run(test) {\n    return new Promise((resolve, reject) => {\n      const mocha = container.mocha();\n      mocha.files = this.testFiles;\n      if (test) ",
      "startLine": 153,
      "startCol": 12,
      "endLine": 153,
      "endCol": 12,
      "file": "lib/codecept.js",
      "triggers": [
        25
      ],
      "uniqueid": 8
    },
    "9": {
      "source": "lib/recorder.js:90:23:90:23",
      "startTime": "1471914694916223",
      "endTime": "1471914694944676",
      "elapsedTime": "28453",
      "asyncId": 30,
      "triggerAsyncId": 29,
      "io": false,
      "userCode": true,
      "line": "\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false",
      "startLine": 90,
      "startCol": 23,
      "endLine": 90,
      "endCol": 23,
      "file": "lib/recorder.js",
      "triggers": [
        31
      ],
      "uniqueid": 9
    },
    "10": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914695363561",
      "endTime": "1471914695755906",
      "elapsedTime": "392345",
      "asyncId": 31,
      "triggerAsyncId": 30,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        32
      ],
      "uniqueid": 10
    },
    "11": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471914695645469",
      "endTime": "1471914696112463",
      "elapsedTime": "466994",
      "asyncId": 33,
      "triggerAsyncId": 32,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 11
    },
    "12": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914696497825",
      "endTime": "1471914696944943",
      "elapsedTime": "447118",
      "asyncId": 36,
      "triggerAsyncId": 32,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        37
      ],
      "uniqueid": 12
    },
    "13": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471914696849223",
      "endTime": "1471914709367411",
      "elapsedTime": "12518188",
      "asyncId": 39,
      "triggerAsyncId": 38,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 13
    },
    "14": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914704482722",
      "endTime": "1471914709430910",
      "elapsedTime": "4948188",
      "asyncId": 41,
      "triggerAsyncId": 40,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        42
      ],
      "uniqueid": 14
    },
    "15": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914704644124",
      "endTime": "1471914710040312",
      "elapsedTime": "5396188",
      "asyncId": 42,
      "triggerAsyncId": 41,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        43
      ],
      "uniqueid": 15
    },
    "16": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914704851603",
      "endTime": "1471914710089744",
      "elapsedTime": "5238141",
      "asyncId": 43,
      "triggerAsyncId": 42,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        44
      ],
      "uniqueid": 16
    },
    "17": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914704985013",
      "endTime": "1471914710259272",
      "elapsedTime": "5274259",
      "asyncId": 44,
      "triggerAsyncId": 43,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        45
      ],
      "uniqueid": 17
    },
    "18": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914705257724",
      "endTime": "1471914710319354",
      "elapsedTime": "5061630",
      "asyncId": 46,
      "triggerAsyncId": 45,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        47
      ],
      "uniqueid": 18
    },
    "19": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914705488616",
      "endTime": "1471914710343390",
      "elapsedTime": "4854774",
      "asyncId": 47,
      "triggerAsyncId": 46,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        48
      ],
      "uniqueid": 19
    },
    "20": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914705615383",
      "endTime": "1471914710577398",
      "elapsedTime": "4962015",
      "asyncId": 48,
      "triggerAsyncId": 47,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        49
      ],
      "uniqueid": 20
    },
    "21": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914705785763",
      "endTime": "1471914710603186",
      "elapsedTime": "4817423",
      "asyncId": 49,
      "triggerAsyncId": 48,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        50
      ],
      "uniqueid": 21
    },
    "22": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914705911328",
      "endTime": "1471914710657598",
      "elapsedTime": "4746270",
      "asyncId": 50,
      "triggerAsyncId": 49,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        51
      ],
      "uniqueid": 22
    },
    "23": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914706200279",
      "endTime": "1471914710701069",
      "elapsedTime": "4500790",
      "asyncId": 52,
      "triggerAsyncId": 51,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        53
      ],
      "uniqueid": 23
    },
    "24": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914706441431",
      "endTime": "1471914710724744",
      "elapsedTime": "4283313",
      "asyncId": 53,
      "triggerAsyncId": 52,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        54
      ],
      "uniqueid": 24
    },
    "25": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914706574170",
      "endTime": "1471914710829430",
      "elapsedTime": "4255260",
      "asyncId": 54,
      "triggerAsyncId": 53,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        55
      ],
      "uniqueid": 25
    },
    "26": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914706752493",
      "endTime": "1471914710855398",
      "elapsedTime": "4102905",
      "asyncId": 55,
      "triggerAsyncId": 54,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        56
      ],
      "uniqueid": 26
    },
    "27": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914706887476",
      "endTime": "1471914710912425",
      "elapsedTime": "4024949",
      "asyncId": 56,
      "triggerAsyncId": 55,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        57
      ],
      "uniqueid": 27
    },
    "28": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914707194541",
      "endTime": "1471914710962269",
      "elapsedTime": "3767728",
      "asyncId": 58,
      "triggerAsyncId": 57,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        59
      ],
      "uniqueid": 28
    },
    "29": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914707392993",
      "endTime": "1471914710982557",
      "elapsedTime": "3589564",
      "asyncId": 59,
      "triggerAsyncId": 58,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        60
      ],
      "uniqueid": 29
    },
    "30": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914707530180",
      "endTime": "1471914711081482",
      "elapsedTime": "3551302",
      "asyncId": 60,
      "triggerAsyncId": 59,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        61
      ],
      "uniqueid": 30
    },
    "31": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914707720767",
      "endTime": "1471914711106960",
      "elapsedTime": "3386193",
      "asyncId": 61,
      "triggerAsyncId": 60,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        62
      ],
      "uniqueid": 31
    },
    "32": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914707849098",
      "endTime": "1471914711155631",
      "elapsedTime": "3306533",
      "asyncId": 62,
      "triggerAsyncId": 61,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        63
      ],
      "uniqueid": 32
    },
    "33": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914708113152",
      "endTime": "1471914711197219",
      "elapsedTime": "3084067",
      "asyncId": 64,
      "triggerAsyncId": 63,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        65
      ],
      "uniqueid": 33
    },
    "34": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914708301285",
      "endTime": "1471914711218218",
      "elapsedTime": "2916933",
      "asyncId": 65,
      "triggerAsyncId": 64,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        66
      ],
      "uniqueid": 34
    },
    "35": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914708426860",
      "endTime": "1471914711297967",
      "elapsedTime": "2871107",
      "asyncId": 66,
      "triggerAsyncId": 65,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        67
      ],
      "uniqueid": 35
    },
    "36": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914708597650",
      "endTime": "1471914711321602",
      "elapsedTime": "2723952",
      "asyncId": 67,
      "triggerAsyncId": 66,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        68
      ],
      "uniqueid": 36
    },
    "37": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914708720580",
      "endTime": "1471914711370824",
      "elapsedTime": "2650244",
      "asyncId": 68,
      "triggerAsyncId": 67,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        69
      ],
      "uniqueid": 37
    },
    "38": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914708963855",
      "endTime": "1471914711413033",
      "elapsedTime": "2449178",
      "asyncId": 70,
      "triggerAsyncId": 69,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        71
      ],
      "uniqueid": 38
    },
    "39": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914709099169",
      "endTime": "1471914711814866",
      "elapsedTime": "2715697",
      "asyncId": 71,
      "triggerAsyncId": 70,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        72
      ],
      "uniqueid": 39
    },
    "40": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914709228882",
      "endTime": "1471914712235283",
      "elapsedTime": "3006401",
      "asyncId": 72,
      "triggerAsyncId": 71,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        73
      ],
      "uniqueid": 40
    },
    "41": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914711660186",
      "endTime": "1471914712295126",
      "elapsedTime": "634940",
      "asyncId": 74,
      "triggerAsyncId": 73,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        75
      ],
      "uniqueid": 41
    },
    "42": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914712609715",
      "endTime": "1471914712969789",
      "elapsedTime": "360074",
      "asyncId": 79,
      "triggerAsyncId": 75,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        80
      ],
      "uniqueid": 42
    },
    "43": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471914712922000",
      "endTime": "1471914713061451",
      "elapsedTime": "139451",
      "asyncId": 82,
      "triggerAsyncId": 81,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 43
    },
    "44": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914717710038",
      "endTime": "1471914717948745",
      "elapsedTime": "238707",
      "asyncId": 85,
      "triggerAsyncId": 81,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [
        86
      ],
      "uniqueid": 44
    },
    "45": {
      "source": "node_modules/mocha/lib/runnable.js:361:14:361:14",
      "startTime": "1471914717898521",
      "endTime": "1471914718177093",
      "elapsedTime": "278572",
      "asyncId": 87,
      "triggerAsyncId": 86,
      "io": false,
      "userCode": true,
      "line": "\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn abou",
      "startLine": 361,
      "startCol": 14,
      "endLine": 361,
      "endCol": 14,
      "file": "node_modules/mocha/lib/runnable.js",
      "triggers": [],
      "uniqueid": 45
    },
    "46": {
      "source": "lib/recorder.js:177:30:177:30",
      "startTime": "1471914718812242",
      "endTime": "1471914718930374",
      "elapsedTime": "118132",
      "asyncId": 90,
      "triggerAsyncId": 86,
      "io": false,
      "userCode": true,
      "line": "\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) ",
      "startLine": 177,
      "startCol": 30,
      "endLine": 177,
      "endCol": 30,
      "file": "lib/recorder.js",
      "triggers": [],
      "uniqueid": 46
    },
    "47": {
      "source": "lib/command/run.js:32:20:32:20",
      "startTime": "1471914719080074",
      "endTime": "1471914719344560",
      "elapsedTime": "264486",
      "asyncId": 91,
      "triggerAsyncId": 24,
      "io": false,
      "userCode": true,
      "line": "\n    process.exitCode = 1;\n  } finally {\n    await codecept.teardown();\n  }\n};",
      "startLine": 32,
      "startCol": 20,
      "endLine": 32,
      "endCol": 20,
      "file": "lib/command/run.js",
      "triggers": [
        93
      ],
      "uniqueid": 47
    },
    "48": {
      "source": "lib/codecept.js:117:12:117:12",
      "startTime": "1471914719147501",
      "endTime": "1471914719168680",
      "elapsedTime": "21179",
      "asyncId": 92,
      "triggerAsyncId": 24,
      "io": false,
      "userCode": true,
      "line": "\n   */\n  async teardown() {\n    return runHook(this.config.teardown, 'teardown');\n  }\n\n  /*",
      "startLine": 117,
      "startCol": 12,
      "endLine": 117,
      "endCol": 12,
      "file": "lib/codecept.js",
      "triggers": [
        94
      ],
      "uniqueid": 48
    }
  },
  "files": {
    "lib/codecept.js": "const { existsSync, readFileSync } = require('fs');\nconst glob = require('glob');\nconst fsPath = require('path');\nconst { resolve } = require('path');\n\nconst container = require('./container');\nconst Config = require('./config');\nconst event = require('./event');\nconst runHook = require('./hooks');\nconst output = require('./output');\n\n/**\n * CodeceptJS runner\n */\nclass Codecept {\n  /**\n   * Create CodeceptJS runner.\n   * Config and options should be passed\n   *\n   * @param {*} config\n   * @param {*} opts\n   */\n  constructor(config, opts) {\n    this.config = Config.create(config);\n    this.opts = opts;\n    this.testFiles = new Array(0);\n    this.requireModules(config.require);\n  }\n\n  /**\n   * Require modules before codeceptjs running\n   *\n   * @param {string[]} requiringModules\n   */\n  requireModules(requiringModules) {\n    if (requiringModules) {\n      requiringModules.forEach((requiredModule) => {\n        const isLocalFile = existsSync(requiredModule) || existsSync(`${requiredModule}.js`);\n        if (isLocalFile) {\n          requiredModule = resolve(requiredModule);\n        }\n        require(requiredModule);\n      });\n    }\n  }\n\n  /**\n   * Initialize CodeceptJS at specific directory.\n   * If async initialization is required, pass callback as second parameter.\n   *\n   * @param {string} dir\n   */\n  init(dir) {\n    this.initGlobals(dir);\n    // initializing listeners\n    container.create(this.config, this.opts);\n    this.runHooks();\n  }\n\n  /**\n   * Creates global variables\n   *\n   * @param {string} dir\n   */\n  initGlobals(dir) {\n    global.codecept_dir = dir;\n    global.output_dir = fsPath.resolve(dir, this.config.output);\n\n    if (!this.config.noGlobals) {\n      global.actor = global.codecept_actor = require('./actor');\n      global.Helper = global.codecept_helper = require('./helper');\n      global.pause = require('./pause');\n      global.within = require('./within');\n      global.session = require('./session');\n      global.DataTable = require('./data/table');\n      global.locate = locator => require('./locator').build(locator);\n      global.inject = container.support;\n      global.share = container.share;\n      global.secret = require('./secret').secret;\n      global.codeceptjs = require('./index'); // load all objects\n\n      // BDD\n      const stepDefinitions = require('./interfaces/bdd');\n      global.Given = stepDefinitions.Given;\n      global.When = stepDefinitions.When;\n      global.Then = stepDefinitions.Then;\n    }\n  }\n\n  /**\n   * Executes hooks.\n   */\n  runHooks() {\n    // default hooks\n    runHook(require('./listener/steps'));\n    runHook(require('./listener/config'));\n    runHook(require('./listener/helpers'));\n    runHook(require('./listener/exit'));\n\n    // custom hooks\n    this.config.hooks.forEach(hook => runHook(hook));\n  }\n\n  /**\n   * Executes bootstrap.\n   *\n   */\n  async bootstrap() {\n    return runHook(this.config.bootstrap, 'bootstrap');\n  }\n\n  /**\n   * Executes teardown.\n\n   */\n  async teardown() {\n    return runHook(this.config.teardown, 'teardown');\n  }\n\n  /**\n   * Loads tests by pattern or by config.tests\n   *\n   * @param {string} [pattern]\n   */\n  loadTests(pattern) {\n    const options = {\n      cwd: global.codecept_dir,\n    };\n\n    let patterns = [pattern];\n    if (!pattern) {\n      patterns = [];\n      if (this.config.tests && !this.opts.features) patterns.push(this.config.tests);\n      if (this.config.gherkin.features && !this.opts.tests) patterns.push(this.config.gherkin.features);\n    }\n\n    for (pattern of patterns) {\n      glob.sync(pattern, options).forEach((file) => {\n        if (!fsPath.isAbsolute(file)) {\n          file = fsPath.join(global.codecept_dir, file);\n        }\n        this.testFiles.push(fsPath.resolve(file));\n      });\n    }\n  }\n\n  /**\n   * Run a specific test or all loaded tests.\n   *\n   * @param {string} [test]\n   */\n  async run(test) {\n    return new Promise((resolve, reject) => {\n      const mocha = container.mocha();\n      mocha.files = this.testFiles;\n      if (test) {\n        if (!fsPath.isAbsolute(test)) {\n          test = fsPath.join(global.codecept_dir, test);\n        }\n        mocha.files = mocha.files.filter(t => fsPath.basename(t, '.js') === test || t === test);\n      }\n      const done = () => {\n        event.emit(event.all.result, this);\n        event.emit(event.all.after, this);\n        resolve();\n      };\n\n      try {\n        event.emit(event.all.before, this);\n        mocha.run(() => done());\n      } catch (e) {\n        output.error(e.stack);\n        reject(e);\n      }\n    });\n  }\n\n  static version() {\n    return JSON.parse(readFileSync(`${__dirname}/../package.json`, 'utf8')).version;\n  }\n}\n\nmodule.exports = Codecept;\n",
    "lib/command/run.js": "const {\n  getConfig, printError, getTestRoot, createOutputDir,\n} = require('./utils');\nconst Config = require('../config');\nconst Codecept = require('../codecept');\n\nmodule.exports = async function (test, options) {\n  // registering options globally to use in config\n  // Backward compatibility for --profile\n  process.profile = options.profile;\n  process.env.profile = options.profile;\n  const configFile = options.config;\n\n  let config = getConfig(configFile);\n  if (options.override) {\n    config = Config.append(JSON.parse(options.override));\n  }\n  const testRoot = getTestRoot(configFile);\n  createOutputDir(config, testRoot);\n\n  const codecept = new Codecept(config, options);\n\n  try {\n    codecept.init(testRoot);\n    await codecept.bootstrap();\n    codecept.loadTests();\n    await codecept.run(test);\n  } catch (err) {\n    printError(err);\n    process.exitCode = 1;\n  } finally {\n    await codecept.teardown();\n  }\n};\n",
    "node_modules/commander/index.js": "/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar fs = require('fs');\n\n/**\n * Inherit `Command` from `EventEmitter.prototype`.\n */\n\nrequire('util').inherits(Command, EventEmitter);\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\n\n/**\n * Expose `Command`.\n */\n\nexports.Command = Command;\n\n/**\n * Expose `Option`.\n */\n\nexports.Option = Option;\n\n/**\n * Initialize a new `Option` with the given `flags` and `description`.\n *\n * @param {String} flags\n * @param {String} description\n * @api public\n */\n\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = flags.indexOf('<') >= 0;\n  this.optional = flags.indexOf('[') >= 0;\n  this.bool = flags.indexOf('-no-') === -1;\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n\n/**\n * Return option name.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.name = function() {\n  return this.long\n    .replace('--', '')\n    .replace('no-', '');\n};\n\n/**\n * Return option name, in a camelcase format that can be used\n * as a object attribute key.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.attributeName = function() {\n  return camelcase(this.name());\n};\n\n/**\n * Check if `arg` matches the short or long flag.\n *\n * @param {String} arg\n * @return {Boolean}\n * @api private\n */\n\nOption.prototype.is = function(arg) {\n  return this.short === arg || this.long === arg;\n};\n\n/**\n * Initialize a new `Command`.\n *\n * @param {String} name\n * @api public\n */\n\nfunction Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = {};\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n}\n\n/**\n * Add command `name`.\n *\n * The `.action()` callback is invoked when the\n * command `name` is specified via __ARGV__,\n * and the remaining arguments are applied to the\n * function for access.\n *\n * When the `name` is \"*\" an un-matched command\n * will be passed as the first arg, followed by\n * the rest of __ARGV__ remaining.\n *\n * Examples:\n *\n *      program\n *        .version('0.0.1')\n *        .option('-C, --chdir <path>', 'change the working directory')\n *        .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n *        .option('-T, --no-tests', 'ignore test hook')\n *\n *      program\n *        .command('setup')\n *        .description('run remote setup commands')\n *        .action(function() {\n *          console.log('setup');\n *        });\n *\n *      program\n *        .command('exec <cmd>')\n *        .description('run the given remote command')\n *        .action(function(cmd) {\n *          console.log('exec \"%s\"', cmd);\n *        });\n *\n *      program\n *        .command('teardown <dir> [otherDirs...]')\n *        .description('run teardown commands')\n *        .action(function(dir, otherDirs) {\n *          console.log('dir \"%s\"', dir);\n *          if (otherDirs) {\n *            otherDirs.forEach(function (oDir) {\n *              console.log('dir \"%s\"', oDir);\n *            });\n *          }\n *        });\n *\n *      program\n *        .command('*')\n *        .description('deploy the given env')\n *        .action(function(env) {\n *          console.log('deploying \"%s\"', env);\n *        });\n *\n *      program.parse(process.argv);\n  *\n * @param {String} name\n * @param {String} [desc] for git-style sub-commands\n * @return {Command} the new command\n * @api public\n */\n\nCommand.prototype.command = function(name, desc, opts) {\n  if (typeof desc === 'object' && desc !== null) {\n    opts = desc;\n    desc = null;\n  }\n  opts = opts || {};\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n    this._execs[cmd._name] = true;\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n  cmd._noHelp = !!opts.noHelp;\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n\n  if (desc) return this;\n  return cmd;\n};\n\n/**\n * Define argument syntax for the top-level command.\n *\n * @api public\n */\n\nCommand.prototype.arguments = function(desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};\n\n/**\n * Add an implicit `help [cmd]` subcommand\n * which invokes `--help` for the given command.\n *\n * @api private\n */\n\nCommand.prototype.addImplicitHelpCommand = function() {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n\n/**\n * Parse expected `args`.\n *\n * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parseExpectedArgs = function(args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};\n\n/**\n * Register callback `fn` for the command.\n *\n * Examples:\n *\n *      program\n *        .command('help')\n *        .description('display verbose help')\n *        .action(function() {\n *           // output help here\n *        });\n *\n * @param {Function} fn\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.action = function(fn) {\n  var self = this;\n  var listener = function(args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n\n    var parsed = self.parseOptions(unknown);\n\n    // Output help if necessary\n    outputHelpIfNecessary(self, parsed.unknown);\n\n    // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    }\n\n    // Leftover arguments need to be pushed back. Fixes issue #56\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function(arg, i) {\n      if (arg.required && args[i] == null) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    });\n\n    // Always append ourselves to the end of the arguments,\n    // to make sure we match the number of arguments the user\n    // expects\n    if (self._args.length) {\n      args[self._args.length] = self;\n    } else {\n      args.push(self);\n    }\n\n    fn.apply(self, args);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on('command:' + name, listener);\n  if (this._alias) parent.on('command:' + this._alias, listener);\n  return this;\n};\n\n/**\n * Define option with `flags`, `description` and optional\n * coercion `fn`.\n *\n * The `flags` string should contain both the short and long flags,\n * separated by comma, a pipe or space. The following are all valid\n * all will output this way when `--help` is used.\n *\n *    \"-p, --pepper\"\n *    \"-p|--pepper\"\n *    \"-p --pepper\"\n *\n * Examples:\n *\n *     // simple boolean defaulting to false\n *     program.option('-p, --pepper', 'add pepper');\n *\n *     --pepper\n *     program.pepper\n *     // => Boolean\n *\n *     // simple boolean defaulting to true\n *     program.option('-C, --no-cheese', 'remove cheese');\n *\n *     program.cheese\n *     // => true\n *\n *     --no-cheese\n *     program.cheese\n *     // => false\n *\n *     // required argument\n *     program.option('-C, --chdir <path>', 'change the working directory');\n *\n *     --chdir /tmp\n *     program.chdir\n *     // => \"/tmp\"\n *\n *     // optional argument\n *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] or default\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.option = function(flags, description, fn, defaultValue) {\n  var self = this,\n    option = new Option(flags, description),\n    oname = option.name(),\n    name = option.attributeName();\n\n  // default as 3rd arg\n  if (typeof fn !== 'function') {\n    if (fn instanceof RegExp) {\n      var regex = fn;\n      fn = function(val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n    } else {\n      defaultValue = fn;\n      fn = null;\n    }\n  }\n\n  // preassign default value only for --no-*, [optional], or <required>\n  if (!option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (!option.bool) defaultValue = true;\n    // preassign only if we have a default\n    if (defaultValue !== undefined) {\n      self[name] = defaultValue;\n      option.defaultValue = defaultValue;\n    }\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on('option:' + oname, function(val) {\n    // coercion\n    if (val !== null && fn) {\n      val = fn(val, self[name] === undefined ? defaultValue : self[name]);\n    }\n\n    // unassigned or bool\n    if (typeof self[name] === 'boolean' || typeof self[name] === 'undefined') {\n      // if no value, bool true, and we have a default, then use it!\n      if (val == null) {\n        self[name] = option.bool\n          ? defaultValue || true\n          : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (val !== null) {\n      // reassign\n      self[name] = val;\n    }\n  });\n\n  return this;\n};\n\n/**\n * Allow unknown options on the command line.\n *\n * @param {Boolean} arg if `true` or omitted, no error will be thrown\n * for unknown options.\n * @api public\n */\nCommand.prototype.allowUnknownOption = function(arg) {\n  this._allowUnknownOption = arguments.length === 0 || arg;\n  return this;\n};\n\n/**\n * Parse `argv`, settings options and invoking commands when defined.\n *\n * @param {Array} argv\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parse = function(argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand();\n\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  this._name = this._name || basename(argv[1], '.js');\n\n  // github-style sub-commands with no sub-command\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push('--help');\n  }\n\n  // process argv\n  var parsed = this.parseOptions(this.normalize(argv.slice(2)));\n  var args = this.args = parsed.args;\n\n  var result = this.parseArgs(this.args, parsed.unknown);\n\n  // executable sub-commands\n  var name = result.args[0];\n\n  var aliasCommand = null;\n  // check alias of sub commands\n  if (name) {\n    aliasCommand = this.commands.filter(function(command) {\n      return command.alias() === name;\n    })[0];\n  }\n\n  if (this._execs[name] === true) {\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (aliasCommand) {\n    // is alias of a subCommand\n    args[0] = aliasCommand._name;\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (this.defaultExecutable) {\n    // use the default subcommand\n    args.unshift(this.defaultExecutable);\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  }\n\n  return result;\n};\n\n/**\n * Execute a sub-command executable.\n *\n * @param {Array} argv\n * @param {Array} args\n * @param {Array} unknown\n * @api private\n */\n\nCommand.prototype.executeSubCommand = function(argv, args, unknown) {\n  args = args.concat(unknown);\n\n  if (!args.length) this.help();\n  if (args[0] === 'help' && args.length === 1) this.help();\n\n  // <cmd> --help\n  if (args[0] === 'help') {\n    args[0] = args[1];\n    args[1] = '--help';\n  }\n\n  // executable\n  var f = argv[1];\n  // name of the subcommand, link `pm-install`\n  var bin = basename(f, path.extname(f)) + '-' + args[0];\n\n  // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n  var baseDir;\n\n  var resolvedLink = fs.realpathSync(f);\n\n  baseDir = dirname(resolvedLink);\n\n  // prefer local `./<bin>` to bin in the $PATH\n  var localBin = path.join(baseDir, bin);\n\n  // whether bin file is a js script with explicit `.js` or `.ts` extension\n  var isExplicitJS = false;\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin + '.ts')) {\n    bin = localBin + '.ts';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n\n  var proc;\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = (process.execArgv || []).concat(args);\n\n      proc = spawn(process.argv[0], args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    } else {\n      proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    }\n  } else {\n    args.unshift(bin);\n    proc = spawn(process.execPath, args, { stdio: 'inherit' });\n  }\n\n  var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n  signals.forEach(function(signal) {\n    process.on(signal, function() {\n      if (proc.killed === false && proc.exitCode === null) {\n        proc.kill(signal);\n      }\n    });\n  });\n  proc.on('close', process.exit.bind(process));\n  proc.on('error', function(err) {\n    if (err.code === 'ENOENT') {\n      console.error('error: %s(1) does not exist, try --help', bin);\n    } else if (err.code === 'EACCES') {\n      console.error('error: %s(1) not executable. try chmod or run with root', bin);\n    }\n    process.exit(1);\n  });\n\n  // Store the reference to the child process\n  this.runningCommand = proc;\n};\n\n/**\n * Normalize `args`, splitting joined short flags. For example\n * the arg \"-abc\" is equivalent to \"-a -b -c\".\n * This also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".\n *\n * @param {Array} args\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.normalize = function(args) {\n  var ret = [],\n    arg,\n    lastOpt,\n    index;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i - 1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 1 && arg[0] === '-' && arg[1] !== '-') {\n      arg.slice(1).split('').forEach(function(c) {\n        ret.push('-' + c);\n      });\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Parse command `args`.\n *\n * When listener(s) are available those\n * callbacks are invoked, otherwise the \"*\"\n * event is emitted and those actions are invoked.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api private\n */\n\nCommand.prototype.parseArgs = function(args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners('command:' + name).length) {\n      this.emit('command:' + args.shift(), args, unknown);\n    } else {\n      this.emit('command:*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n\n    // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n    if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n    }\n    if (this.commands.length === 0 &&\n        this._args.filter(function(a) { return a.required; }).length === 0) {\n      this.emit('command:*');\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an option matching `arg` if any.\n *\n * @param {String} arg\n * @return {Option}\n * @api private\n */\n\nCommand.prototype.optionFor = function(arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n\n/**\n * Parse options from `argv` returning `argv`\n * void of these options.\n *\n * @param {Array} argv\n * @return {Array}\n * @api public\n */\n\nCommand.prototype.parseOptions = function(argv) {\n  var args = [],\n    len = argv.length,\n    literal,\n    option,\n    arg;\n\n  var unknownOptions = [];\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n\n    // literal args after --\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    if (arg === '--') {\n      literal = true;\n      continue;\n    }\n\n    // find matching Option\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (arg == null) return this.optionMissingArgument(option);\n        this.emit('option:' + option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i + 1];\n        if (arg == null || (arg[0] === '-' && arg !== '-')) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit('option:' + option.name(), arg);\n      // bool\n      } else {\n        this.emit('option:' + option.name());\n      }\n      continue;\n    }\n\n    // looks like an option\n    if (arg.length > 1 && arg[0] === '-') {\n      unknownOptions.push(arg);\n\n      // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n      if ((i + 1) < argv.length && argv[i + 1][0] !== '-') {\n        unknownOptions.push(argv[++i]);\n      }\n      continue;\n    }\n\n    // arg\n    args.push(arg);\n  }\n\n  return { args: args, unknown: unknownOptions };\n};\n\n/**\n * Return an object containing options as key-value pairs\n *\n * @return {Object}\n * @api public\n */\nCommand.prototype.opts = function() {\n  var result = {},\n    len = this.options.length;\n\n  for (var i = 0; i < len; i++) {\n    var key = this.options[i].attributeName();\n    result[key] = key === this._versionOptionName ? this._version : this[key];\n  }\n  return result;\n};\n\n/**\n * Argument `name` is missing.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.missingArgument = function(name) {\n  console.error(\"error: missing required argument `%s'\", name);\n  process.exit(1);\n};\n\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {String} option\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.optionMissingArgument = function(option, flag) {\n  if (flag) {\n    console.error(\"error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"error: option `%s' argument missing\", option.flags);\n  }\n  process.exit(1);\n};\n\n/**\n * Unknown option `flag`.\n *\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.unknownOption = function(flag) {\n  if (this._allowUnknownOption) return;\n  console.error(\"error: unknown option `%s'\", flag);\n  process.exit(1);\n};\n\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.variadicArgNotLast = function(name) {\n  console.error(\"error: variadic arguments must be last `%s'\", name);\n  process.exit(1);\n};\n\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-V, --version\" flag\n * which will print the version number when passed.\n *\n * @param {String} str\n * @param {String} [flags]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.version = function(str, flags) {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  var versionOption = new Option(flags, 'output the version number');\n  this._versionOptionName = versionOption.long.substr(2) || 'version';\n  this.options.push(versionOption);\n  this.on('option:' + this._versionOptionName, function() {\n    process.stdout.write(str + '\\n');\n    process.exit(0);\n  });\n  return this;\n};\n\n/**\n * Set the description to `str`.\n *\n * @param {String} str\n * @param {Object} argsDescription\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.description = function(str, argsDescription) {\n  if (arguments.length === 0) return this._description;\n  this._description = str;\n  this._argsDescription = argsDescription;\n  return this;\n};\n\n/**\n * Set an alias for the command\n *\n * @param {String} alias\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.alias = function(alias) {\n  var command = this;\n  if (this.commands.length !== 0) {\n    command = this.commands[this.commands.length - 1];\n  }\n\n  if (arguments.length === 0) return command._alias;\n\n  if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n  command._alias = alias;\n  return this;\n};\n\n/**\n * Set / get the command usage `str`.\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.usage = function(str) {\n  var args = this._args.map(function(arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]' +\n    (this.commands.length ? ' [command]' : '') +\n    (this._args.length ? ' ' + args.join(' ') : '');\n\n  if (arguments.length === 0) return this._usage || usage;\n  this._usage = str;\n\n  return this;\n};\n\n/**\n * Get or set the name of the command\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.name = function(str) {\n  if (arguments.length === 0) return this._name;\n  this._name = str;\n  return this;\n};\n\n/**\n * Return prepared commands.\n *\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.prepareCommands = function() {\n  return this.commands.filter(function(cmd) {\n    return !cmd._noHelp;\n  }).map(function(cmd) {\n    var args = cmd._args.map(function(arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [\n      cmd._name +\n        (cmd._alias ? '|' + cmd._alias : '') +\n        (cmd.options.length ? ' [options]' : '') +\n        (args ? ' ' + args : ''),\n      cmd._description\n    ];\n  });\n};\n\n/**\n * Return the largest command length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestCommandLength = function() {\n  var commands = this.prepareCommands();\n  return commands.reduce(function(max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n};\n\n/**\n * Return the largest option length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestOptionLength = function() {\n  var options = [].slice.call(this.options);\n  options.push({\n    flags: '-h, --help'\n  });\n  return options.reduce(function(max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n\n/**\n * Return the largest arg length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestArgLength = function() {\n  return this._args.reduce(function(max, arg) {\n    return Math.max(max, arg.name.length);\n  }, 0);\n};\n\n/**\n * Return the pad width.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.padWidth = function() {\n  var width = this.largestOptionLength();\n  if (this._argsDescription && this._args.length) {\n    if (this.largestArgLength() > width) {\n      width = this.largestArgLength();\n    }\n  }\n\n  if (this.commands && this.commands.length) {\n    if (this.largestCommandLength() > width) {\n      width = this.largestCommandLength();\n    }\n  }\n\n  return width;\n};\n\n/**\n * Return help for options.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.optionHelp = function() {\n  var width = this.padWidth();\n\n  // Append the help information\n  return this.options.map(function(option) {\n    return pad(option.flags, width) + '  ' + option.description +\n      ((option.bool && option.defaultValue !== undefined) ? ' (default: ' + JSON.stringify(option.defaultValue) + ')' : '');\n  }).concat([pad('-h, --help', width) + '  ' + 'output usage information'])\n    .join('\\n');\n};\n\n/**\n * Return command help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.commandHelp = function() {\n  if (!this.commands.length) return '';\n\n  var commands = this.prepareCommands();\n  var width = this.padWidth();\n\n  return [\n    'Commands:',\n    commands.map(function(cmd) {\n      var desc = cmd[1] ? '  ' + cmd[1] : '';\n      return (desc ? pad(cmd[0], width) : cmd[0]) + desc;\n    }).join('\\n').replace(/^/gm, '  '),\n    ''\n  ].join('\\n');\n};\n\n/**\n * Return program help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.helpInformation = function() {\n  var desc = [];\n  if (this._description) {\n    desc = [\n      this._description,\n      ''\n    ];\n\n    var argsDescription = this._argsDescription;\n    if (argsDescription && this._args.length) {\n      var width = this.padWidth();\n      desc.push('Arguments:');\n      desc.push('');\n      this._args.forEach(function(arg) {\n        desc.push('  ' + pad(arg.name, width) + '  ' + argsDescription[arg.name]);\n      });\n      desc.push('');\n    }\n  }\n\n  var cmdName = this._name;\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n  var usage = [\n    'Usage: ' + cmdName + ' ' + this.usage(),\n    ''\n  ];\n\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n\n  var options = [\n    'Options:',\n    '' + this.optionHelp().replace(/^/gm, '  '),\n    ''\n  ];\n\n  return usage\n    .concat(desc)\n    .concat(options)\n    .concat(cmds)\n    .join('\\n');\n};\n\n/**\n * Output help information for this command\n *\n * @api public\n */\n\nCommand.prototype.outputHelp = function(cb) {\n  if (!cb) {\n    cb = function(passthru) {\n      return passthru;\n    };\n  }\n  process.stdout.write(cb(this.helpInformation()));\n  this.emit('--help');\n};\n\n/**\n * Output help information and exit.\n *\n * @api public\n */\n\nCommand.prototype.help = function(cb) {\n  this.outputHelp(cb);\n  process.exit();\n};\n\n/**\n * Camel-case the given `flag`\n *\n * @param {String} flag\n * @return {String}\n * @api private\n */\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce(function(str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Pad `str` to `width`.\n *\n * @param {String} str\n * @param {Number} width\n * @return {String}\n * @api private\n */\n\nfunction pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n/**\n * Output help information if necessary\n *\n * @param {Command} command to output help for\n * @param {Array} array of options to search for -h or --help\n * @api private\n */\n\nfunction outputHelpIfNecessary(cmd, options) {\n  options = options || [];\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] === '--help' || options[i] === '-h') {\n      cmd.outputHelp();\n      process.exit(0);\n    }\n  }\n}\n\n/**\n * Takes an argument an returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {String}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\n// for versions before node v0.8 when there weren't `fs.existsSync`\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n",
    "lib/recorder.js": "const debug = require('debug')('codeceptjs:recorder');\nconst promiseRetry = require('promise-retry');\n\nconst { log } = require('./output');\n\nlet promise;\nlet running = false;\nlet errFn;\nlet queueId = 0;\nlet sessionId = null;\nlet asyncErr = null;\n\nlet tasks = [];\nlet oldPromises = [];\n\nconst defaultRetryOptions = {\n  retries: 0,\n  minTimeout: 150,\n  maxTimeout: 10000,\n};\n\n/**\n * Singleton object to record all test steps as promises and run them in chain.\n * @alias recorder\n * @interface\n */\nmodule.exports = {\n\n  /**\n   * @type {Array<Object<string, *>>}\n   * @inner\n   */\n  retries: [],\n\n  /**\n   * Start recording promises\n   *\n   * @api\n   * @inner\n   */\n  start() {\n    running = true;\n    asyncErr = null;\n    errFn = null;\n    this.reset();\n  },\n\n  /**\n   * @return {boolean}\n   * @inner\n   */\n  isRunning() {\n    return running;\n  },\n\n  /**\n   * @return {void}\n   * @inner\n   */\n  startUnlessRunning() {\n    if (!this.isRunning()) {\n      this.start();\n    }\n  },\n\n  /**\n   * Add error handler to catch rejected promises\n   *\n   * @api\n   * @param {function} fn\n   * @inner\n   */\n  errHandler(fn) {\n    errFn = fn;\n  },\n\n  /**\n   * Stops current promise chain, calls `catch`.\n   * Resets recorder to initial state.\n   *\n   * @api\n   * @inner\n   */\n  reset() {\n    if (promise && running) this.catch();\n    queueId++;\n    sessionId = null;\n    asyncErr = null;\n    log(`${currentQueue()} Starting recording promises`);\n    promise = Promise.resolve();\n    oldPromises = [];\n    tasks = [];\n    this.session.running = false;\n    this.retries = [];\n  },\n\n  /**\n   * @name CodeceptJS.recorder~session\n   * @type {CodeceptJS.RecorderSession}\n   * @inner\n   */\n\n  /**\n   * @alias RecorderSession\n   * @interface\n   */\n  session: {\n    /**\n     * @type {boolean}\n     * @inner\n     */\n    running: false,\n\n    /**\n     * @param {string} name\n     * @inner\n     */\n    start(name) {\n      log(`${currentQueue()}Starting <${name}> session`);\n      tasks.push('--->');\n      oldPromises.push(promise);\n      this.running = true;\n      sessionId = name;\n      promise = Promise.resolve();\n    },\n\n    /**\n     * @param {string} name\n     * @inner\n     */\n    restore(name) {\n      tasks.push('<---');\n      log(`${currentQueue()}Finalize <${name}> session`);\n      this.running = false;\n      sessionId = null;\n      this.catch(errFn);\n      promise = promise.then(() => oldPromises.pop());\n    },\n\n    /**\n     * @param {function} fn\n     * @inner\n     */\n    catch(fn) {\n      promise = promise.catch(fn);\n    },\n\n  },\n\n  /**\n   * Adds a promise to a chain.\n   * Promise description should be passed as first parameter.\n   *\n   * @param {string|function} taskName\n   * @param {function} [fn]\n   * @param {boolean} [force=false]\n   * @param {boolean} [retry]\n   *     undefined: `add(fn)` -> `false` and `add('step',fn)` -> `true`\n   *     true: it will retries if `retryOpts` set.\n   *     false: ignore `retryOpts` and won't retry.\n   * @return {Promise<*> | undefined}\n   * @inner\n   */\n  add(taskName, fn = undefined, force = false, retry = undefined) {\n    if (typeof taskName === 'function') {\n      fn = taskName;\n      taskName = fn.toString();\n      if (retry === undefined) retry = false;\n    }\n    if (retry === undefined) retry = true;\n    if (!running && !force) {\n      return;\n    }\n    tasks.push(taskName);\n    debug(`${currentQueue()}Queued | ${taskName}`);\n\n    return promise = promise.then((res) => {\n      const retryOpts = this.retries.slice(-1).pop();\n      // no retries or unnamed tasks\n      if (!retryOpts || !taskName || !retry) {\n        return fn.call(res);\n      }\n\n      const retryRules = this.retries.slice().reverse();\n      return promiseRetry(Object.assign(defaultRetryOptions, retryOpts), (retry, number) => {\n        if (number > 1) log(`${currentQueue()}Retrying... Attempt #${number}`);\n        try {\n          fn.call(res);\n        } catch (err) {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err);\n          }\n          throw err;\n        }\n        /*\n        return Promise.resolve(res).then(fn).catch((err) => {\n          for (const retryObj of retryRules) {\n            if (!retryObj.when) return retry(err);\n            if (retryObj.when && retryObj.when(err)) return retry(err);\n          }\n          throw err;\n        });\n        */\n      });\n    });\n  },\n\n  /**\n   * @param {*} opts\n   * @return {*}\n   * @inner\n   */\n  retry(opts) {\n    if (!promise) return;\n\n    if (opts === null) {\n      opts = {};\n    }\n    if (Number.isInteger(opts)) {\n      opts = { retries: opts };\n    }\n    return this.add(() => this.retries.push(opts));\n  },\n\n  /**\n   * @param {function} [customErrFn]\n   * @return {Promise<*>}\n   * @inner\n   */\n  catch(customErrFn) {\n    return promise = promise.catch((err) => {\n      log(`${currentQueue()}Error | ${err}`);\n      if (!(err instanceof Error)) { // strange things may happen\n        err = new Error(`[Wrapped Error] ${JSON.stringify(err)}`); // we should be prepared for them\n      }\n      if (customErrFn) {\n        customErrFn(err);\n      } else if (errFn) {\n        errFn(err);\n      }\n      this.stop();\n    });\n  },\n\n  /**\n   * @param {function} customErrFn\n   * @return {Promise<*>}\n   * @inner\n   */\n  catchWithoutStop(customErrFn) {\n    return promise = promise.catch((err) => {\n      log(`${currentQueue()}Error | ${err}`);\n      if (!(err instanceof Error)) { // strange things may happen\n        err = new Error(`[Wrapped Error] ${JSON.stringify(err)}`); // we should be prepared for them\n      }\n      if (customErrFn) {\n        customErrFn(err);\n      } else if (errFn) {\n        errFn(err);\n      }\n    });\n  },\n\n  /**\n   * Adds a promise which throws an error into a chain\n   *\n   * @api\n   * @param {*} err\n   * @inner\n   */\n  throw(err) {\n    return this.add(`throw error ${err}`, () => {\n      throw err;\n    });\n  },\n\n  /**\n   * @param {*} err\n   * @inner\n   */\n  saveFirstAsyncError(err) {\n    if (asyncErr === null) {\n      asyncErr = err;\n    }\n  },\n\n  /**\n   * @return {*}\n   * @inner\n   */\n  getAsyncErr() {\n    return asyncErr;\n  },\n\n  /**\n   * @return {void}\n   * @inner\n   */\n  cleanAsyncErr() {\n    asyncErr = null;\n  },\n\n  /**\n   * Stops recording promises\n   * @api\n   * @inner\n   */\n  stop() {\n    debug(this.toString());\n    log(`${currentQueue()}Stopping recording promises`);\n    running = false;\n  },\n\n  /**\n   * Get latest promise in chain.\n   *\n   * @api\n   * @return {Promise<*>}\n   * @inner\n   */\n  promise() {\n    return promise;\n  },\n\n  /**\n   * Get a list of all chained tasks\n   * @return {string}\n   * @inner\n   */\n  scheduled() {\n    return tasks.join('\\n');\n  },\n\n  /**\n   * Get a state of current queue and tasks\n   * @return {string}\n   * @inner\n   */\n  toString() {\n    return `Queue: ${currentQueue()}\\n\\nTasks: ${this.scheduled()}`;\n  },\n\n};\n\nfunction currentQueue() {\n  let session = '';\n  if (sessionId) session = `<${sessionId}> `;\n  return `[${queueId}] ${session}`;\n}\n",
    "node_modules/mocha/lib/runnable.js": "'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar Pending = require('./pending');\nvar debug = require('debug')('mocha:runnable');\nvar milliseconds = require('ms');\nvar utils = require('./utils');\nvar errors = require('./errors');\nvar createInvalidExceptionError = errors.createInvalidExceptionError;\nvar createMultipleDoneError = errors.createMultipleDoneError;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n * @private\n */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar clearTimeout = global.clearTimeout;\nvar toString = Object.prototype.toString;\n\nmodule.exports = Runnable;\n\n/**\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\n *\n * @class\n * @extends external:EventEmitter\n * @public\n * @param {String} title\n * @param {Function} fn\n */\nfunction Runnable(title, fn) {\n  this.title = title;\n  this.fn = fn;\n  this.body = (fn || '').toString();\n  this.async = fn && fn.length;\n  this.sync = !this.async;\n  this._timeout = 2000;\n  this._slow = 75;\n  this._retries = -1;\n  this.reset();\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\nutils.inherits(Runnable, EventEmitter);\n\n/**\n * Resets the state initially or for a next run.\n */\nRunnable.prototype.reset = function() {\n  this.timedOut = false;\n  this._currentRetry = 0;\n  this.pending = false;\n  delete this.state;\n  delete this.err;\n};\n\n/**\n * Get current timeout value in msecs.\n *\n * @private\n * @returns {number} current timeout threshold value\n */\n/**\n * @summary\n * Set timeout threshold value (msecs).\n *\n * @description\n * A string argument can use shorthand (e.g., \"2s\") and will be converted.\n * The value will be clamped to range [<code>0</code>, <code>2^<sup>31</sup>-1</code>].\n * If clamped value matches either range endpoint, timeouts will be disabled.\n *\n * @private\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value}\n * @param {number|string} ms - Timeout threshold value.\n * @returns {Runnable} this\n * @chainable\n */\nRunnable.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n\n  // Clamp to range\n  var INT_MAX = Math.pow(2, 31) - 1;\n  var range = [0, INT_MAX];\n  ms = utils.clamp(ms, range);\n\n  // see #1652 for reasoning\n  if (ms === range[0] || ms === range[1]) {\n    this._timeout = 0;\n  } else {\n    this._timeout = ms;\n  }\n  debug('timeout %d', this._timeout);\n\n  if (this.timer) {\n    this.resetTimeout();\n  }\n  return this;\n};\n\n/**\n * Set or get slow `ms`.\n *\n * @private\n * @param {number|string} ms\n * @return {Runnable|number} ms or Runnable instance.\n */\nRunnable.prototype.slow = function(ms) {\n  if (!arguments.length || typeof ms === 'undefined') {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Halt and mark as pending.\n *\n * @memberof Mocha.Runnable\n * @public\n */\nRunnable.prototype.skip = function() {\n  this.pending = true;\n  throw new Pending('sync skip; aborting execution');\n};\n\n/**\n * Check if this runnable or its parent suite is marked as pending.\n *\n * @private\n */\nRunnable.prototype.isPending = function() {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Return `true` if this Runnable has failed.\n * @return {boolean}\n * @private\n */\nRunnable.prototype.isFailed = function() {\n  return !this.isPending() && this.state === constants.STATE_FAILED;\n};\n\n/**\n * Return `true` if this Runnable has passed.\n * @return {boolean}\n * @private\n */\nRunnable.prototype.isPassed = function() {\n  return !this.isPending() && this.state === constants.STATE_PASSED;\n};\n\n/**\n * Set or get number of retries.\n *\n * @private\n */\nRunnable.prototype.retries = function(n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  this._retries = n;\n};\n\n/**\n * Set or get current retry\n *\n * @private\n */\nRunnable.prototype.currentRetry = function(n) {\n  if (!arguments.length) {\n    return this._currentRetry;\n  }\n  this._currentRetry = n;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Mocha.Runnable\n * @public\n * @return {string}\n */\nRunnable.prototype.fullTitle = function() {\n  return this.titlePath().join(' ');\n};\n\n/**\n * Return the title path generated by concatenating the parent's title path with the title.\n *\n * @memberof Mocha.Runnable\n * @public\n * @return {string}\n */\nRunnable.prototype.titlePath = function() {\n  return this.parent.titlePath().concat([this.title]);\n};\n\n/**\n * Clear the timeout.\n *\n * @private\n */\nRunnable.prototype.clearTimeout = function() {\n  clearTimeout(this.timer);\n};\n\n/**\n * Reset the timeout.\n *\n * @private\n */\nRunnable.prototype.resetTimeout = function() {\n  var self = this;\n  var ms = this.timeout();\n\n  if (ms === 0) {\n    return;\n  }\n  this.clearTimeout();\n  this.timer = setTimeout(function() {\n    if (self.timeout() === 0) {\n      return;\n    }\n    self.callback(self._timeoutError(ms));\n    self.timedOut = true;\n  }, ms);\n};\n\n/**\n * Set or get a list of whitelisted globals for this test run.\n *\n * @private\n * @param {string[]} globals\n */\nRunnable.prototype.globals = function(globals) {\n  if (!arguments.length) {\n    return this._allowedGlobals;\n  }\n  this._allowedGlobals = globals;\n};\n\n/**\n * Run the test and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @private\n */\nRunnable.prototype.run = function(fn) {\n  var self = this;\n  var start = new Date();\n  var ctx = this.ctx;\n  var finished;\n  var errorWasHandled = false;\n\n  if (this.isPending()) return fn();\n\n  // Sometimes the ctx exists, but it is not runnable\n  if (ctx && ctx.runnable) {\n    ctx.runnable(this);\n  }\n\n  // called multiple times\n  function multiple(err) {\n    if (errorWasHandled) {\n      return;\n    }\n    errorWasHandled = true;\n    self.emit('error', createMultipleDoneError(self, err));\n  }\n\n  // finished\n  function done(err) {\n    var ms = self.timeout();\n    if (self.timedOut) {\n      return;\n    }\n\n    if (finished) {\n      return multiple(err);\n    }\n\n    self.clearTimeout();\n    self.duration = new Date() - start;\n    finished = true;\n    if (!err && self.duration > ms && ms > 0) {\n      err = self._timeoutError(ms);\n    }\n    fn(err);\n  }\n\n  // for .resetTimeout() and Runner#uncaught()\n  this.callback = done;\n\n  if (this.fn && typeof this.fn.call !== 'function') {\n    done(\n      new TypeError(\n        'A runnable must be passed a function as its second argument.'\n      )\n    );\n    return;\n  }\n\n  // explicit async with `done` argument\n  if (this.async) {\n    this.resetTimeout();\n\n    // allows skip() to be used in an explicit async context\n    this.skip = function asyncSkip() {\n      this.pending = true;\n      done();\n      // halt execution, the uncaught handler will ignore the failure.\n      throw new Pending('async skip; aborting execution');\n    };\n\n    try {\n      callFnAsync(this.fn);\n    } catch (err) {\n      // handles async runnables which actually run synchronously\n      errorWasHandled = true;\n      if (err instanceof Pending) {\n        return; // done() is already called in this.skip()\n      } else if (this.allowUncaught) {\n        throw err;\n      }\n      done(Runnable.toValueOrError(err));\n    }\n    return;\n  }\n\n  // sync or promise-returning\n  try {\n    callFn(this.fn);\n  } catch (err) {\n    errorWasHandled = true;\n    if (err instanceof Pending) {\n      return done();\n    } else if (this.allowUncaught) {\n      throw err;\n    }\n    done(Runnable.toValueOrError(err));\n  }\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result.then(\n        function() {\n          done();\n          // Return null so libraries like bluebird do not warn about\n          // subsequently constructed Promises.\n          return null;\n        },\n        function(reason) {\n          done(reason || new Error('Promise rejected with no or falsy reason'));\n        }\n      );\n    } else {\n      if (self.asyncOnly) {\n        return done(\n          new Error(\n            '--async-only option in use without declaring `done()` or returning a promise'\n          )\n        );\n      }\n\n      done();\n    }\n  }\n\n  function callFnAsync(fn) {\n    var result = fn.call(ctx, function(err) {\n      if (err instanceof Error || toString.call(err) === '[object Error]') {\n        return done(err);\n      }\n      if (err) {\n        if (Object.prototype.toString.call(err) === '[object Object]') {\n          return done(\n            new Error('done() invoked with non-Error: ' + JSON.stringify(err))\n          );\n        }\n        return done(new Error('done() invoked with non-Error: ' + err));\n      }\n      if (result && utils.isPromise(result)) {\n        return done(\n          new Error(\n            'Resolution method is overspecified. Specify a callback *or* return a Promise; not both.'\n          )\n        );\n      }\n\n      done();\n    });\n  }\n};\n\n/**\n * Instantiates a \"timeout\" error\n *\n * @param {number} ms - Timeout (in milliseconds)\n * @returns {Error} a \"timeout\" error\n * @private\n */\nRunnable.prototype._timeoutError = function(ms) {\n  var msg =\n    'Timeout of ' +\n    ms +\n    'ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.';\n  if (this.file) {\n    msg += ' (' + this.file + ')';\n  }\n  return new Error(msg);\n};\n\nvar constants = utils.defineConstants(\n  /**\n   * {@link Runnable}-related constants.\n   * @public\n   * @memberof Runnable\n   * @readonly\n   * @static\n   * @alias constants\n   * @enum {string}\n   */\n  {\n    /**\n     * Value of `state` prop when a `Runnable` has failed\n     */\n    STATE_FAILED: 'failed',\n    /**\n     * Value of `state` prop when a `Runnable` has passed\n     */\n    STATE_PASSED: 'passed',\n    /**\n     * Value of `state` prop when a `Runnable` has been skipped by user\n     */\n    STATE_PENDING: 'pending'\n  }\n);\n\n/**\n * Given `value`, return identity if truthy, otherwise create an \"invalid exception\" error and return that.\n * @param {*} [value] - Value to return, if present\n * @returns {*|Error} `value`, otherwise an `Error`\n * @private\n */\nRunnable.toValueOrError = function(value) {\n  return (\n    value ||\n    createInvalidExceptionError(\n      'Runnable failed with falsy or undefined exception. Please throw an Error instead.',\n      value\n    )\n  );\n};\n\nRunnable.constants = constants;\n"
  }
}