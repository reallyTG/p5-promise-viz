{
  "promises": {
    "0": {
      "source": "node_modules/jest-runner/build/runTest.js:372:23:372:23",
      "startTime": "578964576396380",
      "endTime": "578964576554096",
      "elapsedTime": "157716",
      "asyncId": 29,
      "triggerAsyncId": 4,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " runTestInternal",
      "userCode": false,
      "line": "\n\n  try {\n    await environment.setup();\n    let result;\n\n    try ",
      "startLine": 372,
      "startCol": 23,
      "endLine": 372,
      "endCol": 23,
      "file": "node_modules/jest-runner/build/runTest.js",
      "triggers": [
        30
      ],
      "uniqueid": 0
    },
    "1": {
      "source": "node_modules/jest-runner/build/runTest.js:472:40:472:40",
      "startTime": "578964577374694",
      "endTime": "578979099725774",
      "elapsedTime": "14522351080",
      "asyncId": 30,
      "triggerAsyncId": 29,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " runTest",
      "userCode": false,
      "triggers": [
        41,
        79,
        80,
        81,
        82,
        85,
        125,
        163,
        166,
        204,
        205,
        206,
        209,
        249,
        289,
        329,
        369,
        409,
        449,
        489,
        529,
        569,
        609,
        647,
        648,
        651,
        653,
        39,
        83,
        123,
        164,
        207,
        247,
        287,
        327,
        367,
        407,
        447,
        487,
        527,
        567,
        607,
        38,
        650,
        649,
        37
      ],
      "line": "\n  sendMessageToJest\n) {\n  const {leakDetector, result} = await runTestInternal(\n    path,\n    globalConfig,\n    config",
      "startLine": 472,
      "startCol": 40,
      "endLine": 472,
      "endCol": 40,
      "file": "node_modules/jest-runner/build/runTest.js",
      "uniqueid": 1
    },
    "2": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:76:13:76:13",
      "startTime": "578979097772693",
      "endTime": "578979097788753",
      "elapsedTime": "16060",
      "asyncId": 653,
      "triggerAsyncId": 30,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " queueRunner",
      "userCode": false,
      "line": "\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return {\n    cancel: token.cancel.bind(token)",
      "startLine": 76,
      "startCol": 13,
      "endLine": 76,
      "endCol": 13,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "triggers": [
        654,
        654
      ],
      "uniqueid": 2
    },
    "3": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:75:30:75:30",
      "startTime": "578979098102391",
      "endTime": "578979233261160",
      "elapsedTime": "135158769",
      "asyncId": 654,
      "triggerAsyncId": 653,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        663,
        665,
        672,
        661,
        662,
        670,
        703,
        674
      ],
      "line": "\n\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return ",
      "startLine": 75,
      "startCol": 30,
      "endLine": 75,
      "endCol": 30,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "uniqueid": 3
    },
    "4": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:76:13:76:13",
      "startTime": "578979102394257",
      "endTime": "578979102410808",
      "elapsedTime": "16551",
      "asyncId": 665,
      "triggerAsyncId": 654,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " queueRunner",
      "userCode": false,
      "line": "\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return {\n    cancel: token.cancel.bind(token)",
      "startLine": 76,
      "startCol": 13,
      "endLine": 76,
      "endCol": 13,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "triggers": [
        666,
        666
      ],
      "uniqueid": 4
    },
    "5": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:75:30:75:30",
      "startTime": "578979102687005",
      "endTime": "578979211397013",
      "elapsedTime": "108710008",
      "asyncId": 666,
      "triggerAsyncId": 665,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        682,
        696,
        684,
        683,
        682,
        681,
        680,
        679,
        678,
        677,
        676,
        694,
        698,
        707,
        667,
        667
      ],
      "line": "\n\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return ",
      "startLine": 75,
      "startCol": 30,
      "endLine": 75,
      "endCol": 30,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "uniqueid": 5
    },
    "6": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:75:30:75:30",
      "startTime": "578979102943857",
      "endTime": "578979232901155",
      "elapsedTime": "129957298",
      "asyncId": 667,
      "triggerAsyncId": 666,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        953,
        955,
        961,
        951,
        952,
        959,
        976,
        701
      ],
      "line": "\n\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return ",
      "startLine": 75,
      "startCol": 30,
      "endLine": 75,
      "endCol": 30,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "uniqueid": 6
    },
    "7": {
      "source": "apps/api/src/model/lib/user.service.spec.ts:10:8:10:8",
      "startTime": "578979106110483",
      "endTime": "578979210632891",
      "elapsedTime": "104522408",
      "asyncId": 678,
      "triggerAsyncId": 666,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Object.<anonymous>",
      "userCode": false,
      "line": "\n    const app = await Test.createTestingModule({\n      providers: [UserService],\n    }).compile();\n\n    service = app.get<UserService>(UserService);\n  })",
      "startLine": 10,
      "startCol": 8,
      "endLine": 10,
      "endCol": 8,
      "file": "apps/api/src/model/lib/user.service.spec.ts",
      "triggers": [
        692
      ],
      "uniqueid": 7
    },
    "8": {
      "source": "node_modules/@nestjs/testing/testing-module.builder.js:41:28:41:28",
      "startTime": "578979106632932",
      "endTime": "578979135165169",
      "elapsedTime": "28532237",
      "asyncId": 679,
      "triggerAsyncId": 666,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " TestingModuleBuilder.compile",
      "userCode": false,
      "line": "\n    async compile() {\n        this.applyLogger();\n        await this.scanner.scan(this.module);\n        this.applyOverloadsMap();\n        await this.instanceLoader.createInstancesOfDependencies();\n        this.scanner.applyApplicationProviders()",
      "startLine": 41,
      "startCol": 28,
      "endLine": 41,
      "endCol": 28,
      "file": "node_modules/@nestjs/testing/testing-module.builder.js",
      "triggers": [
        691
      ],
      "uniqueid": 8
    },
    "9": {
      "source": "apps/api/src/model/lib/user.service.spec.ts:10:8:10:8",
      "startTime": "578979111644758",
      "endTime": "578979168316875",
      "elapsedTime": "56672117",
      "asyncId": 691,
      "triggerAsyncId": 679,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Object.<anonymous>",
      "userCode": false,
      "triggers": [
        740,
        746,
        745,
        750,
        749,
        756,
        764,
        772,
        778,
        777,
        782,
        781,
        786,
        785,
        806,
        812,
        811,
        816,
        815,
        822,
        744,
        748,
        762,
        770,
        776,
        780,
        784,
        810,
        814,
        738,
        754,
        763,
        771,
        804,
        820,
        739,
        755,
        761,
        769,
        805,
        821,
        737,
        753,
        803,
        819,
        760,
        768,
        736,
        752,
        802,
        818,
        788,
        826,
        735,
        801,
        734,
        800,
        833,
        733,
        732
      ],
      "line": "\n    const app = await Test.createTestingModule({\n      providers: [UserService],\n    }).compile();\n\n    service = app.get<UserService>(UserService);\n  })",
      "startLine": 10,
      "startCol": 8,
      "endLine": 10,
      "endCol": 8,
      "file": "apps/api/src/model/lib/user.service.spec.ts",
      "uniqueid": 9
    },
    "10": {
      "source": "node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:58:37:58:37",
      "startTime": "578979111921687",
      "endTime": "578979211102912",
      "elapsedTime": "99181225",
      "asyncId": 692,
      "triggerAsyncId": 678,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Object.asyncJestLifecycle",
      "userCode": false,
      "line": "\n        ? _co.default.wrap(fn)\n        : fn;\n      const returnValue = wrappedFn.call({}, doneFnNoop);\n\n      if (isPromise(returnValue)) {\n        returnValue.then(done.bind(null, null), error => ",
      "startLine": 58,
      "startCol": 37,
      "endLine": 58,
      "endCol": 37,
      "file": "node_modules/jest-jasmine2/build/jasmineAsyncInstall.js",
      "triggers": [],
      "uniqueid": 10
    },
    "11": {
      "source": "node_modules/@nestjs/testing/testing-module.builder.js:43:35:43:35",
      "startTime": "578979135593432",
      "endTime": "578979210359358",
      "elapsedTime": "74765926",
      "asyncId": 732,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " TestingModuleBuilder.compile",
      "userCode": false,
      "line": "\n        await this.scanner.scan(this.module);\n        this.applyOverloadsMap();\n        await this.instanceLoader.createInstancesOfDependencies();\n        this.scanner.applyApplicationProviders();\n        const root = this.getRootModule();\n        return new testing_module_1.TestingModule(this.container, [], root, this.applicationConfig)",
      "startLine": 43,
      "startCol": 35,
      "endLine": 43,
      "endCol": 35,
      "file": "node_modules/@nestjs/testing/testing-module.builder.js",
      "triggers": [
        838
      ],
      "uniqueid": 11
    },
    "12": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:17:20:17:20",
      "startTime": "578979136240314",
      "endTime": "578979210295809",
      "elapsedTime": "74055495",
      "asyncId": 733,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstancesOfDependencies",
      "userCode": false,
      "line": "\n        const modules = this.container.getModules();\n        this.createPrototypes(modules);\n        await this.createInstances(modules);\n    }\n    createPrototypes(modules) {\n        modules.forEach(module => ",
      "startLine": 17,
      "startCol": 20,
      "endLine": 17,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        837
      ],
      "uniqueid": 12
    },
    "13": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:28:24:28:24",
      "startTime": "578979136923245",
      "endTime": "578979204836555",
      "elapsedTime": "67913310",
      "asyncId": 735,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n    async createInstances(modules) {\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype",
      "startLine": 28,
      "startCol": 24,
      "endLine": 28,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        799
      ],
      "uniqueid": 13
    },
    "14": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979137354603",
      "endTime": "578979204395027",
      "elapsedTime": "67040424",
      "asyncId": 736,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        789
      ],
      "uniqueid": 14
    },
    "15": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979139346718",
      "endTime": "578979198481522",
      "elapsedTime": "59134804",
      "asyncId": 737,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        743
      ],
      "uniqueid": 15
    },
    "16": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979139683158",
      "endTime": "578979197379125",
      "elapsedTime": "57695967",
      "asyncId": 738,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 16
    },
    "17": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979140084881",
      "endTime": "578979198109745",
      "elapsedTime": "58024864",
      "asyncId": 739,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        742
      ],
      "uniqueid": 17
    },
    "18": {
      "source": "node_modules/@nestjs/core/injector/injector.js:113:41:113:41",
      "startTime": "578979140452711",
      "endTime": "578979140481475",
      "elapsedTime": "28764",
      "asyncId": 740,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n            }\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) ",
      "startLine": 113,
      "startCol": 41,
      "endLine": 113,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        741
      ],
      "uniqueid": 18
    },
    "19": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979140791155",
      "endTime": "578979170178144",
      "elapsedTime": "29386989",
      "asyncId": 741,
      "triggerAsyncId": 740,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "triggers": [
        841,
        840,
        839
      ],
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 19
    },
    "20": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979141046965",
      "endTime": "578979198510125",
      "elapsedTime": "57463160",
      "asyncId": 742,
      "triggerAsyncId": 739,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 20
    },
    "21": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979141281905",
      "endTime": "578979201354077",
      "elapsedTime": "60072172",
      "asyncId": 743,
      "triggerAsyncId": 737,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        920,
        919
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 21
    },
    "22": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979141514762",
      "endTime": "578979194685105",
      "elapsedTime": "53170343",
      "asyncId": 744,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        790
      ],
      "uniqueid": 22
    },
    "23": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979141747628",
      "endTime": "578979142059944",
      "elapsedTime": "312316",
      "asyncId": 745,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        747
      ],
      "uniqueid": 23
    },
    "24": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979141990524",
      "endTime": "578979142016292",
      "elapsedTime": "25768",
      "asyncId": 746,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 24
    },
    "25": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979142309972",
      "endTime": "578979171266244",
      "elapsedTime": "28956272",
      "asyncId": 747,
      "triggerAsyncId": 745,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        846,
        845
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 25
    },
    "26": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979142543450",
      "endTime": "578979194756449",
      "elapsedTime": "52212999",
      "asyncId": 748,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        791
      ],
      "uniqueid": 26
    },
    "27": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979142770626",
      "endTime": "578979143079255",
      "elapsedTime": "308629",
      "asyncId": 749,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        751
      ],
      "uniqueid": 27
    },
    "28": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979143027598",
      "endTime": "578979143044870",
      "elapsedTime": "17272",
      "asyncId": 750,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 28
    },
    "29": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979143359310",
      "endTime": "578979172258113",
      "elapsedTime": "28898803",
      "asyncId": 751,
      "triggerAsyncId": 749,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        850,
        849
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 29
    },
    "30": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979143592707",
      "endTime": "578979204446584",
      "elapsedTime": "60853877",
      "asyncId": 752,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        792
      ],
      "uniqueid": 30
    },
    "31": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979143826205",
      "endTime": "578979198538178",
      "elapsedTime": "54711973",
      "asyncId": 753,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        759
      ],
      "uniqueid": 31
    },
    "32": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979144080381",
      "endTime": "578979197535929",
      "elapsedTime": "53455548",
      "asyncId": 754,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 32
    },
    "33": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979144326933",
      "endTime": "578979198170679",
      "elapsedTime": "53843746",
      "asyncId": 755,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        758
      ],
      "uniqueid": 33
    },
    "34": {
      "source": "node_modules/@nestjs/core/injector/injector.js:113:41:113:41",
      "startTime": "578979144603442",
      "endTime": "578979144619612",
      "elapsedTime": "16170",
      "asyncId": 756,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n            }\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) ",
      "startLine": 113,
      "startCol": 41,
      "endLine": 113,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        757
      ],
      "uniqueid": 34
    },
    "35": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979144890229",
      "endTime": "578979173721457",
      "elapsedTime": "28831228",
      "asyncId": 757,
      "triggerAsyncId": 756,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "triggers": [
        855,
        854,
        853
      ],
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 35
    },
    "36": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979145131762",
      "endTime": "578979198563085",
      "elapsedTime": "53431323",
      "asyncId": 758,
      "triggerAsyncId": 755,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 36
    },
    "37": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979145366302",
      "endTime": "578979202186617",
      "elapsedTime": "56820315",
      "asyncId": 759,
      "triggerAsyncId": 753,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        924,
        923
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 37
    },
    "38": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979145608636",
      "endTime": "578979204161890",
      "elapsedTime": "58553254",
      "asyncId": 760,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        793
      ],
      "uniqueid": 38
    },
    "39": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979145853866",
      "endTime": "578979198237875",
      "elapsedTime": "52384009",
      "asyncId": 761,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        767
      ],
      "uniqueid": 39
    },
    "40": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979146117410",
      "endTime": "578979195422948",
      "elapsedTime": "49305538",
      "asyncId": 762,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 40
    },
    "41": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979146373730",
      "endTime": "578979197631328",
      "elapsedTime": "51257598",
      "asyncId": 763,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        766
      ],
      "uniqueid": 41
    },
    "42": {
      "source": "node_modules/@nestjs/core/injector/injector.js:113:41:113:41",
      "startTime": "578979146615514",
      "endTime": "578979146631293",
      "elapsedTime": "15779",
      "asyncId": 764,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n            }\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) ",
      "startLine": 113,
      "startCol": 41,
      "endLine": 113,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        765
      ],
      "uniqueid": 42
    },
    "43": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979146911358",
      "endTime": "578979182103469",
      "elapsedTime": "35192111",
      "asyncId": 765,
      "triggerAsyncId": 764,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "triggers": [
        860,
        859
      ],
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 43
    },
    "44": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979147157009",
      "endTime": "578979198272740",
      "elapsedTime": "51115731",
      "asyncId": 766,
      "triggerAsyncId": 763,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 44
    },
    "45": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979147401377",
      "endTime": "578979199409511",
      "elapsedTime": "52008134",
      "asyncId": 767,
      "triggerAsyncId": 761,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        912,
        911
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 45
    },
    "46": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979147650043",
      "endTime": "578979204219098",
      "elapsedTime": "56569055",
      "asyncId": 768,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        794
      ],
      "uniqueid": 46
    },
    "47": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979147885955",
      "endTime": "578979198303027",
      "elapsedTime": "50417072",
      "asyncId": 769,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        775
      ],
      "uniqueid": 47
    },
    "48": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979148154629",
      "endTime": "578979195533986",
      "elapsedTime": "47379357",
      "asyncId": 770,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 48
    },
    "49": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979148399939",
      "endTime": "578979197691040",
      "elapsedTime": "49291101",
      "asyncId": 771,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        774
      ],
      "uniqueid": 49
    },
    "50": {
      "source": "node_modules/@nestjs/core/injector/injector.js:113:41:113:41",
      "startTime": "578979148643636",
      "endTime": "578979148659075",
      "elapsedTime": "15439",
      "asyncId": 772,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n            }\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) ",
      "startLine": 113,
      "startCol": 41,
      "endLine": 113,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        773
      ],
      "uniqueid": 50
    },
    "51": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979148937386",
      "endTime": "578979182997966",
      "elapsedTime": "34060580",
      "asyncId": 773,
      "triggerAsyncId": 772,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "triggers": [
        864,
        863
      ],
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 51
    },
    "52": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979149191002",
      "endTime": "578979198332412",
      "elapsedTime": "49141410",
      "asyncId": 774,
      "triggerAsyncId": 771,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 52
    },
    "53": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979149436251",
      "endTime": "578979200414475",
      "elapsedTime": "50978224",
      "asyncId": 775,
      "triggerAsyncId": 769,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        916,
        915
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 53
    },
    "54": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979149672314",
      "endTime": "578979195627311",
      "elapsedTime": "45954997",
      "asyncId": 776,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        795
      ],
      "uniqueid": 54
    },
    "55": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979149907986",
      "endTime": "578979150261919",
      "elapsedTime": "353933",
      "asyncId": 777,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        779
      ],
      "uniqueid": 55
    },
    "56": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979150204912",
      "endTime": "578979150228496",
      "elapsedTime": "23584",
      "asyncId": 778,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 56
    },
    "57": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979150510816",
      "endTime": "578979183858299",
      "elapsedTime": "33347483",
      "asyncId": 779,
      "triggerAsyncId": 777,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        868,
        867
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 57
    },
    "58": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979150751247",
      "endTime": "578979195687023",
      "elapsedTime": "44935776",
      "asyncId": 780,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        796
      ],
      "uniqueid": 58
    },
    "59": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979150985836",
      "endTime": "578979151294906",
      "elapsedTime": "309070",
      "asyncId": 781,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        783
      ],
      "uniqueid": 59
    },
    "60": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979151239241",
      "endTime": "578979151257476",
      "elapsedTime": "18235",
      "asyncId": 782,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 60
    },
    "61": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979151554212",
      "endTime": "578979184738840",
      "elapsedTime": "33184628",
      "asyncId": 783,
      "triggerAsyncId": 781,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        872,
        871
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 61
    },
    "62": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979151786577",
      "endTime": "578979195758307",
      "elapsedTime": "43971730",
      "asyncId": 784,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        797
      ],
      "uniqueid": 62
    },
    "63": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979152025836",
      "endTime": "578979152322141",
      "elapsedTime": "296305",
      "asyncId": 785,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        787
      ],
      "uniqueid": 63
    },
    "64": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979152270885",
      "endTime": "578979152287617",
      "elapsedTime": "16732",
      "asyncId": 786,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 64
    },
    "65": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979152577390",
      "endTime": "578979185648755",
      "elapsedTime": "33071365",
      "asyncId": 787,
      "triggerAsyncId": 785,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        876,
        875
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 65
    },
    "66": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:23:43:23",
      "startTime": "578979152834472",
      "endTime": "578979204707593",
      "elapsedTime": "51873121",
      "asyncId": 788,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstancesOfProviders",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 23,
      "endLine": 43,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        798
      ],
      "uniqueid": 66
    },
    "67": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:28:24:28:24",
      "startTime": "578979155295275",
      "endTime": "578979204870909",
      "elapsedTime": "49575634",
      "asyncId": 798,
      "triggerAsyncId": 788,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n    async createInstances(modules) {\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype",
      "startLine": 28,
      "startCol": 24,
      "endLine": 28,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [],
      "uniqueid": 67
    },
    "68": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:28:24:28:24",
      "startTime": "578979156040993",
      "endTime": "578979204899723",
      "elapsedTime": "48858730",
      "asyncId": 801,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n    async createInstances(modules) {\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype",
      "startLine": 28,
      "startCol": 24,
      "endLine": 28,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        832
      ],
      "uniqueid": 68
    },
    "69": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979156273008",
      "endTime": "578979204562150",
      "elapsedTime": "48289142",
      "asyncId": 802,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        827
      ],
      "uniqueid": 69
    },
    "70": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979156492830",
      "endTime": "578979200446816",
      "elapsedTime": "43953986",
      "asyncId": 803,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        809
      ],
      "uniqueid": 70
    },
    "71": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979156728291",
      "endTime": "578979197845760",
      "elapsedTime": "41117469",
      "asyncId": 804,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 71
    },
    "72": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979156976386",
      "endTime": "578979198361878",
      "elapsedTime": "41385492",
      "asyncId": 805,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        808
      ],
      "uniqueid": 72
    },
    "73": {
      "source": "node_modules/@nestjs/core/injector/injector.js:113:41:113:41",
      "startTime": "578979157246703",
      "endTime": "578979157263074",
      "elapsedTime": "16371",
      "asyncId": 806,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n            }\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) ",
      "startLine": 113,
      "startCol": 41,
      "endLine": 113,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        807
      ],
      "uniqueid": 73
    },
    "74": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979158259101",
      "endTime": "578979188230415",
      "elapsedTime": "29971314",
      "asyncId": 807,
      "triggerAsyncId": 806,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "triggers": [
        881,
        880,
        879
      ],
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 74
    },
    "75": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979158568531",
      "endTime": "578979200474007",
      "elapsedTime": "41905476",
      "asyncId": 808,
      "triggerAsyncId": 805,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 75
    },
    "76": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979158890314",
      "endTime": "578979203138071",
      "elapsedTime": "44247757",
      "asyncId": 809,
      "triggerAsyncId": 803,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        928,
        927
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 76
    },
    "77": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979159207218",
      "endTime": "578979196503173",
      "elapsedTime": "37295955",
      "asyncId": 810,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        828
      ],
      "uniqueid": 77
    },
    "78": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979159521056",
      "endTime": "578979159901610",
      "elapsedTime": "380554",
      "asyncId": 811,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        813
      ],
      "uniqueid": 78
    },
    "79": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979159831809",
      "endTime": "578979159854993",
      "elapsedTime": "23184",
      "asyncId": 812,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 79
    },
    "80": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979160276573",
      "endTime": "578979189128058",
      "elapsedTime": "28851485",
      "asyncId": 813,
      "triggerAsyncId": 811,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        886,
        885
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 80
    },
    "81": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979160582807",
      "endTime": "578979196564077",
      "elapsedTime": "35981270",
      "asyncId": 814,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        829
      ],
      "uniqueid": 81
    },
    "82": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979160898268",
      "endTime": "578979161311112",
      "elapsedTime": "412844",
      "asyncId": 815,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        817
      ],
      "uniqueid": 82
    },
    "83": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979161234749",
      "endTime": "578979161265918",
      "elapsedTime": "31169",
      "asyncId": 816,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 83
    },
    "84": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979161642834",
      "endTime": "578979190390354",
      "elapsedTime": "28747520",
      "asyncId": 817,
      "triggerAsyncId": 815,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        890,
        889
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 84
    },
    "85": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979161962233",
      "endTime": "578979204625670",
      "elapsedTime": "42663437",
      "asyncId": 818,
      "triggerAsyncId": 691,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        830
      ],
      "uniqueid": 85
    },
    "86": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979162323179",
      "endTime": "578979200501879",
      "elapsedTime": "38178700",
      "asyncId": 819,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        825
      ],
      "uniqueid": 86
    },
    "87": {
      "source": "node_modules/@nestjs/core/injector/injector.js:73:31:73:31",
      "startTime": "578979162652497",
      "endTime": "578979198014937",
      "elapsedTime": "35362440",
      "asyncId": 820,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.applyDoneHook",
      "userCode": false,
      "line": "\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true",
      "startLine": 73,
      "startCol": 31,
      "endLine": 73,
      "endCol": 31,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 87
    },
    "88": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979163358761",
      "endTime": "578979198424996",
      "elapsedTime": "35066235",
      "asyncId": 821,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        824
      ],
      "uniqueid": 88
    },
    "89": {
      "source": "node_modules/@nestjs/core/injector/injector.js:113:41:113:41",
      "startTime": "578979163741919",
      "endTime": "578979163850402",
      "elapsedTime": "108483",
      "asyncId": 822,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n            }\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) ",
      "startLine": 113,
      "startCol": 41,
      "endLine": 113,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        823
      ],
      "uniqueid": 89
    },
    "90": {
      "source": "node_modules/@nestjs/core/injector/injector.js:46:20:46:20",
      "startTime": "578979164157919",
      "endTime": "578979192048873",
      "elapsedTime": "27890954",
      "asyncId": 823,
      "triggerAsyncId": 822,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadInstance",
      "userCode": false,
      "triggers": [
        895,
        894,
        893
      ],
      "line": "\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper",
      "startLine": 46,
      "startCol": 20,
      "endLine": 46,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 90
    },
    "91": {
      "source": "node_modules/@nestjs/core/injector/injector.js:68:20:68:20",
      "startTime": "578979164369656",
      "endTime": "578979200526716",
      "elapsedTime": "36157060",
      "asyncId": 824,
      "triggerAsyncId": 821,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) ",
      "startLine": 68,
      "startCol": 20,
      "endLine": 68,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 91
    },
    "92": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:62:43:62",
      "startTime": "578979164580982",
      "endTime": "578979203995929",
      "elapsedTime": "39414947",
      "asyncId": 825,
      "triggerAsyncId": 819,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        932,
        931
      ],
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 62,
      "endLine": 43,
      "endCol": 62,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "uniqueid": 92
    },
    "93": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:43:23:43:23",
      "startTime": "578979164825611",
      "endTime": "578979204782694",
      "elapsedTime": "39957083",
      "asyncId": 826,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstancesOfProviders",
      "userCode": false,
      "line": "\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module",
      "startLine": 43,
      "startCol": 23,
      "endLine": 43,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        831
      ],
      "uniqueid": 93
    },
    "94": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:28:24:28:24",
      "startTime": "578979166864402",
      "endTime": "578979204927285",
      "elapsedTime": "38062883",
      "asyncId": 831,
      "triggerAsyncId": 826,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n    async createInstances(modules) {\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype",
      "startLine": 28,
      "startCol": 24,
      "endLine": 28,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [],
      "uniqueid": 94
    },
    "95": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:27:23:27:23",
      "startTime": "578979167306120",
      "endTime": "578979210240145",
      "elapsedTime": "42934025",
      "asyncId": 833,
      "triggerAsyncId": 691,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstances",
      "userCode": false,
      "line": "\n    }\n    async createInstances(modules) {\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module)",
      "startLine": 27,
      "startCol": 23,
      "endLine": 27,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        836
      ],
      "uniqueid": 95
    },
    "96": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:17:20:17:20",
      "startTime": "578979167938275",
      "endTime": "578979210325615",
      "elapsedTime": "42387340",
      "asyncId": 836,
      "triggerAsyncId": 833,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstancesOfDependencies",
      "userCode": false,
      "line": "\n        const modules = this.container.getModules();\n        this.createPrototypes(modules);\n        await this.createInstances(modules);\n    }\n    createPrototypes(modules) {\n        modules.forEach(module => ",
      "startLine": 17,
      "startCol": 20,
      "endLine": 17,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [],
      "uniqueid": 96
    },
    "97": {
      "source": "node_modules/@nestjs/testing/testing-module.builder.js:43:35:43:35",
      "startTime": "578979168127891",
      "endTime": "578979210384846",
      "elapsedTime": "42256955",
      "asyncId": 837,
      "triggerAsyncId": 733,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " TestingModuleBuilder.compile",
      "userCode": false,
      "line": "\n        await this.scanner.scan(this.module);\n        this.applyOverloadsMap();\n        await this.instanceLoader.createInstancesOfDependencies();\n        this.scanner.applyApplicationProviders();\n        const root = this.getRootModule();\n        return new testing_module_1.TestingModule(this.container, [], root, this.applicationConfig)",
      "startLine": 43,
      "startCol": 35,
      "endLine": 43,
      "endCol": 35,
      "file": "node_modules/@nestjs/testing/testing-module.builder.js",
      "triggers": [],
      "uniqueid": 97
    },
    "98": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979168300444",
      "endTime": "578979210671814",
      "elapsedTime": "42371370",
      "asyncId": 838,
      "triggerAsyncId": 732,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 98
    },
    "99": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979168659518",
      "endTime": "578979197413470",
      "elapsedTime": "28753952",
      "asyncId": 839,
      "triggerAsyncId": 741,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        844
      ],
      "uniqueid": 99
    },
    "100": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979169021376",
      "endTime": "578979192093186",
      "elapsedTime": "23071810",
      "asyncId": 840,
      "triggerAsyncId": 741,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        843
      ],
      "uniqueid": 100
    },
    "101": {
      "source": "node_modules/@nestjs/core/injector/injector.js:235:41:235:41",
      "startTime": "578979169376912",
      "endTime": "578979169393423",
      "elapsedTime": "16511",
      "asyncId": 841,
      "triggerAsyncId": 741,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveProperties",
      "userCode": false,
      "line": "\n        }\n        const properties = this.reflectProperties(wrapper.metatype);\n        const instances = await Promise.all(properties.map(async (item) => {\n            try {\n                const dependencyContext = {\n                    key: item.key",
      "startLine": 235,
      "startCol": 41,
      "endLine": 235,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        842
      ],
      "uniqueid": 101
    },
    "102": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979169694588",
      "endTime": "578979192124755",
      "elapsedTime": "22430167",
      "asyncId": 842,
      "triggerAsyncId": 841,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 102
    },
    "103": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979169950267",
      "endTime": "578979194645852",
      "elapsedTime": "24695585",
      "asyncId": 843,
      "triggerAsyncId": 840,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "triggers": [
        903
      ],
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 103
    },
    "104": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979170163126",
      "endTime": "578979198138048",
      "elapsedTime": "27974922",
      "asyncId": 844,
      "triggerAsyncId": 839,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 104
    },
    "105": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979170490049",
      "endTime": "578979192163739",
      "elapsedTime": "21673690",
      "asyncId": 845,
      "triggerAsyncId": 747,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        848
      ],
      "uniqueid": 105
    },
    "106": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979170715852",
      "endTime": "578979170731071",
      "elapsedTime": "15219",
      "asyncId": 846,
      "triggerAsyncId": 747,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        847
      ],
      "uniqueid": 106
    },
    "107": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979170985448",
      "endTime": "578979192194686",
      "elapsedTime": "21209238",
      "asyncId": 847,
      "triggerAsyncId": 846,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 107
    },
    "108": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979171250444",
      "endTime": "578979194716113",
      "elapsedTime": "23465669",
      "asyncId": 848,
      "triggerAsyncId": 845,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 108
    },
    "109": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979171548844",
      "endTime": "578979192225384",
      "elapsedTime": "20676540",
      "asyncId": 849,
      "triggerAsyncId": 751,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        852
      ],
      "uniqueid": 109
    },
    "110": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979171792240",
      "endTime": "578979171807308",
      "elapsedTime": "15068",
      "asyncId": 850,
      "triggerAsyncId": 751,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        851
      ],
      "uniqueid": 110
    },
    "111": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979172043050",
      "endTime": "578979192254258",
      "elapsedTime": "20211208",
      "asyncId": 851,
      "triggerAsyncId": 850,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 111
    },
    "112": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979172240160",
      "endTime": "578979194790132",
      "elapsedTime": "22549972",
      "asyncId": 852,
      "triggerAsyncId": 849,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 112
    },
    "113": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979172507251",
      "endTime": "578979197575343",
      "elapsedTime": "25068092",
      "asyncId": 853,
      "triggerAsyncId": 757,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        858
      ],
      "uniqueid": 113
    },
    "114": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979172736881",
      "endTime": "578979192283523",
      "elapsedTime": "19546642",
      "asyncId": 854,
      "triggerAsyncId": 757,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        857
      ],
      "uniqueid": 114
    },
    "115": {
      "source": "node_modules/@nestjs/core/injector/injector.js:235:41:235:41",
      "startTime": "578979172968184",
      "endTime": "578979172984866",
      "elapsedTime": "16682",
      "asyncId": 855,
      "triggerAsyncId": 757,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveProperties",
      "userCode": false,
      "line": "\n        }\n        const properties = this.reflectProperties(wrapper.metatype);\n        const instances = await Promise.all(properties.map(async (item) => {\n            try {\n                const dependencyContext = {\n                    key: item.key",
      "startLine": 235,
      "startCol": 41,
      "endLine": 235,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        856
      ],
      "uniqueid": 115
    },
    "116": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979173233402",
      "endTime": "578979192313800",
      "elapsedTime": "19080398",
      "asyncId": 856,
      "triggerAsyncId": 855,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 116
    },
    "117": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979173466689",
      "endTime": "578979195335064",
      "elapsedTime": "21868375",
      "asyncId": 857,
      "triggerAsyncId": 854,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "triggers": [
        905
      ],
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 117
    },
    "118": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979173693264",
      "endTime": "578979198204022",
      "elapsedTime": "24510758",
      "asyncId": 858,
      "triggerAsyncId": 853,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 118
    },
    "119": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979174035596",
      "endTime": "578979195467962",
      "elapsedTime": "21432366",
      "asyncId": 859,
      "triggerAsyncId": 765,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        862
      ],
      "uniqueid": 119
    },
    "120": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979181551956",
      "endTime": "578979181578946",
      "elapsedTime": "26990",
      "asyncId": 860,
      "triggerAsyncId": 765,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        861
      ],
      "uniqueid": 120
    },
    "121": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979181873008",
      "endTime": "578979193139047",
      "elapsedTime": "11266039",
      "asyncId": 861,
      "triggerAsyncId": 860,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "triggers": [
        899
      ],
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 121
    },
    "122": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979182087720",
      "endTime": "578979197663017",
      "elapsedTime": "15575297",
      "asyncId": 862,
      "triggerAsyncId": 859,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 122
    },
    "123": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979182349972",
      "endTime": "578979195565516",
      "elapsedTime": "13215544",
      "asyncId": 863,
      "triggerAsyncId": 773,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        866
      ],
      "uniqueid": 123
    },
    "124": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979182556068",
      "endTime": "578979182572238",
      "elapsedTime": "16170",
      "asyncId": 864,
      "triggerAsyncId": 773,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        865
      ],
      "uniqueid": 124
    },
    "125": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979182794094",
      "endTime": "578979193652579",
      "elapsedTime": "10858485",
      "asyncId": 865,
      "triggerAsyncId": 864,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "triggers": [
        901
      ],
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 125
    },
    "126": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979182982618",
      "endTime": "578979197719203",
      "elapsedTime": "14736585",
      "asyncId": 866,
      "triggerAsyncId": 863,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 126
    },
    "127": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979183237495",
      "endTime": "578979193687976",
      "elapsedTime": "10450481",
      "asyncId": 867,
      "triggerAsyncId": 779,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        870
      ],
      "uniqueid": 127
    },
    "128": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979183423875",
      "endTime": "578979183440466",
      "elapsedTime": "16591",
      "asyncId": 868,
      "triggerAsyncId": 779,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        869
      ],
      "uniqueid": 128
    },
    "129": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979183655579",
      "endTime": "578979193717521",
      "elapsedTime": "10061942",
      "asyncId": 869,
      "triggerAsyncId": 868,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 129
    },
    "130": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979183842990",
      "endTime": "578979195656897",
      "elapsedTime": "11813907",
      "asyncId": 870,
      "triggerAsyncId": 867,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 130
    },
    "131": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979184075166",
      "endTime": "578979193753759",
      "elapsedTime": "9678593",
      "asyncId": 871,
      "triggerAsyncId": 783,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        874
      ],
      "uniqueid": 131
    },
    "132": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979184255133",
      "endTime": "578979184270081",
      "elapsedTime": "14948",
      "asyncId": 872,
      "triggerAsyncId": 783,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        873
      ],
      "uniqueid": 132
    },
    "133": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979184508638",
      "endTime": "578979193782573",
      "elapsedTime": "9273935",
      "asyncId": 873,
      "triggerAsyncId": 872,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 133
    },
    "134": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979184713382",
      "endTime": "578979195714775",
      "elapsedTime": "11001393",
      "asyncId": 874,
      "triggerAsyncId": 871,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 134
    },
    "135": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979184968480",
      "endTime": "578979193813461",
      "elapsedTime": "8844981",
      "asyncId": 875,
      "triggerAsyncId": 787,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        878
      ],
      "uniqueid": 135
    },
    "136": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979185175208",
      "endTime": "578979185199774",
      "elapsedTime": "24566",
      "asyncId": 876,
      "triggerAsyncId": 787,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        877
      ],
      "uniqueid": 136
    },
    "137": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979185428162",
      "endTime": "578979193855490",
      "elapsedTime": "8427328",
      "asyncId": 877,
      "triggerAsyncId": 876,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 137
    },
    "138": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979185628618",
      "endTime": "578979195789225",
      "elapsedTime": "10160607",
      "asyncId": 878,
      "triggerAsyncId": 875,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 138
    },
    "139": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979185881081",
      "endTime": "578979197877620",
      "elapsedTime": "11996539",
      "asyncId": 879,
      "triggerAsyncId": 807,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        884
      ],
      "uniqueid": 139
    },
    "140": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979186092457",
      "endTime": "578979193887189",
      "elapsedTime": "7794732",
      "asyncId": 880,
      "triggerAsyncId": 807,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        883
      ],
      "uniqueid": 140
    },
    "141": {
      "source": "node_modules/@nestjs/core/injector/injector.js:235:41:235:41",
      "startTime": "578979186334571",
      "endTime": "578979186354949",
      "elapsedTime": "20378",
      "asyncId": 881,
      "triggerAsyncId": 807,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveProperties",
      "userCode": false,
      "line": "\n        }\n        const properties = this.reflectProperties(wrapper.metatype);\n        const instances = await Promise.all(properties.map(async (item) => {\n            try {\n                const dependencyContext = {\n                    key: item.key",
      "startLine": 235,
      "startCol": 41,
      "endLine": 235,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        882
      ],
      "uniqueid": 141
    },
    "142": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979187764812",
      "endTime": "578979193921323",
      "elapsedTime": "6156511",
      "asyncId": 882,
      "triggerAsyncId": 881,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 142
    },
    "143": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979188010643",
      "endTime": "578979196461215",
      "elapsedTime": "8450572",
      "asyncId": 883,
      "triggerAsyncId": 880,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "triggers": [
        907
      ],
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 143
    },
    "144": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979188214275",
      "endTime": "578979198392204",
      "elapsedTime": "10177929",
      "asyncId": 884,
      "triggerAsyncId": 879,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 144
    },
    "145": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979188468411",
      "endTime": "578979193950618",
      "elapsedTime": "5482207",
      "asyncId": 885,
      "triggerAsyncId": 813,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        888
      ],
      "uniqueid": 145
    },
    "146": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979188674538",
      "endTime": "578979188690508",
      "elapsedTime": "15970",
      "asyncId": 886,
      "triggerAsyncId": 813,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        887
      ],
      "uniqueid": 146
    },
    "147": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979188906853",
      "endTime": "578979193978891",
      "elapsedTime": "5072038",
      "asyncId": 887,
      "triggerAsyncId": 886,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 147
    },
    "148": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979189112709",
      "endTime": "578979196535704",
      "elapsedTime": "7422995",
      "asyncId": 888,
      "triggerAsyncId": 885,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 148
    },
    "149": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979189361896",
      "endTime": "578979194020499",
      "elapsedTime": "4658603",
      "asyncId": 889,
      "triggerAsyncId": 817,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        892
      ],
      "uniqueid": 149
    },
    "150": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979189569556",
      "endTime": "578979189584814",
      "elapsedTime": "15258",
      "asyncId": 890,
      "triggerAsyncId": 817,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        891
      ],
      "uniqueid": 150
    },
    "151": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979190034818",
      "endTime": "578979194049814",
      "elapsedTime": "4014996",
      "asyncId": 891,
      "triggerAsyncId": 890,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 151
    },
    "152": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979190373402",
      "endTime": "578979196591379",
      "elapsedTime": "6217977",
      "asyncId": 892,
      "triggerAsyncId": 889,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 152
    },
    "153": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979190817144",
      "endTime": "578979198049532",
      "elapsedTime": "7232388",
      "asyncId": 893,
      "triggerAsyncId": 823,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        898
      ],
      "uniqueid": 153
    },
    "154": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979191031095",
      "endTime": "578979194077767",
      "elapsedTime": "3046672",
      "asyncId": 894,
      "triggerAsyncId": 823,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        897
      ],
      "uniqueid": 154
    },
    "155": {
      "source": "node_modules/@nestjs/core/injector/injector.js:235:41:235:41",
      "startTime": "578979191281414",
      "endTime": "578979191299188",
      "elapsedTime": "17774",
      "asyncId": 895,
      "triggerAsyncId": 823,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveProperties",
      "userCode": false,
      "line": "\n        }\n        const properties = this.reflectProperties(wrapper.metatype);\n        const instances = await Promise.all(properties.map(async (item) => {\n            try {\n                const dependencyContext = {\n                    key: item.key",
      "startLine": 235,
      "startCol": 41,
      "endLine": 235,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        896
      ],
      "uniqueid": 155
    },
    "156": {
      "source": "node_modules/@nestjs/core/injector/injector.js:41:43:41:43",
      "startTime": "578979191554837",
      "endTime": "578979194105488",
      "elapsedTime": "2550651",
      "asyncId": 896,
      "triggerAsyncId": 895,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done()",
      "startLine": 41,
      "startCol": 43,
      "endLine": 41,
      "endCol": 43,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 156
    },
    "157": {
      "source": "node_modules/@nestjs/core/injector/injector.js:114:30:114:30",
      "startTime": "578979191799255",
      "endTime": "578979197316478",
      "elapsedTime": "5517223",
      "asyncId": 897,
      "triggerAsyncId": 894,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.resolveConstructorParams",
      "userCode": false,
      "triggers": [
        909
      ],
      "line": "\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || []",
      "startLine": 114,
      "startCol": 30,
      "endLine": 114,
      "endCol": 30,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "uniqueid": 157
    },
    "158": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979192028545",
      "endTime": "578979198453329",
      "elapsedTime": "6424784",
      "asyncId": 898,
      "triggerAsyncId": 893,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 158
    },
    "159": {
      "source": "node_modules/@nestjs/core/injector/injector.js:42:41:42:41",
      "startTime": "578979192656903",
      "endTime": "578979192871045",
      "elapsedTime": "214142",
      "asyncId": 899,
      "triggerAsyncId": 861,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done();\n        }",
      "startLine": 42,
      "startCol": 41,
      "endLine": 42,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        900
      ],
      "uniqueid": 159
    },
    "160": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979193123027",
      "endTime": "578979195498259",
      "elapsedTime": "2375232",
      "asyncId": 900,
      "triggerAsyncId": 899,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 160
    },
    "161": {
      "source": "node_modules/@nestjs/core/injector/injector.js:42:41:42:41",
      "startTime": "578979193373015",
      "endTime": "578979193414624",
      "elapsedTime": "41609",
      "asyncId": 901,
      "triggerAsyncId": 865,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done();\n        }",
      "startLine": 42,
      "startCol": 41,
      "endLine": 42,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        902
      ],
      "uniqueid": 161
    },
    "162": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979193637642",
      "endTime": "578979195594460",
      "elapsedTime": "1956818",
      "asyncId": 902,
      "triggerAsyncId": 901,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 162
    },
    "163": {
      "source": "node_modules/@nestjs/core/injector/injector.js:42:41:42:41",
      "startTime": "578979194333566",
      "endTime": "578979194391395",
      "elapsedTime": "57829",
      "asyncId": 903,
      "triggerAsyncId": 843,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done();\n        }",
      "startLine": 42,
      "startCol": 41,
      "endLine": 42,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        904
      ],
      "uniqueid": 163
    },
    "164": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979194630873",
      "endTime": "578979197440380",
      "elapsedTime": "2809507",
      "asyncId": 904,
      "triggerAsyncId": 903,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 164
    },
    "165": {
      "source": "node_modules/@nestjs/core/injector/injector.js:42:41:42:41",
      "startTime": "578979195030753",
      "endTime": "578979195079665",
      "elapsedTime": "48912",
      "asyncId": 905,
      "triggerAsyncId": 857,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done();\n        }",
      "startLine": 42,
      "startCol": 41,
      "endLine": 42,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        906
      ],
      "uniqueid": 165
    },
    "166": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979195320276",
      "endTime": "578979197604117",
      "elapsedTime": "2283841",
      "asyncId": 906,
      "triggerAsyncId": 905,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 166
    },
    "167": {
      "source": "node_modules/@nestjs/core/injector/injector.js:42:41:42:41",
      "startTime": "578979196029505",
      "endTime": "578979196093455",
      "elapsedTime": "63950",
      "asyncId": 907,
      "triggerAsyncId": 883,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done();\n        }",
      "startLine": 42,
      "startCol": 41,
      "endLine": 42,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        908
      ],
      "uniqueid": 167
    },
    "168": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979196444223",
      "endTime": "578979197904460",
      "elapsedTime": "1460237",
      "asyncId": 908,
      "triggerAsyncId": 907,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 168
    },
    "169": {
      "source": "node_modules/@nestjs/core/injector/injector.js:42:41:42:41",
      "startTime": "578979196889327",
      "endTime": "578979197054026",
      "elapsedTime": "164699",
      "asyncId": 909,
      "triggerAsyncId": 897,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " callback",
      "userCode": false,
      "line": "\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done();\n        }",
      "startLine": 42,
      "startCol": 41,
      "endLine": 42,
      "endCol": 41,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        910
      ],
      "uniqueid": 169
    },
    "170": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979197294847",
      "endTime": "578979198078596",
      "elapsedTime": "783749",
      "asyncId": 910,
      "triggerAsyncId": 909,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 170
    },
    "171": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979198791643",
      "endTime": "578979202229297",
      "elapsedTime": "3437654",
      "asyncId": 911,
      "triggerAsyncId": 767,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        914
      ],
      "uniqueid": 171
    },
    "172": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979198977381",
      "endTime": "578979198991608",
      "elapsedTime": "14227",
      "asyncId": 912,
      "triggerAsyncId": 767,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        913
      ],
      "uniqueid": 172
    },
    "173": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979199208955",
      "endTime": "578979202256879",
      "elapsedTime": "3047924",
      "asyncId": 913,
      "triggerAsyncId": 912,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 173
    },
    "174": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979199396297",
      "endTime": "578979204192708",
      "elapsedTime": "4796411",
      "asyncId": 914,
      "triggerAsyncId": 911,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 174
    },
    "175": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979199684597",
      "endTime": "578979202283489",
      "elapsedTime": "2598892",
      "asyncId": 915,
      "triggerAsyncId": 775,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        918
      ],
      "uniqueid": 175
    },
    "176": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979199926561",
      "endTime": "578979199940787",
      "elapsedTime": "14226",
      "asyncId": 916,
      "triggerAsyncId": 775,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        917
      ],
      "uniqueid": 176
    },
    "177": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979200218187",
      "endTime": "578979202311602",
      "elapsedTime": "2093415",
      "asyncId": 917,
      "triggerAsyncId": 916,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 177
    },
    "178": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979200401250",
      "endTime": "578979204245958",
      "elapsedTime": "3844708",
      "asyncId": 918,
      "triggerAsyncId": 915,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 178
    },
    "179": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979200735287",
      "endTime": "578979204039270",
      "elapsedTime": "3303983",
      "asyncId": 919,
      "triggerAsyncId": 743,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        922
      ],
      "uniqueid": 179
    },
    "180": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979200930202",
      "endTime": "578979200944619",
      "elapsedTime": "14417",
      "asyncId": 920,
      "triggerAsyncId": 743,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        921
      ],
      "uniqueid": 180
    },
    "181": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979201158370",
      "endTime": "578979204066291",
      "elapsedTime": "2907921",
      "asyncId": 921,
      "triggerAsyncId": 920,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 181
    },
    "182": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979201340702",
      "endTime": "578979204421597",
      "elapsedTime": "3080895",
      "asyncId": 922,
      "triggerAsyncId": 919,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 182
    },
    "183": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979201564401",
      "endTime": "578979204097710",
      "elapsedTime": "2533309",
      "asyncId": 923,
      "triggerAsyncId": 759,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        926
      ],
      "uniqueid": 183
    },
    "184": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979201757323",
      "endTime": "578979201771639",
      "elapsedTime": "14316",
      "asyncId": 924,
      "triggerAsyncId": 759,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        925
      ],
      "uniqueid": 184
    },
    "185": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979201980150",
      "endTime": "578979204125392",
      "elapsedTime": "2145242",
      "asyncId": 925,
      "triggerAsyncId": 924,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 185
    },
    "186": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979202171259",
      "endTime": "578979204480468",
      "elapsedTime": "2309209",
      "asyncId": 926,
      "triggerAsyncId": 923,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 186
    },
    "187": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979202521555",
      "endTime": "578979204277537",
      "elapsedTime": "1755982",
      "asyncId": 927,
      "triggerAsyncId": 809,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        930
      ],
      "uniqueid": 187
    },
    "188": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979202706271",
      "endTime": "578979202720288",
      "elapsedTime": "14017",
      "asyncId": 928,
      "triggerAsyncId": 809,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        929
      ],
      "uniqueid": 188
    },
    "189": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979202919692",
      "endTime": "578979204305569",
      "elapsedTime": "1385877",
      "asyncId": 929,
      "triggerAsyncId": 928,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 189
    },
    "190": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979203124045",
      "endTime": "578979204591816",
      "elapsedTime": "1467771",
      "asyncId": 930,
      "triggerAsyncId": 927,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 190
    },
    "191": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979203372390",
      "endTime": "578979204337890",
      "elapsedTime": "965500",
      "asyncId": 931,
      "triggerAsyncId": 825,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        934
      ],
      "uniqueid": 191
    },
    "192": {
      "source": "node_modules/@nestjs/core/injector/injector.js:313:23:313:23",
      "startTime": "578979203563188",
      "endTime": "578979203576954",
      "elapsedTime": "13766",
      "asyncId": 932,
      "triggerAsyncId": 825,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadEnhancersPerContext",
      "userCode": false,
      "line": "\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)))",
      "startLine": 313,
      "startCol": 23,
      "endLine": 313,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [
        933
      ],
      "uniqueid": 192
    },
    "193": {
      "source": "node_modules/@nestjs/core/injector/injector.js:69:20:69:20",
      "startTime": "578979203797688",
      "endTime": "578979204365442",
      "elapsedTime": "567754",
      "asyncId": 933,
      "triggerAsyncId": 932,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Injector.loadProvider",
      "userCode": false,
      "line": "\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done",
      "startLine": 69,
      "startCol": 20,
      "endLine": 69,
      "endCol": 20,
      "file": "node_modules/@nestjs/core/injector/injector.js",
      "triggers": [],
      "uniqueid": 193
    },
    "194": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979203982093",
      "endTime": "578979204650636",
      "elapsedTime": "668543",
      "asyncId": 934,
      "triggerAsyncId": 931,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 194
    },
    "195": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:29:24:29:24",
      "startTime": "578979205305865",
      "endTime": "578979206939618",
      "elapsedTime": "1633753",
      "asyncId": 935,
      "triggerAsyncId": 799,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &",
      "startLine": 29,
      "startCol": 24,
      "endLine": 29,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        938
      ],
      "uniqueid": 195
    },
    "196": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:61:23:61:23",
      "startTime": "578979205506050",
      "endTime": "578979205521168",
      "elapsedTime": "15118",
      "asyncId": 936,
      "triggerAsyncId": 799,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstancesOfInjectables",
      "userCode": false,
      "line": "\n        const { injectables } = module;\n        const wrappers = [...injectables.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadInjectable(item, module)));\n    }\n    isModuleWhitelisted(name) {\n        return name !== internal_core_module_1.InternalCoreModule.name",
      "startLine": 61,
      "startCol": 23,
      "endLine": 61,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        937
      ],
      "uniqueid": 196
    },
    "197": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:29:24:29:24",
      "startTime": "578979205760958",
      "endTime": "578979206968001",
      "elapsedTime": "1207043",
      "asyncId": 937,
      "triggerAsyncId": 936,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &",
      "startLine": 29,
      "startCol": 24,
      "endLine": 29,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [],
      "uniqueid": 197
    },
    "198": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979205962115",
      "endTime": "578979208493791",
      "elapsedTime": "2531676",
      "asyncId": 938,
      "triggerAsyncId": 935,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "triggers": [
        944,
        943
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 198
    },
    "199": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:29:24:29:24",
      "startTime": "578979206221461",
      "endTime": "578979206995102",
      "elapsedTime": "773641",
      "asyncId": 939,
      "triggerAsyncId": 832,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &",
      "startLine": 29,
      "startCol": 24,
      "endLine": 29,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        942
      ],
      "uniqueid": 199
    },
    "200": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:61:23:61:23",
      "startTime": "578979206414563",
      "endTime": "578979206436504",
      "elapsedTime": "21941",
      "asyncId": 940,
      "triggerAsyncId": 832,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstancesOfInjectables",
      "userCode": false,
      "line": "\n        const { injectables } = module;\n        const wrappers = [...injectables.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadInjectable(item, module)));\n    }\n    isModuleWhitelisted(name) {\n        return name !== internal_core_module_1.InternalCoreModule.name",
      "startLine": 61,
      "startCol": 23,
      "endLine": 61,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        941
      ],
      "uniqueid": 200
    },
    "201": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:29:24:29:24",
      "startTime": "578979206672286",
      "endTime": "578979207059081",
      "elapsedTime": "386795",
      "asyncId": 941,
      "triggerAsyncId": 940,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &",
      "startLine": 29,
      "startCol": 24,
      "endLine": 29,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [],
      "uniqueid": 201
    },
    "202": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979206890385",
      "endTime": "578979209575749",
      "elapsedTime": "2685364",
      "asyncId": 942,
      "triggerAsyncId": 939,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "triggers": [
        948,
        947
      ],
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "uniqueid": 202
    },
    "203": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:30:24:30:24",
      "startTime": "578979207377127",
      "endTime": "578979209608781",
      "elapsedTime": "2231654",
      "asyncId": 943,
      "triggerAsyncId": 938,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &&\n                this.logger.log(messages_1.MODULE_INIT_MESSAGE `${name}`)",
      "startLine": 30,
      "startCol": 24,
      "endLine": 30,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        946
      ],
      "uniqueid": 203
    },
    "204": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:52:23:52:23",
      "startTime": "578979207821731",
      "endTime": "578979207842360",
      "elapsedTime": "20629",
      "asyncId": 944,
      "triggerAsyncId": 938,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstancesOfControllers",
      "userCode": false,
      "line": "\n        const { controllers } = module;\n        const wrappers = [...controllers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadController(item, module)));\n    }\n    createPrototypesOfInjectables(module) {\n        const { injectables } = module",
      "startLine": 52,
      "startCol": 23,
      "endLine": 52,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        945
      ],
      "uniqueid": 204
    },
    "205": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:30:24:30:24",
      "startTime": "578979208185563",
      "endTime": "578979209637896",
      "elapsedTime": "1452333",
      "asyncId": 945,
      "triggerAsyncId": 944,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &&\n                this.logger.log(messages_1.MODULE_INIT_MESSAGE `${name}`)",
      "startLine": 30,
      "startCol": 24,
      "endLine": 30,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [],
      "uniqueid": 205
    },
    "206": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979208474214",
      "endTime": "578979209977793",
      "elapsedTime": "1503579",
      "asyncId": 946,
      "triggerAsyncId": 943,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 206
    },
    "207": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:30:24:30:24",
      "startTime": "578979208874745",
      "endTime": "578979209662502",
      "elapsedTime": "787757",
      "asyncId": 947,
      "triggerAsyncId": 942,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &&\n                this.logger.log(messages_1.MODULE_INIT_MESSAGE `${name}`)",
      "startLine": 30,
      "startCol": 24,
      "endLine": 30,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        950
      ],
      "uniqueid": 207
    },
    "208": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:52:23:52:23",
      "startTime": "578979209096000",
      "endTime": "578979209113412",
      "elapsedTime": "17412",
      "asyncId": 948,
      "triggerAsyncId": 942,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " InstanceLoader.createInstancesOfControllers",
      "userCode": false,
      "line": "\n        const { controllers } = module;\n        const wrappers = [...controllers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadController(item, module)));\n    }\n    createPrototypesOfInjectables(module) {\n        const { injectables } = module",
      "startLine": 52,
      "startCol": 23,
      "endLine": 52,
      "endCol": 23,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [
        949
      ],
      "uniqueid": 208
    },
    "209": {
      "source": "node_modules/@nestjs/core/injector/instance-loader.js:30:24:30:24",
      "startTime": "578979209361187",
      "endTime": "578979209686617",
      "elapsedTime": "325430",
      "asyncId": 949,
      "triggerAsyncId": 948,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "line": "\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &&\n                this.logger.log(messages_1.MODULE_INIT_MESSAGE `${name}`)",
      "startLine": 30,
      "startCol": 24,
      "endLine": 30,
      "endCol": 24,
      "file": "node_modules/@nestjs/core/injector/instance-loader.js",
      "triggers": [],
      "uniqueid": 209
    },
    "210": {
      "source": "(/internal/process/task_queues:96:5:96:5)",
      "startTime": "578979209562324",
      "endTime": "578979210178519",
      "elapsedTime": "616195",
      "asyncId": 950,
      "triggerAsyncId": 947,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " processTicksAndRejections",
      "userCode": false,
      "line": "<promise not in user code>",
      "startLine": 0,
      "startCol": 0,
      "endLine": 0,
      "endCol": 0,
      "file": "",
      "triggers": [],
      "uniqueid": 210
    },
    "211": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:76:13:76:13",
      "startTime": "578979212531019",
      "endTime": "578979212543913",
      "elapsedTime": "12894",
      "asyncId": 955,
      "triggerAsyncId": 667,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " queueRunner",
      "userCode": false,
      "line": "\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return {\n    cancel: token.cancel.bind(token)",
      "startLine": 76,
      "startCol": 13,
      "endLine": 76,
      "endCol": 13,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "triggers": [
        956,
        956
      ],
      "uniqueid": 211
    },
    "212": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:75:30:75:30",
      "startTime": "578979212767612",
      "endTime": "578979232486307",
      "elapsedTime": "19718695",
      "asyncId": 956,
      "triggerAsyncId": 955,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        964,
        966,
        972,
        963,
        970,
        986,
        974
      ],
      "line": "\n\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return ",
      "startLine": 75,
      "startCol": 30,
      "endLine": 75,
      "endCol": 30,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "uniqueid": 212
    },
    "213": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:76:13:76:13",
      "startTime": "578979214961445",
      "endTime": "578979214973908",
      "elapsedTime": "12463",
      "asyncId": 966,
      "triggerAsyncId": 956,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " queueRunner",
      "userCode": false,
      "line": "\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return {\n    cancel: token.cancel.bind(token)",
      "startLine": 76,
      "startCol": 13,
      "endLine": 76,
      "endCol": 13,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "triggers": [
        967,
        967
      ],
      "uniqueid": 213
    },
    "214": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:75:30:75:30",
      "startTime": "578979215191817",
      "endTime": "578979218673354",
      "elapsedTime": "3481537",
      "asyncId": 967,
      "triggerAsyncId": 966,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        977,
        980,
        978,
        982,
        988,
        968,
        968
      ],
      "line": "\n\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return ",
      "startLine": 75,
      "startCol": 30,
      "endLine": 75,
      "endCol": 30,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "uniqueid": 214
    },
    "215": {
      "source": "node_modules/jest-jasmine2/build/queueRunner.js:75:30:75:30",
      "startTime": "578979215373217",
      "endTime": "578979231723888",
      "elapsedTime": "16350671",
      "asyncId": 968,
      "triggerAsyncId": 967,
      "io": "",
      "createdIn": 1625855249426,
      "functionName": "",
      "userCode": false,
      "triggers": [
        991,
        996,
        990,
        989,
        994,
        998,
        1002,
        969
      ],
      "line": "\n\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return ",
      "startLine": 75,
      "startCol": 30,
      "endLine": 75,
      "endCol": 30,
      "file": "node_modules/jest-jasmine2/build/queueRunner.js",
      "uniqueid": 215
    },
    "216": {
      "source": "apps/api/src/model/lib/user.service.spec.ts:17:21:17:21",
      "startTime": "578979224790902",
      "endTime": "578979224809336",
      "elapsedTime": "18434",
      "asyncId": 991,
      "triggerAsyncId": 968,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Object.<anonymous>",
      "userCode": false,
      "line": "\n  describe('UserService', () => {\n    it('works for null', async () => {\n      await service.handleLogin(null, null);\n    });\n  });\n})",
      "startLine": 17,
      "startCol": 21,
      "endLine": 17,
      "endCol": 21,
      "file": "apps/api/src/model/lib/user.service.spec.ts",
      "triggers": [
        992
      ],
      "uniqueid": 216
    },
    "217": {
      "source": "node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:106:37:106:37",
      "startTime": "578979225126290",
      "endTime": "578979231134593",
      "elapsedTime": "6008303",
      "asyncId": 992,
      "triggerAsyncId": 991,
      "io": false,
      "createdIn": 1625855249426,
      "functionName": " Object.asyncJestTest",
      "userCode": false,
      "line": "\n        ? _co.default.wrap(fn)\n        : fn;\n      const returnValue = wrappedFn.call({}, doneFnNoop);\n\n      if (isPromise(returnValue)) {\n        returnValue.then(done.bind(null, null), error => ",
      "startLine": 106,
      "startCol": 37,
      "endLine": 106,
      "endCol": 37,
      "file": "node_modules/jest-jasmine2/build/jasmineAsyncInstall.js",
      "triggers": [],
      "uniqueid": 217
    }
  },
  "antipatterns": {
    "0": {
      "patternID": "pattern2",
      "file": "absorb/SMCloudStore/backblaze-b2/src/B2Upload.ts",
      "startLine": "292",
      "startCol": "16",
      "endLine": "318",
      "endCol": "14"
    },
    "1": {
      "patternID": "pattern2",
      "file": "absorb/SMCloudStore/backblaze-b2/src/BackblazeB2Provider.ts",
      "startLine": "147",
      "startCol": "16",
      "endLine": "148",
      "endCol": "49"
    },
    "2": {
      "patternID": "pattern2",
      "file": "absorb/SMCloudStore/backblaze-b2/src/BackblazeB2Provider.ts",
      "startLine": "188",
      "startCol": "16",
      "endLine": "190",
      "endCol": "49"
    },
    "3": {
      "patternID": "pattern2",
      "file": "absorb/SMCloudStore/backblaze-b2/src/BackblazeB2Provider.ts",
      "startLine": "283",
      "startCol": "16",
      "endLine": "284",
      "endCol": "49"
    },
    "4": {
      "patternID": "pattern2",
      "file": "absorb/SMCloudStore/backblaze-b2/src/BackblazeB2Provider.ts",
      "startLine": "306",
      "startCol": "16",
      "endLine": "307",
      "endCol": "49"
    },
    "5": {
      "patternID": "pattern2",
      "file": "absorb/SMCloudStore/backblaze-b2/src/BackblazeB2Provider.ts",
      "startLine": "382",
      "startCol": "16",
      "endLine": "383",
      "endCol": "51"
    },
    "6": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "183",
      "startCol": "5",
      "endLine": "204",
      "endCol": "5"
    },
    "7": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "213",
      "startCol": "5",
      "endLine": "240",
      "endCol": "5"
    },
    "8": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "267",
      "startCol": "5",
      "endLine": "283",
      "endCol": "5"
    },
    "9": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "292",
      "startCol": "5",
      "endLine": "305",
      "endCol": "5"
    },
    "10": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "317",
      "startCol": "5",
      "endLine": "343",
      "endCol": "5"
    },
    "11": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "393",
      "startCol": "29",
      "endLine": "438",
      "endCol": "9"
    },
    "12": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "451",
      "startCol": "5",
      "endLine": "466",
      "endCol": "5"
    },
    "13": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "507",
      "startCol": "5",
      "endLine": "531",
      "endCol": "5"
    },
    "14": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/azure-storage/src/AzureStorageProvider.ts",
      "startLine": "135",
      "startCol": "5",
      "endLine": "152",
      "endCol": "5"
    },
    "15": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/azure-storage/src/AzureStorageProvider.ts",
      "startLine": "178",
      "startCol": "32",
      "endLine": "210",
      "endCol": "9"
    },
    "16": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/azure-storage/src/AzureStorageProvider.ts",
      "startLine": "222",
      "startCol": "5",
      "endLine": "236",
      "endCol": "5"
    },
    "17": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/azure-storage/src/AzureStorageProvider.ts",
      "startLine": "248",
      "startCol": "5",
      "endLine": "282",
      "endCol": "5"
    },
    "18": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/azure-storage/src/AzureStorageProvider.ts",
      "startLine": "323",
      "startCol": "32",
      "endLine": "378",
      "endCol": "9"
    },
    "19": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/azure-storage/src/AzureStorageProvider.ts",
      "startLine": "396",
      "startCol": "5",
      "endLine": "410",
      "endCol": "5"
    },
    "20": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/azure-storage/src/AzureStorageProvider.ts",
      "startLine": "489",
      "startCol": "5",
      "endLine": "524",
      "endCol": "5"
    },
    "21": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/core/src/StreamUtils.ts",
      "startLine": "32",
      "startCol": "8",
      "endLine": "45",
      "endCol": "1"
    },
    "22": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/core/src/StreamUtils.ts",
      "startLine": "78",
      "startCol": "8",
      "endLine": "118",
      "endCol": "1"
    },
    "23": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/core/src/Utils.ts",
      "startLine": "10",
      "startCol": "8",
      "endLine": "14",
      "endCol": "1"
    },
    "24": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/generic-s3/src/GenericS3Provider.ts",
      "startLine": "133",
      "startCol": "5",
      "endLine": "167",
      "endCol": "5"
    },
    "25": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/google-cloud-storage/src/GoogleCloudStorageProvider.ts",
      "startLine": "177",
      "startCol": "5",
      "endLine": "236",
      "endCol": "5"
    },
    "26": {
      "patternID": "pattern5",
      "file": "absorb/SMCloudStore/google-cloud-storage/src/GoogleCloudStorageProvider.ts",
      "startLine": "264",
      "startCol": "32",
      "endLine": "324",
      "endCol": "9"
    },
    "27": {
      "patternID": "pattern5",
      "file": "apps/api/src/model/lib/reports.service.ts",
      "startLine": "284",
      "startCol": "1",
      "endLine": "308",
      "endCol": "1"
    },
    "28": {
      "patternID": "pattern3",
      "file": "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts",
      "startLine": "377",
      "startCol": "22",
      "endLine": "377",
      "endCol": "74"
    },
    "29": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/app.controller.spec.ts",
      "startLine": "10",
      "startCol": "11",
      "endLine": "13",
      "endCol": "16"
    },
    "30": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/app.controller.spec.ts",
      "startLine": "19",
      "startCol": "14",
      "endLine": "19",
      "endCol": "42"
    },
    "31": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/app.service.spec.ts",
      "startLine": "9",
      "startCol": "17",
      "endLine": "11",
      "endCol": "16"
    },
    "32": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/custom/custom.sales.invoice.service.ts",
      "startLine": "17",
      "startCol": "24",
      "endLine": "25",
      "endCol": "18"
    },
    "33": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/custom/custom.save.args.validation.service.ts",
      "startLine": "18",
      "startCol": "7",
      "endLine": "18",
      "endCol": "76"
    },
    "34": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migration.service.ts",
      "startLine": "11",
      "startCol": "5",
      "endLine": "13",
      "endCol": "6"
    },
    "35": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "36": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "37": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "13",
      "startCol": "5",
      "endLine": "15",
      "endCol": "5"
    },
    "38": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "39": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "21",
      "endCol": "5"
    },
    "40": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "22",
      "startCol": "5",
      "endLine": "24",
      "endCol": "5"
    },
    "41": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "25",
      "startCol": "5",
      "endLine": "27",
      "endCol": "5"
    },
    "42": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "28",
      "startCol": "5",
      "endLine": "30",
      "endCol": "5"
    },
    "43": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "31",
      "startCol": "5",
      "endLine": "33",
      "endCol": "5"
    },
    "44": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "34",
      "startCol": "5",
      "endLine": "36",
      "endCol": "5"
    },
    "45": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "37",
      "startCol": "5",
      "endLine": "39",
      "endCol": "5"
    },
    "46": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "40",
      "startCol": "5",
      "endLine": "42",
      "endCol": "5"
    },
    "47": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "43",
      "startCol": "5",
      "endLine": "45",
      "endCol": "5"
    },
    "48": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "46",
      "startCol": "5",
      "endLine": "48",
      "endCol": "5"
    },
    "49": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "49",
      "startCol": "5",
      "endLine": "51",
      "endCol": "5"
    },
    "50": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "52",
      "startCol": "5",
      "endLine": "54",
      "endCol": "5"
    },
    "51": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "55",
      "startCol": "5",
      "endLine": "57",
      "endCol": "5"
    },
    "52": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "58",
      "startCol": "5",
      "endLine": "60",
      "endCol": "5"
    },
    "53": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "61",
      "startCol": "5",
      "endLine": "63",
      "endCol": "5"
    },
    "54": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "64",
      "startCol": "5",
      "endLine": "66",
      "endCol": "5"
    },
    "55": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "67",
      "startCol": "5",
      "endLine": "69",
      "endCol": "5"
    },
    "56": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "70",
      "startCol": "5",
      "endLine": "72",
      "endCol": "5"
    },
    "57": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "73",
      "startCol": "5",
      "endLine": "75",
      "endCol": "5"
    },
    "58": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "76",
      "startCol": "5",
      "endLine": "78",
      "endCol": "5"
    },
    "59": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "79",
      "startCol": "5",
      "endLine": "81",
      "endCol": "5"
    },
    "60": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "82",
      "startCol": "5",
      "endLine": "84",
      "endCol": "5"
    },
    "61": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "85",
      "startCol": "5",
      "endLine": "87",
      "endCol": "5"
    },
    "62": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "88",
      "startCol": "5",
      "endLine": "90",
      "endCol": "5"
    },
    "63": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "91",
      "startCol": "5",
      "endLine": "93",
      "endCol": "5"
    },
    "64": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "94",
      "startCol": "5",
      "endLine": "96",
      "endCol": "5"
    },
    "65": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "97",
      "startCol": "5",
      "endLine": "99",
      "endCol": "5"
    },
    "66": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "100",
      "startCol": "5",
      "endLine": "102",
      "endCol": "5"
    },
    "67": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "103",
      "startCol": "5",
      "endLine": "105",
      "endCol": "5"
    },
    "68": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "106",
      "startCol": "5",
      "endLine": "108",
      "endCol": "5"
    },
    "69": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "109",
      "startCol": "5",
      "endLine": "111",
      "endCol": "5"
    },
    "70": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "112",
      "startCol": "5",
      "endLine": "114",
      "endCol": "5"
    },
    "71": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "115",
      "startCol": "5",
      "endLine": "117",
      "endCol": "5"
    },
    "72": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "118",
      "startCol": "5",
      "endLine": "120",
      "endCol": "5"
    },
    "73": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "121",
      "startCol": "5",
      "endLine": "123",
      "endCol": "5"
    },
    "74": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "124",
      "startCol": "5",
      "endLine": "126",
      "endCol": "5"
    },
    "75": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "127",
      "startCol": "5",
      "endLine": "129",
      "endCol": "5"
    },
    "76": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "130",
      "startCol": "5",
      "endLine": "132",
      "endCol": "5"
    },
    "77": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "133",
      "startCol": "5",
      "endLine": "135",
      "endCol": "5"
    },
    "78": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "136",
      "startCol": "5",
      "endLine": "138",
      "endCol": "5"
    },
    "79": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "139",
      "startCol": "5",
      "endLine": "141",
      "endCol": "5"
    },
    "80": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "142",
      "startCol": "5",
      "endLine": "144",
      "endCol": "5"
    },
    "81": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "145",
      "startCol": "5",
      "endLine": "147",
      "endCol": "5"
    },
    "82": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "148",
      "startCol": "5",
      "endLine": "150",
      "endCol": "5"
    },
    "83": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "151",
      "startCol": "5",
      "endLine": "153",
      "endCol": "5"
    },
    "84": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "154",
      "startCol": "5",
      "endLine": "156",
      "endCol": "5"
    },
    "85": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "157",
      "startCol": "5",
      "endLine": "159",
      "endCol": "5"
    },
    "86": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "160",
      "startCol": "5",
      "endLine": "162",
      "endCol": "5"
    },
    "87": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "163",
      "startCol": "5",
      "endLine": "165",
      "endCol": "5"
    },
    "88": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "166",
      "startCol": "5",
      "endLine": "168",
      "endCol": "5"
    },
    "89": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "169",
      "startCol": "5",
      "endLine": "171",
      "endCol": "5"
    },
    "90": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "172",
      "startCol": "5",
      "endLine": "174",
      "endCol": "5"
    },
    "91": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "175",
      "startCol": "5",
      "endLine": "177",
      "endCol": "5"
    },
    "92": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "178",
      "startCol": "5",
      "endLine": "180",
      "endCol": "5"
    },
    "93": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "181",
      "startCol": "5",
      "endLine": "183",
      "endCol": "5"
    },
    "94": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "184",
      "startCol": "5",
      "endLine": "186",
      "endCol": "5"
    },
    "95": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "187",
      "startCol": "5",
      "endLine": "189",
      "endCol": "5"
    },
    "96": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "190",
      "startCol": "5",
      "endLine": "192",
      "endCol": "5"
    },
    "97": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "193",
      "startCol": "5",
      "endLine": "195",
      "endCol": "5"
    },
    "98": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "196",
      "startCol": "5",
      "endLine": "198",
      "endCol": "5"
    },
    "99": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "199",
      "startCol": "5",
      "endLine": "201",
      "endCol": "5"
    },
    "100": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "205",
      "startCol": "5",
      "endLine": "207",
      "endCol": "5"
    },
    "101": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "208",
      "startCol": "5",
      "endLine": "210",
      "endCol": "5"
    },
    "102": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "211",
      "startCol": "5",
      "endLine": "213",
      "endCol": "5"
    },
    "103": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "214",
      "startCol": "5",
      "endLine": "216",
      "endCol": "5"
    },
    "104": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "217",
      "startCol": "5",
      "endLine": "219",
      "endCol": "5"
    },
    "105": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "220",
      "startCol": "5",
      "endLine": "222",
      "endCol": "5"
    },
    "106": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "223",
      "startCol": "5",
      "endLine": "225",
      "endCol": "5"
    },
    "107": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "226",
      "startCol": "5",
      "endLine": "228",
      "endCol": "5"
    },
    "108": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "229",
      "startCol": "5",
      "endLine": "231",
      "endCol": "5"
    },
    "109": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "232",
      "startCol": "5",
      "endLine": "234",
      "endCol": "5"
    },
    "110": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "235",
      "startCol": "5",
      "endLine": "237",
      "endCol": "5"
    },
    "111": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "238",
      "startCol": "5",
      "endLine": "240",
      "endCol": "5"
    },
    "112": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "241",
      "startCol": "5",
      "endLine": "243",
      "endCol": "5"
    },
    "113": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "244",
      "startCol": "5",
      "endLine": "246",
      "endCol": "5"
    },
    "114": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "247",
      "startCol": "5",
      "endLine": "249",
      "endCol": "5"
    },
    "115": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "250",
      "startCol": "5",
      "endLine": "252",
      "endCol": "5"
    },
    "116": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "253",
      "startCol": "5",
      "endLine": "255",
      "endCol": "5"
    },
    "117": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "256",
      "startCol": "5",
      "endLine": "258",
      "endCol": "5"
    },
    "118": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "259",
      "startCol": "5",
      "endLine": "261",
      "endCol": "5"
    },
    "119": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "262",
      "startCol": "5",
      "endLine": "264",
      "endCol": "5"
    },
    "120": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "265",
      "startCol": "5",
      "endLine": "267",
      "endCol": "5"
    },
    "121": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "268",
      "startCol": "5",
      "endLine": "270",
      "endCol": "5"
    },
    "122": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "271",
      "startCol": "5",
      "endLine": "273",
      "endCol": "5"
    },
    "123": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "274",
      "startCol": "5",
      "endLine": "274",
      "endCol": "77"
    },
    "124": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "275",
      "startCol": "5",
      "endLine": "275",
      "endCol": "73"
    },
    "125": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "276",
      "startCol": "5",
      "endLine": "276",
      "endCol": "61"
    },
    "126": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "277",
      "startCol": "5",
      "endLine": "279",
      "endCol": "5"
    },
    "127": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "280",
      "startCol": "5",
      "endLine": "280",
      "endCol": "70"
    },
    "128": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "281",
      "startCol": "5",
      "endLine": "283",
      "endCol": "5"
    },
    "129": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "284",
      "startCol": "5",
      "endLine": "284",
      "endCol": "61"
    },
    "130": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "285",
      "startCol": "5",
      "endLine": "285",
      "endCol": "66"
    },
    "131": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "286",
      "startCol": "5",
      "endLine": "286",
      "endCol": "70"
    },
    "132": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "287",
      "startCol": "5",
      "endLine": "287",
      "endCol": "71"
    },
    "133": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "288",
      "startCol": "5",
      "endLine": "290",
      "endCol": "5"
    },
    "134": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "291",
      "startCol": "5",
      "endLine": "293",
      "endCol": "5"
    },
    "135": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "294",
      "startCol": "5",
      "endLine": "294",
      "endCol": "60"
    },
    "136": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "295",
      "startCol": "5",
      "endLine": "295",
      "endCol": "56"
    },
    "137": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "296",
      "startCol": "5",
      "endLine": "298",
      "endCol": "5"
    },
    "138": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "299",
      "startCol": "5",
      "endLine": "299",
      "endCol": "65"
    },
    "139": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "300",
      "startCol": "5",
      "endLine": "302",
      "endCol": "5"
    },
    "140": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "303",
      "startCol": "5",
      "endLine": "305",
      "endCol": "5"
    },
    "141": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "306",
      "startCol": "5",
      "endLine": "306",
      "endCol": "65"
    },
    "142": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "307",
      "startCol": "5",
      "endLine": "307",
      "endCol": "73"
    },
    "143": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "308",
      "startCol": "5",
      "endLine": "310",
      "endCol": "5"
    },
    "144": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "311",
      "startCol": "5",
      "endLine": "313",
      "endCol": "5"
    },
    "145": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "314",
      "startCol": "5",
      "endLine": "316",
      "endCol": "5"
    },
    "146": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "317",
      "startCol": "5",
      "endLine": "317",
      "endCol": "57"
    },
    "147": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "318",
      "startCol": "5",
      "endLine": "320",
      "endCol": "5"
    },
    "148": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "321",
      "startCol": "5",
      "endLine": "323",
      "endCol": "5"
    },
    "149": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "324",
      "startCol": "5",
      "endLine": "324",
      "endCol": "66"
    },
    "150": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "325",
      "startCol": "5",
      "endLine": "325",
      "endCol": "60"
    },
    "151": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "326",
      "startCol": "5",
      "endLine": "328",
      "endCol": "5"
    },
    "152": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "329",
      "startCol": "5",
      "endLine": "331",
      "endCol": "5"
    },
    "153": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "332",
      "startCol": "5",
      "endLine": "334",
      "endCol": "5"
    },
    "154": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "335",
      "startCol": "5",
      "endLine": "335",
      "endCol": "61"
    },
    "155": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "336",
      "startCol": "5",
      "endLine": "338",
      "endCol": "5"
    },
    "156": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "339",
      "startCol": "5",
      "endLine": "341",
      "endCol": "5"
    },
    "157": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "342",
      "startCol": "5",
      "endLine": "342",
      "endCol": "60"
    },
    "158": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "343",
      "startCol": "5",
      "endLine": "343",
      "endCol": "77"
    },
    "159": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "344",
      "startCol": "5",
      "endLine": "346",
      "endCol": "5"
    },
    "160": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "347",
      "startCol": "5",
      "endLine": "347",
      "endCol": "57"
    },
    "161": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635320-CreateDB.ts",
      "startLine": "348",
      "startCol": "5",
      "endLine": "348",
      "endCol": "66"
    },
    "162": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635326-Language.ts",
      "startLine": "14",
      "startCol": "27",
      "endLine": "14",
      "endCol": "63"
    },
    "163": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1595508635328-CreateAnAddress.ts",
      "startLine": "14",
      "startCol": "27",
      "endLine": "14",
      "endCol": "63"
    },
    "164": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1609846660789-InvoicesContent.ts",
      "startLine": "12",
      "startCol": "5",
      "endLine": "12",
      "endCol": "41"
    },
    "165": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "166": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "167": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "13",
      "startCol": "5",
      "endLine": "15",
      "endCol": "5"
    },
    "168": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "169": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "21",
      "endCol": "5"
    },
    "170": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "22",
      "startCol": "5",
      "endLine": "24",
      "endCol": "5"
    },
    "171": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "25",
      "startCol": "5",
      "endLine": "27",
      "endCol": "5"
    },
    "172": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "28",
      "startCol": "5",
      "endLine": "30",
      "endCol": "5"
    },
    "173": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "31",
      "startCol": "5",
      "endLine": "33",
      "endCol": "5"
    },
    "174": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "34",
      "startCol": "5",
      "endLine": "36",
      "endCol": "5"
    },
    "175": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "37",
      "startCol": "5",
      "endLine": "39",
      "endCol": "5"
    },
    "176": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "40",
      "startCol": "5",
      "endLine": "42",
      "endCol": "5"
    },
    "177": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "43",
      "startCol": "5",
      "endLine": "45",
      "endCol": "5"
    },
    "178": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "46",
      "startCol": "5",
      "endLine": "48",
      "endCol": "5"
    },
    "179": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "49",
      "startCol": "5",
      "endLine": "51",
      "endCol": "5"
    },
    "180": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "52",
      "startCol": "5",
      "endLine": "54",
      "endCol": "5"
    },
    "181": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "55",
      "startCol": "5",
      "endLine": "57",
      "endCol": "5"
    },
    "182": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "58",
      "startCol": "5",
      "endLine": "60",
      "endCol": "5"
    },
    "183": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "61",
      "startCol": "5",
      "endLine": "63",
      "endCol": "5"
    },
    "184": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "64",
      "startCol": "5",
      "endLine": "66",
      "endCol": "5"
    },
    "185": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "67",
      "startCol": "5",
      "endLine": "69",
      "endCol": "5"
    },
    "186": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "70",
      "startCol": "5",
      "endLine": "72",
      "endCol": "5"
    },
    "187": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "73",
      "startCol": "5",
      "endLine": "75",
      "endCol": "5"
    },
    "188": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "76",
      "startCol": "5",
      "endLine": "78",
      "endCol": "5"
    },
    "189": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "79",
      "startCol": "5",
      "endLine": "81",
      "endCol": "5"
    },
    "190": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "82",
      "startCol": "5",
      "endLine": "84",
      "endCol": "5"
    },
    "191": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "85",
      "startCol": "5",
      "endLine": "87",
      "endCol": "5"
    },
    "192": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "88",
      "startCol": "5",
      "endLine": "90",
      "endCol": "5"
    },
    "193": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "91",
      "startCol": "5",
      "endLine": "93",
      "endCol": "5"
    },
    "194": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "94",
      "startCol": "5",
      "endLine": "96",
      "endCol": "5"
    },
    "195": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "97",
      "startCol": "5",
      "endLine": "99",
      "endCol": "5"
    },
    "196": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "100",
      "startCol": "5",
      "endLine": "102",
      "endCol": "5"
    },
    "197": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "103",
      "startCol": "5",
      "endLine": "105",
      "endCol": "5"
    },
    "198": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "106",
      "startCol": "5",
      "endLine": "108",
      "endCol": "5"
    },
    "199": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "109",
      "startCol": "5",
      "endLine": "111",
      "endCol": "5"
    },
    "200": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "112",
      "startCol": "5",
      "endLine": "114",
      "endCol": "5"
    },
    "201": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "115",
      "startCol": "5",
      "endLine": "117",
      "endCol": "5"
    },
    "202": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "118",
      "startCol": "5",
      "endLine": "120",
      "endCol": "5"
    },
    "203": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "121",
      "startCol": "5",
      "endLine": "123",
      "endCol": "5"
    },
    "204": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "124",
      "startCol": "5",
      "endLine": "126",
      "endCol": "5"
    },
    "205": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "127",
      "startCol": "5",
      "endLine": "129",
      "endCol": "5"
    },
    "206": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "130",
      "startCol": "5",
      "endLine": "132",
      "endCol": "5"
    },
    "207": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "133",
      "startCol": "5",
      "endLine": "135",
      "endCol": "5"
    },
    "208": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "136",
      "startCol": "5",
      "endLine": "138",
      "endCol": "5"
    },
    "209": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "139",
      "startCol": "5",
      "endLine": "141",
      "endCol": "5"
    },
    "210": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "142",
      "startCol": "5",
      "endLine": "144",
      "endCol": "5"
    },
    "211": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "145",
      "startCol": "5",
      "endLine": "147",
      "endCol": "5"
    },
    "212": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "148",
      "startCol": "5",
      "endLine": "150",
      "endCol": "5"
    },
    "213": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "151",
      "startCol": "5",
      "endLine": "153",
      "endCol": "5"
    },
    "214": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "154",
      "startCol": "5",
      "endLine": "156",
      "endCol": "5"
    },
    "215": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "157",
      "startCol": "5",
      "endLine": "159",
      "endCol": "5"
    },
    "216": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "160",
      "startCol": "5",
      "endLine": "162",
      "endCol": "5"
    },
    "217": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "163",
      "startCol": "5",
      "endLine": "165",
      "endCol": "5"
    },
    "218": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "166",
      "startCol": "5",
      "endLine": "168",
      "endCol": "5"
    },
    "219": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "169",
      "startCol": "5",
      "endLine": "171",
      "endCol": "5"
    },
    "220": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "172",
      "startCol": "5",
      "endLine": "174",
      "endCol": "5"
    },
    "221": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "175",
      "startCol": "5",
      "endLine": "177",
      "endCol": "5"
    },
    "222": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "178",
      "startCol": "5",
      "endLine": "180",
      "endCol": "5"
    },
    "223": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "181",
      "startCol": "5",
      "endLine": "183",
      "endCol": "5"
    },
    "224": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "184",
      "startCol": "5",
      "endLine": "186",
      "endCol": "5"
    },
    "225": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "187",
      "startCol": "5",
      "endLine": "189",
      "endCol": "5"
    },
    "226": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "190",
      "startCol": "5",
      "endLine": "192",
      "endCol": "5"
    },
    "227": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "193",
      "startCol": "5",
      "endLine": "195",
      "endCol": "5"
    },
    "228": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "196",
      "startCol": "5",
      "endLine": "198",
      "endCol": "5"
    },
    "229": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "199",
      "startCol": "5",
      "endLine": "201",
      "endCol": "5"
    },
    "230": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "202",
      "startCol": "5",
      "endLine": "204",
      "endCol": "5"
    },
    "231": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "205",
      "startCol": "5",
      "endLine": "207",
      "endCol": "5"
    },
    "232": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "208",
      "startCol": "5",
      "endLine": "210",
      "endCol": "5"
    },
    "233": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "211",
      "startCol": "5",
      "endLine": "213",
      "endCol": "5"
    },
    "234": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "214",
      "startCol": "5",
      "endLine": "216",
      "endCol": "5"
    },
    "235": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "217",
      "startCol": "5",
      "endLine": "219",
      "endCol": "5"
    },
    "236": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "220",
      "startCol": "5",
      "endLine": "222",
      "endCol": "5"
    },
    "237": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "226",
      "startCol": "5",
      "endLine": "228",
      "endCol": "5"
    },
    "238": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "229",
      "startCol": "5",
      "endLine": "231",
      "endCol": "5"
    },
    "239": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "232",
      "startCol": "5",
      "endLine": "234",
      "endCol": "5"
    },
    "240": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "235",
      "startCol": "5",
      "endLine": "237",
      "endCol": "5"
    },
    "241": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "238",
      "startCol": "5",
      "endLine": "240",
      "endCol": "5"
    },
    "242": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "241",
      "startCol": "5",
      "endLine": "243",
      "endCol": "5"
    },
    "243": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "244",
      "startCol": "5",
      "endLine": "246",
      "endCol": "5"
    },
    "244": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "247",
      "startCol": "5",
      "endLine": "249",
      "endCol": "5"
    },
    "245": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "250",
      "startCol": "5",
      "endLine": "252",
      "endCol": "5"
    },
    "246": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "253",
      "startCol": "5",
      "endLine": "255",
      "endCol": "5"
    },
    "247": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "256",
      "startCol": "5",
      "endLine": "258",
      "endCol": "5"
    },
    "248": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "259",
      "startCol": "5",
      "endLine": "261",
      "endCol": "5"
    },
    "249": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "262",
      "startCol": "5",
      "endLine": "264",
      "endCol": "5"
    },
    "250": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "265",
      "startCol": "5",
      "endLine": "267",
      "endCol": "5"
    },
    "251": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "268",
      "startCol": "5",
      "endLine": "270",
      "endCol": "5"
    },
    "252": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "271",
      "startCol": "5",
      "endLine": "273",
      "endCol": "5"
    },
    "253": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "274",
      "startCol": "5",
      "endLine": "276",
      "endCol": "5"
    },
    "254": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "277",
      "startCol": "5",
      "endLine": "279",
      "endCol": "5"
    },
    "255": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "280",
      "startCol": "5",
      "endLine": "282",
      "endCol": "5"
    },
    "256": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "283",
      "startCol": "5",
      "endLine": "285",
      "endCol": "5"
    },
    "257": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "286",
      "startCol": "5",
      "endLine": "288",
      "endCol": "5"
    },
    "258": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "289",
      "startCol": "5",
      "endLine": "291",
      "endCol": "5"
    },
    "259": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "292",
      "startCol": "5",
      "endLine": "294",
      "endCol": "5"
    },
    "260": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "295",
      "startCol": "5",
      "endLine": "297",
      "endCol": "5"
    },
    "261": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "298",
      "startCol": "5",
      "endLine": "300",
      "endCol": "5"
    },
    "262": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "301",
      "startCol": "5",
      "endLine": "303",
      "endCol": "5"
    },
    "263": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "304",
      "startCol": "5",
      "endLine": "306",
      "endCol": "5"
    },
    "264": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "307",
      "startCol": "5",
      "endLine": "309",
      "endCol": "5"
    },
    "265": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "310",
      "startCol": "5",
      "endLine": "312",
      "endCol": "5"
    },
    "266": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "313",
      "startCol": "5",
      "endLine": "315",
      "endCol": "5"
    },
    "267": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "316",
      "startCol": "5",
      "endLine": "318",
      "endCol": "5"
    },
    "268": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "319",
      "startCol": "5",
      "endLine": "321",
      "endCol": "5"
    },
    "269": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "322",
      "startCol": "5",
      "endLine": "324",
      "endCol": "5"
    },
    "270": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "325",
      "startCol": "5",
      "endLine": "327",
      "endCol": "5"
    },
    "271": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "328",
      "startCol": "5",
      "endLine": "330",
      "endCol": "5"
    },
    "272": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "331",
      "startCol": "5",
      "endLine": "333",
      "endCol": "5"
    },
    "273": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "334",
      "startCol": "5",
      "endLine": "336",
      "endCol": "5"
    },
    "274": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "337",
      "startCol": "5",
      "endLine": "339",
      "endCol": "5"
    },
    "275": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "340",
      "startCol": "5",
      "endLine": "342",
      "endCol": "5"
    },
    "276": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "343",
      "startCol": "5",
      "endLine": "345",
      "endCol": "5"
    },
    "277": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "346",
      "startCol": "5",
      "endLine": "348",
      "endCol": "5"
    },
    "278": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "349",
      "startCol": "5",
      "endLine": "351",
      "endCol": "5"
    },
    "279": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "352",
      "startCol": "5",
      "endLine": "354",
      "endCol": "5"
    },
    "280": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "355",
      "startCol": "5",
      "endLine": "357",
      "endCol": "5"
    },
    "281": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "358",
      "startCol": "5",
      "endLine": "360",
      "endCol": "5"
    },
    "282": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "361",
      "startCol": "5",
      "endLine": "363",
      "endCol": "5"
    },
    "283": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "364",
      "startCol": "5",
      "endLine": "366",
      "endCol": "5"
    },
    "284": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "367",
      "startCol": "5",
      "endLine": "369",
      "endCol": "5"
    },
    "285": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "370",
      "startCol": "5",
      "endLine": "372",
      "endCol": "5"
    },
    "286": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "373",
      "startCol": "5",
      "endLine": "375",
      "endCol": "5"
    },
    "287": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "376",
      "startCol": "5",
      "endLine": "378",
      "endCol": "5"
    },
    "288": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "379",
      "startCol": "5",
      "endLine": "381",
      "endCol": "5"
    },
    "289": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "382",
      "startCol": "5",
      "endLine": "384",
      "endCol": "5"
    },
    "290": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "385",
      "startCol": "5",
      "endLine": "387",
      "endCol": "5"
    },
    "291": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "388",
      "startCol": "5",
      "endLine": "390",
      "endCol": "5"
    },
    "292": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "391",
      "startCol": "5",
      "endLine": "393",
      "endCol": "5"
    },
    "293": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "394",
      "startCol": "5",
      "endLine": "396",
      "endCol": "5"
    },
    "294": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "397",
      "startCol": "5",
      "endLine": "399",
      "endCol": "5"
    },
    "295": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "400",
      "startCol": "5",
      "endLine": "402",
      "endCol": "5"
    },
    "296": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "403",
      "startCol": "5",
      "endLine": "405",
      "endCol": "5"
    },
    "297": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "406",
      "startCol": "5",
      "endLine": "408",
      "endCol": "5"
    },
    "298": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "409",
      "startCol": "5",
      "endLine": "411",
      "endCol": "5"
    },
    "299": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "412",
      "startCol": "5",
      "endLine": "414",
      "endCol": "5"
    },
    "300": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "415",
      "startCol": "5",
      "endLine": "417",
      "endCol": "5"
    },
    "301": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "418",
      "startCol": "5",
      "endLine": "420",
      "endCol": "5"
    },
    "302": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "421",
      "startCol": "5",
      "endLine": "423",
      "endCol": "5"
    },
    "303": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "424",
      "startCol": "5",
      "endLine": "426",
      "endCol": "5"
    },
    "304": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "427",
      "startCol": "5",
      "endLine": "429",
      "endCol": "5"
    },
    "305": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "430",
      "startCol": "5",
      "endLine": "430",
      "endCol": "73"
    },
    "306": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "431",
      "startCol": "5",
      "endLine": "431",
      "endCol": "57"
    },
    "307": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "432",
      "startCol": "5",
      "endLine": "432",
      "endCol": "77"
    },
    "308": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612978737166-Menu.ts",
      "startLine": "433",
      "startCol": "5",
      "endLine": "433",
      "endCol": "62"
    },
    "309": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612983991735-MenuContent.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "19",
      "endCol": "38"
    },
    "310": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612983991735-MenuContent.ts",
      "startLine": "26",
      "startCol": "27",
      "endLine": "26",
      "endCol": "63"
    },
    "311": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1612983991735-MenuContent.ts",
      "startLine": "31",
      "startCol": "5",
      "endLine": "31",
      "endCol": "34"
    },
    "312": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615749063579-EnhanceCustomer.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "313": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615749063579-EnhanceCustomer.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "314": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615749063579-EnhanceCustomer.ts",
      "startLine": "14",
      "startCol": "5",
      "endLine": "16",
      "endCol": "5"
    },
    "315": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615749063579-EnhanceCustomer.ts",
      "startLine": "17",
      "startCol": "5",
      "endLine": "19",
      "endCol": "5"
    },
    "316": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615749063579-EnhanceCustomer.ts",
      "startLine": "23",
      "startCol": "5",
      "endLine": "25",
      "endCol": "5"
    },
    "317": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615749063579-EnhanceCustomer.ts",
      "startLine": "26",
      "startCol": "5",
      "endLine": "28",
      "endCol": "5"
    },
    "318": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615749063579-EnhanceCustomer.ts",
      "startLine": "29",
      "startCol": "5",
      "endLine": "31",
      "endCol": "5"
    },
    "319": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615961288134-MenuSettings.ts",
      "startLine": "9",
      "startCol": "27",
      "endLine": "9",
      "endCol": "63"
    },
    "320": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1615961288134-MenuSettings.ts",
      "startLine": "11",
      "startCol": "19",
      "endLine": "11",
      "endCol": "64"
    },
    "321": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "322": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "323": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "13",
      "startCol": "5",
      "endLine": "15",
      "endCol": "5"
    },
    "324": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "325": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "21",
      "endCol": "5"
    },
    "326": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "22",
      "startCol": "5",
      "endLine": "24",
      "endCol": "5"
    },
    "327": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "25",
      "startCol": "5",
      "endLine": "27",
      "endCol": "5"
    },
    "328": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "28",
      "startCol": "5",
      "endLine": "30",
      "endCol": "5"
    },
    "329": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "34",
      "startCol": "5",
      "endLine": "36",
      "endCol": "5"
    },
    "330": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "37",
      "startCol": "5",
      "endLine": "39",
      "endCol": "5"
    },
    "331": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "40",
      "startCol": "5",
      "endLine": "42",
      "endCol": "5"
    },
    "332": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "43",
      "startCol": "5",
      "endLine": "45",
      "endCol": "5"
    },
    "333": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "46",
      "startCol": "5",
      "endLine": "48",
      "endCol": "5"
    },
    "334": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "49",
      "startCol": "5",
      "endLine": "51",
      "endCol": "5"
    },
    "335": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "52",
      "startCol": "5",
      "endLine": "52",
      "endCol": "72"
    },
    "336": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1616228731111-UoM.ts",
      "startLine": "53",
      "startCol": "5",
      "endLine": "55",
      "endCol": "5"
    },
    "337": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "338": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "339": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "13",
      "startCol": "5",
      "endLine": "15",
      "endCol": "5"
    },
    "340": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "341": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "21",
      "endCol": "5"
    },
    "342": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "22",
      "startCol": "5",
      "endLine": "24",
      "endCol": "5"
    },
    "343": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "25",
      "startCol": "5",
      "endLine": "27",
      "endCol": "5"
    },
    "344": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "28",
      "startCol": "5",
      "endLine": "30",
      "endCol": "5"
    },
    "345": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "31",
      "startCol": "5",
      "endLine": "33",
      "endCol": "5"
    },
    "346": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "34",
      "startCol": "5",
      "endLine": "36",
      "endCol": "5"
    },
    "347": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "37",
      "startCol": "5",
      "endLine": "39",
      "endCol": "5"
    },
    "348": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "40",
      "startCol": "5",
      "endLine": "42",
      "endCol": "5"
    },
    "349": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "43",
      "startCol": "5",
      "endLine": "45",
      "endCol": "5"
    },
    "350": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "46",
      "startCol": "5",
      "endLine": "48",
      "endCol": "5"
    },
    "351": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "52",
      "startCol": "5",
      "endLine": "54",
      "endCol": "5"
    },
    "352": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "55",
      "startCol": "5",
      "endLine": "57",
      "endCol": "5"
    },
    "353": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "58",
      "startCol": "5",
      "endLine": "60",
      "endCol": "5"
    },
    "354": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "61",
      "startCol": "5",
      "endLine": "63",
      "endCol": "5"
    },
    "355": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "64",
      "startCol": "5",
      "endLine": "66",
      "endCol": "5"
    },
    "356": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "67",
      "startCol": "5",
      "endLine": "69",
      "endCol": "5"
    },
    "357": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "70",
      "startCol": "5",
      "endLine": "72",
      "endCol": "5"
    },
    "358": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "73",
      "startCol": "5",
      "endLine": "75",
      "endCol": "5"
    },
    "359": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "76",
      "startCol": "5",
      "endLine": "76",
      "endCol": "66"
    },
    "360": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "77",
      "startCol": "5",
      "endLine": "79",
      "endCol": "5"
    },
    "361": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "80",
      "startCol": "5",
      "endLine": "80",
      "endCol": "70"
    },
    "362": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts",
      "startLine": "81",
      "startCol": "5",
      "endLine": "81",
      "endCol": "73"
    },
    "363": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "364": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "365": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "13",
      "startCol": "5",
      "endLine": "15",
      "endCol": "5"
    },
    "366": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "367": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "21",
      "endCol": "5"
    },
    "368": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "22",
      "startCol": "5",
      "endLine": "24",
      "endCol": "5"
    },
    "369": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "25",
      "startCol": "5",
      "endLine": "27",
      "endCol": "5"
    },
    "370": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "28",
      "startCol": "5",
      "endLine": "30",
      "endCol": "5"
    },
    "371": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "31",
      "startCol": "5",
      "endLine": "33",
      "endCol": "5"
    },
    "372": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "34",
      "startCol": "5",
      "endLine": "36",
      "endCol": "5"
    },
    "373": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "37",
      "startCol": "5",
      "endLine": "39",
      "endCol": "5"
    },
    "374": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "40",
      "startCol": "5",
      "endLine": "42",
      "endCol": "5"
    },
    "375": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "43",
      "startCol": "5",
      "endLine": "45",
      "endCol": "5"
    },
    "376": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "49",
      "startCol": "5",
      "endLine": "51",
      "endCol": "5"
    },
    "377": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "52",
      "startCol": "5",
      "endLine": "54",
      "endCol": "5"
    },
    "378": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "55",
      "startCol": "5",
      "endLine": "57",
      "endCol": "5"
    },
    "379": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "58",
      "startCol": "5",
      "endLine": "60",
      "endCol": "5"
    },
    "380": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "61",
      "startCol": "5",
      "endLine": "63",
      "endCol": "5"
    },
    "381": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "64",
      "startCol": "5",
      "endLine": "66",
      "endCol": "5"
    },
    "382": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "67",
      "startCol": "5",
      "endLine": "69",
      "endCol": "5"
    },
    "383": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "70",
      "startCol": "5",
      "endLine": "72",
      "endCol": "5"
    },
    "384": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "73",
      "startCol": "5",
      "endLine": "75",
      "endCol": "5"
    },
    "385": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "76",
      "startCol": "5",
      "endLine": "78",
      "endCol": "5"
    },
    "386": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "79",
      "startCol": "5",
      "endLine": "81",
      "endCol": "5"
    },
    "387": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "82",
      "startCol": "5",
      "endLine": "84",
      "endCol": "5"
    },
    "388": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619015192340-ContactPersons.ts",
      "startLine": "85",
      "startCol": "5",
      "endLine": "85",
      "endCol": "66"
    },
    "389": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619448004419-ProductPriceCurrency.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "390": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619448004419-ProductPriceCurrency.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "391": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619448004419-ProductPriceCurrency.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "392": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619448004419-ProductPriceCurrency.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "21",
      "endCol": "5"
    },
    "393": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "394": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "395": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "13",
      "startCol": "5",
      "endLine": "15",
      "endCol": "5"
    },
    "396": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "397": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "21",
      "endCol": "5"
    },
    "398": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "22",
      "startCol": "5",
      "endLine": "24",
      "endCol": "5"
    },
    "399": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "28",
      "startCol": "5",
      "endLine": "30",
      "endCol": "5"
    },
    "400": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "31",
      "startCol": "5",
      "endLine": "33",
      "endCol": "5"
    },
    "401": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "34",
      "startCol": "5",
      "endLine": "36",
      "endCol": "5"
    },
    "402": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "37",
      "startCol": "5",
      "endLine": "39",
      "endCol": "5"
    },
    "403": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "40",
      "startCol": "5",
      "endLine": "42",
      "endCol": "5"
    },
    "404": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts",
      "startLine": "43",
      "startCol": "5",
      "endLine": "43",
      "endCol": "70"
    },
    "405": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "8",
      "startCol": "5",
      "endLine": "10",
      "endCol": "5"
    },
    "406": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "11",
      "startCol": "5",
      "endLine": "13",
      "endCol": "5"
    },
    "407": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "14",
      "startCol": "5",
      "endLine": "16",
      "endCol": "5"
    },
    "408": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "17",
      "startCol": "5",
      "endLine": "19",
      "endCol": "5"
    },
    "409": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "20",
      "startCol": "5",
      "endLine": "22",
      "endCol": "5"
    },
    "410": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "23",
      "startCol": "5",
      "endLine": "25",
      "endCol": "5"
    },
    "411": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "26",
      "startCol": "5",
      "endLine": "28",
      "endCol": "5"
    },
    "412": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "32",
      "startCol": "5",
      "endLine": "34",
      "endCol": "5"
    },
    "413": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "35",
      "startCol": "5",
      "endLine": "37",
      "endCol": "5"
    },
    "414": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "38",
      "startCol": "5",
      "endLine": "40",
      "endCol": "5"
    },
    "415": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "41",
      "startCol": "5",
      "endLine": "43",
      "endCol": "5"
    },
    "416": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "44",
      "startCol": "5",
      "endLine": "46",
      "endCol": "5"
    },
    "417": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "47",
      "startCol": "5",
      "endLine": "49",
      "endCol": "5"
    },
    "418": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts",
      "startLine": "50",
      "startCol": "5",
      "endLine": "50",
      "endCol": "70"
    },
    "419": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620224070916-EventLog.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "420": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620224070916-EventLog.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "421": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620224070916-EventLog.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "422": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620224070916-EventLog.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "19",
      "endCol": "61"
    },
    "423": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620291421007-Config.ts",
      "startLine": "7",
      "startCol": "5",
      "endLine": "9",
      "endCol": "5"
    },
    "424": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620291421007-Config.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "425": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620291421007-Config.ts",
      "startLine": "13",
      "startCol": "5",
      "endLine": "15",
      "endCol": "5"
    },
    "426": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620291421007-Config.ts",
      "startLine": "19",
      "startCol": "5",
      "endLine": "21",
      "endCol": "5"
    },
    "427": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620291421007-Config.ts",
      "startLine": "22",
      "startCol": "5",
      "endLine": "24",
      "endCol": "5"
    },
    "428": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620291421007-Config.ts",
      "startLine": "25",
      "startCol": "5",
      "endLine": "25",
      "endCol": "59"
    },
    "429": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620312048836-Attachment.ts",
      "startLine": "10",
      "startCol": "5",
      "endLine": "12",
      "endCol": "5"
    },
    "430": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620312048836-Attachment.ts",
      "startLine": "13",
      "startCol": "5",
      "endLine": "15",
      "endCol": "5"
    },
    "431": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620312048836-Attachment.ts",
      "startLine": "16",
      "startCol": "5",
      "endLine": "18",
      "endCol": "5"
    },
    "432": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620312048836-Attachment.ts",
      "startLine": "21",
      "startCol": "27",
      "endLine": "21",
      "endCol": "63"
    },
    "433": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620312048836-Attachment.ts",
      "startLine": "23",
      "startCol": "19",
      "endLine": "23",
      "endCol": "64"
    },
    "434": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620312048836-Attachment.ts",
      "startLine": "33",
      "startCol": "5",
      "endLine": "35",
      "endCol": "5"
    },
    "435": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/migrations/1620312048836-Attachment.ts",
      "startLine": "36",
      "startCol": "5",
      "endLine": "38",
      "endCol": "5"
    },
    "436": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/accounting.scheme.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "24",
      "endCol": "3"
    },
    "437": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/accounting.scheme.resolver.ts",
      "startLine": "36",
      "startCol": "3",
      "endLine": "41",
      "endCol": "3"
    },
    "438": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/attachment.resolver.ts",
      "startLine": "48",
      "startCol": "3",
      "endLine": "53",
      "endCol": "3"
    },
    "439": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/bank.resolver.ts",
      "startLine": "18",
      "startCol": "3",
      "endLine": "20",
      "endCol": "3"
    },
    "440": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/bank.resolver.ts",
      "startLine": "23",
      "startCol": "3",
      "endLine": "25",
      "endCol": "3"
    },
    "441": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/bank.resolver.ts",
      "startLine": "28",
      "startCol": "3",
      "endLine": "33",
      "endCol": "3"
    },
    "442": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/contact.person.company.relation.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "26",
      "endCol": "3"
    },
    "443": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/contact.person.company.relation.resolver.ts",
      "startLine": "29",
      "startCol": "3",
      "endLine": "36",
      "endCol": "3"
    },
    "444": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/contact.person.company.relation.resolver.ts",
      "startLine": "39",
      "startCol": "3",
      "endLine": "48",
      "endCol": "3"
    },
    "445": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/contact.person.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "24",
      "endCol": "3"
    },
    "446": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/contact.person.resolver.ts",
      "startLine": "27",
      "startCol": "3",
      "endLine": "29",
      "endCol": "3"
    },
    "447": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/contact.person.resolver.ts",
      "startLine": "32",
      "startCol": "3",
      "endLine": "37",
      "endCol": "3"
    },
    "448": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/country.resolver.ts",
      "startLine": "18",
      "startCol": "3",
      "endLine": "20",
      "endCol": "3"
    },
    "449": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/country.resolver.ts",
      "startLine": "29",
      "startCol": "3",
      "endLine": "34",
      "endCol": "3"
    },
    "450": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/currency.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "24",
      "endCol": "3"
    },
    "451": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/currency.resolver.ts",
      "startLine": "27",
      "startCol": "3",
      "endLine": "32",
      "endCol": "3"
    },
    "452": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.group.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "24",
      "endCol": "3"
    },
    "453": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.group.resolver.ts",
      "startLine": "27",
      "startCol": "3",
      "endLine": "29",
      "endCol": "3"
    },
    "454": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.group.resolver.ts",
      "startLine": "32",
      "startCol": "3",
      "endLine": "37",
      "endCol": "3"
    },
    "455": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.price.list.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "24",
      "endCol": "3"
    },
    "456": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.price.list.resolver.ts",
      "startLine": "27",
      "startCol": "3",
      "endLine": "29",
      "endCol": "3"
    },
    "457": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.price.list.resolver.ts",
      "startLine": "32",
      "startCol": "3",
      "endLine": "41",
      "endCol": "3"
    },
    "458": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.product.price.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "24",
      "endCol": "3"
    },
    "459": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.product.price.resolver.ts",
      "startLine": "27",
      "startCol": "3",
      "endLine": "32",
      "endCol": "3"
    },
    "460": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.product.price.resolver.ts",
      "startLine": "35",
      "startCol": "3",
      "endLine": "44",
      "endCol": "3"
    },
    "461": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.resolver.ts",
      "startLine": "34",
      "startCol": "3",
      "endLine": "36",
      "endCol": "3"
    },
    "462": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.resolver.ts",
      "startLine": "39",
      "startCol": "3",
      "endLine": "41",
      "endCol": "3"
    },
    "463": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.resolver.ts",
      "startLine": "44",
      "startCol": "3",
      "endLine": "59",
      "endCol": "3"
    },
    "464": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/resolvers/customer.resolver.ts",
      "startLine": "65",
      "startCol": "41",
      "endLine": "68",
      "endCol": "18"
    },
    "465": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/customer.resolver.ts",
      "startLine": "76",
      "startCol": "3",
      "endLine": "81",
      "endCol": "3"
    },
    "466": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/factoring.contract.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "26",
      "endCol": "3"
    },
    "467": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/factoring.contract.resolver.ts",
      "startLine": "29",
      "startCol": "3",
      "endLine": "31",
      "endCol": "3"
    },
    "468": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/factoring.contract.resolver.ts",
      "startLine": "34",
      "startCol": "3",
      "endLine": "43",
      "endCol": "3"
    },
    "469": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/factoring.provider.resolver.ts",
      "startLine": "23",
      "startCol": "3",
      "endLine": "25",
      "endCol": "3"
    },
    "470": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/factoring.provider.resolver.ts",
      "startLine": "28",
      "startCol": "3",
      "endLine": "39",
      "endCol": "3"
    },
    "471": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/factoring.provider.resolver.ts",
      "startLine": "42",
      "startCol": "3",
      "endLine": "44",
      "endCol": "3"
    },
    "472": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/factoring.provider.resolver.ts",
      "startLine": "47",
      "startCol": "3",
      "endLine": "56",
      "endCol": "3"
    },
    "473": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/resolvers/menu.resolver.ts",
      "startLine": "14",
      "startCol": "12",
      "endLine": "14",
      "endCol": "35"
    },
    "474": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/menu.resolver.ts",
      "startLine": "11",
      "startCol": "3",
      "endLine": "15",
      "endCol": "3"
    },
    "475": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/organization.resolver.ts",
      "startLine": "22",
      "startCol": "3",
      "endLine": "24",
      "endCol": "3"
    },
    "476": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/organization.resolver.ts",
      "startLine": "36",
      "startCol": "3",
      "endLine": "41",
      "endCol": "3"
    },
    "477": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/product.resolver.ts",
      "startLine": "18",
      "startCol": "3",
      "endLine": "20",
      "endCol": "3"
    },
    "478": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/product.resolver.ts",
      "startLine": "29",
      "startCol": "3",
      "endLine": "34",
      "endCol": "3"
    },
    "479": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/sales.invoice.resolver.ts",
      "startLine": "30",
      "startCol": "3",
      "endLine": "34",
      "endCol": "3"
    },
    "480": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/sales.invoice.resolver.ts",
      "startLine": "37",
      "startCol": "3",
      "endLine": "39",
      "endCol": "3"
    },
    "481": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/sales.invoice.resolver.ts",
      "startLine": "42",
      "startCol": "3",
      "endLine": "47",
      "endCol": "3"
    },
    "482": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/sales.invoice.resolver.ts",
      "startLine": "67",
      "startCol": "3",
      "endLine": "76",
      "endCol": "3"
    },
    "483": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/sales.invoice.resolver.ts",
      "startLine": "79",
      "startCol": "3",
      "endLine": "84",
      "endCol": "3"
    },
    "484": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/sales.invoice.resolver.ts",
      "startLine": "87",
      "startCol": "3",
      "endLine": "97",
      "endCol": "3"
    },
    "485": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/sales.invoice.resolver.ts",
      "startLine": "100",
      "startCol": "3",
      "endLine": "105",
      "endCol": "3"
    },
    "486": {
      "patternID": "pattern1",
      "file": "apps/api/src/app/resolvers/unit.of.measurement.resolver.ts",
      "startLine": "21",
      "startCol": "3",
      "endLine": "23",
      "endCol": "3"
    },
    "487": {
      "patternID": "pattern3",
      "file": "apps/api/src/app/support/everything.subscriber.ts",
      "startLine": "8",
      "startCol": "5",
      "endLine": "8",
      "endCol": "28"
    },
    "488": {
      "patternID": "pattern3",
      "file": "apps/api/src/auth/lib/authentication.service.ts",
      "startLine": "41",
      "startCol": "27",
      "endLine": "41",
      "endCol": "57"
    },
    "489": {
      "patternID": "pattern3",
      "file": "apps/api/src/auth/lib/authentication.service.ts",
      "startLine": "49",
      "startCol": "24",
      "endLine": "55",
      "endCol": "20"
    },
    "490": {
      "patternID": "pattern1",
      "file": "apps/api/src/auth/lib/authentication.service.ts",
      "startLine": "39",
      "startCol": "3",
      "endLine": "74",
      "endCol": "3"
    },
    "491": {
      "patternID": "pattern3",
      "file": "apps/api/src/main.ts",
      "startLine": "12",
      "startCol": "15",
      "endLine": "12",
      "endCol": "49"
    },
    "492": {
      "patternID": "pattern3",
      "file": "apps/api/src/main.ts",
      "startLine": "15",
      "startCol": "3",
      "endLine": "17",
      "endCol": "4"
    },
    "493": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/address.service.ts",
      "startLine": "47",
      "startCol": "23",
      "endLine": "47",
      "endCol": "47"
    },
    "494": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/attachment.service.ts",
      "startLine": "56",
      "startCol": "5",
      "endLine": "56",
      "endCol": "32"
    },
    "495": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/attachment.service.ts",
      "startLine": "55",
      "startCol": "3",
      "endLine": "58",
      "endCol": "3"
    },
    "496": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/attachment.service.ts",
      "startLine": "61",
      "startCol": "5",
      "endLine": "61",
      "endCol": "32"
    },
    "497": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/attachment.service.ts",
      "startLine": "60",
      "startCol": "3",
      "endLine": "63",
      "endCol": "3"
    },
    "498": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/attachment.service.ts",
      "startLine": "65",
      "startCol": "5",
      "endLine": "65",
      "endCol": "32"
    },
    "499": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/attachment.service.ts",
      "startLine": "66",
      "startCol": "12",
      "endLine": "66",
      "endCol": "70"
    },
    "500": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/attachment.service.ts",
      "startLine": "64",
      "startCol": "3",
      "endLine": "67",
      "endCol": "3"
    },
    "501": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "39",
      "startCol": "5",
      "endLine": "42",
      "endCol": "6"
    },
    "502": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "34",
      "startCol": "20",
      "endLine": "42",
      "endCol": "6"
    },
    "503": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "48",
      "startCol": "5",
      "endLine": "48",
      "endCol": "73"
    },
    "504": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "44",
      "startCol": "16",
      "endLine": "48",
      "endCol": "73"
    },
    "505": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "60",
      "startCol": "5",
      "endLine": "60",
      "endCol": "70"
    },
    "506": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "56",
      "startCol": "18",
      "endLine": "60",
      "endCol": "70"
    },
    "507": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "80",
      "startCol": "9",
      "endLine": "80",
      "endCol": "33"
    },
    "508": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "92",
      "startCol": "12",
      "endLine": "92",
      "endCol": "79"
    },
    "509": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "62",
      "startCol": "3",
      "endLine": "93",
      "endCol": "3"
    },
    "510": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "101",
      "startCol": "12",
      "endLine": "101",
      "endCol": "71"
    },
    "511": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "94",
      "startCol": "13",
      "endLine": "102",
      "endCol": "3"
    },
    "512": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "108",
      "startCol": "5",
      "endLine": "108",
      "endCol": "66"
    },
    "513": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/base.entity.service.ts",
      "startLine": "116",
      "startCol": "9",
      "endLine": "119",
      "endCol": "6"
    },
    "514": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/currency.rate.service.ts",
      "startLine": "58",
      "startCol": "12",
      "endLine": "69",
      "endCol": "15"
    },
    "515": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/currency.rate.service.ts",
      "startLine": "31",
      "startCol": "32",
      "endLine": "70",
      "endCol": "3"
    },
    "516": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/customer.price.list.service.ts",
      "startLine": "46",
      "startCol": "9",
      "endLine": "48",
      "endCol": "10"
    },
    "517": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/customer.price.list.service.ts",
      "startLine": "91",
      "startCol": "12",
      "endLine": "109",
      "endCol": "16"
    },
    "518": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/customer.price.list.service.ts",
      "startLine": "84",
      "startCol": "3",
      "endLine": "110",
      "endCol": "3"
    },
    "519": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/customer.product.price.service.ts",
      "startLine": "48",
      "startCol": "32",
      "endLine": "51",
      "endCol": "5"
    },
    "520": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/document.numbering.service.ts",
      "startLine": "19",
      "startCol": "19",
      "endLine": "22",
      "endCol": "6"
    },
    "521": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/document.numbering.service.ts",
      "startLine": "25",
      "startCol": "5",
      "endLine": "25",
      "endCol": "29"
    },
    "522": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/document.numbering.service.ts",
      "startLine": "40",
      "startCol": "5",
      "endLine": "40",
      "endCol": "52"
    },
    "523": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/factoring.provider.service.spec.ts",
      "startLine": "60",
      "startCol": "17",
      "endLine": "68",
      "endCol": "16"
    },
    "524": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/mail.service.ts",
      "startLine": "59",
      "startCol": "7",
      "endLine": "70",
      "endCol": "8"
    },
    "525": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/mail.service.ts",
      "startLine": "78",
      "startCol": "9",
      "endLine": "78",
      "endCol": "39"
    },
    "526": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/organization.service.spec.ts",
      "startLine": "75",
      "startCol": "17",
      "endLine": "84",
      "endCol": "16"
    },
    "527": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/reports.service.ts",
      "startLine": "333",
      "startCol": "22",
      "endLine": "333",
      "endCol": "40"
    },
    "528": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/reports.service.ts",
      "startLine": "334",
      "startCol": "34",
      "endLine": "334",
      "endCol": "60"
    },
    "529": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/reports.service.ts",
      "startLine": "353",
      "startCol": "31",
      "endLine": "353",
      "endCol": "48"
    },
    "530": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/reports.service.ts",
      "startLine": "367",
      "startCol": "25",
      "endLine": "367",
      "endCol": "46"
    },
    "531": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.line.service.spec.ts",
      "startLine": "146",
      "startCol": "17",
      "endLine": "155",
      "endCol": "16"
    },
    "532": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.spec.ts",
      "startLine": "264",
      "startCol": "17",
      "endLine": "266",
      "endCol": "16"
    },
    "533": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.spec.ts",
      "startLine": "415",
      "startCol": "49",
      "endLine": "415",
      "endCol": "58"
    },
    "534": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.spec.ts",
      "startLine": "478",
      "startCol": "22",
      "endLine": "480",
      "endCol": "15"
    },
    "535": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "150",
      "startCol": "8",
      "endLine": "153",
      "endCol": "7"
    },
    "536": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "454",
      "startCol": "17",
      "endLine": "454",
      "endCol": "51"
    },
    "537": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "557",
      "startCol": "22",
      "endLine": "564",
      "endCol": "16"
    },
    "538": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "573",
      "startCol": "7",
      "endLine": "573",
      "endCol": "33"
    },
    "539": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "591",
      "startCol": "9",
      "endLine": "591",
      "endCol": "34"
    },
    "540": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "608",
      "startCol": "19",
      "endLine": "608",
      "endCol": "71"
    },
    "541": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "680",
      "startCol": "29",
      "endLine": "730",
      "endCol": "5"
    },
    "542": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "739",
      "startCol": "12",
      "endLine": "753",
      "endCol": "19"
    },
    "543": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/sales.invoice.service.ts",
      "startLine": "738",
      "startCol": "3",
      "endLine": "754",
      "endCol": "3"
    },
    "544": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/tax.service.ts",
      "startLine": "37",
      "startCol": "5",
      "endLine": "39",
      "endCol": "6"
    },
    "545": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/tax.service.ts",
      "startLine": "36",
      "startCol": "16",
      "endLine": "39",
      "endCol": "6"
    },
    "546": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/tax.service.ts",
      "startLine": "41",
      "startCol": "5",
      "endLine": "43",
      "endCol": "6"
    },
    "547": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/tax.service.ts",
      "startLine": "40",
      "startCol": "20",
      "endLine": "43",
      "endCol": "6"
    },
    "548": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/user.service.spec.ts",
      "startLine": "8",
      "startCol": "17",
      "endLine": "10",
      "endCol": "16"
    },
    "549": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/user.service.ts",
      "startLine": "46",
      "startCol": "19",
      "endLine": "48",
      "endCol": "36"
    },
    "550": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/user.service.ts",
      "startLine": "59",
      "startCol": "19",
      "endLine": "61",
      "endCol": "61"
    },
    "551": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/user.service.ts",
      "startLine": "64",
      "startCol": "3",
      "endLine": "70",
      "endCol": "3"
    },
    "552": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/user.service.ts",
      "startLine": "84",
      "startCol": "9",
      "endLine": "84",
      "endCol": "40"
    },
    "553": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/user.service.ts",
      "startLine": "102",
      "startCol": "5",
      "endLine": "102",
      "endCol": "30"
    },
    "554": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/user.service.ts",
      "startLine": "109",
      "startCol": "5",
      "endLine": "109",
      "endCol": "36"
    },
    "555": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/user.service.ts",
      "startLine": "144",
      "startCol": "29",
      "endLine": "144",
      "endCol": "59"
    },
    "556": {
      "patternID": "pattern1",
      "file": "apps/api/src/model/lib/user.service.ts",
      "startLine": "131",
      "startCol": "3",
      "endLine": "159",
      "endCol": "3"
    },
    "557": {
      "patternID": "pattern3",
      "file": "apps/api/src/model/lib/xml.service.spec.ts",
      "startLine": "8",
      "startCol": "17",
      "endLine": "10",
      "endCol": "16"
    },
    "558": {
      "patternID": "pattern3",
      "file": "apps/api/test/app.e2e-spec.ts",
      "startLine": "9",
      "startCol": "42",
      "endLine": "11",
      "endCol": "16"
    },
    "559": {
      "patternID": "pattern3",
      "file": "apps/api/test/app.e2e-spec.ts",
      "startLine": "14",
      "startCol": "5",
      "endLine": "14",
      "endCol": "20"
    },
    "560": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/attachment.ts",
      "startLine": "48",
      "startCol": "22",
      "endLine": "54",
      "endCol": "16"
    },
    "561": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/attachment.ts",
      "startLine": "49",
      "startCol": "13",
      "endLine": "53",
      "endCol": "14"
    },
    "562": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/customer.ts",
      "startLine": "61",
      "startCol": "24",
      "endLine": "65",
      "endCol": "10"
    },
    "563": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/customer.ts",
      "startLine": "66",
      "startCol": "26",
      "endLine": "66",
      "endCol": "44"
    },
    "564": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/customer.ts",
      "startLine": "76",
      "startCol": "13",
      "endLine": "82",
      "endCol": "14"
    },
    "565": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/salesInvoice.ts",
      "startLine": "70",
      "startCol": "24",
      "endLine": "75",
      "endCol": "10"
    },
    "566": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/salesInvoice.ts",
      "startLine": "106",
      "startCol": "9",
      "endLine": "111",
      "endCol": "10"
    },
    "567": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/salesInvoice.ts",
      "startLine": "116",
      "startCol": "22",
      "endLine": "122",
      "endCol": "16"
    },
    "568": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/core/salesInvoice.ts",
      "startLine": "117",
      "startCol": "13",
      "endLine": "121",
      "endCol": "14"
    },
    "569": {
      "patternID": "pattern3",
      "file": "clients/admin/src/lib/support/testHelpers.ts",
      "startLine": "21",
      "startCol": "24",
      "endLine": "21",
      "endCol": "45"
    },
    "570": {
      "patternID": "pattern3",
      "file": "clients/mobile/app/lib/apollo.ts",
      "startLine": "29",
      "startCol": "20",
      "endLine": "31",
      "endCol": "14"
    }
  },
  "files": {
    "apps/api/src/model/lib/user.service.spec.ts": "import { Test } from '@nestjs/testing';\nimport { UserService } from './user.service';\n\ndescribe('UserService', () => {\n  let service: UserService;\n\n  beforeAll(async () => {\n    const app = await Test.createTestingModule({\n      providers: [UserService],\n    }).compile();\n\n    service = app.get<UserService>(UserService);\n  });\n\n  describe('UserService', () => {\n    it('works for null', async () => {\n      await service.handleLogin(null, null);\n    });\n  });\n});\n",
    "node_modules/@nestjs/testing/testing-module.builder.js": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TestingModuleBuilder = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst application_config_1 = require(\"@nestjs/core/application-config\");\nconst container_1 = require(\"@nestjs/core/injector/container\");\nconst instance_loader_1 = require(\"@nestjs/core/injector/instance-loader\");\nconst scanner_1 = require(\"@nestjs/core/scanner\");\nconst testing_logger_service_1 = require(\"./services/testing-logger.service\");\nconst testing_module_1 = require(\"./testing-module\");\nclass TestingModuleBuilder {\n    constructor(metadataScanner, metadata) {\n        this.applicationConfig = new application_config_1.ApplicationConfig();\n        this.container = new container_1.NestContainer(this.applicationConfig);\n        this.overloadsMap = new Map();\n        this.instanceLoader = new instance_loader_1.InstanceLoader(this.container);\n        this.scanner = new scanner_1.DependenciesScanner(this.container, metadataScanner, this.applicationConfig);\n        this.module = this.createModule(metadata);\n    }\n    setLogger(testingLogger) {\n        this.testingLogger = testingLogger;\n        return this;\n    }\n    overridePipe(typeOrToken) {\n        return this.override(typeOrToken, false);\n    }\n    overrideFilter(typeOrToken) {\n        return this.override(typeOrToken, false);\n    }\n    overrideGuard(typeOrToken) {\n        return this.override(typeOrToken, false);\n    }\n    overrideInterceptor(typeOrToken) {\n        return this.override(typeOrToken, false);\n    }\n    overrideProvider(typeOrToken) {\n        return this.override(typeOrToken, true);\n    }\n    async compile() {\n        this.applyLogger();\n        await this.scanner.scan(this.module);\n        this.applyOverloadsMap();\n        await this.instanceLoader.createInstancesOfDependencies();\n        this.scanner.applyApplicationProviders();\n        const root = this.getRootModule();\n        return new testing_module_1.TestingModule(this.container, [], root, this.applicationConfig);\n    }\n    override(typeOrToken, isProvider) {\n        const addOverload = (options) => {\n            this.overloadsMap.set(typeOrToken, Object.assign(Object.assign({}, options), { isProvider }));\n            return this;\n        };\n        return this.createOverrideByBuilder(addOverload);\n    }\n    createOverrideByBuilder(add) {\n        return {\n            useValue: value => add({ useValue: value }),\n            useFactory: (options) => add(Object.assign(Object.assign({}, options), { useFactory: options.factory })),\n            useClass: metatype => add({ useClass: metatype }),\n        };\n    }\n    applyOverloadsMap() {\n        [...this.overloadsMap.entries()].forEach(([item, options]) => {\n            this.container.replace(item, options);\n        });\n    }\n    getRootModule() {\n        const modules = this.container.getModules().values();\n        return modules.next().value;\n    }\n    createModule(metadata) {\n        class RootTestModule {\n        }\n        common_1.Module(metadata)(RootTestModule);\n        return RootTestModule;\n    }\n    applyLogger() {\n        common_1.Logger.overrideLogger(this.testingLogger || new testing_logger_service_1.TestingLogger());\n    }\n}\nexports.TestingModuleBuilder = TestingModuleBuilder;\n",
    "node_modules/jest-jasmine2/build/queueRunner.js": "'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = queueRunner;\n\nvar _jestUtil = require('jest-util');\n\nvar _PCancelable = _interopRequireDefault(require('./PCancelable'));\n\nvar _pTimeout = _interopRequireDefault(require('./pTimeout'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Promise = global[Symbol.for('jest-native-promise')] || global.Promise;\n\nfunction queueRunner(options) {\n  const token = new _PCancelable.default((onCancel, resolve) => {\n    onCancel(resolve);\n  });\n\n  const mapper = ({fn, timeout, initError = new Error()}) => {\n    let promise = new Promise(resolve => {\n      const next = function (...args) {\n        const err = args[0];\n\n        if (err) {\n          options.fail.apply(null, args);\n        }\n\n        resolve();\n      };\n\n      next.fail = function (...args) {\n        options.fail.apply(null, args);\n        resolve();\n      };\n\n      try {\n        fn.call(options.userContext, next);\n      } catch (e) {\n        options.onException(e);\n        resolve();\n      }\n    });\n    promise = Promise.race([promise, token]);\n\n    if (!timeout) {\n      return promise;\n    }\n\n    const timeoutMs = timeout();\n    return (0, _pTimeout.default)(\n      promise,\n      timeoutMs,\n      options.clearTimeout,\n      options.setTimeout,\n      () => {\n        initError.message =\n          'Timeout - Async callback was not invoked within the ' +\n          (0, _jestUtil.formatTime)(timeoutMs) +\n          ' timeout specified by jest.setTimeout.';\n        initError.stack = initError.message + initError.stack;\n        options.onException(initError);\n      }\n    );\n  };\n\n  const result = options.queueableFns.reduce(\n    (promise, fn) => promise.then(() => mapper(fn)),\n    Promise.resolve()\n  );\n  return {\n    cancel: token.cancel.bind(token),\n    catch: result.catch.bind(result),\n    then: result.then.bind(result)\n  };\n}\n",
    "node_modules/jest-runner/build/runTest.js": "'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = runTest;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sourceMapSupport() {\n  const data = _interopRequireDefault(require('source-map-support'));\n\n  _sourceMapSupport = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestConfig() {\n  const data = require('jest-config');\n\n  _jestConfig = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction docblock() {\n  const data = _interopRequireWildcard(require('jest-docblock'));\n\n  docblock = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestLeakDetector() {\n  const data = _interopRequireDefault(require('jest-leak-detector'));\n\n  _jestLeakDetector = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestRuntime() {\n  const data = _interopRequireDefault(require('jest-runtime'));\n\n  _jestRuntime = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction freezeConsole(testConsole, config) {\n  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here\n  testConsole._log = function fakeConsolePush(_type, message) {\n    const error = new (_jestUtil().ErrorWithStack)(\n      `${_chalk().default.red(\n        `${_chalk().default.bold(\n          'Cannot log after tests are done.'\n        )} Did you forget to wait for something async in your test?`\n      )}\\nAttempted to log \"${message}\".`,\n      fakeConsolePush\n    );\n    const formattedError = (0, _jestMessageUtil().formatExecError)(\n      error,\n      config,\n      {\n        noStackTrace: false\n      },\n      undefined,\n      true\n    );\n    process.stderr.write('\\n' + formattedError + '\\n'); // TODO: set exit code in Jest 25\n    // process.exitCode = 1;\n  };\n} // Keeping the core of \"runTest\" as a separate function (as \"runTestInternal\")\n// is key to be able to detect memory leaks. Since all variables are local to\n// the function, when \"runTestInternal\" finishes its execution, they can all be\n// freed, UNLESS something else is leaking them (and that's why we can detect\n// the leak!).\n//\n// If we had all the code in a single function, we should manually nullify all\n// references to verify if there is a leak, which is not maintainable and error\n// prone. That's why \"runTestInternal\" CANNOT be inlined inside \"runTest\".\n\nasync function runTestInternal(\n  path,\n  globalConfig,\n  config,\n  resolver,\n  context,\n  sendMessageToJest\n) {\n  const testSource = fs().readFileSync(path, 'utf8');\n  const docblockPragmas = docblock().parse(docblock().extract(testSource));\n  const customEnvironment = docblockPragmas['jest-environment'];\n  let testEnvironment = config.testEnvironment;\n\n  if (customEnvironment) {\n    if (Array.isArray(customEnvironment)) {\n      throw new Error(\n        `You can only define a single test environment through docblocks, got \"${customEnvironment.join(\n          ', '\n        )}\"`\n      );\n    }\n\n    testEnvironment = (0, _jestConfig().getTestEnvironment)({\n      ...config,\n      testEnvironment: customEnvironment\n    });\n  }\n\n  const TestEnvironment = (0, _jestUtil().interopRequireDefault)(\n    require(testEnvironment)\n  ).default;\n  const testFramework = (0, _jestUtil().interopRequireDefault)(\n    process.env.JEST_CIRCUS === '1' // eslint-disable-next-line import/no-extraneous-dependencies\n      ? require('jest-circus/runner')\n      : require(config.testRunner)\n  ).default;\n  const Runtime = (0, _jestUtil().interopRequireDefault)(\n    config.moduleLoader ? require(config.moduleLoader) : require('jest-runtime')\n  ).default;\n  const consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;\n\n  const consoleFormatter = (type, message) =>\n    (0, _console().getConsoleOutput)(\n      config.cwd,\n      !!globalConfig.verbose, // 4 = the console call is buried 4 stack frames deep\n      _console().BufferedConsole.write([], type, message, 4),\n      config,\n      globalConfig\n    );\n\n  let testConsole;\n\n  if (globalConfig.silent) {\n    testConsole = new (_console().NullConsole)(\n      consoleOut,\n      consoleOut,\n      consoleFormatter\n    );\n  } else if (globalConfig.verbose) {\n    testConsole = new (_console().CustomConsole)(\n      consoleOut,\n      consoleOut,\n      consoleFormatter\n    );\n  } else {\n    testConsole = new (_console().BufferedConsole)();\n  }\n\n  const environment = new TestEnvironment(config, {\n    console: testConsole,\n    docblockPragmas,\n    testPath: path\n  });\n  const leakDetector = config.detectLeaks\n    ? new (_jestLeakDetector().default)(environment)\n    : null;\n  const cacheFS = {\n    [path]: testSource\n  };\n  (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);\n  const runtime = new Runtime(\n    config,\n    environment,\n    resolver,\n    cacheFS,\n    {\n      changedFiles:\n        context === null || context === void 0 ? void 0 : context.changedFiles,\n      collectCoverage: globalConfig.collectCoverage,\n      collectCoverageFrom: globalConfig.collectCoverageFrom,\n      collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom,\n      coverageProvider: globalConfig.coverageProvider,\n      sourcesRelatedToTestsInChangedFiles:\n        context === null || context === void 0\n          ? void 0\n          : context.sourcesRelatedToTestsInChangedFiles\n    },\n    path\n  );\n  const start = Date.now();\n\n  for (const path of config.setupFiles) {\n    var _runtime$unstable_sho;\n\n    // TODO: remove ? in Jest 26\n    const esm =\n      (_runtime$unstable_sho = runtime.unstable_shouldLoadAsEsm) === null ||\n      _runtime$unstable_sho === void 0\n        ? void 0\n        : _runtime$unstable_sho.call(runtime, path);\n\n    if (esm) {\n      await runtime.unstable_importModule(path);\n    } else {\n      runtime.requireModule(path);\n    }\n  }\n\n  const sourcemapOptions = {\n    environment: 'node',\n    handleUncaughtExceptions: false,\n    retrieveSourceMap: source => {\n      const sourceMaps = runtime.getSourceMaps();\n      const sourceMapSource = sourceMaps && sourceMaps[source];\n\n      if (sourceMapSource) {\n        try {\n          return {\n            map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),\n            url: source\n          };\n        } catch {}\n      }\n\n      return null;\n    }\n  }; // For tests\n\n  runtime\n    .requireInternalModule(\n      require.resolve('source-map-support'),\n      'source-map-support'\n    )\n    .install(sourcemapOptions); // For runtime errors\n\n  _sourceMapSupport().default.install(sourcemapOptions);\n\n  if (\n    environment.global &&\n    environment.global.process &&\n    environment.global.process.exit\n  ) {\n    const realExit = environment.global.process.exit;\n\n    environment.global.process.exit = function exit(...args) {\n      const error = new (_jestUtil().ErrorWithStack)(\n        `process.exit called with \"${args.join(', ')}\"`,\n        exit\n      );\n      const formattedError = (0, _jestMessageUtil().formatExecError)(\n        error,\n        config,\n        {\n          noStackTrace: false\n        },\n        undefined,\n        true\n      );\n      process.stderr.write(formattedError);\n      return realExit(...args);\n    };\n  } // if we don't have `getVmContext` on the env skip coverage\n\n  const collectV8Coverage =\n    globalConfig.coverageProvider === 'v8' &&\n    typeof environment.getVmContext === 'function';\n\n  try {\n    await environment.setup();\n    let result;\n\n    try {\n      if (collectV8Coverage) {\n        await runtime.collectV8Coverage();\n      }\n\n      result = await testFramework(\n        globalConfig,\n        config,\n        environment,\n        runtime,\n        path,\n        sendMessageToJest\n      );\n    } catch (err) {\n      // Access stack before uninstalling sourcemaps\n      err.stack;\n      throw err;\n    } finally {\n      if (collectV8Coverage) {\n        await runtime.stopCollectingV8Coverage();\n      }\n    }\n\n    freezeConsole(testConsole, config);\n    const testCount =\n      result.numPassingTests +\n      result.numFailingTests +\n      result.numPendingTests +\n      result.numTodoTests;\n    const end = Date.now();\n    const testRuntime = end - start;\n    result.perfStats = {\n      end,\n      runtime: testRuntime,\n      slow: testRuntime / 1000 > config.slowTestThreshold,\n      start\n    };\n    result.testFilePath = path;\n    result.console = testConsole.getBuffer();\n    result.skipped = testCount === result.numPendingTests;\n    result.displayName = config.displayName;\n    const coverage = runtime.getAllCoverageInfoCopy();\n\n    if (coverage) {\n      const coverageKeys = Object.keys(coverage);\n\n      if (coverageKeys.length) {\n        result.coverage = coverage;\n      }\n    }\n\n    if (collectV8Coverage) {\n      const v8Coverage = runtime.getAllV8CoverageInfoCopy();\n\n      if (v8Coverage && v8Coverage.length > 0) {\n        result.v8Coverage = v8Coverage;\n      }\n    }\n\n    if (globalConfig.logHeapUsage) {\n      if (global.gc) {\n        global.gc();\n      }\n\n      result.memoryUsage = process.memoryUsage().heapUsed;\n    } // Delay the resolution to allow log messages to be output.\n\n    return new Promise(resolve => {\n      setImmediate(() =>\n        resolve({\n          leakDetector,\n          result\n        })\n      );\n    });\n  } finally {\n    var _runtime$teardown;\n\n    await environment.teardown(); // TODO: this function might be missing, remove ? in Jest 26\n\n    (_runtime$teardown = runtime.teardown) === null ||\n    _runtime$teardown === void 0\n      ? void 0\n      : _runtime$teardown.call(runtime);\n\n    _sourceMapSupport().default.resetRetrieveHandlers();\n  }\n}\n\nasync function runTest(\n  path,\n  globalConfig,\n  config,\n  resolver,\n  context,\n  sendMessageToJest\n) {\n  const {leakDetector, result} = await runTestInternal(\n    path,\n    globalConfig,\n    config,\n    resolver,\n    context,\n    sendMessageToJest\n  );\n\n  if (leakDetector) {\n    // We wanna allow a tiny but time to pass to allow last-minute cleanup\n    await new Promise(resolve => setTimeout(resolve, 100)); // Resolve leak detector, outside the \"runTestInternal\" closure.\n\n    result.leaks = await leakDetector.isLeaking();\n  } else {\n    result.leaks = false;\n  }\n\n  return result;\n}\n",
    "node_modules/@nestjs/core/injector/instance-loader.js": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstanceLoader = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst messages_1 = require(\"../helpers/messages\");\nconst injector_1 = require(\"./injector\");\nconst internal_core_module_1 = require(\"./internal-core-module\");\nclass InstanceLoader {\n    constructor(container) {\n        this.container = container;\n        this.injector = new injector_1.Injector();\n        this.logger = new common_1.Logger(InstanceLoader.name, true);\n    }\n    async createInstancesOfDependencies() {\n        const modules = this.container.getModules();\n        this.createPrototypes(modules);\n        await this.createInstances(modules);\n    }\n    createPrototypes(modules) {\n        modules.forEach(module => {\n            this.createPrototypesOfProviders(module);\n            this.createPrototypesOfInjectables(module);\n            this.createPrototypesOfControllers(module);\n        });\n    }\n    async createInstances(modules) {\n        await Promise.all([...modules.values()].map(async (module) => {\n            await this.createInstancesOfProviders(module);\n            await this.createInstancesOfInjectables(module);\n            await this.createInstancesOfControllers(module);\n            const { name } = module.metatype;\n            this.isModuleWhitelisted(name) &&\n                this.logger.log(messages_1.MODULE_INIT_MESSAGE `${name}`);\n        }));\n    }\n    createPrototypesOfProviders(module) {\n        const { providers } = module;\n        providers.forEach(wrapper => this.injector.loadPrototype(wrapper, providers));\n    }\n    async createInstancesOfProviders(module) {\n        const { providers } = module;\n        const wrappers = [...providers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadProvider(item, module)));\n    }\n    createPrototypesOfControllers(module) {\n        const { controllers } = module;\n        controllers.forEach(wrapper => this.injector.loadPrototype(wrapper, controllers));\n    }\n    async createInstancesOfControllers(module) {\n        const { controllers } = module;\n        const wrappers = [...controllers.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadController(item, module)));\n    }\n    createPrototypesOfInjectables(module) {\n        const { injectables } = module;\n        injectables.forEach(wrapper => this.injector.loadPrototype(wrapper, injectables));\n    }\n    async createInstancesOfInjectables(module) {\n        const { injectables } = module;\n        const wrappers = [...injectables.values()];\n        await Promise.all(wrappers.map(item => this.injector.loadInjectable(item, module)));\n    }\n    isModuleWhitelisted(name) {\n        return name !== internal_core_module_1.InternalCoreModule.name;\n    }\n}\nexports.InstanceLoader = InstanceLoader;\n",
    "node_modules/@nestjs/core/injector/injector.js": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Injector = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst runtime_exception_1 = require(\"../errors/exceptions/runtime.exception\");\nconst undefined_dependency_exception_1 = require(\"../errors/exceptions/undefined-dependency.exception\");\nconst unknown_dependencies_exception_1 = require(\"../errors/exceptions/unknown-dependencies.exception\");\nconst constants_2 = require(\"./constants\");\nconst inquirer_1 = require(\"./inquirer\");\nconst instance_wrapper_1 = require(\"./instance-wrapper\");\nclass Injector {\n    loadPrototype({ name }, collection, contextId = constants_2.STATIC_CONTEXT) {\n        if (!collection) {\n            return;\n        }\n        const target = collection.get(name);\n        const instance = target.createPrototype(contextId);\n        if (instance) {\n            const wrapper = new instance_wrapper_1.InstanceWrapper(Object.assign(Object.assign({}, target), { instance }));\n            collection.set(name, wrapper);\n        }\n    }\n    async loadInstance(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const inquirerId = this.getInquirerId(inquirer);\n        const instanceHost = wrapper.getInstanceByContextId(contextId, inquirerId);\n        if (instanceHost.isPending) {\n            return instanceHost.donePromise;\n        }\n        const done = this.applyDoneHook(instanceHost);\n        const { name, inject } = wrapper;\n        const targetWrapper = collection.get(name);\n        if (shared_utils_1.isUndefined(targetWrapper)) {\n            throw new runtime_exception_1.RuntimeException();\n        }\n        if (instanceHost.isResolved) {\n            return done();\n        }\n        const callback = async (instances) => {\n            const properties = await this.resolveProperties(wrapper, moduleRef, inject, contextId, wrapper, inquirer);\n            const instance = await this.instantiateClass(instances, wrapper, targetWrapper, contextId, inquirer);\n            this.applyProperties(instance, properties);\n            done();\n        };\n        await this.resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId, wrapper, inquirer);\n    }\n    async loadMiddleware(wrapper, collection, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype } = wrapper;\n        const targetWrapper = collection.get(metatype.name);\n        if (!shared_utils_1.isUndefined(targetWrapper.instance)) {\n            return;\n        }\n        targetWrapper.instance = Object.create(metatype.prototype);\n        await this.loadInstance(wrapper, collection, moduleRef, contextId, inquirer || wrapper);\n    }\n    async loadController(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT) {\n        const controllers = moduleRef.controllers;\n        await this.loadInstance(wrapper, controllers, moduleRef, contextId, wrapper);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    async loadInjectable(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const injectables = moduleRef.injectables;\n        await this.loadInstance(wrapper, injectables, moduleRef, contextId, inquirer);\n    }\n    async loadProvider(wrapper, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const providers = moduleRef.providers;\n        await this.loadInstance(wrapper, providers, moduleRef, contextId, inquirer);\n        await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\n    }\n    applyDoneHook(wrapper) {\n        let done;\n        wrapper.donePromise = new Promise((resolve, reject) => {\n            done = resolve;\n        });\n        wrapper.isPending = true;\n        return done;\n    }\n    async resolveConstructorParams(wrapper, moduleRef, inject, callback, contextId = constants_2.STATIC_CONTEXT, inquirer, parentInquirer) {\n        const inquirerId = this.getInquirerId(inquirer);\n        const metadata = wrapper.getCtorMetadata();\n        if (metadata && contextId !== constants_2.STATIC_CONTEXT) {\n            const deps = await this.loadCtorMetadata(metadata, contextId, inquirer, parentInquirer);\n            return callback(deps);\n        }\n        const dependencies = shared_utils_1.isNil(inject)\n            ? this.reflectConstructorParams(wrapper.metatype)\n            : inject;\n        const optionalDependenciesIds = shared_utils_1.isNil(inject)\n            ? this.reflectOptionalParams(wrapper.metatype)\n            : [];\n        let isResolved = true;\n        const resolveParam = async (param, index) => {\n            try {\n                if (this.isInquirer(param, parentInquirer)) {\n                    return parentInquirer && parentInquirer.instance;\n                }\n                const paramWrapper = await this.resolveSingleParam(wrapper, param, { index, dependencies }, moduleRef, contextId, inquirer, index);\n                const instanceHost = paramWrapper.getInstanceByContextId(contextId, inquirerId);\n                if (!instanceHost.isResolved && !paramWrapper.forwardRef) {\n                    isResolved = false;\n                }\n                return instanceHost === null || instanceHost === void 0 ? void 0 : instanceHost.instance;\n            }\n            catch (err) {\n                const isOptional = optionalDependenciesIds.includes(index);\n                if (!isOptional) {\n                    throw err;\n                }\n                return undefined;\n            }\n        };\n        const instances = await Promise.all(dependencies.map(resolveParam));\n        isResolved && (await callback(instances));\n    }\n    reflectConstructorParams(type) {\n        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || [];\n        const selfParams = this.reflectSelfParams(type);\n        selfParams.forEach(({ index, param }) => (paramtypes[index] = param));\n        return paramtypes;\n    }\n    reflectOptionalParams(type) {\n        return Reflect.getMetadata(constants_1.OPTIONAL_DEPS_METADATA, type) || [];\n    }\n    reflectSelfParams(type) {\n        return Reflect.getMetadata(constants_1.SELF_DECLARED_DEPS_METADATA, type) || [];\n    }\n    async resolveSingleParam(wrapper, param, dependencyContext, moduleRef, contextId = constants_2.STATIC_CONTEXT, inquirer, keyOrIndex) {\n        if (shared_utils_1.isUndefined(param)) {\n            throw new undefined_dependency_exception_1.UndefinedDependencyException(wrapper.name, dependencyContext, moduleRef);\n        }\n        const token = this.resolveParamToken(wrapper, param);\n        return this.resolveComponentInstance(moduleRef, shared_utils_1.isFunction(token) ? token.name : token, dependencyContext, wrapper, contextId, inquirer, keyOrIndex);\n    }\n    resolveParamToken(wrapper, param) {\n        if (!param.forwardRef) {\n            return param;\n        }\n        wrapper.forwardRef = true;\n        return param.forwardRef();\n    }\n    async resolveComponentInstance(moduleRef, name, dependencyContext, wrapper, contextId = constants_2.STATIC_CONTEXT, inquirer, keyOrIndex) {\n        const providers = moduleRef.providers;\n        const instanceWrapper = await this.lookupComponent(providers, moduleRef, Object.assign(Object.assign({}, dependencyContext), { name }), wrapper, contextId, inquirer, keyOrIndex);\n        return this.resolveComponentHost(moduleRef, instanceWrapper, contextId, inquirer);\n    }\n    async resolveComponentHost(moduleRef, instanceWrapper, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const inquirerId = this.getInquirerId(inquirer);\n        const instanceHost = instanceWrapper.getInstanceByContextId(contextId, inquirerId);\n        if (!instanceHost.isResolved && !instanceWrapper.forwardRef) {\n            await this.loadProvider(instanceWrapper, moduleRef, contextId, inquirer);\n        }\n        else if (!instanceHost.isResolved &&\n            instanceWrapper.forwardRef &&\n            (contextId !== constants_2.STATIC_CONTEXT || !!inquirerId)) {\n            /**\n             * When circular dependency has been detected between\n             * either request/transient providers, we have to asynchronously\n             * resolve instance host for a specific contextId or inquirer, to ensure\n             * that eventual lazily created instance will be merged with the prototype\n             * instantiated beforehand.\n             */\n            instanceHost.donePromise &&\n                instanceHost.donePromise.then(() => this.loadProvider(instanceWrapper, moduleRef, contextId, inquirer));\n        }\n        if (instanceWrapper.async) {\n            const host = instanceWrapper.getInstanceByContextId(contextId, inquirerId);\n            host.instance = await host.instance;\n            instanceWrapper.setInstanceByContextId(contextId, host, inquirerId);\n        }\n        return instanceWrapper;\n    }\n    async lookupComponent(providers, moduleRef, dependencyContext, wrapper, contextId = constants_2.STATIC_CONTEXT, inquirer, keyOrIndex) {\n        const { name } = dependencyContext;\n        if (wrapper && wrapper.name === name) {\n            throw new unknown_dependencies_exception_1.UnknownDependenciesException(wrapper.name, dependencyContext, moduleRef);\n        }\n        if (providers.has(name)) {\n            const instanceWrapper = providers.get(name);\n            this.addDependencyMetadata(keyOrIndex, wrapper, instanceWrapper);\n            return instanceWrapper;\n        }\n        return this.lookupComponentInParentModules(dependencyContext, moduleRef, wrapper, contextId, inquirer, keyOrIndex);\n    }\n    async lookupComponentInParentModules(dependencyContext, moduleRef, wrapper, contextId = constants_2.STATIC_CONTEXT, inquirer, keyOrIndex) {\n        const instanceWrapper = await this.lookupComponentInImports(moduleRef, dependencyContext.name, wrapper, [], contextId, inquirer, keyOrIndex);\n        if (shared_utils_1.isNil(instanceWrapper)) {\n            throw new unknown_dependencies_exception_1.UnknownDependenciesException(wrapper.name, dependencyContext, moduleRef);\n        }\n        return instanceWrapper;\n    }\n    async lookupComponentInImports(moduleRef, name, wrapper, moduleRegistry = [], contextId = constants_2.STATIC_CONTEXT, inquirer, keyOrIndex, isTraversing) {\n        let instanceWrapperRef = null;\n        const imports = moduleRef.imports || new Set();\n        const identity = (item) => item;\n        let children = [...imports.values()].filter(identity);\n        if (isTraversing) {\n            const contextModuleExports = moduleRef.exports;\n            children = children.filter(child => contextModuleExports.has(child.metatype && child.metatype.name));\n        }\n        for (const relatedModule of children) {\n            if (moduleRegistry.includes(relatedModule.id)) {\n                continue;\n            }\n            moduleRegistry.push(relatedModule.id);\n            const { providers, exports } = relatedModule;\n            if (!exports.has(name) || !providers.has(name)) {\n                const instanceRef = await this.lookupComponentInImports(relatedModule, name, wrapper, moduleRegistry, contextId, inquirer, keyOrIndex, true);\n                if (instanceRef) {\n                    this.addDependencyMetadata(keyOrIndex, wrapper, instanceRef);\n                    return instanceRef;\n                }\n                continue;\n            }\n            instanceWrapperRef = providers.get(name);\n            this.addDependencyMetadata(keyOrIndex, wrapper, instanceWrapperRef);\n            const inquirerId = this.getInquirerId(inquirer);\n            const instanceHost = instanceWrapperRef.getInstanceByContextId(contextId, inquirerId);\n            if (!instanceHost.isResolved && !instanceWrapperRef.forwardRef) {\n                await this.loadProvider(instanceWrapperRef, relatedModule, contextId, wrapper);\n                break;\n            }\n        }\n        return instanceWrapperRef;\n    }\n    async resolveProperties(wrapper, moduleRef, inject, contextId = constants_2.STATIC_CONTEXT, inquirer, parentInquirer) {\n        if (!shared_utils_1.isNil(inject)) {\n            return [];\n        }\n        const metadata = wrapper.getPropertiesMetadata();\n        if (metadata && contextId !== constants_2.STATIC_CONTEXT) {\n            return this.loadPropertiesMetadata(metadata, contextId, inquirer);\n        }\n        const properties = this.reflectProperties(wrapper.metatype);\n        const instances = await Promise.all(properties.map(async (item) => {\n            try {\n                const dependencyContext = {\n                    key: item.key,\n                    name: item.name,\n                };\n                if (this.isInquirer(item.name, parentInquirer)) {\n                    return parentInquirer && parentInquirer.instance;\n                }\n                const paramWrapper = await this.resolveSingleParam(wrapper, item.name, dependencyContext, moduleRef, contextId, inquirer, item.key);\n                if (!paramWrapper) {\n                    return undefined;\n                }\n                const inquirerId = this.getInquirerId(inquirer);\n                const instanceHost = paramWrapper.getInstanceByContextId(contextId, inquirerId);\n                return instanceHost.instance;\n            }\n            catch (err) {\n                if (!item.isOptional) {\n                    throw err;\n                }\n                return undefined;\n            }\n        }));\n        return properties.map((item, index) => (Object.assign(Object.assign({}, item), { instance: instances[index] })));\n    }\n    reflectProperties(type) {\n        const properties = Reflect.getMetadata(constants_1.PROPERTY_DEPS_METADATA, type) || [];\n        const optionalKeys = Reflect.getMetadata(constants_1.OPTIONAL_PROPERTY_DEPS_METADATA, type) || [];\n        return properties.map((item) => (Object.assign(Object.assign({}, item), { name: item.type, isOptional: optionalKeys.includes(item.key) })));\n    }\n    applyProperties(instance, properties) {\n        if (!shared_utils_1.isObject(instance)) {\n            return undefined;\n        }\n        iterare_1.iterate(properties)\n            .filter(item => !shared_utils_1.isNil(item.instance))\n            .forEach(item => (instance[item.key] = item.instance));\n    }\n    async instantiateClass(instances, wrapper, targetMetatype, contextId = constants_2.STATIC_CONTEXT, inquirer) {\n        const { metatype, inject } = wrapper;\n        const inquirerId = this.getInquirerId(inquirer);\n        const instanceHost = targetMetatype.getInstanceByContextId(contextId, inquirerId);\n        const isStatic = wrapper.isStatic(contextId, inquirer);\n        const isInRequestScope = wrapper.isInRequestScope(contextId, inquirer);\n        const isLazyTransient = wrapper.isLazyTransient(contextId, inquirer);\n        const isExplicitlyRequested = wrapper.isExplicitlyRequested(contextId, inquirer);\n        const isInContext = isStatic || isInRequestScope || isLazyTransient || isExplicitlyRequested;\n        if (shared_utils_1.isNil(inject) && isInContext) {\n            instanceHost.instance = wrapper.forwardRef\n                ? Object.assign(instanceHost.instance, new metatype(...instances))\n                : new metatype(...instances);\n        }\n        else if (isInContext) {\n            const factoryReturnValue = targetMetatype.metatype(...instances);\n            instanceHost.instance = await factoryReturnValue;\n        }\n        instanceHost.isResolved = true;\n        return instanceHost.instance;\n    }\n    async loadPerContext(instance, moduleRef, collection, ctx, wrapper) {\n        if (!wrapper) {\n            const providerCtor = instance.constructor;\n            const injectionToken = (providerCtor && providerCtor.name) ||\n                providerCtor;\n            wrapper = collection.get(injectionToken);\n        }\n        await this.loadInstance(wrapper, collection, moduleRef, ctx, wrapper);\n        await this.loadEnhancersPerContext(wrapper, ctx, wrapper);\n        const host = wrapper.getInstanceByContextId(ctx, wrapper.id);\n        return host && host.instance;\n    }\n    async loadEnhancersPerContext(wrapper, ctx, inquirer) {\n        const enhancers = wrapper.getEnhancersMetadata() || [];\n        const loadEnhancer = (item) => {\n            const hostModule = item.host;\n            return this.loadInstance(item, hostModule.injectables, hostModule, ctx, inquirer);\n        };\n        await Promise.all(enhancers.map(loadEnhancer));\n    }\n    async loadCtorMetadata(metadata, contextId, inquirer, parentInquirer) {\n        const hosts = await Promise.all(metadata.map(async (item) => this.resolveScopedComponentHost(item, contextId, inquirer, parentInquirer)));\n        const inquirerId = this.getInquirerId(inquirer);\n        return hosts.map(item => item.getInstanceByContextId(contextId, inquirerId).instance);\n    }\n    async loadPropertiesMetadata(metadata, contextId, inquirer) {\n        const dependenciesHosts = await Promise.all(metadata.map(async ({ wrapper: item, key }) => ({\n            key,\n            host: await this.resolveComponentHost(item.host, item, contextId, inquirer),\n        })));\n        const inquirerId = this.getInquirerId(inquirer);\n        return dependenciesHosts.map(({ key, host }) => ({\n            key,\n            name: key,\n            instance: host.getInstanceByContextId(contextId, inquirerId).instance,\n        }));\n    }\n    getInquirerId(inquirer) {\n        return inquirer && inquirer.id;\n    }\n    resolveScopedComponentHost(item, contextId, inquirer, parentInquirer) {\n        return this.isInquirerRequest(item, parentInquirer)\n            ? parentInquirer\n            : this.resolveComponentHost(item.host, item, contextId, inquirer);\n    }\n    isInquirerRequest(item, parentInquirer) {\n        return item.isTransient && item.name === inquirer_1.INQUIRER && parentInquirer;\n    }\n    isInquirer(param, parentInquirer) {\n        return param === inquirer_1.INQUIRER && parentInquirer;\n    }\n    addDependencyMetadata(keyOrIndex, hostWrapper, instanceWrapper) {\n        shared_utils_1.isString(keyOrIndex)\n            ? hostWrapper.addPropertiesMetadata(keyOrIndex, instanceWrapper)\n            : hostWrapper.addCtorMetadata(keyOrIndex, instanceWrapper);\n    }\n}\nexports.Injector = Injector;\n",
    "node_modules/jest-jasmine2/build/jasmineAsyncInstall.js": "'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = jasmineAsyncInstall;\n\nvar _co = _interopRequireDefault(require('co'));\n\nvar _isGeneratorFn = _interopRequireDefault(require('is-generator-fn'));\n\nvar _throat = _interopRequireDefault(require('throat'));\n\nvar _isError = _interopRequireDefault(require('./isError'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Promise = global[Symbol.for('jest-native-promise')] || global.Promise;\n\nfunction isPromise(obj) {\n  return obj && typeof obj.then === 'function';\n}\n\nconst doneFnNoop = () => {};\n\ndoneFnNoop.fail = () => {};\n\nfunction promisifyLifeCycleFunction(originalFn, env) {\n  return function (fn, timeout) {\n    if (!fn) {\n      // @ts-expect-error: missing fn arg is handled by originalFn\n      return originalFn.call(env);\n    }\n\n    const hasDoneCallback = typeof fn === 'function' && fn.length > 0;\n\n    if (hasDoneCallback) {\n      // Jasmine will handle it\n      return originalFn.call(env, fn, timeout);\n    }\n\n    const extraError = new Error(); // Without this line v8 stores references to all closures\n    // in the stack in the Error object. This line stringifies the stack\n    // property to allow garbage-collecting objects on the stack\n    // https://crbug.com/v8/7142\n\n    extraError.stack = extraError.stack; // We make *all* functions async and run `done` right away if they\n    // didn't return a promise.\n\n    const asyncJestLifecycle = function (done) {\n      const wrappedFn = (0, _isGeneratorFn.default)(fn)\n        ? _co.default.wrap(fn)\n        : fn;\n      const returnValue = wrappedFn.call({}, doneFnNoop);\n\n      if (isPromise(returnValue)) {\n        returnValue.then(done.bind(null, null), error => {\n          const {isError: checkIsError, message} = (0, _isError.default)(error);\n\n          if (message) {\n            extraError.message = message;\n          }\n\n          done.fail(checkIsError ? error : extraError);\n        });\n      } else {\n        done();\n      }\n    };\n\n    return originalFn.call(env, asyncJestLifecycle, timeout);\n  };\n} // Similar to promisifyLifeCycleFunction but throws an error\n// when the return value is neither a Promise nor `undefined`\n\nfunction promisifyIt(originalFn, env, jasmine) {\n  return function (specName, fn, timeout) {\n    if (!fn) {\n      // @ts-expect-error: missing fn arg is handled by originalFn\n      const spec = originalFn.call(env, specName);\n      spec.pend('not implemented');\n      return spec;\n    }\n\n    const hasDoneCallback = fn.length > 0;\n\n    if (hasDoneCallback) {\n      return originalFn.call(env, specName, fn, timeout);\n    }\n\n    const extraError = new Error(); // Without this line v8 stores references to all closures\n    // in the stack in the Error object. This line stringifies the stack\n    // property to allow garbage-collecting objects on the stack\n    // https://crbug.com/v8/7142\n\n    extraError.stack = extraError.stack;\n\n    const asyncJestTest = function (done) {\n      const wrappedFn = (0, _isGeneratorFn.default)(fn)\n        ? _co.default.wrap(fn)\n        : fn;\n      const returnValue = wrappedFn.call({}, doneFnNoop);\n\n      if (isPromise(returnValue)) {\n        returnValue.then(done.bind(null, null), error => {\n          const {isError: checkIsError, message} = (0, _isError.default)(error);\n\n          if (message) {\n            extraError.message = message;\n          }\n\n          if (jasmine.Spec.isPendingSpecException(error)) {\n            env.pending(message);\n            done();\n          } else {\n            done.fail(checkIsError ? error : extraError);\n          }\n        });\n      } else if (returnValue === undefined) {\n        done();\n      } else {\n        done.fail(\n          new Error(\n            'Jest: `it` and `test` must return either a Promise or undefined.'\n          )\n        );\n      }\n    };\n\n    return originalFn.call(env, specName, asyncJestTest, timeout);\n  };\n}\n\nfunction makeConcurrent(originalFn, env, mutex) {\n  const concurrentFn = function (specName, fn, timeout) {\n    let promise = Promise.resolve();\n    const spec = originalFn.call(env, specName, () => promise, timeout);\n\n    if (env != null && !env.specFilter(spec)) {\n      return spec;\n    }\n\n    try {\n      promise = mutex(() => {\n        const promise = fn();\n\n        if (isPromise(promise)) {\n          return promise;\n        }\n\n        throw new Error(\n          `Jest: concurrent test \"${spec.getFullName()}\" must return a Promise.`\n        );\n      });\n    } catch (error) {\n      promise = Promise.reject(error);\n    }\n\n    return spec;\n  }; // each is binded after the function is made concurrent, so for now it is made noop\n\n  concurrentFn.each = () => () => {};\n\n  return concurrentFn;\n}\n\nfunction jasmineAsyncInstall(globalConfig, global) {\n  const jasmine = global.jasmine;\n  const mutex = (0, _throat.default)(globalConfig.maxConcurrency);\n  const env = jasmine.getEnv();\n  env.it = promisifyIt(env.it, env, jasmine);\n  env.fit = promisifyIt(env.fit, env, jasmine);\n\n  global.it.concurrent = (env => {\n    const concurrent = makeConcurrent(env.it, env, mutex);\n    concurrent.only = makeConcurrent(env.fit, env, mutex);\n    concurrent.skip = makeConcurrent(env.xit, env, mutex);\n    return concurrent;\n  })(env);\n\n  global.fit.concurrent = makeConcurrent(env.fit, env, mutex);\n  env.afterAll = promisifyLifeCycleFunction(env.afterAll, env);\n  env.afterEach = promisifyLifeCycleFunction(env.afterEach, env);\n  env.beforeAll = promisifyLifeCycleFunction(env.beforeAll, env);\n  env.beforeEach = promisifyLifeCycleFunction(env.beforeEach, env);\n}\n",
    "absorb/SMCloudStore/backblaze-b2/src/B2Upload.ts": "'use strict'\n\nimport {IsReadableStream, ReadChunkFromStream} from '@smcloudstore/core/dist/StreamUtils'\nimport {WaitPromise} from '@smcloudstore/core/dist/Utils'\nimport {Readable, Stream} from 'stream'\n\n/**\n * Manages the upload of objects to Backblaze B2.\n *\n * This supports using Buffers and strings with the \"simple APIs\". It supports streams too, using either the \"simple APIs\" if the stream is less than `chunkSize`, or the large file APIs otherwise. The selection happens automatically.\n */\nclass B2Upload {\n    /**\n     * Size of each chunk that is uploaded when using B2's large file APIs, in bytes. Minimum value is 5MB; default is 9MB.\n     *\n     * Note: there seems to be a bug in the current version of the backblaze-b2 package when the request body upload is > 10 MB, because of a downstream dependency on axios@0.17; once backblaze-b2 updates its dependency on axios, this might be fixed.\n     */\n    static chunkSize = 9 * 1024 * 1024\n\n    /** Backblaze recommends retrying all uploads at least two times (up to five) in case of errors, with an incrementing delay. We're retrying all uploads 3 times by default. */\n    static retries = 3\n\n    /** Instance of the B2 client library */\n    protected client: any\n\n    /** Id of the target bucket */\n    protected bucketId: string\n\n    /** Path where to store the object, inside the container */\n    protected path: string\n\n    /** Data to upload */\n    protected data: Stream|string|Buffer\n\n    /** Metadata for the object */\n    protected metadata: any\n\n    /** Length (in bytes) of the input data */\n    protected length: number\n\n    /**\n     * Initializes a new B2Upload class\n     *\n     * @param client - Instance of the B2 client library. It's expected authorization to be completed already, so auth data is stored in the library.\n     * @param bucketId - Id of the target bucket\n     * @param path - Path where to store the object, inside the container\n     * @param data - Data to upload\n     * @param metadata - Metadata for the object\n     * @param length - Length (in bytes) of the input data\n     */\n    constructor(client: any, bucketId: string, path: string, data: Stream|string|Buffer, metadata?: any, length?: number) {\n        // Store all arguments as properties\n        this.client = client\n        this.bucketId = bucketId\n        this.path = path\n        this.data = data\n        this.metadata = metadata || {}\n        this.length = length || 0\n    }\n\n    /**\n     * Start the upload of the object\n     *\n     * @returns Promise that resolves when the object has been uploaded\n     * @async\n     */\n    start(): Promise<void> {\n        // Check if we have a string or a Buffer, and proceed straight to the upload phase\n        if (typeof this.data == 'string' || (typeof this.data == 'object' && Buffer.isBuffer(this.data))) {\n            // Convert strings to Buffers\n            if (typeof this.data == 'string') {\n                this.data = Buffer.from(this.data as string, 'utf8')\n            }\n\n            // Ensure length (in bytes) is less than 5GB\n            if (this.data.byteLength > 5 * 1024 * 1024 * 1024) {\n                throw Error('Maximum size for strings and Buffers is 5 GB')\n            }\n\n            // Upload the file, returning the Promise\n            return this.putFile()\n        }\n\n        // At this point, we should only have streams\n        if (!IsReadableStream(this.data)) {\n            throw Error('putObject requires a Stream, a Buffer or a string')\n        }\n\n        // First, ensure that chunkSize is at least 5MB\n        if (B2Upload.chunkSize < 5 * 1024 * 1024) {\n            throw Error('chunkSize must be at least 5MB')\n        }\n\n        // Peek the first chunk from the stream (note this returns a Promise)\n        return ReadChunkFromStream(this.data as Readable, B2Upload.chunkSize + 1, true)\n            .then((firstChunk: Buffer) => {\n                // If we don't have a length argument specified, get the length of the first chunk\n                if (!this.length) {\n                    if (!firstChunk || !firstChunk.byteLength) {\n                        throw Error('First chunk read from the stream has zero length')\n                    }\n\n                    this.length = firstChunk.byteLength\n                }\n\n                // Check if the length is not longer than chunkSize: if it is, just upload the Buffer as a single file\n                // While B2 large file APIs support files that are at least 5 MB + 1 byte, we are splitting the data into chunkSize chunks, so there's no point in using the more complex API in case it's smaller\n                if (this.length <= B2Upload.chunkSize) {\n                    // Returns a Promise\n                    return this.putFile(firstChunk)\n                }\n                else {\n                    // If we're still here, then we need to upload the file using the large file APIs\n                    // Returns a Promise\n                    return this.putLargeFile()\n                }\n            })\n    }\n\n    /**\n     * Uploads a single file, when data is a Buffer or string.\n     *\n     * @param data - Data to upload, as Buffer. If not specified, will use `this.data`\n     * @returns Promise that resolves when the object has been uploaded\n     * @async\n     */\n    private putFile(data?: Buffer): Promise<any> {\n        // If we are not passed a Buffer, use this.data\n        if (!data) {\n            data = this.data as Buffer\n        }\n\n        // Ensure that data is a Buffer\n        if (!data || typeof data != 'object' || !Buffer.isBuffer(data)) {\n            throw Error('Argument data must be a Buffer')\n        }\n\n        // Counter for re-trying uploads if there's an error\n        let retryCounter = 0\n\n        const doUpload = () => {\n            // First, get the upload url and upload authorization token\n            return this.client.getUploadUrl(this.bucketId)\n            // Then upload the file\n            .then((response) => {\n                if (!response || !response.data || !response.data.authorizationToken || !response.data.uploadUrl) {\n                    throw Error('Invalid response when requesting the upload url and upload authorization token')\n                }\n\n                // Request args\n                const requestArgs = {\n                    data: data,\n                    filename: this.path,\n                    info: {} as any,\n                    mime: 'application/octet-stream',\n                    uploadAuthToken: response.data.authorizationToken,\n                    uploadUrl: response.data.uploadUrl\n                }\n\n                // Metadata\n                if (this.metadata) {\n                    // Add custom headers\n                    // Maximum 10 headers, and they can only contain [A-Za-z0-9]\n                    // If headers don't start with 'X-Bz-Info-', the prefix will be added\n                    let i = 0\n                    for (const key in this.metadata) {\n                        if (!this.metadata.hasOwnProperty(key)) {\n                            continue\n                        }\n\n                        // Content-Type header has a special treatment\n                        if (key && key.toLowerCase() == 'content-type') {\n                            requestArgs.mime = this.metadata[key]\n                        }\n                        else {\n                            // We can't have more than 10 headers\n                            if (i == 10) {\n                                throw Error('Cannot send more than 10 custom headers')\n                            }\n\n                            // Ensure the key is valid\n                            if (!key.match('^[A-Za-z0-9-]+$')) {\n                                throw Error('Invalid header format: must be A-Za-z0-9')\n                            }\n\n                            // Check if the prefix is there already\n                            if (key.substr(0, 10) != 'X-Bz-Info-') {\n                                requestArgs.info['X-Bz-Info-' + key] = this.metadata[key]\n                            }\n                            else {\n                                requestArgs.info[key] = this.metadata[key]\n                            }\n\n                            // Increment the counter\n                            i++\n                        }\n                    }\n                }\n\n                // Send the request\n                return this.client.uploadFile(requestArgs)\n            })\n            .catch((err) => {\n                if (retryCounter < B2Upload.retries) {\n                    retryCounter++\n                    // Before retrying, wait for an increasing delay\n                    return WaitPromise((retryCounter + 1) * 500)\n                        .then(() => {\n                            return doUpload()\n                        })\n                }\n                else {\n                    // Let the error bubble up\n                    throw err\n                }\n            })\n        }\n        return doUpload()\n    }\n\n    /**\n     * Uploads a Readable Stream.\n     *\n     * @param stream - Readable Stream containing the data to upload\n     * @returns Promise that resolves when the object has been uploaded\n     * @async\n     */\n    private putLargeFile(stream?: Readable): Promise<any> {\n        // If we are not passed a stream, use this.data\n        if (!stream) {\n            stream = this.data as Readable\n        }\n        // Ensure stream is a Readable Stream\n        if (!IsReadableStream(stream)) {\n            throw Error('Argument stream must be a Readable Stream')\n        }\n\n        // Add a listener to understand when the stream ends\n        let streamEnded = false\n        stream.on('end', () => {\n            streamEnded = true\n        })\n\n        // Will contain fileId\n        let fileId = null\n\n        // Returns a chunk at a time\n        const readChunk = (partNumber: number, hashes: string[]): Promise<{fileId: string, hashes: string[]}> => {\n            // If the stream has ended, return\n            if (streamEnded) {\n                return Promise.resolve({fileId: fileId, hashes: hashes})\n            }\n\n            // Returns a Promise\n            return ReadChunkFromStream(stream, B2Upload.chunkSize)\n                .then((data: Buffer) => {\n                    // If we have no data, we reached the end of the stream\n                    if (!data) {\n                        return {fileId: fileId, hashes: hashes}\n                    }\n                    else {\n                        return this.putPart(fileId, partNumber, data)\n                            .then((response) => {\n                                // Check response\n                                if (!response || !response.data) {\n                                    throw Error('Invalid response when uploading a part')\n                                }\n                                if (!response.data.fileId || response.data.fileId != fileId) {\n                                    throw Error('fileId for uploaded part does not match')\n                                }\n                                if (response.data.partNumber === undefined || response.data.partNumber != partNumber) {\n                                    throw Error('partNumber for uploaded part does not match')\n                                }\n                                if (!response.data.contentLength) {\n                                    throw Error('Invalid contentLength of uploaded part')\n                                }\n                                if (!response.data.contentSha1) {\n                                    throw Error('Invalid contentSha1 of uploaded part')\n                                }\n\n                                // Add the SHA1 hash to the list\n                                hashes.push(response.data.contentSha1)\n\n                                // Read the next chunk\n                                return readChunk(partNumber + 1, hashes)\n                            })\n                    }\n                })\n        }\n\n        // Start processing the file\n        return Promise.resolve()\n            // First step: request the fileId\n            .then(() => {\n                let contentType = 'application/octet-stream'\n\n                // Metadata\n                // When using the large file API, we can't add custom headers, so we're only looking for Content-Type (case-insensitive)\n                if (this.metadata) {\n                    for (const key in this.metadata) {\n                        if (!this.metadata.hasOwnProperty(key)) {\n                            continue\n                        }\n\n                        const keyLowerCase = key.toLowerCase()\n                        if (keyLowerCase == 'content-type') {\n                            contentType = this.metadata[key]\n                            break\n                        }\n                    }\n                }\n\n                return this.client.startLargeFile({\n                    bucketId: this.bucketId,\n                    contentType: contentType,\n                    fileName: this.path\n                })\n            })\n            // Second step: upload all parts\n            .then((response) => {\n                if (!response || !response.data || !response.data.fileId) {\n                    throw Error('Invalid response when requesting the file id')\n                }\n\n                fileId = response.data.fileId as string\n\n                // Read from stream into chunks of chunkSize\n                // partNumber starts from 1\n                // Pass an empty array where all the SHA1 hashes are collected\n                return readChunk(1, [])\n            })\n            // Last: commit the file\n            .then((result) => {\n                return this.client.finishLargeFile({\n                    fileId: result.fileId,\n                    partSha1Array: result.hashes\n                })\n            })\n            // In case of errors, if we have a fileId, remove the incomplete upload\n            .catch((err) => {\n                // In all situations, just re-throw the error as callback\n                const cb = () => {\n                    throw err\n                }\n\n                if (fileId) {\n                    return this.client.cancelLargeFile({fileId: fileId})\n                        .then(cb, cb)\n                }\n                else {\n                    cb()\n                }\n            })\n    }\n\n    /**\n     * Uploads a single part of a large file.\n     *\n     * @param fileId - ID of the large file that is being uploaded\n     * @param partNumber - Number of the part, starting from 1\n     * @param data - Data to upload, in a Buffer\n     * @returns Promise that resolves when the part has been uploaded.\n     * @async\n     */\n    private putPart(fileId: string, partNumber: number, data: Buffer): Promise<any> {\n        // Backblaze recommends retrying at least two times (up to five) in case of errors, with an incrementing delay. We're retrying all uploads 3 times\n        let retryCounter = 0\n\n        const doUpload = () => {\n            // First, get the upload part url and upload authorization token\n            return this.client.getUploadPartUrl({fileId: fileId})\n            .then((response) => {\n                if (!response || !response.data || !response.data.authorizationToken || !response.data.uploadUrl) {\n                    throw Error('Invalid response when requesting the upload part url and upload authorization token')\n                }\n\n                // Upload the part\n                return this.client.uploadPart({\n                    data: data,\n                    partNumber: partNumber,\n                    uploadAuthToken: response.data.authorizationToken,\n                    uploadUrl: response.data.uploadUrl\n                })\n            })\n            .catch((err) => {\n                if (retryCounter < B2Upload.retries) {\n                    retryCounter++\n                    // Before retrying, wait for an increasing delay\n                    return WaitPromise((retryCounter + 1) * 500)\n                        .then(() => {\n                            return doUpload()\n                        })\n                }\n                else {\n                    // Let the error bubble up\n                    throw err\n                }\n            })\n        }\n        return doUpload()\n    }\n}\n\nexport = B2Upload\n",
    "absorb/SMCloudStore/backblaze-b2/src/BackblazeB2Provider.ts": "'use strict'\n\nimport {ListItemObject, ListItemPrefix, ListResults, PutObjectOptions, StorageProvider} from '@smcloudstore/core/dist/StorageProvider'\nimport {Stream} from 'stream'\nimport B2Upload = require('./B2Upload')\n// tslint:disable-next-line:no-var-requires\nconst B2 = require('backblaze-b2') as any\n\n/**\n * Connection options for a Backblaze B2 provider.\n */\ninterface BackblazeB2ConnectionOptions {\n    /** Account Id */\n    accountId: string\n    /** Application key (secret key) */\n    applicationKey: string\n}\n\n/**\n * Options passed when creating a container\n */\ninterface BackblazeB2CreateContainerOptions {\n    /** Determine access level for all files in the container. Defaults to 'private' if not specified */\n    access?: 'public' | 'private'\n}\n\n/** Dictionary of options used when putting an object. Many providers will extend this. */\ninterface BackblazeB2PutObjectOptions extends PutObjectOptions {\n    /** When passing a stream as `data` object, being able to specify the length of the data allows for faster uploads; this argument is ignored if `data` is not a Stream object */\n    length?: number\n}\n\n/**\n * Client to interact with Backblaze B2 cloud storage.\n */\nclass BackblazeB2Provider extends StorageProvider {\n    /** Specifies for how long (in ms) to keep BucketId data in cache. Set to 0 to disable caching. Default is 15 minutes. */\n    static bucketIdCacheDuration = 900000\n\n    protected _client: any\n    private _isAuthorized: boolean\n    private _bucketIdCache: {[s: string]: {result: string, time: number}}\n\n    /**\n     * Initializes a new client to interact with Backblaze B2.\n     * \n     * @param connection - Dictionary with connection options.\n     */\n    constructor(connection: BackblazeB2ConnectionOptions) {\n        if (!connection || !Object.keys(connection).length) {\n            throw new Error('Connection argument is empty')\n        }\n\n        super(connection)\n\n        // Authorization for B2 is asynchronous, so will be executed on the first async call\n        this._isAuthorized = false\n\n        // Provider name\n        this._provider = 'backblaze-b2'\n\n        // Initialize the bucket ID cache\n        this._bucketIdCache = {}\n\n        // The B2 library will validate the connection object\n        this._client = new B2(connection)\n    }\n\n    /**\n     * Create a container (\"bucket\") on the server.\n     * \n     * @param container - Name of the container\n     * @param options - Dictionary with options for creating the container, including the access level\n     * @returns Promise that resolves once the container has been created. The promise doesn't contain any meaningful return value.\n     * @async\n     */\n    createContainer(container: string, options?: BackblazeB2CreateContainerOptions): Promise<void> {\n        const access = (options && options.access && options.access == 'public')\n            ? 'allPublic'\n            : 'allPrivate'\n\n        // Ensure we are authorized, then perform the request\n        return this._ensureAuthorized()\n            .then(() => this._client.createBucket(container, access))\n    }\n\n    /**\n     * Check if a container exists.\n     * \n     * @param container - Name of the container\n     * @returns Promises that resolves with a boolean indicating if the container exists.\n     * @async\n     */\n    isContainer(container: string): Promise<boolean> {\n        // There's no method in the B2 APIs to get a single bucket, so list all buckets and look for the one we're interested in\n        return this.listContainers()\n            .then((list) => {\n                return list.indexOf(container) >= 0\n            })\n    }\n\n    /**\n     * Create a container (\"bucket\") on the server if it doesn't already exist.\n     * \n     * @param container - Name of the container\n     * @param options - Dictionary with options for creating the container, including the access level\n     * @returns Promise that resolves once the container has been created\n     * @async\n     */\n    ensureContainer(container: string, options?: BackblazeB2CreateContainerOptions): Promise<void> {\n        return this.isContainer(container).then((exists) => {\n            if (!exists) {\n                return this.createContainer(container)\n            }\n        })\n    }\n\n    /**\n     * Lists all containers belonging to the user\n     * \n     * @returns Promise that resolves with an array of all the containers\n     * @async\n     */\n    listContainers(): Promise<string[]> {\n        // Ensure we are authorized, then perform the request\n        return this._ensureAuthorized()\n            .then(() => this._client.listBuckets())\n            .then((response) => {\n                if (!response || !response.data || !response.data.buckets || !Array.isArray(response.data.buckets)) {\n                    return []\n                }\n\n                // Return only the bucketName element from the array of objects\n                return response.data.buckets.map((el) => (el && el.bucketName) || undefined)\n            })\n    }\n\n    /**\n     * Removes a container from the server\n     * \n     * @param container - Name of the container\n     * @returns Promise that resolves once the container has been removed\n     * @async\n     */\n    deleteContainer(container: string): Promise<void> {\n        // Request the bucketId for the container, after ensuring that we're authorized\n        return Promise.resolve()\n            .then(() => this._ensureAuthorized())\n            .then(() => this._getBucketId(container))\n            .then((bucketId) => {\n                if (!bucketId) {\n                    throw Error('Container not found: ' + container)\n                }\n\n                return this._client.deleteBucket(bucketId)\n            })\n            .then(() => {\n                // Return void\n                return\n            })\n    }\n\n    /**\n     * Uploads a stream to the object storage server.\n     * \n     * The Backblaze B2 APIs have relatively poor support for streams, as it requires the size of the data to be sent at the beginning of the request. As a consequence, this method will upload the file using a different API based on the input data:\n     * \n     * 1. If the length of the data can be known before the upload starts, makes a single upload call. This applies to all situations when `data` is a Buffer or a string, and when `data` is a Stream and either the `options.length` argument is specified, or `data.byteLength` is defined (all data is loaded in memory before being sent to the server in this case).\n     * 2. In the situation when `data` is a Stream and the length can't be known beforehand, if the data is longer than `B2Upload.chunkSize` (default: 9MB; minimum: 5MB) the method will use B2's [large files APIs](https://www.backblaze.com/b2/docs/large_files.html). With those, it's possible to chunk the file into many chunks and upload them separately, thus it's not necessary to load the entire Stream in memory. However, this way of uploading files requires many more network calls, and could be significantly slower. B2 supports up to 1,000 chunks per object, so using 9MB chunks (the default value for `B2Upload.chunkSize`), maximum file size is 90GB.\n     * \n     * Notes on the metadata:\n     * \n     * - The `Content-Type` header is always supported and used as-is\n     * - When using the large file APIs, no other custom header can be added\n     * - When using the \"normal APIs\", you can add up to 10 custom headers, all starting with the `X-Bz-Info-` prefix (if your headers don't start with this prefix, it will be added automatically)\n     * \n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param data - Object data or stream. Can be a Stream (Readable Stream), Buffer or string.\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary. For the Backblaze B2 provider, this object contains the `length` property too, which is useful when passing a stream as data object, as it might allow for faster uploads.\n     * @returns Promise that resolves once the object has been uploaded\n     * @async\n     */\n    putObject(container: string, path: string, data: Stream|string|Buffer, options?: BackblazeB2PutObjectOptions): Promise<void> {\n        if (!options) {\n            options = {}\n        }\n        return Promise.resolve()\n            // Step zero: ensure we're authorized\n            .then(() => this._ensureAuthorized())\n            // First step: get the bucketId for the container\n            // This also calls _ensureAuthorized\n            .then(() => this._getBucketId(container))\n            // Initialize the B2Upload class and start the upload process\n            .then((bucketId) => {\n                const uploader = new B2Upload(this._client, bucketId, path, data, options.metadata, options.length)\n                // This returns a promise\n                return uploader.start()\n            })\n    }\n\n    /**\n     * Requests an object from the server. The method returns a Promise that resolves to a Readable Stream containing the data.\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Readable Stream containing the object's data\n     * @async\n     */\n    getObject(container: string, path: string): Promise<Stream> {\n        return this._ensureAuthorized()\n            .then(() => {\n                // Request the file\n                return this._client.downloadFileByName({\n                        bucketName: container,\n                        fileName: path,\n                        responseType: 'stream'\n                    })\n                    .then((response) => {\n                        // The stream is in response.data\n                        if (!response || !response.data) {\n                            throw Error('Invalid response when requesting the object')\n                        }\n\n                        return response.data\n                    })\n            })\n    }\n\n    /**\n     * Returns a list of objects with a given prefix (folder). The list is not recursive, so prefixes (folders) are returned as such.\n     * \n     * @param container - Name of the container\n     * @param prefix - Prefix (folder) inside which to list objects\n     * @returns List of elements returned by the server\n     * @async\n     */\n    listObjects(container: string, prefix?: string): Promise<ListResults> {\n        // We might need to do multiple requests if there are many files in the bucket that match the prefix\n        const list = [] as ListResults\n        const requestList = (bucketId: string, startFileName: string): Promise<ListResults> => {\n            return this._client.listFileNames({\n                    bucketId: bucketId,\n                    delimiter: '/',\n                    maxFileCount: 1000,\n                    prefix: prefix || '',\n                    startFileName: startFileName\n                })\n                .then((response) => {\n                    if (!response || !response.data || !response.data.files) {\n                        throw Error('Invalid response when listing the container')\n                    }\n\n                    // Iterate through the response and add everything to the list\n                    for (const file of response.data.files) {\n                        // If we have a file\n                        if (file && file.action == 'upload') {\n                            list.push({\n                                contentType: file.contentType,\n                                lastModified: new Date(file.uploadTimestamp),\n                                path: file.fileName,\n                                size: file.contentLength\n                            } as ListItemObject)\n                        }\n                        else if (file && file.action == 'folder') {\n                            list.push({\n                                prefix: file.fileName\n                            } as ListItemPrefix)\n                        }\n                    }\n\n                    // Check if we have to make another request, or just return the list\n                    if (response.data.nextFileName) {\n                        return requestList(bucketId, response.data.nextFileName)\n                    }\n                    else {\n                        return list\n                    }\n                })\n        }\n\n        // Request the bucketId for the container first (after ensuring that we're authorized)\n        return Promise.resolve()\n            .then(() => this._ensureAuthorized())\n            .then(() => this._getBucketId(container))\n            .then((bucketId) => {\n                if (!bucketId) {\n                    throw Error('Container not found: ' + container)\n                }\n\n                // Request the full list (which might require multiple network calls), then return it\n                return requestList(bucketId, null)\n            })\n    }\n\n    /**\n     * Removes an object from the server\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Promise that resolves once the object has been removed\n     * @async\n     */\n    deleteObject(container: string, path: string): Promise<void> {\n        // Request the bucketId for the container first, after ensuring we're authorized\n        return Promise.resolve()\n            .then(() => this._ensureAuthorized())\n            .then(() => this._getBucketId(container))\n            .then((bucketId) => {\n                if (!bucketId) {\n                    throw Error('Container not found: ' + container)\n                }\n\n                // Get the fileId\n                return this._getFileId(bucketId, path)\n            })\n            .then((fileId) => {\n                if (!fileId) {\n                    throw Error('File not found: ' + container)\n                }\n\n                // Delete the file, returning a promise\n                return this._client.deleteFileVersion({\n                    fileId: fileId,\n                    fileName: path\n                })\n            })\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use to request an object from the server with a GET request, even if the object is private.\n     * \n     * **Backblaze B2 currently does not support this API**, and calling this method will always throw an error. Sorry!\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedGetUrl(container: string, path: string, ttl?: number): Promise<string> {\n        throw Error('Presigned URLs are not supported by the BackblazeB2 Provider')\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use for PUT operations on an object in the server, even if the object is private.\n     * \n     * **Backblaze B2 currently does not support this API**, and calling this method will always throw an error. Sorry!\n     * \n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedPutUrl(container: string, path: string, options?: PutObjectOptions, ttl?: number): Promise<string> {\n        throw Error('Presigned URLs are not supported by the BackblazeB2 Provider')\n    }\n\n    /**\n     * Returns the bucketId property for a given bucket name, as most B2 methods require a bucket's ID.\n     * \n     * The result is cached in memory for a certain amount of time configured with `BackblazeB2Provider.bucketIdCacheDuration` (default: 15 minutes), and up to 100 IDs.\n     * \n     * @param bucketName - Name of the bucket\n     * @returns Promise that resolves with the bucketId\n     * @async\n     */\n    private _getBucketId(bucketName: string): Promise<string> {\n        // First, check if the data is cached, and the cache hasn't expired\n        // (If caching is enabled at all)\n        const cachingEnabled = BackblazeB2Provider.bucketIdCacheDuration && BackblazeB2Provider.bucketIdCacheDuration > 0\n        if (cachingEnabled\n            && this._bucketIdCache[bucketName]\n            && (Date.now() - this._bucketIdCache[bucketName].time <  BackblazeB2Provider.bucketIdCacheDuration)\n        ) {\n            return Promise.resolve(this._bucketIdCache[bucketName].result)\n        }\n\n        // There's no method in the B2 APIs to get a single bucket, so we need to request the full list\n        return Promise.resolve()\n            .then(() => this._client.listBuckets())\n            .then((response) => {\n                if (!response || !response.data || !response.data.buckets || !Array.isArray(response.data.buckets)) {\n                    return null\n                }\n\n                // Look for the bucket with the requested name, then return the id\n                for (const el of response.data.buckets) {\n                    if (el.bucketName == bucketName) {\n                        // If caching is enabled, store the result\n                        if (cachingEnabled) {\n                            this._bucketIdCache[bucketName] = {\n                                result: el.bucketId,\n                                time: Date.now()\n                            }\n                            // If there are more than 100 elements in the cache, remove the first ones\n                            // This should be in order with ES2015\n                            const keys = Object.keys(this._bucketIdCache)\n                            if (keys.length > 100) {\n                                delete this._bucketIdCache[keys.shift()]\n                            }\n                        }\n                        return el.bucketId as string\n                    }\n                }\n\n                // Couldn't find the bucket\n                return null\n            })\n    }\n\n    /**\n     * Returns the fileId property for a given file name, as some B2 methods require a file's ID\n     * \n     * @param bucketId - ID of the bucket\n     * @param fileName - Name of the file\n     * @returns Promise that resolves with the fileId\n     * @async\n     */\n    private _getFileId(bucketId: string, fileName: string): Promise<string> {\n        // There's no method in the B2 APIs to get a single file, so we need to request the list and use the file name as prefix\n        // No caching here, as this is expect to be more volatile data\n        return this._client.listFileNames({\n                bucketId: bucketId,\n                delimiter: '/',\n                maxFileCount: 1000,\n                prefix: fileName\n            })\n            .then((response) => {\n                if (!response || !response.data || !response.data.files || !Array.isArray(response.data.files)) {\n                    return null\n                }\n\n                // Should match a single file with the exact name\n                for (const file of response.data.files) {\n                    if (file && file.fileName == fileName) {\n                        return file.fileId\n                    }\n                }\n\n                // Couldn't find the file\n                return null\n            })\n    }\n\n    /**\n     * Performs authorization\n     * \n     * @returns Promise that resolves once the client is authorized\n     * @async\n     */\n    private _ensureAuthorized(): Promise<void> {\n        if (this._isAuthorized) {\n            return Promise.resolve()\n        }\n        else {\n            return this._client.authorize()\n        }\n    }\n}\n\nexport = BackblazeB2Provider\n",
    "absorb/SMCloudStore/aws-s3/src/AwsS3Provider.ts": "'use strict'\n\nimport S3 = require('aws-sdk/clients/s3')\nimport {Stream} from 'stream'\nimport {\n    ListResults,\n    PutObjectOptions,\n    StorageProvider,\n} from '../../core/src/StorageProvider';\nimport { SMCloudStoreFactories } from '../../smcloudstore/src/SMCloudStore';\nimport { PromiseResult } from 'aws-sdk/lib/request';\nimport { AWSError } from 'aws-sdk';\n\n// Note: when using the AWS SDK, do not use arrow functions as callbacks, as many methods need access to the \"this\" context the callbacks provide\n\n/**\n * Connection options for an AWS S3 provider.\n */\ninterface AwsS3ConnectionOptions {\n    /** Access Key ID */\n    accessKeyId: string\n    /** Secret Access Key */\n    secretAccessKey: string,\n    /** Default region to use; if not set, defaults to \"US Standard\" (Virginia) */\n    region?: string\n}\n\n/**\n * ACL for containers and objects. Refer to the [documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for more details. Default value is `private` for containers and null (inherited) for objects.\n *\n * For consistency with other providers, a few aliases are added:\n * - `none` is an alias for `private`\n * - `public` is an alias for `public-read`\n */\ntype AwsS3ACL = 'private' | 'public-read' | 'public-read-write' | 'authenticated-read' | 'none' | 'public'\n\n/**\n * Options passed when creating a container\n */\ninterface AwsS3CreateContainerOptions {\n    /** Determine access level for all objects in the container */\n    access?: AwsS3ACL\n}\n\n/**\n * Options passed when putting an object.\n */\ninterface AwsS3PutObjectOptions extends PutObjectOptions {\n    /** Determine access level for the object. Default: inherit from the container */\n    access?: AwsS3ACL,\n\n    /** Enable AES256 server-side encryption for the object at rest, with AWS-managed keys. Default: disabled */\n    serverSideEncryption?: boolean\n\n    /** Storage class to use. Refer to the [documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) for more details. Default is 'STANDARD' */\n    class?: 'STANDARD' | 'REDUCED_REDUNDANCY' | 'STANDARD_IA' | 'ONEZONE_IA'\n}\n\n/**\n * Returns the value for the ACL to pass to the APIs, given an access argument\n *\n * @param access Value among the types of `AwsS3ACL`\n * @returns String value to pass to the S3 APIs\n */\nfunction ACLString(access: AwsS3ACL): string {\n    switch (access) {\n        case 'public-read':\n        case 'public':\n            return 'public-read'\n        case 'public-read-write':\n        case 'authenticated-read':\n            return access\n        case 'none':\n        case 'private':\n        default:\n            return 'private'\n    }\n}\n\n/**\n * Returns the methodOptions dictionary for the `putObject` method\n *\n * @param options - Dictionary with options\n * @returns Dictionary to add to methodOptions\n */\nfunction PutObjectMethodOptions(options: AwsS3PutObjectOptions): S3.PutObjectRequest {\n    const methodOptions = {} as S3.PutObjectRequest\n\n    // If no other options...\n    if (!options) {\n        return methodOptions\n    }\n\n    // ACL: add only if explicitly passed\n    if (options.access) {\n        methodOptions.ACL = ACLString(options.access)\n    }\n\n    // Storage class\n    if (options.class) {\n        methodOptions.StorageClass = options.class\n    }\n\n    // Enable server-side encryption\n    if (options.serverSideEncryption) {\n        methodOptions.ServerSideEncryption = 'AES256'\n    }\n\n    // Metadata\n    if (options.metadata) {\n        methodOptions.Metadata = {}\n\n        for (const key in options.metadata) {\n            if (!options.metadata.hasOwnProperty(key)) {\n                continue\n            }\n\n            const keyLowerCase = key.toLowerCase()\n            switch (keyLowerCase) {\n                case 'cache-control':\n                    methodOptions.CacheControl = options.metadata[key]\n                    break\n                case 'content-disposition':\n                    methodOptions.ContentDisposition = options.metadata[key]\n                    break\n                case 'content-encoding':\n                    methodOptions.ContentEncoding = options.metadata[key]\n                    break\n                case 'content-language':\n                    methodOptions.ContentLanguage = options.metadata[key]\n                    break\n                case 'content-md5':\n                    methodOptions.ContentMD5 = options.metadata[key]\n                    break\n                case 'content-type':\n                    methodOptions.ContentType = options.metadata[key]\n                    break\n                default:\n                    methodOptions.Metadata[key] = options.metadata[key]\n                    break\n            }\n        }\n    }\n\n    return methodOptions\n}\n\n/**\n * Client to interact with a generic S3 object storage server, using the Minio library.\n */\nexport class AwsS3Provider extends StorageProvider {\n    protected _client: S3\n    protected _region: string\n\n    /**\n     * Initializes a new client to interact with AWS S3.\n     *\n     * @param connection - Dictionary with connection options.\n     * @param factories - factory functions to use when creating new instances\n     */\n    constructor(connection: AwsS3ConnectionOptions, protected readonly factories : SMCloudStoreFactories) {\n        super(connection)\n\n        // Provider name\n        this._provider = 'aws-s3'\n\n        // Region, if passed\n        this._region = connection.region || ''\n\n        // The AWS library will validate the connection object\n        const options = Object.assign(connection, {apiVersion: '2006-03-01'}) as S3.ClientConfiguration\n        this._client = new S3(options)\n    }\n\n    /**\n     * Create a container (\"bucket\") on the server.\n     *\n     * @param container - Name of the container\n     * @param options - Dictionary with options for creating the container.\n     * @returns Promise that resolves once the container has been created. The promise doesn't contain any meaningful return value.\n     * @async\n     */\n    createContainer(container: string, options?: AwsS3CreateContainerOptions): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!options) {\n                options = {}\n            }\n\n            const methodOptions = {\n                ACL: ACLString(options.access),\n                Bucket: container,\n                CreateBucketConfiguration: {\n                    LocationConstraint: this._region\n                }\n            } as S3.CreateBucketRequest\n            this._client.createBucket(methodOptions, function(err, data) {\n                if (err || !data || !data.Location) {\n                    return reject(err || Error('Invalid response while creating container'))\n                }\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n     * Check if a container exists.\n     *\n     * @param container - Name of the container\n     * @returns Promises that resolves with a boolean indicating if the container exists.\n     * @async\n     */\n    isContainer(container: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            const methodOptions = {\n                Bucket: container\n            } as S3.HeadBucketRequest\n            this._client.headBucket(methodOptions, function(err, data) {\n                if (err) {\n                    // Check error code to see if bucket doesn't exist, or if someone else owns it\n                    if (err.statusCode == 404) {\n                        // Container doesn't exist\n                        resolve(false)\n                    }\n                    else if (err.statusCode === 403) {\n                        // Someone else owns this\n                        resolve(false)\n                    }\n                    else {\n                        // Another error, so throw an exception\n                        return reject(err)\n                    }\n                }\n                else {\n                    // Bucket exists and user owns it\n                    resolve(true)\n                }\n            })\n        })\n    }\n\n    /**\n     * Create a container (\"bucket\") on the server if it doesn't already exist.\n     *\n     * @param container - Name of the container\n     * @param options - Dictionary with options for creating the container.\n     * @returns Promise that resolves once the container has been created\n     * @async\n     */\n    ensureContainer(container: string, options?: AwsS3CreateContainerOptions): Promise<void> {\n        // First, check if the container exists\n        return this.isContainer(container)\n            .then((exists) => {\n                // Create the container if it doesn't exist already\n                if (!exists) {\n                    return this.createContainer(container, options)\n                }\n            })\n    }\n\n    /**\n     * Lists all containers belonging to the user\n     *\n     * @returns Promise that resolves with an array of all the containers\n     * @async\n     */\n    listContainers(): Promise<string[]> {\n        return new Promise((resolve, reject) => {\n            this._client.listBuckets(function(err, data) {\n                if (err) {\n                    return reject(err || Error('Invalid response while listing containers'))\n                }\n\n                const list = []\n                for (const bucket of data.Buckets) {\n                    if (bucket && bucket.Name) {\n                        list.push(bucket.Name)\n                    }\n                }\n                resolve(list)\n            })\n        })\n    }\n\n    /**\n     * Removes a container from the server\n     *\n     * @param container - Name of the container\n     * @returns Promise that resolves once the container has been removed\n     * @async\n     */\n    deleteContainer(container: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const methodOptions = {\n                Bucket: container\n            } as S3.DeleteBucketRequest\n            this._client.deleteBucket(methodOptions, function(err, data) {\n                if (err || !data) {\n                    return reject(err || Error('Invalid response while deleting container'))\n                }\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n     * Uploads a stream to the object storage server\n     *\n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param data - Object data or stream. Can be a Stream (Readable Stream), Buffer or string.\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary and additional S3-specific options\n     * @returns Promise that resolves once the object has been uploaded\n     * @async\n     */\n    putObject(container: string, path: string, data: Stream|string|Buffer, options?: AwsS3PutObjectOptions): Promise<void> {\n        if (!options) {\n            options = {}\n        }\n\n        return new Promise((resolve, reject) => {\n            // Build all the methodOptions dictionary\n            const methodOptions = Object.assign(\n                {},\n                {\n                    Body: data,\n                    Bucket: container,\n                    Key: path\n                },\n                PutObjectMethodOptions(options)\n            ) as S3.PutObjectRequest\n\n            // Send the request\n            this._client.putObject(methodOptions, function(err, response) {\n                if (err || !response || !response.ETag) {\n                    return reject(err || Error('Invalid response while putting object'))\n                }\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n     * Requests an object from the server. The method returns a Promise that resolves to a Readable Stream containing the data.\n     *\n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Readable Stream containing the object's data\n     * @async\n     */\n    getObject(container: string, path: string): Promise<Stream> {\n        const methodOptions = {\n            Bucket: container,\n            Key: path\n        } as S3.GetObjectRequest\n\n        const stream = this._client.getObject(methodOptions).createReadStream()\n        return Promise.resolve(stream)\n    }\n\n    /**\n     * Requests an object from the server. The method returns a Promise that resolves to a Readable Stream containing the data.\n     *\n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Readable Stream containing the object's data\n     * @async\n     */\n    async getObjectBase64(container: string, path: string): Promise<string> {\n        const methodOptions = {\n            Bucket: container,\n            Key: path\n        } as S3.GetObjectRequest\n\n        const data = await this._client.getObject(methodOptions).promise();\n        return data.Body.toString('base64');\n    }\n\n    /**\n     * Returns a list of objects with a given prefix (folder). The list is not recursive, so prefixes (folders) are returned as such.\n     *\n     * @param container - Name of the container\n     * @param prefix - Prefix (folder) inside which to list objects\n     * @returns List of elements returned by the server\n     * @async\n     */\n    listObjects = (container: string, prefix?: string): Promise<ListResults> => {\n        const files = [];\n        const folders = [];\n        const { createListItemPrefix, createListItemObject } = this.factories;\n        const makeRequest = (continuationToken?: string): Promise<ListResults> => {\n            return new Promise((resolve, reject) => {\n                const methodOptions = {\n                    Bucket: container,\n                    ContinuationToken: continuationToken || undefined,\n                    Delimiter: '/',\n                    MaxKeys: 500,\n                    Prefix: prefix\n                } as S3.ListObjectsV2Request\n                this._client.listObjectsV2(methodOptions, function(err, data) {\n                    if (err) {\n                        return reject(err)\n                    }\n\n                    // Add all objects\n                    for (const el of data.Contents) {\n                        const add = createListItemObject();\n                        add.lastModified = el.LastModified;\n                        add.path = el.Key;\n                        add.size = el.Size;\n\n                        // Check if the ETag is the MD5 of the file (this is the case for files that weren't uploaded in multiple parts, in which case there's a dash in the ETag)\n                        if (el.ETag.indexOf('-') >= 0) {\n                            add.contentMD5 = el.ETag\n                        }\n\n                        files.push(add)\n                    }\n\n                    // Add all prefixes\n                    for (const el of data.CommonPrefixes) {\n                        const dir = createListItemPrefix();\n                        dir.prefix = el.Prefix;\n                        folders.push(dir);\n                    }\n\n                    // Check if we have to make another request\n                    if (data.ContinuationToken) {\n                        resolve(makeRequest(data.ContinuationToken))\n                    }\n                    else {\n                        resolve({files, folders})\n                    }\n                })\n            })\n        }\n\n        return makeRequest()\n    }\n\n    /**\n     * Removes an object from the server\n     *\n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Promise that resolves once the object has been removed\n     * @async\n     */\n    deleteObject(container: string, path: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const methodOptions = {\n                Bucket: container,\n                Key: path\n            } as S3.DeleteObjectRequest\n\n            this._client.deleteObject(methodOptions, function(err, data) {\n                if (err || !data) {\n                    return reject(err || Error('Invalid response while deleting object'))\n                }\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use to request an object from the server with a GET request, even if the object is private.\n     *\n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedGetUrl(container: string, path: string, ttl?: number): Promise<string> {\n        return this.presignedUrl('getObject', container, path, ttl)\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use for PUT operations on an object in the server, even if the object is private.\n     *\n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary and additional S3-specific options\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedPutUrl(container: string, path: string, options?: AwsS3PutObjectOptions, ttl?: number): Promise<string> {\n        const additionalMethodOptions = PutObjectMethodOptions(options)\n        return this.presignedUrl('putObject', container, path, additionalMethodOptions, ttl)\n    }\n\n    /**\n     * Returns a presigned URL for the specific S3 operation.\n     *\n     * @param operation - S3 operation: \"getObject\" or \"putObject\"\n     * @param container - Name of the container\n     * @param path - Path of the target object, inside the container\n     * @param additionalMethodOptions - Additional options to pass to the method\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for the specified operation\n     * @async\n     */\n    private presignedUrl(operation: 'getObject'|'putObject', container: string, path: string, additionalMethodOptions: any, ttl?: number): Promise<string> {\n        if (!ttl || ttl < 1) {\n            ttl = 86400\n        }\n\n        const methodOptions = Object.assign(\n            {},\n            {\n                Bucket: container,\n                Expires: ttl,\n                Key: path\n            },\n            additionalMethodOptions\n        )\n\n        return new Promise((resolve, reject) => {\n            this._client.getSignedUrl(operation, methodOptions, function(err, url) {\n                if (err || !url) {\n                    return reject(err || Error('Invalid result when generating the presigned url'))\n                }\n\n                resolve(url)\n            })\n        })\n    }\n}\n",
    "absorb/SMCloudStore/azure-storage/src/AzureStorageProvider.ts": "'use strict'\n\nimport {ListItemObject, ListItemPrefix, ListResults, PutObjectOptions, StorageProvider} from '@smcloudstore/core/dist/StorageProvider'\nimport * as Azure from 'azure-storage'\nimport {Stream, Transform} from 'stream'\n\n/**\n * Connection options for an Azure Blob Storage provider.\n */\ninterface AzureStorageConnectionObject {\n    /** Name of the storage account */\n    storageAccount: string\n    /** Access key (secret key) for the storage account */\n    storageAccessKey: string\n    /** Endpoint to use. Default is `core.windows.net` */\n    host?: string\n}\ntype AzureStorageConnectionOptions = string | AzureStorageConnectionObject\n\n/**\n * Options passed when creating a container\n */\ninterface AzureStorageCreateContainerOptions {\n    /** \n     * Determine access level for all files in the container. Defaults to 'none' if not specified.\n     * 'public' and 'private' are not standard in the Azure APIs, and are aliased to 'container' and 'none' respectively.\n     */\n    access?: 'blob' | 'container' | 'none' | 'public' | 'private'\n}\n\n/**\n * Returns the request options dictionary for the `putObject` method\n * \n * @param options - Dictionary with options\n * @returns Dictionary with options to send to Azure\n */\nfunction PutObjectRequestOptions(options: PutObjectOptions): Azure.BlobService.CreateBlockBlobRequestOptions {\n    // Azure wants some headers, like Content-Type, outside of the metadata object\n    const requestOptions = {\n        contentSettings: {},\n        metadata: {}\n    } as Azure.BlobService.CreateBlockBlobRequestOptions\n\n    // If no other options...\n    if (!options) {\n        return requestOptions\n    }\n\n    // Metadata\n    if (options.metadata) {\n        requestOptions.metadata = {}\n\n        for (const key in options.metadata) {\n            if (!options.metadata.hasOwnProperty(key)) {\n                continue\n            }\n\n            const keyLowerCase = key.toLowerCase()\n            switch (keyLowerCase) {\n                case 'cache-control':\n                    requestOptions.contentSettings.cacheControl = options.metadata[key]\n                    break\n                case 'content-disposition':\n                    requestOptions.contentSettings.contentDisposition = options.metadata[key]\n                    break\n                case 'content-encoding':\n                    requestOptions.contentSettings.contentEncoding = options.metadata[key]\n                    break\n                case 'content-language':\n                    requestOptions.contentSettings.contentLanguage = options.metadata[key]\n                    break\n                case 'content-md5':\n                    requestOptions.contentSettings.contentMD5 = options.metadata[key]\n                    break\n                case 'content-type':\n                    requestOptions.contentSettings.contentType = options.metadata[key]\n                    break\n                default:\n                    requestOptions.metadata[key] = options.metadata[key]\n                    break\n            }\n        }\n    }\n\n    return requestOptions\n}\n\n/**\n * Client to interact with Azure Blob Storage.\n */\nclass AzureStorageProvider extends StorageProvider {\n    protected _client: Azure.BlobService\n\n    /**\n     * Initializes a new client to interact with Azure Blob Storage.\n     * \n     * @param connection - Connection options, passed as an object with interface `AzureStorageConnectionObject`, or as a connection string (e.g. as returned from the Azure Portal)\n     */\n    constructor(connection: AzureStorageConnectionOptions) {\n        super(connection)\n\n        // Provider name\n        this._provider = 'azure-storage'\n\n        // The Azure library will validate the connection object\n        if (typeof connection == 'string') {\n            this._client = Azure.createBlobService(connection as string)\n        }\n        else {\n            this._client = Azure.createBlobService(connection.storageAccount, connection.storageAccessKey, connection.host || undefined)\n        }\n    }\n\n    /**\n     * Create a container on the server.\n     * \n     * @param container - Name of the container\n     * @param options - Dictionary with options for creating the container, including the access level (defaults to 'none' if not specified)\n     * @returns Promise that resolves once the container has been created. The promise doesn't contain any meaningful return value.\n     * @async\n     */\n    createContainer(container: string, options?: AzureStorageCreateContainerOptions): Promise<void> {\n        return this._createContainerInternal(container, false, options).then(() => {\n            return\n        })\n    }\n\n    /**\n     * Check if a container exists.\n     * \n     * @param container - Name of the container\n     * @returns Promises that resolves with a boolean indicating if the container exists.\n     * @async\n     */\n    isContainer(container: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            this._client.getContainerProperties(container, (err, response) => {\n                if (err) {\n                    // If error is \"Not Found\", then just return false\n                    return err.toString().match(/NotFound/) ?\n                        resolve(false) :\n                        reject(err)\n                }\n                else if (response && response.name) {\n                    return resolve(true)\n                }\n                else {\n                    throw Error('Response does not contain storage account name')\n                }\n            })\n        })\n    }\n\n    /**\n     * Create a container on the server if it doesn't already exist.\n     * \n     * @param container - Name of the container\n     * @param options - Dictionary with options for creating the container, including the access level (defaults to 'none' if not specified)\n     * @returns Promise that resolves once the container has been created\n     * @async\n     */\n    ensureContainer(container: string, options?: AzureStorageCreateContainerOptions): Promise<void> {\n        return this._createContainerInternal(container, true, options).then(() => {\n            return\n        })\n    }\n\n    /**\n     * Lists all containers belonging to the user\n     * \n     * @returns Promise that resolves with an array of all the containers\n     * @async\n     */\n    listContainers(): Promise<string[]> {\n        const resultList = [] as string[]\n\n        // The response might be split into multiple pages, so we need to be prepared to make multiple requests and use a continuation token\n        const requestPromise = (continuationToken: Azure.common.ContinuationToken): Promise<string[]> => {\n            return new Promise((resolve, reject) => {\n                this._client.listContainersSegmented(continuationToken, (err, response) => {\n                    if (err) {\n                        return reject(err)\n                    }\n\n                    // Iterate through entries\n                    if (!response.entries || !Array.isArray(response.entries)) {\n                        throw Error('Response does not contain an entries array')\n                    }\n                    for (const i in response.entries) {\n                        if (response.entries.hasOwnProperty(i)) {\n                            const e = response.entries[i]\n                            if (!e || !e.name) {\n                                throw Error('Invalid entry')\n                            }\n                            resultList.push(e.name)\n                        }\n                    }\n\n                    // Check if we have a continuation token\n                    if (response.continuationToken) {\n                        // We have a token, so need to make another request, returning a promise\n                        resolve(requestPromise(response.continuationToken))\n                    }\n                    else {\n                        // No token, so return the list of what we've collected\n                        resolve(resultList)\n                    }\n                })\n            })\n        }\n\n        return requestPromise(null)\n    }\n\n    /**\n     * Removes a container from the server\n     * \n     * @param container - Name of the container\n     * @returns Promise that resolves once the container has been removed\n     * @async\n     */\n    deleteContainer(container: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this._client.deleteContainer(container, (err, response) => {\n                if (err) {\n                    return reject(err)\n                }\n                else if (!response || !response.isSuccessful) {\n                    throw Error('Response was empty or not successful')\n                }\n                else {\n                    return resolve()\n                }\n            })\n        })\n    }\n\n    /**\n     * Uploads a stream to the object storage server\n     * \n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param data - Object data or stream. Can be a Stream (Readable Stream), Buffer or string.\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary\n     * @returns Promise that resolves once the object has been uploaded\n     * @async\n     */\n    putObject(container: string, path: string, data: Stream|string|Buffer, options?: PutObjectOptions): Promise<void> {\n        if (!data) {\n            throw Error('Argument data is empty')\n        }\n\n        const requestOptions = PutObjectRequestOptions(options)\n\n        return new Promise((resolve, reject) => {\n            const callback = (err, response) => {\n                if (err) {\n                    return reject(err)\n                }\n                // When uploading a string or Buffer, we have a complex object; for a stream, we just have a list of committedBlocks in the response\n                if (!response || (!response.name && !response.commmittedBlocks)) {\n                    throw Error('Response was empty or not successful')\n                }\n                else {\n                    return resolve()\n                }\n            }\n\n            // Check if we have a stream\n            if (typeof data == 'object' && typeof (data as any).pipe == 'function') {\n                (data as Stream).pipe(this._client.createWriteStreamToBlockBlob(container, path, requestOptions, callback))\n            }\n            // Strings and Buffers are supported too\n            else if (typeof data == 'string' || (typeof data == 'object' && Buffer.isBuffer(data))) {\n                this._client.createBlockBlobFromText(container, path, data, requestOptions, callback)\n            }\n            // Fail otherwise\n            else {\n                throw Error('Argument data must be a Stream, a String or a Buffer')\n            }\n        })\n    }\n\n    /**\n     * Requests an object from the server. The method returns a Promise that resolves to a Readable Stream containing the data.\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Readable Stream containing the object's data\n     * @async\n     */\n    getObject(container: string, path: string): Promise<Stream> {\n        // Create a transform stream we can return in the result, which is readable\n        const duplexStream = new Transform({\n            transform: (chunk, encoding, done) => {\n                done(null, chunk)\n            }\n        })\n        // Request the data\n        this._client.getBlobToStream(container, path, duplexStream, (err, response) => {\n            // Pass errors to the stream as events\n            if (err) {\n                duplexStream.destroy((typeof err == 'object' && err instanceof Error) ? err : Error(err))\n            }\n        })\n\n        // Wrap this in a promise because the method expects result to be async\n        return Promise.resolve(duplexStream)\n    }\n\n    /**\n     * Returns a list of objects with a given prefix (folder). The list is not recursive, so prefixes (folders) are returned as such.\n     * \n     * @param container - Name of the container\n     * @param prefix - Prefix (folder) inside which to list objects\n     * @returns List of elements returned by the server\n     * @async\n     */\n    listObjects(container: string, prefix?: string): Promise<ListResults> {\n        const resultList = []\n\n        // The response might be split into multiple pages, so we need to be prepared to make multiple requests and use a continuation token\n        const requestPromise = (type: 'blob'|'prefix', continuationToken: Azure.common.ContinuationToken): Promise<ListResults> => {\n            return new Promise((resolve, reject) => {\n                // The following properties/methods aren't defined in the typings file\n                const blobTypeConstants = (Azure.Constants.BlobConstants as any).ListBlobTypes\n                const listBlobType = (type == 'prefix') ? blobTypeConstants.Directory : blobTypeConstants.Blob\n\n                const clientAny = this._client as any\n                clientAny._listBlobsOrDircotriesSegmentedWithPrefix(container, prefix || null, continuationToken, listBlobType, {delimiter: '/'}, (err, response) => {\n                    if (err) {\n                        return reject(err)\n                    }\n\n                    // Iterate through the list of items and add objects to the result list\n                    for (const i in response.entries) {\n                        if (response.entries.hasOwnProperty(i)) {\n                            const e = response.entries[i]\n\n                            // Is this a prefix (folder) or object? If etag is present, it's an object\n                            if (e.etag) {\n                                const res = {\n                                    creationTime: e.creationTime ? new Date(e.creationTime) : undefined,\n                                    lastModified: e.lastModified ? new Date(e.lastModified) : undefined,\n                                    path: e.name,\n                                    size: parseInt(e.contentLength, 10)\n                                } as ListItemObject\n                                /* istanbul ignore else */\n                                if (e.contentSettings && e.contentSettings.contentMD5) {\n                                    // Azure returns the Content-MD5 header as base64, so convert it to HEX\n                                    res.contentMD5 = Buffer.from(e.contentSettings.contentMD5, 'base64').toString('hex')\n                                }\n                                /* istanbul ignore else */\n                                if (e.contentSettings && e.contentSettings.contentType) {\n                                    res.contentType = e.contentSettings.contentType\n                                }\n                                resultList.push(res)\n                            }\n                            else {\n                                resultList.push({\n                                    prefix: e.name\n                                } as ListItemPrefix)\n                            }\n                        }\n                    }\n\n                    // Check if we have a continuation token\n                    if (response.continuationToken) {\n                        // We have a token, so need to make another request, returning a promise\n                        resolve(requestPromise(type, response.continuationToken))\n                    }\n                    else {\n                        // No token, so return the list of what we've collected\n                        resolve(resultList)\n                    }\n                })\n            })\n        }\n\n        return Promise.all([\n            requestPromise('blob', null),\n            requestPromise('prefix', null)\n        ]).then(() => {\n            return resultList\n        })\n    }\n\n    /**\n     * Removes an object from the server\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Promise that resolves once the object has been removed\n     * @async\n     */\n    deleteObject(container: string, path: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this._client.deleteBlob(container, path, (err, response) => {\n                if (err) {\n                    return reject(err)\n                }\n                else if (!response || !response.isSuccessful) {\n                    throw Error('Response was empty or not successful')\n                }\n                else {\n                    return resolve()\n                }\n            })\n        })\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use to request an object from the server with a GET request, even if the object is private.\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedGetUrl(container: string, path: string, ttl?: number): Promise<string> {\n        return this.presignedUrl('getObject', container, path, ttl)\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use for PUT operations on an object in the server, even if the object is private.\n     * \n     * Notes on using presigned URLs to upload files to Azure Storage using PUT:\n     * \n     * 1. The maximum file size is 100MB; larger files will trigger an error.\n     * 2. You need to set the `X-MS-Blob-Type: BlockBlob` header for uploads to succeed\n     * \n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedPutUrl(container: string, path: string, options?: PutObjectOptions, ttl?: number): Promise<string> {\n        const requestOptions = PutObjectRequestOptions(options)\n        return this.presignedUrl('putObject', container, path, requestOptions.contentSettings, ttl)\n    }\n\n    /**\n     * Returns a presigned URL for the specific operation.\n     * \n     * @param operation - Operation: \"getObject\" or \"putObject\"\n     * @param container - Name of the container\n     * @param path - Path of the target object, inside the container\n     * @param contentSettings - Additional headers that are required\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for the specified operation\n     * @async\n     */\n    private presignedUrl(operation: 'getObject'|'putObject', container: string, path: string, contentSettings?: any, ttl?: number): Promise<string> {\n        if (!ttl || ttl < 1) {\n            ttl = 86400\n        }\n\n        // Remove contentMD5 from contentSettings, as that can't be known\n        if (contentSettings && contentSettings.contentMD5) {\n            delete contentSettings.contentMD5\n        }\n\n        // Policy\n        const policy = {\n            AccessPolicy: {\n                Expiry: new Date(Date.now() + ttl * 1000), // Convert TTL to a point in time\n                Permissions: (operation == 'getObject') ? Azure.BlobUtilities.SharedAccessPermissions.READ : Azure.BlobUtilities.SharedAccessPermissions.WRITE\n            }\n        } as Azure.common.SharedAccessPolicy\n\n        const signature = this._client.generateSharedAccessSignature(container, path, policy, contentSettings)\n\n        const url = this._client.getUrl(container, path, signature)\n\n        return Promise.resolve(url)\n    }\n\n    /**\n     * Create a container on the server, choosing whether to use the \"ifNotExists\" method or not\n     * @param container - Name of the container\n     * @param ifNotExists - If true, use the \"ifNotExists\" method variant\n     * @param options - Dictionary with options for creating the container, including the access level (defaults to 'none' if not specified)\n     * @returns Promise that resolves once the container has been created. The promise doesn't contain any meaningful return value.\n     * @async\n     */\n    private _createContainerInternal(container: string, ifNotExists: boolean, options?: AzureStorageCreateContainerOptions): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const containerOpts = {\n                // All containers are private by default\n                publicAccessLevel: null\n            } as Azure.BlobService.CreateContainerOptions\n            // Check if the user wants a public container\n            if (options && options.access) {\n                if (options.access == 'blob') {\n                    containerOpts.publicAccessLevel = 'blob'\n                }\n                else if (options.access == 'container' || options.access == 'public') {\n                    containerOpts.publicAccessLevel = 'container'\n                }\n            }\n\n            const callback = (err, response) => {\n                if (err) {\n                    return reject(err)\n                }\n                else if (response && response.name) {\n                    return resolve()\n                }\n                else {\n                    throw Error('Response does not contain storage account name')\n                }\n            }\n\n            if (ifNotExists) {\n                this._client.createContainerIfNotExists(container, containerOpts, callback)\n            }\n            else {\n                this._client.createContainer(container, containerOpts, callback)\n            }\n        })\n    }\n}\n\nexport = AzureStorageProvider\n",
    "absorb/SMCloudStore/core/src/StreamUtils.ts": "'use strict'\n\nimport {Readable, Stream} from 'stream'\n\n/**\n * Returns a boolean indicating whether a value is a Stream \n * \n * @param val - Value to test\n * @returns Boolean indicating whether `val` is a Stream\n */\nexport function IsStream(val: any): boolean {\n    return (typeof val == 'object' && typeof val.pipe == 'function')\n}\n\n/**\n * Returns a boolean indicating whether a value is a Readable Stream \n * \n * @param val - Value to test\n * @returns Boolean indicating whether `val` is a Readable Stream\n */\nexport function IsReadableStream(val: any): boolean {\n    return (IsStream(val) && typeof val.read === 'function')\n}\n\n/**\n * Returns a Buffer with data read from the stream.\n * \n * @param stream - Stream to read data from\n * @returns Promise that resolves to a Buffer containing the data from the stream\n * @async\n */\nexport function StreamToBuffer(stream: Stream): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n        const buffersCache = []\n        stream.on('data', (data: Buffer) => {\n            buffersCache.push(data)\n        })\n        stream.on('end', () => {\n            resolve(Buffer.concat(buffersCache))\n        })\n        stream.on('error', (error) => {\n            reject(error)\n        })\n    })\n}\n\n/**\n * Returns a string with data read from the stream.\n * \n * @param stream - Stream to read data from\n * @param encoding - String encoding to use; defaults to utf8\n * @returns Promise that resolves to a string containing the data from the stream\n * @async\n */\nexport function StreamToString(stream: Stream, encoding?: string): Promise<string> {\n    return StreamToBuffer(stream)\n        .then((buffer) => {\n            return buffer.toString(encoding || 'utf8')\n        })\n}\n\n/**\n * Reads a certain amount of bytes from the beginning of a Stream, returning a Buffer.\n * The amount of data read might be smaller if the stream ends before it could return the amount of data requested.\n * \n * If the `peek` argument is true, the data is put back into the beginning of the stream, so it can be consumed by another function\n * \n * Note that this function will pause the stream, so you might need to call the `resume` method on it to make it flow again.\n * \n * If passing a stream that has already ended, the function could enter into an infinite loop and return a Promise that never resolves. It's your responsibility to ensure that streams passed to this function still have data to return.\n * \n * @param stream - Readable Stream to read data from\n * @param size - Amount of data to read\n * @param peek - If true, after reading the data it is added back to the beginning of the stream\n * @returns Promise that resolves to a Buffer with a length of at most `size`\n * @async\n */\nexport function ReadChunkFromStream(stream: Readable, size: number, peek?: boolean): Promise<Buffer> {\n    // Return an error if stream is not a Readable Stream\n    if (!stream || !IsReadableStream(stream)) {\n        throw Error('Argument stream must be a Readable Stream')\n    }\n\n    // Ensure the stream isn't flowing\n    stream.pause()\n\n    // Returns a promise that resolves when we have read enough data from the stream.\n    return new Promise((resolve, reject) => {\n        // Callbacks on events\n        const errorEvent = (err) => {\n            reject(err)\n        }\n        const readableEvent = () => {\n            // If we don't have enough data, and the stream hasn't ended, this will return null\n            const data = stream.read(size)\n            if (data) {\n                if (peek) {\n                    // Put the data we read back into the stream\n                    stream.unshift(data)\n                }\n\n                // Stop listening on callbacks\n                stream.removeListener('error', errorEvent)\n\n                // Return the data\n                resolve(data)\n            }\n            else {\n                // We need to wait longer for more data\n                stream.once('readable', readableEvent)\n            }\n        }\n\n        // Listen to the readable event and in case of error\n        stream.once('readable', readableEvent)\n        stream.on('error', errorEvent)\n    })\n}\n",
    "absorb/SMCloudStore/core/src/Utils.ts": "'use strict'\n\n/**\n * Returns a Promise that resolves after a certain amlount of time (in ms)\n * \n * @param delay - ms to wait\n * @returns Promise that resolves after the delay\n * @async\n */\nexport function WaitPromise(delay: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n",
    "absorb/SMCloudStore/generic-s3/src/GenericS3Provider.ts": "'use strict'\n\nimport {ListItemObject, ListItemPrefix, ListResults, PutObjectOptions, StorageProvider} from '@smcloudstore/core/dist/StorageProvider'\nimport {Client as MinioClient, ClientOptions as MinioClientOptions} from 'minio'\nimport {Stream} from 'stream'\n\n/**\n * Client to interact with a generic S3 object storage server, using the Minio library.\n */\nclass GenericS3Provider extends StorageProvider {\n    protected _client: MinioClient\n\n    /**\n     * Initializes a new client to interact with Minio.\n     * \n     * @param connection - Dictionary with connection options.\n     */\n    constructor(connection: MinioClientOptions) {\n        if (!connection || !Object.keys(connection).length) {\n            throw new Error('Connection argument is empty')\n        }\n\n        super(connection)\n\n        // Provider name\n        this._provider = 'generic-s3'\n\n        // The Minio library will validate the connection object\n        this._client = new MinioClient(connection)\n    }\n\n    /**\n     * Create a container (\"bucket\") on the server.\n     * \n     * @param container - Name of the container\n     * @param options - The option argument is ignored by this provider.\n     * @returns Promise that resolves once the container has been created. The promise doesn't contain any meaningful return value.\n     * @async\n     */\n    createContainer(container: string, options?: any): Promise<void> {\n        const region = ((this._client as any).region) || ''\n\n        // This returns a promise\n        return this._client.makeBucket(container, region)\n    }\n\n    /**\n     * Check if a container exists.\n     * \n     * @param container - Name of the container\n     * @returns Promises that resolves with a boolean indicating if the container exists.\n     * @async\n     */\n    isContainer(container: string): Promise<boolean> {\n        return this._client.bucketExists(container)\n            .then((result) => {\n                return !!result\n            })\n    }\n\n    /**\n     * Create a container (\"bucket\") on the server if it doesn't already exist.\n     * \n     * @param container - Name of the container\n     * @param options - The option argument is ignored by this provider.\n     * @returns Promise that resolves once the container has been created\n     * @async\n     */\n    ensureContainer(container: string, options?: any): Promise<void> {\n        return this.isContainer(container).then((exists) => {\n            if (!exists) {\n                return this.createContainer(container, options)\n            }\n        })\n    }\n\n    /**\n     * Lists all containers belonging to the user\n     * \n     * @returns Promise that resolves with an array of all the containers\n     * @async\n     */\n    listContainers(): Promise<string[]> {\n        return this._client.listBuckets()\n            .then((list) => list.map((el) => (el && el.name) || undefined))\n    }\n\n    /**\n     * Removes a container from the server\n     * \n     * @param container - Name of the container\n     * @returns Promise that resolves once the container has been removed\n     * @async\n     */\n    deleteContainer(container: string): Promise<void> {\n        return this._client.removeBucket(container)\n    }\n\n    /**\n     * Uploads a stream to the object storage server\n     * \n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param data - Object data or stream. Can be a Stream (Readable Stream), Buffer or string.\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary\n     * @returns Promise that resolves once the object has been uploaded\n     * @async\n     */\n    putObject(container: string, path: string, data: Stream|string|Buffer, options?: PutObjectOptions): Promise<void> {\n        return Promise.resolve(this._client.putObject(container, path, data, null, (options && options.metadata)))\n    }\n\n    /**\n     * Requests an object from the server. The method returns a Promise that resolves to a Readable Stream containing the data.\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Readable Stream containing the object's data\n     * @async\n     */\n    getObject(container: string, path: string): Promise<Stream> {\n        return this._client.getObject(container, path)\n    }\n\n    /**\n     * Returns a list of objects with a given prefix (folder). The list is not recursive, so prefixes (folders) are returned as such.\n     * \n     * @param container - Name of the container\n     * @param prefix - Prefix (folder) inside which to list objects\n     * @returns List of elements returned by the server\n     * @async\n     */\n    listObjects(container: string, prefix?: string): Promise<ListResults> {\n        return new Promise((resolve, reject) => {\n            const stream = this._client.listObjectsV2(container, prefix, false) as Stream\n            const list = [] as ListResults\n            stream.on('data', (obj) => {\n                let res\n\n                // If we have a file, add path, lastModified and size\n                if (obj.name && obj.lastModified) {\n                    res = {\n                        lastModified: obj.lastModified,\n                        path: obj.name,\n                        size: obj.size\n                    } as ListItemObject\n                }\n                // If we have a prefix (folder) instead\n                else if (obj.prefix) {\n                    res = {\n                        prefix: obj.prefix\n                    } as ListItemPrefix\n                }\n                else {\n                    throw Error('Invalid object returned from the server')\n                }\n\n                list.push(res)\n            })\n            stream.on('error', (err) => {\n                reject(err)\n            })\n            stream.on('end', () => {\n                resolve(list)\n            })\n        })\n    }\n\n    /**\n     * Removes an object from the server\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Promise that resolves once the object has been removed\n     * @async\n     */\n    deleteObject(container: string, path: string): Promise<void> {\n        return this._client.removeObject(container, path)\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use to request an object from the server with a GET request, even if the object is private.\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedGetUrl(container: string, path: string, ttl?: number): Promise<string> {\n        if (!ttl || ttl < 1) {\n            ttl = 86400\n        }\n\n        return this._client.presignedGetObject(container, path, ttl)\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use for PUT operations on an object in the server, even if the object is private.\n     * \n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param options - This argument is ignored by the GenericS3 provider\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedPutUrl(container: string, path: string, options?: any, ttl?: number): Promise<string> {\n        if (!ttl || ttl < 1) {\n            ttl = 86400\n        }\n\n        return this._client.presignedPutObject(container, path, ttl)\n    }\n}\n\nexport = GenericS3Provider\n",
    "absorb/SMCloudStore/google-cloud-storage/src/GoogleCloudStorageProvider.ts": "'use strict'\n\nimport {CreateBucketRequest, CreateWriteStreamOptions, GetFilesOptions, Storage} from '@google-cloud/storage'\nimport {ListItemObject, ListItemPrefix, ListResults, PutObjectOptions, StorageProvider} from '@smcloudstore/core/dist/StorageProvider'\nimport {IsStream} from '@smcloudstore/core/dist/StreamUtils'\nimport {Duplex, Stream} from 'stream'\n\n/**\n * Connection options for a Google Cloud Storage provider.\n */\ninterface GoogleCloudConnectionOptions {\n    /** ID of the Google Cloud project */\n    projectId: string\n    /** Path of the JSON file containing the keys */\n    keyFilename: string\n}\n\n/**\n * Options passed when creating a container\n */\ninterface GoogleCloudCreateContainerOptions {\n    /** Storage class to use. Defaults to 'multi_regional' */\n    class?: 'multi_regional' | 'regional' | 'nearline' | 'coldline'\n\n    /** Region in which to create the container (or multi-regional location if using multi_regional storage). Defaults to 'us' is class is 'multi_regional'; 'us-central1' otherwise. */\n    region?: string\n}\n\n/**\n * Client to interact with Google Cloud Storage.\n */\nclass GoogleCloudStorageProvider extends StorageProvider {\n    protected _client: Storage\n\n    /**\n     * Initializes a new client to interact with Minio.\n     * \n     * @param connection - Dictionary with connection options.\n     */\n    constructor(connection: GoogleCloudConnectionOptions) {\n        super(connection)\n\n        // Provider name\n        this._provider = 'google-cloud-storage'\n\n        // Check if we have a connection\n        if (!connection || !Object.keys(connection).length) {\n            // We might have auth data passed via environmental variables, which will be picked up by the library\n            if (!process.env.GCLOUD_PROJECT || !process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n                throw new Error('Connection argument is empty')\n            }\n        }\n\n        // The Google Cloud library will validate the connection object\n        this._client = new Storage(connection)\n    }\n\n    /**\n     * Create a container (\"bucket\") on the server.\n     * \n     * @param container - Name of the container\n     * @param options - Dictionary with options for creating the container, including the region\n     * @returns Promise that resolves once the container has been created. The promise doesn't contain any meaningful return value.\n     * @async\n     */\n    createContainer(container: string, options?: GoogleCloudCreateContainerOptions): Promise<void> {\n        // Get storage options\n        if (!options) {\n            options = {}\n        }\n        const metadata = {} as CreateBucketRequest\n\n        // Set storage class and default location\n        switch (options.class) {\n            case 'multi_regional':\n                metadata.multiRegional = true\n                metadata.location = 'us'\n                break\n            case 'regional':\n                metadata.regional = true\n                metadata.location = 'us-central1'\n                break\n            case 'coldline':\n                metadata.coldline = true\n                metadata.location = 'us-central1'\n                break\n            case 'nearline':\n                metadata.nearline = true\n                metadata.location = 'us-central1'\n                break\n        }\n\n        // Check if we have a location/region\n        if (options.region) {\n            metadata.location = options.region\n        }\n\n        // Create the bucket, returning a promise\n        const bucket = this._client.bucket(container)\n        return bucket.create(metadata).then(() => {\n            return\n        })\n    }\n\n    /**\n     * Check if a container exists.\n     * \n     * @param container - Name of the container\n     * @returns Promises that resolves with a boolean indicating if the container exists.\n     * @async\n     */\n    isContainer(container: string): Promise<boolean> {\n        const bucket = this._client.bucket(container)\n\n        return bucket.exists().then((response) => {\n            return !!response[0]\n        })\n    }\n\n    /**\n     * Create a container (\"bucket\") on the server if it doesn't already exist.\n     * \n     * @param container - Name of the container\n     * @param options - Dictionary with options for creating the container, including the region\n     * @returns Promise that resolves once the container has been created\n     * @async\n     */\n    ensureContainer(container: string, options?: GoogleCloudCreateContainerOptions): Promise<void> {\n        return this.isContainer(container).then((exists) => {\n            if (!exists) {\n                return this.createContainer(container, options)\n            }\n        })\n    }\n\n    /**\n     * Lists all containers belonging to the user\n     * \n     * @returns Promise that resolves with an array of all the containers\n     * @async\n     */\n    listContainers(): Promise<string[]> {\n        return this._client.getBuckets().then((list) => {\n            if (!list || !list[0] || !list[0].length) {\n                return []\n            }\n            else {\n                return list[0].map((el) => (el && el.name))\n            }\n        })\n    }\n\n    /**\n     * Removes a container from the server\n     * \n     * @param container - Name of the container\n     * @returns Promise that resolves once the container has been removed\n     * @async\n     */\n    deleteContainer(container: string): Promise<void> {\n        const bucket = this._client.bucket(container)\n        return bucket.delete().then(() => {\n            return\n        })\n    }\n\n    /**\n     * Uploads a stream to the object storage server\n     * \n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param data - Object data or stream. Can be a Stream (Readable Stream), Buffer or string.\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary\n     * @returns Promise that resolves once the object has been uploaded\n     * @async\n     */\n    putObject(container: string, path: string, data: Stream|string|Buffer, options?: PutObjectOptions): Promise<void> {\n        if (!options) {\n            options = {}\n        }\n\n        const bucket = this._client.bucket(container)\n        const file = bucket.file(path)\n\n        // Convert strings and buffers to streams\n        let dataStream: Stream\n        if (IsStream(data)) {\n            dataStream = data as Stream\n        }\n        else {\n            dataStream = new Duplex()\n            // Buffers\n            if (typeof data == 'object' && Buffer.isBuffer(data)) {\n                (dataStream as Duplex).push(data)\n            }\n            else if (typeof data == 'string') {\n                (dataStream as Duplex).push(data, 'utf8')\n            }\n            else {\n                throw Error('Invalid data argument: must be a stream, a Buffer or a string')\n            }\n            (dataStream as Duplex).push(null)\n        }\n\n        return new Promise((resolve, reject) => {\n            // Clone the metadata object before modifying it\n            const metadataClone = Object.assign({}, options.metadata) as {[k: string]: string}\n\n            const streamOptions = {\n                metadata: metadataClone,\n                resumable: false,\n                validation: 'md5'\n            } as CreateWriteStreamOptions\n\n            // Check if we have a Content-Type (case-insensitive)\n            for (const key in metadataClone) {\n                if (!metadataClone.hasOwnProperty(key)) {\n                    continue\n                }\n\n                if (key.toLowerCase() == 'content-type') {\n                    streamOptions.contentType = metadataClone[key]\n                    delete metadataClone[key]\n                    break\n                }\n            }\n\n            dataStream.pipe(file.createWriteStream(streamOptions))\n                .on('error', (err) => {\n                    reject(err)\n                })\n                .on('finish', () => {\n                    resolve()\n                })\n        })\n    }\n\n    /**\n     * Requests an object from the server. The method returns a Promise that resolves to a Readable Stream containing the data.\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Readable Stream containing the object's data\n     * @async\n     */\n    getObject(container: string, path: string): Promise<Stream> {\n        const bucket = this._client.bucket(container)\n        const file = bucket.file(path)\n\n        // For Google Cloud Storage, this method doesn't actually need to be asynchronous\n        return Promise.resolve(file.createReadStream({validation: 'md5'}))\n    }\n\n    /**\n     * Returns a list of objects with a given prefix (folder). The list is not recursive, so prefixes (folders) are returned as such.\n     * \n     * @param container - Name of the container\n     * @param  prefix - Prefix (folder) inside which to list objects\n     * @returns List of elements returned by the server\n     * @async\n     */\n    listObjects(container: string, prefix?: string): Promise<ListResults> {\n        let list = [] as ListResults\n        const requestPromise = (opts: GetFilesOptions): Promise<ListResults> => {\n            return new Promise((resolve, reject) => {\n                if (!opts) {\n                    opts = {\n                        autoPaginate: false,\n                        delimiter: '/',\n                        // maxResults: 2, // For debug only\n                        prefix: prefix\n                    }\n                }\n\n                // Using the callback API so we can get the full list\n                // Error in typings below\n                this._client.bucket(container).getFiles(opts, (err, files, nextQuery, apiResponse) => {\n                    if (err) {\n                        return reject(err)\n                    }\n\n                    if (files && files.length) {\n                        list = list.concat(files.map((el) => {\n                            const obj = {\n                                path: el.name\n                            } as ListItemObject\n                            if (el.metadata) {\n                                if (el.metadata.size) {\n                                    obj.size = parseInt(el.metadata.size, 10)\n                                }\n                                if (el.metadata.updated) {\n                                    obj.lastModified = new Date(el.metadata.updated)\n                                }\n                                if (el.metadata.timeCreated) {\n                                    obj.creationTime = new Date(el.metadata.timeCreated)\n                                }\n                                if (el.metadata.md5Hash) {\n                                    // Google Cloud Storage returns the MD5 as base64, so convert it to HEX\n                                    obj.contentMD5 = Buffer.from(el.metadata.md5Hash, 'base64').toString('hex')\n                                }\n                                if (el.metadata.contentType) {\n                                    obj.contentType = el.metadata.contentType\n                                }\n                            }\n                            return obj\n                        }))\n                    }\n\n                    // Need to use any because of error with types\n                    if (apiResponse && (apiResponse as any).prefixes) {\n                        list = list.concat((apiResponse as any).prefixes.map((el) => {\n                            return {prefix: el} as ListItemPrefix\n                        }))\n                    }\n\n                    if (nextQuery) {\n                        return resolve(requestPromise(nextQuery))\n                    }\n                    else {\n                        return resolve(list)\n                    }\n                })\n            })\n        }\n\n        return requestPromise(null)\n    }\n\n    /**\n     * Removes an object from the server\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @returns Promise that resolves once the object has been removed\n     * @async\n     */\n    deleteObject(container: string, path: string): Promise<void> {\n        const bucket = this._client.bucket(container)\n        const file = bucket.file(path)\n\n        // Returns a promise\n        return file.delete().then(() => {\n            return\n        })\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use to request an object from the server with a GET request, even if the object is private.\n     * \n     * @param container - Name of the container\n     * @param path - Path of the object, inside the container\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedGetUrl(container: string, path: string, ttl?: number): Promise<string> {\n        return this.presignedUrl('read', container, path, ttl)\n    }\n\n    /**\n     * Returns a URL that clients (e.g. browsers) can use for PUT operations on an object in the server, even if the object is private.\n     * \n     * @param container - Name of the container\n     * @param path - Path where to store the object, inside the container\n     * @param options - Key-value pair of options used by providers, including the `metadata` dictionary\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for GET requests\n     * @async\n     */\n    presignedPutUrl(container: string, path: string, options?: PutObjectOptions, ttl?: number): Promise<string> {\n        const contentSettings = {} as any\n        if (options && options.metadata) {\n            // Check if we have a Content-Type (case-insensitive)\n            for (const key in options.metadata) {\n                if (!options.metadata.hasOwnProperty(key)) {\n                    continue\n                }\n\n                if (key.toLowerCase() == 'content-type') {\n                    contentSettings.contentType = options.metadata[key]\n                    break\n                }\n            }\n        }\n        return this.presignedUrl('write', container, path, contentSettings, ttl)\n    }\n\n    /**\n     * Returns a presigned URL for the specific operation.\n     * \n     * @param operation - Action: \"read\" or \"write\"\n     * @param container - Name of the container\n     * @param path - Path of the target object, inside the container\n     * @param contentSettings - Additional headers that are required\n     * @param ttl - Expiry time of the URL, in seconds (default: 1 day)\n     * @returns Promise that resolves with the pre-signed URL for the specified operation\n     * @async\n     */\n    private presignedUrl(action: 'read'|'write', container: string, path: string, contentSettings?: any, ttl?: number): Promise<string> {\n        if (!ttl || ttl < 1) {\n            ttl = 86400\n        }\n\n        const bucket = this._client.bucket(container)\n        const file = bucket.file(path)\n\n        // Returns a promise\n        const config = Object.assign(\n            {},\n            {\n                action: action,\n                expires: new Date(Date.now() + ttl * 1000) // Convert TTL to a point in time\n            },\n            contentSettings || {}\n        )\n\n        return file.getSignedUrl(config).then((data: string[]) => {\n            if (data && data[0]) {\n                return data[0]\n            }\n            else {\n                throw Error('No pre-signed URL was returned')\n            }\n        })\n    }\n}\n\nexport = GoogleCloudStorageProvider\n",
    "apps/api/src/model/lib/reports.service.ts": "import { Inject, Injectable } from '@nestjs/common';\nimport * as moment from 'moment';\nimport {\n  TranslationService,\n  TranslationServiceKey,\n} from './translation.service';\nimport {\n  PrintSalesInvoice,\n  PrintSalesInvoiceParty,\n} from './print.sales.invoice';\nimport { SalesInvoiceModel } from './sales.invoice.model';\nimport { LanguageModel } from './language.model';\nimport * as _ from 'lodash';\nimport { getService } from './module.reference.service';\nimport {\n  SalesInvoiceService,\n  SalesInvoiceServiceKey,\n} from './sales.invoice.service';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst fs = require('fs');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst PDFDocument = require('pdfkit');\n\nexport const ReportsServiceKey = 'ReportsServiceKey';\n\nasync function createInvoice(path: string, invoice: PrintSalesInvoice) {\n  const doc = new PDFDocument({ pdfVersion: '1.7', margin: 50 });\n  const messages = invoice.messages;\n\n  const fontPath = fs.existsSync('./assets/Cardo-Regular.ttf')\n    ? './assets/'\n    : fs.existsSync('./apps/api/assets/Cardo-Regular.ttf')\n    ? './apps/api/assets/'\n    : './apps/api/src/assets/';\n\n  // Metadata defines document type.\n  if (invoice.metadata) {\n    const metadata = invoice.metadata.trim();\n    doc.file(Buffer.from(metadata), { name: 'factur-x.xml' });\n  }\n\n  doc.registerFont('Cardo', `${fontPath}Cardo-Regular.ttf`);\n  doc.registerFont('Cardo-Bold', `${fontPath}Cardo-Bold.ttf`);\n\n  function generateHeader() {\n    doc\n      .font('Cardo-Bold')\n      .fillColor('#444444')\n      .fontSize(18)\n      .text(\n        `${messages.invoice(invoice.vatRegistered)} ${invoice.invoiceNumber}`,\n        20,\n        57,\n        { align: 'right' },\n      )\n      .font('Cardo')\n      .fontSize(10);\n\n    doc\n      .font('Cardo')\n      .text(`${messages.issuedOn}: ${invoice.issuedOnPrintable}`, 200, 87, {\n        align: 'right',\n      })\n      .text(`${messages.dueDate}: ${invoice.dueDatePrintable}`, 200, 87 + 15, {\n        align: 'right',\n      })\n      .text(\n        `${messages.invoiceNumber}: ${invoice.invoiceNumber}`,\n        200,\n        87 + 2 * 15,\n        { align: 'right' },\n      );\n\n    let line = 87 + 60;\n    if (invoice.vatRegistered) {\n      doc\n        .font('Cardo')\n        .text(\n          `${messages.transactionDate}: ${invoice.transactionDatePrintable}`,\n          200,\n          87 + 3 * 15,\n          { align: 'right' },\n        );\n      line += 15;\n    }\n\n    const seller = invoice.seller;\n    const buyer = invoice.buyer;\n\n    doc\n      .font('Cardo-Bold')\n      .text(`${messages.seller}:`, 20, line)\n      .font('Cardo')\n      .text(seller.name, 20, line + 15)\n      .text(seller.road, 20, line + 2 * 15)\n      .text(seller.zipCode + ' ' + invoice.seller.city, 20, line + 3 * 15)\n      .text(seller.country, 20, line + 4 * 15)\n      .text(invoice.sellerContact, 20, line + 5 * 15)\n      .text(seller.registration, 20, line + 6 * 15)\n      .text(`IČ: ${seller.idNumber}`, 20, line + 7 * 15)\n      .text(\n        seller.vatNumber && invoice.vatRegistered\n          ? `DIČ: ${seller.vatNumber}`\n          : '',\n        20,\n        line + 8 * 15,\n      )\n      .text(`ČR Účet: ${invoice.payTo}`, 20, line + 9 * 15)\n      .text(`IBAN: ${invoice.iban}`, 20, line + 10 * 15)\n      .text(`SWIFT: ${invoice.swift}`, 20, line + 11 * 15)\n\n      .font('Cardo-Bold')\n      .text(`${messages.buyer}:`, 200, line, { align: 'right' })\n      .font('Cardo')\n      .text(buyer.name, 200, line + 15, { align: 'right' })\n      .text(buyer.road, 200, line + 2 * 15, { align: 'right' })\n      .text(buyer.zipCode + ' ' + buyer.city, 200, line + 3 * 15, {\n        align: 'right',\n      })\n      .text(buyer.country, 200, line + 4 * 15, { align: 'right' })\n      .text(invoice.buyerEmail, 200, line + 5 * 15, { align: 'right' })\n      .text(`${messages.idNumber}: ${buyer.idNumber}`, 200, line + 6 * 15, {\n        align: 'right',\n      })\n      .text(\n        buyer.vatNumber && invoice.vatRegistered\n          ? `${messages.vatNumber}: ${buyer.vatNumber}`\n          : '',\n        200,\n        line + 7 * 15,\n        { align: 'right' },\n      )\n\n      .moveDown();\n  }\n\n  function generateFooter() {\n    doc\n      .font('Cardo')\n      .fontSize(5)\n      .text(invoice.footer || messages.invoiceFooter(invoice), 50, 700, {\n        align: 'center',\n        width: 500,\n      });\n  }\n\n  function generateTableRow(y, c1, c2, c3, c4, c5, c6, r2) {\n    doc\n      .font('Cardo')\n      .fontSize(10)\n      .text(c1, 50, y)\n      .text(c2, 150, y)\n      .text(c3, 180, y, { width: 90, align: 'right' });\n\n    if (invoice.vatRegistered && !invoice.reverseCharge) {\n      doc\n        .text(c4, 270, y, { width: 90, align: 'right' })\n        .text(c5, 360, y, { width: 90, align: 'right' });\n    }\n\n    doc.text(c6, 430, y, { align: 'right' });\n\n    if (r2) doc.text(r2, 50, y + 15);\n  }\n\n  function generateInvoiceTable() {\n    let i;\n    let invoiceTableTop = 360;\n\n    generateTableRow(\n      invoiceTableTop,\n      `${messages.item}`,\n      `${invoice.currency}/1`,\n      `${messages.units}`,\n      `Základ ${invoice.currency}`,\n      'Sazba',\n      `${messages.total} ${invoice.currency}`,\n      null,\n    );\n\n    let pageNumber = 0;\n\n    for (i = 0; i < invoice.items.length; i++) {\n      const item = invoice.items[i];\n      if (i >= 11 * (pageNumber + 1)) {\n        doc.addPage();\n        pageNumber++;\n        invoiceTableTop = 100;\n      }\n      const position = invoiceTableTop + (i + 1) * 30 - 11 * pageNumber * 30;\n\n      generateTableRow(\n        position,\n        `${i + 1}. ${item.name}`,\n        item.itemPrice,\n        item.items,\n        item.totalLine,\n        item.vatRatePercent,\n        item.totalLineToBePaid,\n        item.description,\n      );\n    }\n  }\n\n  function generateVatTable() {\n    let i = 0;\n    let invoiceTableTop =\n      (invoice.items.length <= 11 ? 450 : 200) +\n      (invoice.items.length % 11) * 30;\n\n    if (invoice.printRate) {\n      generateTableRow(\n        invoiceTableTop,\n        '',\n        '',\n        '',\n        '',\n        '',\n        `Kurz: 1 ${invoice.currency} = ${invoice.currencyMultiplyingRateToAccountingSchemeCurrency} ${invoice.accountingSchemeCurrency}`,\n        null,\n      );\n      invoiceTableTop += 15;\n    }\n    if (invoice.vatRegistered && !invoice.reverseCharge) {\n      generateTableRow(\n        invoiceTableTop,\n        '',\n        '',\n        '',\n        '',\n        '',\n        `Základ daně: ${invoice.totalLinesAccountingSchemeCurrency} ${invoice.accountingSchemeCurrency}`,\n        null,\n      );\n      invoiceTableTop += 15;\n      for (i = 0; i < invoice.vatReport.length; i++) {\n        const item = invoice.vatReport[i];\n        const position = invoiceTableTop + i * 15;\n        generateTableRow(\n          position,\n          '',\n          ' ',\n          '',\n          '',\n          '',\n          `${item.vatRatePercent}% DPH: ${item.vatTotalAccountingSchemeCurrency} ${invoice.accountingSchemeCurrency}`,\n          null,\n        );\n      }\n      invoiceTableTop += 15 * invoice.vatReport.length;\n    }\n    if (invoice.reverseCharge) {\n      generateTableRow(\n        invoiceTableTop,\n        `${messages.reverseCharge}`,\n        '',\n        '',\n        '',\n        '',\n        '',\n        null,\n      );\n    }\n    doc\n      .font('Cardo-Bold')\n      .fontSize(18)\n      .text(\n        `${messages.totalToBePaid}: ${invoice.grandTotal} ${invoice.currency}`,\n        50,\n        invoiceTableTop + 30,\n      )\n      .font('Cardo');\n  }\n\n  generateHeader();\n  generateInvoiceTable();\n  generateFooter();\n  generateVatTable();\n\n  return savePdfToFile(doc, path);\n}\n\nfunction savePdfToFile(pdf, fileName: string): Promise<void> {\n  return new Promise<void>(resolve => {\n    // To determine when the PDF has finished being written successfully\n    // we need to confirm the following 2 conditions:\n    //\n    //   1. The write stream has been closed\n    //   2. PDFDocument.end() was called synchronously without an error being thrown\n\n    let pendingStepCount = 2;\n\n    const stepFinished = () => {\n      if (--pendingStepCount === 0) {\n        resolve();\n      }\n    };\n\n    const writeStream = fs.createWriteStream(fileName);\n    writeStream.on('close', stepFinished);\n    pdf.pipe(writeStream);\n\n    pdf.end();\n\n    stepFinished();\n  });\n}\n\n@Injectable()\nexport class ReportsService {\n  constructor(\n    @Inject(TranslationServiceKey)\n    private readonly translationService: TranslationService,\n  ) {}\n\n  async printSalesInvoice(data: SalesInvoiceModel, language: LanguageModel) {\n    const organization = data.organization;\n    const accountingScheme = organization.accountingScheme;\n    const organizationLegalAddress = organization.legalAddress;\n    const vatNumber = organization.vatNumber;\n    const vatRegistered = !!vatNumber;\n    const seller = {\n      name: organization.legalName,\n      road: organizationLegalAddress.line1,\n      city: organizationLegalAddress.city,\n      country: organizationLegalAddress.country.displayName,\n      vatNumber,\n      zipCode: organizationLegalAddress.zipCode,\n      registration: organization.registration,\n      idNumber: organization.idNumber,\n    };\n    const customer = await data.customer;\n    const customerLegalAddress = await customer.legalAddress;\n    const buyer: PrintSalesInvoiceParty = {\n      name: customer.legalName,\n      road: customerLegalAddress.line1,\n      city: customerLegalAddress.city,\n      country: customerLegalAddress.country.displayName,\n      vatNumber: customer.vatNumber,\n      zipCode: customerLegalAddress.zipCode,\n      registration: customer.idNumber,\n      idNumber: customer.idNumber,\n    };\n\n    function dateToString(d: Date): string {\n      return moment(d).format('DD.MM.YYYY');\n    }\n\n    const items = [];\n\n    for (const line of data.lines) {\n      const lineTaxPercent = (await line.lineTax).ratePercent;\n      items.push({\n        name: line.product.displayName,\n        itemPrice: _.round(line.linePrice / line.quantity, 2),\n        items: line.quantity,\n        totalLine: line.linePrice,\n        vatRatePercent: lineTaxPercent,\n        totalLineToBePaid: _.round(\n          line.linePrice * (1 + lineTaxPercent / 100),\n          2,\n        ),\n        description: line.narration,\n      });\n    }\n    const bankAccount = await data.bankAccount;\n\n    const salesInvoiceService = getService<SalesInvoiceService>(\n      SalesInvoiceServiceKey,\n    );\n\n    const converted = {\n      messages: this.translationService.getMessages(language),\n      transactionDatePrintable: dateToString(data.transactionDate),\n      issuedOnPrintable: dateToString(data.issuedOn),\n      dueDatePrintable: dateToString(data.dueDate),\n      invoiceNumber: data.documentNo,\n      payTo: bankAccount.bankAccountCustomerPrintableNumber,\n      iban: bankAccount.iban,\n      swift: bankAccount.swift,\n      seller,\n      buyer,\n      items,\n      totalLines: (+data.totalLines).toFixed(2),\n      grandTotal: (+data.grandTotal).toFixed(2),\n      currency: data.currency.displayName,\n      currencyMultiplyingRateToAccountingSchemeCurrency: (+data.currencyMultiplyingRateToAccountingSchemeCurrency).toFixed(\n        3,\n      ),\n      accountingSchemeCurrency: accountingScheme\n        ? accountingScheme.currency.displayName\n        : '###',\n      totalLinesAccountingSchemeCurrency: (+data.totalLinesAccountingSchemeCurrency).toFixed(\n        2,\n      ),\n      grandTotalAccountingSchemeCurrency: (+data.grandTotalAccountingSchemeCurrency).toFixed(\n        2,\n      ),\n      vatReport: data.vatReport.map(x => ({\n        vatRatePercent: (+x.vatRatePercent).toFixed(0),\n        vatTotal: (+x.vatTotal).toFixed(2),\n        vatTotalAccountingSchemeCurrency: (+x.vatTotalAccountingSchemeCurrencyRaw).toFixed(\n          2,\n        ),\n      })),\n      printRate:\n        data.currency.displayName !==\n        (accountingScheme ? accountingScheme.currency.displayName : '###'),\n      vatRegistered,\n      buyerEmail: customer.invoicingEmail,\n      sellerContact: organization.contact,\n      reverseCharge: data.reverseCharge,\n      footer: data.printNote,\n      metadata: salesInvoiceService.exportToXml(data),\n    };\n\n    data.content = await this.printInvoice(converted);\n    data.printed = true;\n    data.printDate = new Date();\n    return data;\n  }\n\n  async printInvoice(data: PrintSalesInvoice): Promise<string> {\n    const resultFile = `/tmp/invoice-${data.invoiceNumber}-${Date.now()}`;\n    await createInvoice(`${resultFile}.pdf`, data);\n\n    const content = fs.readFileSync(`${resultFile}.pdf`);\n    return '\\\\x' + content.toString('hex');\n  }\n}\n",
    "apps/api/src/app/app.controller.spec.ts": "import { Test, TestingModule } from '@nestjs/testing';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\ndescribe('AppController', () => {\n  let app: TestingModule;\n\n  beforeAll(async () => {\n    app = await Test.createTestingModule({\n      controllers: [AppController],\n      providers: [AppService],\n    }).compile();\n  });\n\n  describe('getData', () => {\n    it('should return \"Welcome to api!\"', async () => {\n      const appController = app.get<AppController>(AppController);\n      expect(await appController.getData()).toEqual({\n        message: 'Welcome to api!',\n      });\n    });\n  });\n});\n",
    "apps/api/src/app/app.service.spec.ts": "import { Test } from '@nestjs/testing';\n\nimport { AppService } from './app.service';\n\ndescribe('AppService', () => {\n  let service: AppService;\n\n  beforeAll(async () => {\n    const app = await Test.createTestingModule({\n      providers: [AppService],\n    }).compile();\n\n    service = app.get<AppService>(AppService);\n  });\n\n  describe('getData', () => {\n    it('should return \"Welcome to api!\"', () => {\n      expect(service.getData()).toEqual({ message: 'Welcome to api!' });\n    });\n  });\n});\n",
    "apps/api/src/app/custom/custom.sales.invoice.service.ts": "import { Injectable } from '@nestjs/common';\nimport { EntityManager } from 'typeorm';\nimport * as _ from 'lodash';\nimport { SalesInvoiceSaveArgsModel, SalesInvoiceService } from '../../model';\n\n@Injectable()\nexport class CustomSalesInvoiceService extends SalesInvoiceService {\n  async checkSaveArgs(\n    transactionalEntityManager: EntityManager,\n    args: SalesInvoiceSaveArgsModel,\n  ) {\n    const organization = await this.getOrganization(\n      transactionalEntityManager,\n      args,\n    );\n    if (organization.displayName === 'DP') {\n      const invoices = await this.getRepository(transactionalEntityManager)\n        .createQueryBuilder('invoice')\n        .where(\n          `invoice.organization = :organizationId AND invoice.\"transactionDate\">='2021-01-01' AND invoice.\"transactionDate\"<='2021-12-31' `,\n          {\n            organizationId: organization.id,\n          },\n        )\n        .getMany();\n      const total = _.sum(\n        invoices.map(x => x.totalLinesAccountingSchemeCurrency),\n      );\n\n      if (total > 1000000) throw new Error('Cannot invoice more than 1M CZK');\n    }\n  }\n}\n",
    "apps/api/src/app/custom/custom.save.args.validation.service.ts": "import { EntityManager } from 'typeorm/index';\nimport { Injectable } from '@nestjs/common';\nimport { BaseSaveArgsModel, getService } from '../../model';\n\n/**\n * Custom save args validation service.\n * Checks if the saving service has `checkSaveArgs` method implemented and calls it if it exists\n */\n@Injectable()\nexport class CustomSaveArgsValidationService {\n  async checkIsSaveArgValid<T extends BaseSaveArgsModel>(\n    transactionalEntityManager: EntityManager,\n    typeName: string,\n    args: T,\n  ): Promise<void> {\n    const service = getService(typeName);\n    if ((service as any).checkSaveArgs) {\n      await (service as any).checkSaveArgs(transactionalEntityManager, args);\n    }\n  }\n}\n",
    "apps/api/src/app/migration.service.ts": "import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { Connection } from 'typeorm';\nimport { InjectConnection } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MigrationService implements OnModuleInit {\n  constructor(@InjectConnection() readonly connection: Connection) {}\n\n  async onModuleInit(): Promise<void> {\n    console.log('Running migrations...');\n    await this.connection.runMigrations({\n      transaction: 'all',\n    });\n  }\n}\n",
    "apps/api/src/app/migrations/1595508635320-CreateDB.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateDB1595508635320 implements MigrationInterface {\n  name = 'CreateDB1595508635320';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"currency_rate\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"currencyMultiplyingRate\" double precision NOT NULL, \"end\" date NOT NULL, \"start\" date NOT NULL, \"fromId\" integer, \"toId\" integer, CONSTRAINT \"PK_3a2814e7c859ab225ff61369f06\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"bank\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"bankIdentifierCode\" character varying NOT NULL, CONSTRAINT \"PK_80fb8d595e2cd27c4131c68f5d9\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_1930777e62854add6a64f50d42\" ON \"public\".\"bank\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"document_number_sequence\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"forType\" character varying NOT NULL, \"current\" integer NOT NULL, \"organizationId\" integer, CONSTRAINT \"PK_4cefcadc7d07e1b79c1ddb07873\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"country\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"isoCode\" character varying NOT NULL, CONSTRAINT \"UQ_0460c7a81bca1f3f2fc6fbf99d6\" UNIQUE (\"isoCode\"), CONSTRAINT \"PK_f1e41a6df5739da5ceefdbd5a1b\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"UQ_6eba1a52ee121d100c8a0a6510c\" ON \"public\".\"country\" (\"isoCode\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_06db3c87e9e1b9eba96918b308\" ON \"public\".\"country\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"customer\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"legalName\" character varying NOT NULL, \"vatNumber\" character varying, \"invoicingEmail\" character varying NOT NULL, \"idNumber\" character varying NOT NULL, \"legalAddressId\" integer, \"note\" character varying, \"addressId\" integer, CONSTRAINT \"PK_493862f6fb77845712126f204eb\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_a843215c5e375894bcd5bdf24a\" ON \"public\".\"customer\" (\"vatNumber\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_71b54ec7502c83c7f503f57c64\" ON \"public\".\"customer\" (\"legalName\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_df529c45726940beb548906481\" ON \"public\".\"customer\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"address\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"line1\" character varying NOT NULL, \"city\" character varying NOT NULL, \"zipCode\" character varying NOT NULL, \"countryId\" integer, CONSTRAINT \"PK_3d1e15b90ff2a5f2bfc431c6bdd\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"user_identity\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"externalUser\" character varying NOT NULL, \"provider\" character varying NOT NULL, \"userId\" integer, CONSTRAINT \"PK_9d675c36942ef9b6b83b7e28c2c\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_1c243d6d65f07e169d53a69ea0\" ON \"public\".\"user_identity\" (\"provider\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_c555c4388d24da3c6fa22d85bd\" ON \"public\".\"user_identity\" (\"externalUser\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"user\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"email\" character varying, \"username\" character varying, \"name\" character varying, CONSTRAINT \"PK_03b91d2b8321aa7ba32257dc321\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_78a916df40e02a9deb1c4b75ed\" ON \"public\".\"user\" (\"username\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_065d4d8f3b5adb4a08841eae3c\" ON \"public\".\"user\" (\"name\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_e12875dfb3b1d92d7d7c5377e2\" ON \"public\".\"user\" (\"email\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"user_to_organization\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"organizationId\" integer, \"userId\" integer, CONSTRAINT \"PK_5837964dbf6c88bec81754234bf\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"organization\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"contact\" character varying NOT NULL, \"legalName\" character varying NOT NULL, \"registration\" character varying NOT NULL, \"idNumber\" character varying NOT NULL, \"vatNumber\" character varying, \"accountingSchemeId\" integer, \"bankAccountId\" integer, \"legalAddressId\" integer, CONSTRAINT \"PK_ff95b434170f261599540276497\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_99ecb4de1fda7ee51fb91b3055\" ON \"public\".\"organization\" (\"vatNumber\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_4177d3499a2c7edb42ead3d916\" ON \"public\".\"organization\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"bank_account\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"iban\" character varying NOT NULL, \"swift\" character varying NOT NULL, \"bankAccountCustomerPrintableNumber\" character varying NOT NULL, \"bankId\" integer, CONSTRAINT \"PK_7fb97b7c8d90387687697cebd5f\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_d13847b5db0cf66c1ea23615eb\" ON \"public\".\"bank_account\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"tax\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"ratePercent\" integer NOT NULL, \"isStandard\" boolean NOT NULL, CONSTRAINT \"PK_5437f933e5996c78821d7b777a5\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"product\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"sku\" character varying NOT NULL, \"uomId\" integer, CONSTRAINT \"PK_da169ec9c2ae25fb86633d10f9f\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_34f6ca1cd897cc926bdcca1ca3\" ON \"public\".\"product\" (\"sku\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_826d69dcc65d9650be67af6d48\" ON \"public\".\"product\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"sales_invoice_line\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"lineOrder\" integer NOT NULL, \"linePrice\" double precision NOT NULL, \"quantity\" double precision NOT NULL, \"narration\" character varying NOT NULL, \"invoiceId\" integer, \"lineTaxId\" integer, \"productId\" integer, CONSTRAINT \"PK_ae0c4e44242436d0191b61f435c\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"sales_invoice_vat\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"vatRatePercent\" numeric(12,2) NOT NULL, \"vatTotalAccountingSchemeCurrencyRaw\" double precision NOT NULL, \"vatTotalRaw\" double precision NOT NULL, \"vatTotalAccountingSchemeCurrency\" numeric(12,2) NOT NULL, \"vatTotal\" numeric(12,2) NOT NULL, \"invoiceId\" integer, CONSTRAINT \"PK_471ba7a8a07f52d011c765d239a\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"sales_invoice\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"dueDate\" date NOT NULL, \"issuedOn\" date NOT NULL, \"documentNo\" character varying, \"isDraft\" boolean NOT NULL, \"isCalculated\" boolean NOT NULL, \"grandTotal\" numeric(12,2) NOT NULL, \"totalLines\" double precision NOT NULL, \"totalLinesAccountingSchemeCurrency\" double precision NOT NULL, \"grandTotalAccountingSchemeCurrency\" numeric(12,2) NOT NULL, \"currencyMultiplyingRateToAccountingSchemeCurrency\" double precision NOT NULL, \"transactionDate\" date NOT NULL, \"printDate\" TIMESTAMP, \"printed\" boolean NOT NULL DEFAULT false, \"printError\" character varying, \"content\" bytea, \"paymentTermInDays\" integer NOT NULL, \"printLanguageIsoCode\" character varying NOT NULL, \"reverseCharge\" boolean NOT NULL, \"updtOpId\" integer NOT NULL, \"bankAccountId\" integer, \"currencyId\" integer, \"customerId\" integer, \"organizationId\" integer, CONSTRAINT \"PK_79dd7040b09cdfb78bf34b1a1ba\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"currency\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"isoCode\" character varying NOT NULL, CONSTRAINT \"PK_65d3b524ea256c4212b59c326ae\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_215b85e32bfbe1cf9f1c47e14d\" ON \"public\".\"currency\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"accounting_scheme\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, \"currencyId\" integer, CONSTRAINT \"PK_737f0a6e3f640fb693fcd0211d5\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_7f415d9c097ba5ef53afe8c39f\" ON \"public\".\"accounting_scheme\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"language\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"updtOpId\" integer NOT NULL DEFAULT 0, \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"isoCode\" character varying NOT NULL, CONSTRAINT \"PK_b1678c612b1e8b66f3b45aacc66\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_language_isoCode\" ON \"public\".\"language\" (\"isoCode\") `,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_language_displayName\" ON \"public\".\"language\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency_rate\" ADD CONSTRAINT \"FK_d3fbaf99fba4368c95511d5ac5e\" FOREIGN KEY (\"fromId\") REFERENCES \"public\".\"currency\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency_rate\" ADD CONSTRAINT \"FK_bf6acee0aed6631bffbea3a9b6d\" FOREIGN KEY (\"toId\") REFERENCES \"public\".\"currency\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"document_number_sequence\" ADD CONSTRAINT \"FK_f482d3de1ec19e51500a34def53\" FOREIGN KEY (\"organizationId\") REFERENCES \"public\".\"organization\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD CONSTRAINT \"FK_b27f376ebf341d1c03042b81f5e\" FOREIGN KEY (\"legalAddressId\") REFERENCES \"public\".\"address\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" ADD CONSTRAINT \"FK_119e6dc00cb0db3abe3ef377c36\" FOREIGN KEY (\"countryId\") REFERENCES \"public\".\"country\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_identity\" ADD CONSTRAINT \"FK_08b4f3034c5f421078fe2ee7f71\" FOREIGN KEY (\"userId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_to_organization\" ADD CONSTRAINT \"FK_801f03e910ec33b71d5ce3821ec\" FOREIGN KEY (\"organizationId\") REFERENCES \"public\".\"organization\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_to_organization\" ADD CONSTRAINT \"FK_de139b9d33d4412afdb78e15618\" FOREIGN KEY (\"userId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_b946d2f195d40cb30083b9517f9\" FOREIGN KEY (\"accountingSchemeId\") REFERENCES \"public\".\"accounting_scheme\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_9a7bc74400d2578ff8756e7ffe6\" FOREIGN KEY (\"bankAccountId\") REFERENCES \"public\".\"bank_account\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_cf4bbe282c254f5dcda235d6cfc\" FOREIGN KEY (\"legalAddressId\") REFERENCES \"public\".\"address\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank_account\" ADD CONSTRAINT \"FK_b2e0013409c8c1f888cfa671cff\" FOREIGN KEY (\"bankId\") REFERENCES \"public\".\"bank\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ADD CONSTRAINT \"FK_9368130af39c5fa0b0a7aeb9635\" FOREIGN KEY (\"invoiceId\") REFERENCES \"public\".\"sales_invoice\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ADD CONSTRAINT \"FK_46e2135df8a294a44f6da9cfb24\" FOREIGN KEY (\"lineTaxId\") REFERENCES \"public\".\"tax\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ADD CONSTRAINT \"FK_aa6a84182838c767209e1c4b5f2\" FOREIGN KEY (\"productId\") REFERENCES \"public\".\"product\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_vat\" ADD CONSTRAINT \"FK_024f69ee6accf1a6c7aa6efa688\" FOREIGN KEY (\"invoiceId\") REFERENCES \"public\".\"sales_invoice\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_69b6ba86e29c318798bab324869\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_61c1b2dd43ab2831c70d94d6fc6\" FOREIGN KEY (\"bankAccountId\") REFERENCES \"public\".\"bank_account\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_7844e9c13be9fa7778663eb0d3d\" FOREIGN KEY (\"currencyId\") REFERENCES \"public\".\"currency\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_7391d1afd7eb40616c692823442\" FOREIGN KEY (\"customerId\") REFERENCES \"public\".\"customer\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_e2a141391f5b4fb5722bb8cb913\" FOREIGN KEY (\"organizationId\") REFERENCES \"public\".\"organization\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"accounting_scheme\" ADD CONSTRAINT \"FK_fe9538948c1f6d3cb94dce7b74d\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"accounting_scheme\" ADD CONSTRAINT \"FK_8c86374aef6ec7ad93a098cf59f\" FOREIGN KEY (\"currencyId\") REFERENCES \"public\".\"currency\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD CONSTRAINT \"FK_2c1aeb39925d1e1ace946ca2f21\" FOREIGN KEY (\"addressId\") REFERENCES \"public\".\"address\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE IF NOT EXISTS \"public\".\"unit_of_measurement_conversion\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"currencyMultiplyingRate\" double precision NOT NULL, \"updtOpId\" integer NOT NULL, \"fromId\" integer, \"toId\" integer, CONSTRAINT \"PK_f8796ed806b216628b252bb3b4c\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE IF NOT EXISTS \"public\".\"unit_of_measurement\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, CONSTRAINT \"PK_f64cb86b321fc095bde6961d6da\" PRIMARY KEY (\"id\"))`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"accounting_scheme\" DROP CONSTRAINT \"FK_8c86374aef6ec7ad93a098cf59f\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"accounting_scheme\" DROP CONSTRAINT \"FK_fe9538948c1f6d3cb94dce7b74d\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_e2a141391f5b4fb5722bb8cb913\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_7391d1afd7eb40616c692823442\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_7844e9c13be9fa7778663eb0d3d\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_61c1b2dd43ab2831c70d94d6fc6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_69b6ba86e29c318798bab324869\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_vat\" DROP CONSTRAINT \"FK_024f69ee6accf1a6c7aa6efa688\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" DROP CONSTRAINT \"FK_aa6a84182838c767209e1c4b5f2\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" DROP CONSTRAINT \"FK_46e2135df8a294a44f6da9cfb24\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" DROP CONSTRAINT \"FK_9368130af39c5fa0b0a7aeb9635\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank_account\" DROP CONSTRAINT \"FK_b2e0013409c8c1f888cfa671cff\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_cf4bbe282c254f5dcda235d6cfc\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_9a7bc74400d2578ff8756e7ffe6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_b946d2f195d40cb30083b9517f9\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_to_organization\" DROP CONSTRAINT \"FK_de139b9d33d4412afdb78e15618\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_to_organization\" DROP CONSTRAINT \"FK_801f03e910ec33b71d5ce3821ec\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_identity\" DROP CONSTRAINT \"FK_08b4f3034c5f421078fe2ee7f71\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" DROP CONSTRAINT \"FK_119e6dc00cb0db3abe3ef377c36\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP CONSTRAINT \"FK_b27f376ebf341d1c03042b81f5e\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"document_number_sequence\" DROP CONSTRAINT \"FK_f482d3de1ec19e51500a34def53\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency_rate\" DROP CONSTRAINT \"FK_bf6acee0aed6631bffbea3a9b6d\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency_rate\" DROP CONSTRAINT \"FK_d3fbaf99fba4368c95511d5ac5e\"`,\n    );\n    await queryRunner.query(`DROP INDEX \"public\".\"IDX_language_displayName\"`);\n    await queryRunner.query(`DROP INDEX \"public\".\"IDX_language_isoCode\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"language\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_7f415d9c097ba5ef53afe8c39f\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"accounting_scheme\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_215b85e32bfbe1cf9f1c47e14d\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"currency\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"sales_invoice\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"sales_invoice_vat\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"sales_invoice_line\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_826d69dcc65d9650be67af6d48\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_34f6ca1cd897cc926bdcca1ca3\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"product\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"tax\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_d13847b5db0cf66c1ea23615eb\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"bank_account\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_4177d3499a2c7edb42ead3d916\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_99ecb4de1fda7ee51fb91b3055\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"organization\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"user_to_organization\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_e12875dfb3b1d92d7d7c5377e2\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_065d4d8f3b5adb4a08841eae3c\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_78a916df40e02a9deb1c4b75ed\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"user\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_c555c4388d24da3c6fa22d85bd\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_1c243d6d65f07e169d53a69ea0\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"user_identity\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"address\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_df529c45726940beb548906481\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_71b54ec7502c83c7f503f57c64\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_a843215c5e375894bcd5bdf24a\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"customer\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_06db3c87e9e1b9eba96918b308\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"UQ_6eba1a52ee121d100c8a0a6510c\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"country\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"document_number_sequence\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_1930777e62854add6a64f50d42\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"bank\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"currency_rate\"`);\n  }\n}\n",
    "apps/api/src/app/migrations/1595508635326-Language.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\nimport {\n  getService,\n  getTechnicalUser,\n  LanguagesService,\n  LanguagesServiceKey,\n} from '../../model';\n\nexport class Language1595508635326 implements MigrationInterface {\n  name = 'Language1595508635326';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    const entityManager = queryRunner.manager;\n    const technicalUser = await getTechnicalUser(entityManager);\n    const languageService: LanguagesService = getService(LanguagesServiceKey);\n    const CZ_ISO_CODE = 'cz';\n    const EN_ISO_CODE = 'en';\n    const CZ_DE_ISO_CODE = 'cz-de';\n    const languages = [\n      { displayName: 'Czech', isoCode: CZ_ISO_CODE },\n      { displayName: 'English', isoCode: EN_ISO_CODE },\n      { displayName: 'Czech-German', isoCode: CZ_DE_ISO_CODE },\n    ];\n    for (const language of languages) {\n      await languageService.save(entityManager, language, technicalUser);\n    }\n  }\n\n  public async down(): Promise<void> {\n    // left empty\n  }\n}\n",
    "apps/api/src/app/migrations/1595508635328-CreateAnAddress.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\nimport {\n  AddressService,\n  AddressServiceKey,\n  CountryService,\n  CountryServiceKey,\n  getTechnicalUser,\n} from '../../model';\nimport { getService } from '../../model';\n\nexport class CreateAnAddress1595508635328 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    const entityManager = queryRunner.manager;\n    const technicalUser = await getTechnicalUser(entityManager);\n    const countryService: CountryService = getService(CountryServiceKey);\n    await countryService.save(\n      entityManager,\n      {\n        isoCode: 'ABC',\n        displayName: 'A Country',\n      },\n      technicalUser,\n    );\n\n    const addressService: AddressService = getService(AddressServiceKey);\n    const address = addressService.createEntity();\n    address.city = 'City';\n    address.zipCode = 'ABC 123';\n    address.line1 = 'Street 1';\n    await addressService.save(\n      entityManager,\n      {\n        city: address.city,\n        line1: address.line1,\n        zipCode: address.zipCode,\n        countryIsoCode: 'ABC',\n      },\n      technicalUser,\n    );\n  }\n\n  public async down(): Promise<void> {\n    /* intentionally empty */\n  }\n}\n",
    "apps/api/src/app/migrations/1609846660789-InvoicesContent.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\nimport {\n  getService,\n  getTechnicalUser,\n  SalesInvoiceService,\n  SalesInvoiceServiceKey,\n} from '../../model';\n\nexport class InvoicesContent9999999999999 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    const entityManager = queryRunner.manager;\n    await getTechnicalUser(entityManager);\n    const salesInvoiceService: SalesInvoiceService = getService(\n      SalesInvoiceServiceKey,\n    );\n    await salesInvoiceService.fixPrint(entityManager);\n  }\n\n  public async down(): Promise<void> {\n    /* intentionally left blank */\n  }\n}\n",
    "apps/api/src/app/migrations/1612978737166-Menu.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Menu1612978737166 implements MigrationInterface {\n  name = 'Menu1612978737166';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"menu_item\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"to\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, \"menuId\" integer NOT NULL, CONSTRAINT \"PK_c48762823cdf1c634f295d57b44\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_displayName_menuItem\" ON \"public\".\"menu_item\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"menu\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, CONSTRAINT \"PK_e81673826c4a73969969211789e\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_displayName_menu\" ON \"public\".\"menu\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_identity\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"document_number_sequence\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"country\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" DROP CONSTRAINT \"FK_119e6dc00cb0db3abe3ef377c36\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" ALTER COLUMN \"countryId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP CONSTRAINT \"FK_b27f376ebf341d1c03042b81f5e\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ALTER COLUMN \"legalAddressId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"tax\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"product\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" DROP CONSTRAINT \"FK_46e2135df8a294a44f6da9cfb24\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" DROP CONSTRAINT \"FK_aa6a84182838c767209e1c4b5f2\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ALTER COLUMN \"lineTaxId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ALTER COLUMN \"productId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_vat\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_61c1b2dd43ab2831c70d94d6fc6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_7844e9c13be9fa7778663eb0d3d\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_7391d1afd7eb40616c692823442\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_e2a141391f5b4fb5722bb8cb913\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ALTER COLUMN \"bankAccountId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ALTER COLUMN \"currencyId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ALTER COLUMN \"customerId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ALTER COLUMN \"organizationId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank_account\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_b946d2f195d40cb30083b9517f9\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_9a7bc74400d2578ff8756e7ffe6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_cf4bbe282c254f5dcda235d6cfc\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ALTER COLUMN \"accountingSchemeId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ALTER COLUMN \"bankAccountId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ALTER COLUMN \"legalAddressId\" SET NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_to_organization\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency_rate\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"language\" ALTER COLUMN \"updtOpId\" DROP DEFAULT`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_identity\" ADD CONSTRAINT \"FK_e5970daf7641570b80b3fe9689f\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"document_number_sequence\" ADD CONSTRAINT \"FK_0ef6b9526e2954e4d17ecb39aba\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank\" ADD CONSTRAINT \"FK_b9853ae5b61d73d2f863bf31d48\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"country\" ADD CONSTRAINT \"FK_a6101aa2f56b1bf9c88557b812f\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" ADD CONSTRAINT \"FK_502db82dc7ad211cafc115c6351\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" ADD CONSTRAINT \"FK_119e6dc00cb0db3abe3ef377c36\" FOREIGN KEY (\"countryId\") REFERENCES \"public\".\"country\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD CONSTRAINT \"FK_d5969b09d176287a016268ee034\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD CONSTRAINT \"FK_b27f376ebf341d1c03042b81f5e\" FOREIGN KEY (\"legalAddressId\") REFERENCES \"public\".\"address\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"tax\" ADD CONSTRAINT \"FK_c42beaa389fabca57aa41f0376d\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"product\" ADD CONSTRAINT \"FK_1fc1f0597e11e7825f4161527a3\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ADD CONSTRAINT \"FK_5b01332baf0d17bd34186acd3d3\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ADD CONSTRAINT \"FK_46e2135df8a294a44f6da9cfb24\" FOREIGN KEY (\"lineTaxId\") REFERENCES \"public\".\"tax\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ADD CONSTRAINT \"FK_aa6a84182838c767209e1c4b5f2\" FOREIGN KEY (\"productId\") REFERENCES \"public\".\"product\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_vat\" ADD CONSTRAINT \"FK_7644fc71ac845df8fd817fdd704\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_61c1b2dd43ab2831c70d94d6fc6\" FOREIGN KEY (\"bankAccountId\") REFERENCES \"public\".\"bank_account\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_7844e9c13be9fa7778663eb0d3d\" FOREIGN KEY (\"currencyId\") REFERENCES \"public\".\"currency\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_7391d1afd7eb40616c692823442\" FOREIGN KEY (\"customerId\") REFERENCES \"public\".\"customer\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_e2a141391f5b4fb5722bb8cb913\" FOREIGN KEY (\"organizationId\") REFERENCES \"public\".\"organization\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank_account\" ADD CONSTRAINT \"FK_5f05f3d209e4657e92e4cbe7c61\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_7677b90e4b19af4d1078afa6b6f\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_b946d2f195d40cb30083b9517f9\" FOREIGN KEY (\"accountingSchemeId\") REFERENCES \"public\".\"accounting_scheme\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_9a7bc74400d2578ff8756e7ffe6\" FOREIGN KEY (\"bankAccountId\") REFERENCES \"public\".\"bank_account\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_cf4bbe282c254f5dcda235d6cfc\" FOREIGN KEY (\"legalAddressId\") REFERENCES \"public\".\"address\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_to_organization\" ADD CONSTRAINT \"FK_c945c66ec5631bafa1a01cd0a45\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency_rate\" ADD CONSTRAINT \"FK_5957131a30f05f2b202bc9191c0\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency\" ADD CONSTRAINT \"FK_949ebbd51b89cf4830be3e9b53a\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"language\" ADD CONSTRAINT \"FK_41ef69941825cbeb66517533b37\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"menu_item\" ADD CONSTRAINT \"FK_6aa67e8642a83d87bdda69966e6\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"menu_item\" ADD CONSTRAINT \"FK_956a0060ab9c15477458e3925f2\" FOREIGN KEY (\"menuId\") REFERENCES \"public\".\"menu\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"menu\" ADD CONSTRAINT \"FK_93f7bfe23acd89729f08a37d57d\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"menu\" DROP CONSTRAINT \"FK_93f7bfe23acd89729f08a37d57d\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"menu_item\" DROP CONSTRAINT \"FK_956a0060ab9c15477458e3925f2\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"menu_item\" DROP CONSTRAINT \"FK_6aa67e8642a83d87bdda69966e6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"language\" DROP CONSTRAINT \"FK_41ef69941825cbeb66517533b37\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency\" DROP CONSTRAINT \"FK_949ebbd51b89cf4830be3e9b53a\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency_rate\" DROP CONSTRAINT \"FK_5957131a30f05f2b202bc9191c0\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_to_organization\" DROP CONSTRAINT \"FK_c945c66ec5631bafa1a01cd0a45\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_cf4bbe282c254f5dcda235d6cfc\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_9a7bc74400d2578ff8756e7ffe6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_b946d2f195d40cb30083b9517f9\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" DROP CONSTRAINT \"FK_7677b90e4b19af4d1078afa6b6f\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank_account\" DROP CONSTRAINT \"FK_5f05f3d209e4657e92e4cbe7c61\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_e2a141391f5b4fb5722bb8cb913\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_7391d1afd7eb40616c692823442\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_7844e9c13be9fa7778663eb0d3d\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_61c1b2dd43ab2831c70d94d6fc6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_vat\" DROP CONSTRAINT \"FK_7644fc71ac845df8fd817fdd704\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" DROP CONSTRAINT \"FK_aa6a84182838c767209e1c4b5f2\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" DROP CONSTRAINT \"FK_46e2135df8a294a44f6da9cfb24\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" DROP CONSTRAINT \"FK_5b01332baf0d17bd34186acd3d3\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"product\" DROP CONSTRAINT \"FK_1fc1f0597e11e7825f4161527a3\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"tax\" DROP CONSTRAINT \"FK_c42beaa389fabca57aa41f0376d\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP CONSTRAINT \"FK_b27f376ebf341d1c03042b81f5e\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP CONSTRAINT \"FK_d5969b09d176287a016268ee034\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" DROP CONSTRAINT \"FK_119e6dc00cb0db3abe3ef377c36\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" DROP CONSTRAINT \"FK_502db82dc7ad211cafc115c6351\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"country\" DROP CONSTRAINT \"FK_a6101aa2f56b1bf9c88557b812f\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank\" DROP CONSTRAINT \"FK_b9853ae5b61d73d2f863bf31d48\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"document_number_sequence\" DROP CONSTRAINT \"FK_0ef6b9526e2954e4d17ecb39aba\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_identity\" DROP CONSTRAINT \"FK_e5970daf7641570b80b3fe9689f\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"language\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"currency_rate\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_to_organization\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ALTER COLUMN \"legalAddressId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ALTER COLUMN \"bankAccountId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ALTER COLUMN \"accountingSchemeId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_cf4bbe282c254f5dcda235d6cfc\" FOREIGN KEY (\"legalAddressId\") REFERENCES \"public\".\"address\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_9a7bc74400d2578ff8756e7ffe6\" FOREIGN KEY (\"bankAccountId\") REFERENCES \"public\".\"bank_account\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"organization\" ADD CONSTRAINT \"FK_b946d2f195d40cb30083b9517f9\" FOREIGN KEY (\"accountingSchemeId\") REFERENCES \"public\".\"accounting_scheme\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank_account\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ALTER COLUMN \"organizationId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ALTER COLUMN \"customerId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ALTER COLUMN \"currencyId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ALTER COLUMN \"bankAccountId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_e2a141391f5b4fb5722bb8cb913\" FOREIGN KEY (\"organizationId\") REFERENCES \"public\".\"organization\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_7391d1afd7eb40616c692823442\" FOREIGN KEY (\"customerId\") REFERENCES \"public\".\"customer\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_7844e9c13be9fa7778663eb0d3d\" FOREIGN KEY (\"currencyId\") REFERENCES \"public\".\"currency\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_61c1b2dd43ab2831c70d94d6fc6\" FOREIGN KEY (\"bankAccountId\") REFERENCES \"public\".\"bank_account\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_vat\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ALTER COLUMN \"productId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ALTER COLUMN \"lineTaxId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ADD CONSTRAINT \"FK_aa6a84182838c767209e1c4b5f2\" FOREIGN KEY (\"productId\") REFERENCES \"public\".\"product\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice_line\" ADD CONSTRAINT \"FK_46e2135df8a294a44f6da9cfb24\" FOREIGN KEY (\"lineTaxId\") REFERENCES \"public\".\"tax\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"product\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"tax\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ALTER COLUMN \"legalAddressId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD CONSTRAINT \"FK_b27f376ebf341d1c03042b81f5e\" FOREIGN KEY (\"legalAddressId\") REFERENCES \"public\".\"address\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" ALTER COLUMN \"countryId\" DROP NOT NULL`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"address\" ADD CONSTRAINT \"FK_119e6dc00cb0db3abe3ef377c36\" FOREIGN KEY (\"countryId\") REFERENCES \"public\".\"country\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"country\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"bank\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"document_number_sequence\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user_identity\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(`DROP INDEX \"public\".\"IDX_displayName_menu\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"menu\"`);\n    await queryRunner.query(`DROP INDEX \"public\".\"IDX_displayName_menuItem\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"menu_item\"`);\n  }\n}\n",
    "apps/api/src/app/migrations/1612983991735-MenuContent.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\nimport { getTechnicalUser, UserModel } from '../../model';\nimport { Menu } from '../../model/generated/entities/Menu';\nimport { MenuItem } from '../../model/generated/entities/MenuItem';\nimport { EntityManager } from 'typeorm';\n\nexport const createMenuItems = async (\n  menu: Menu,\n  entityManager: EntityManager,\n  items: any,\n  technicalUser: UserModel,\n) => {\n  for (const item of items) {\n    const menuItem = new MenuItem();\n    menuItem.menu = menu;\n    menuItem.to = item.to;\n    menuItem.displayName = item.displayName;\n    menuItem.updtOp = technicalUser;\n    await entityManager.save(menuItem);\n  }\n};\n\nexport class MenuContent1612983991735 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    const entityManager = queryRunner.manager;\n    const technicalUser = await getTechnicalUser(entityManager);\n    const menu = new Menu();\n    menu.displayName = 'menu.ERPStandard';\n    menu.updtOp = technicalUser;\n\n    await entityManager.save(menu);\n\n    const items = [\n      { to: '', displayName: 'menu.items.Dashboard' },\n      { to: 'customers', displayName: 'menu.items.Customers' },\n      { to: 'sales-invoices', displayName: 'menu.items.SalesInvoices' },\n    ];\n\n    await createMenuItems(menu, entityManager, items, technicalUser);\n  }\n\n  public async down(): Promise<void> {\n    // left empty\n  }\n}\n",
    "apps/api/src/app/migrations/1615749063579-EnhanceCustomer.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class EnhanceCustomer1615749063579 implements MigrationInterface {\n  name = 'EnhanceCustomer1615749063579';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD COLUMN IF NOT EXISTS \"note\" character varying`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD COLUMN IF NOT EXISTS \"addressId\" integer`,\n    );\n\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP CONSTRAINT IF EXISTS \"FK_2c1aeb39925d1e1ace946ca2f21\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD CONSTRAINT \"FK_2c1aeb39925d1e1ace946ca2f21\" FOREIGN KEY (\"addressId\") REFERENCES \"public\".\"address\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP CONSTRAINT \"FK_2c1aeb39925d1e1ace946ca2f21\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP COLUMN \"addressId\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP COLUMN \"note\"`,\n    );\n  }\n}\n",
    "apps/api/src/app/migrations/1615961288134-MenuSettings.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\nimport { getTechnicalUser } from '../../model';\nimport { Menu } from '../../model/generated/entities/Menu';\nimport { createMenuItems } from './1612983991735-MenuContent';\n\nexport class MenuSettings1615961288134 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    const entityManager = queryRunner.manager;\n    const technicalUser = await getTechnicalUser(entityManager);\n\n    const menu = (await entityManager.getRepository(Menu).find())[0];\n\n    const items = [{ to: 'settings', displayName: 'menu.items.Settings' }];\n\n    await createMenuItems(menu, entityManager, items, technicalUser);\n  }\n\n  public async down(): Promise<void> {\n    // left empty\n  }\n}\n",
    "apps/api/src/app/migrations/1616228731111-UoM.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class UoM1616228731111 implements MigrationInterface {\n  name = 'UoM1616228731111';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE IF NOT EXISTS \"public\".\"unit_of_measurement_conversion\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"currencyMultiplyingRate\" double precision NOT NULL, \"end\" date NOT NULL, \"start\" date NOT NULL, \"updtOpId\" integer NOT NULL, \"fromId\" integer, \"toId\" integer, CONSTRAINT \"PK_f8796ed806b216628b252bb3b4c\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE IF NOT EXISTS \"public\".\"unit_of_measurement\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, CONSTRAINT \"PK_f64cb86b321fc095bde6961d6da\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"product\" ADD COLUMN IF NOT EXISTS \"uomId\" integer`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement_conversion\" ADD CONSTRAINT \"FK_53f53a57b0fff0f3c38030480c6\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement_conversion\" ADD CONSTRAINT \"FK_db4c477e0fb35dfae056eafa13d\" FOREIGN KEY (\"fromId\") REFERENCES \"public\".\"unit_of_measurement\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement_conversion\" ADD CONSTRAINT \"FK_7e0d7a2652d946896736a520b2b\" FOREIGN KEY (\"toId\") REFERENCES \"public\".\"unit_of_measurement\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement\" ADD CONSTRAINT \"FK_99cd4cf812d980868a774fd004b\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"product\" ADD CONSTRAINT \"FK_b05df001c34be0b2afa54b36a1b\" FOREIGN KEY (\"uomId\") REFERENCES \"public\".\"unit_of_measurement\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"product\" DROP CONSTRAINT \"FK_b05df001c34be0b2afa54b36a1b\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement\" DROP CONSTRAINT \"FK_99cd4cf812d980868a774fd004b\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement_conversion\" DROP CONSTRAINT \"FK_7e0d7a2652d946896736a520b2b\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement_conversion\" DROP CONSTRAINT \"FK_db4c477e0fb35dfae056eafa13d\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement_conversion\" DROP CONSTRAINT \"FK_53f53a57b0fff0f3c38030480c6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"product\" DROP COLUMN \"uomId\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"unit_of_measurement\"`);\n    await queryRunner.query(\n      `DROP TABLE \"public\".\"unit_of_measurement_conversion\"`,\n    );\n  }\n}\n",
    "apps/api/src/app/migrations/1618661208366-CustomerPriceList.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CustomerPriceList1618661208366 implements MigrationInterface {\n  name = 'CustomerPriceList1618661208366';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"customerProductPrice\" (\"id\" SERIAL NOT NULL, \"sellingPrice\" numeric(12,2) NOT NULL, \"productId\" integer NOT NULL, \"customerPriceListId\" integer NOT NULL, CONSTRAINT \"PK_41712b48577a11adfdbb81efdf9\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"customerPriceList\" (\"id\" SERIAL NOT NULL, \"displayName\" character varying NOT NULL, \"validFrom\" TIMESTAMP, \"validTo\" TIMESTAMP, \"customerGroupId\" integer NOT NULL, CONSTRAINT \"PK_3a410c80620c92c128634387f20\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_customerPriceList_displayName\" ON \"public\".\"customerPriceList\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"customerGroup\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, CONSTRAINT \"PK_2f921748bb8e683b3d7007182ca\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_customerGroup_displayName\" ON \"public\".\"customerGroup\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement_conversion\" DROP COLUMN IF EXISTS \"end\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"unit_of_measurement_conversion\" DROP COLUMN IF EXISTS \"start\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD \"customerGroupId\" integer`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerProductPrice\" ADD CONSTRAINT \"FK_51fd886ac463154b1fb68ad944a\" FOREIGN KEY (\"productId\") REFERENCES \"public\".\"product\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerProductPrice\" ADD CONSTRAINT \"FK_5fad018dfcf766b9fab575e5ea1\" FOREIGN KEY (\"customerPriceListId\") REFERENCES \"public\".\"customerPriceList\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerPriceList\" ADD CONSTRAINT \"FK_635c71f6ed02473cca6603a3079\" FOREIGN KEY (\"customerGroupId\") REFERENCES \"public\".\"customerGroup\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerGroup\" ADD CONSTRAINT \"FK_6622e70e814cce558a98043c611\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD CONSTRAINT \"FK_07b06500ab5d46137b7f87cc53c\" FOREIGN KEY (\"customerGroupId\") REFERENCES \"public\".\"customerGroup\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP CONSTRAINT \"FK_07b06500ab5d46137b7f87cc53c\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerGroup\" DROP CONSTRAINT \"FK_6622e70e814cce558a98043c611\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerPriceList\" DROP CONSTRAINT \"FK_635c71f6ed02473cca6603a3079\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerProductPrice\" DROP CONSTRAINT \"FK_5fad018dfcf766b9fab575e5ea1\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerProductPrice\" DROP CONSTRAINT \"FK_51fd886ac463154b1fb68ad944a\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user\" ALTER COLUMN \"updtOpId\" SET DEFAULT '0'`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP COLUMN \"customerGroupId\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_customerGroup_displayName\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"customerGroup\"`);\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_customerPriceList_displayName\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"customerPriceList\"`);\n    await queryRunner.query(`DROP TABLE \"public\".\"customerProductPrice\"`);\n  }\n}\n",
    "apps/api/src/app/migrations/1619015192340-ContactPersons.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ContactPersons1619015192340 implements MigrationInterface {\n  name = 'ContactPersons1619015192340';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"contactPerson\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"firstName\" character varying NOT NULL, \"lastName\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, CONSTRAINT \"PK_746d8d620b9adb89ccb008773a9\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_7491b9b65ea315845dd61b1856\" ON \"public\".\"contactPerson\" (\"firstName\") `,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_ab57dcc04929b28b4d8479188d\" ON \"public\".\"contactPerson\" (\"lastName\") `,\n    );\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"contactPersonCompanyRelation\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"role\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, \"contactPersonId\" integer NOT NULL, \"customerId\" integer NOT NULL, CONSTRAINT \"PK_226ddfd36a0811c0768c3be1b12\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD \"www\" character varying`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD \"publicNote\" character varying`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" ADD \"photo\" bytea`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_b21b8a7c8801bb8602ec940fec\" ON \"public\".\"customerPriceList\" (\"validFrom\") `,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_ed822f2a7e9f63b68877e9fce5\" ON \"public\".\"customerPriceList\" (\"validTo\") `,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"contactPerson\" ADD CONSTRAINT \"FK_7a7ffd15ebe52dd8fc1d33cb50f\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"contactPersonCompanyRelation\" ADD CONSTRAINT \"FK_1cd288d466509367bff77d9d1d6\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"contactPersonCompanyRelation\" ADD CONSTRAINT \"FK_bfd00884d3dc28191b0d5645de9\" FOREIGN KEY (\"contactPersonId\") REFERENCES \"public\".\"contactPerson\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"contactPersonCompanyRelation\" ADD CONSTRAINT \"FK_19a8fde957b82c65cf17413ab5e\" FOREIGN KEY (\"customerId\") REFERENCES \"public\".\"customer\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"contactPersonCompanyRelation\" DROP CONSTRAINT \"FK_19a8fde957b82c65cf17413ab5e\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"contactPersonCompanyRelation\" DROP CONSTRAINT \"FK_bfd00884d3dc28191b0d5645de9\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"contactPersonCompanyRelation\" DROP CONSTRAINT \"FK_1cd288d466509367bff77d9d1d6\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"contactPerson\" DROP CONSTRAINT \"FK_7a7ffd15ebe52dd8fc1d33cb50f\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_ed822f2a7e9f63b68877e9fce5\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_b21b8a7c8801bb8602ec940fec\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP COLUMN \"photo\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP COLUMN \"publicNote\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customer\" DROP COLUMN \"www\"`,\n    );\n    await queryRunner.query(\n      `DROP TABLE \"public\".\"contactPersonCompanyRelation\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_ab57dcc04929b28b4d8479188d\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_7491b9b65ea315845dd61b1856\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"contactPerson\"`);\n  }\n}\n",
    "apps/api/src/app/migrations/1619448004419-ProductPriceCurrency.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ProductPriceCurrency1619448004419 implements MigrationInterface {\n  name = 'ProductPriceCurrency1619448004419';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerProductPrice\" ADD \"currencyId\" integer`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerProductPrice\" ADD CONSTRAINT \"FK_0feeda1e15d57b1b8c69ba679c8\" FOREIGN KEY (\"currencyId\") REFERENCES \"public\".\"currency\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerProductPrice\" DROP CONSTRAINT \"FK_0feeda1e15d57b1b8c69ba679c8\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"customerProductPrice\" DROP COLUMN \"currencyId\"`,\n    );\n  }\n}\n",
    "apps/api/src/app/migrations/1619502927022-FactoringProvider.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class FactoringProvider1619502927022 implements MigrationInterface {\n  name = 'FactoringProvider1619502927022';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"factoringProvider\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"displayName\" character varying NOT NULL, \"contact\" character varying NOT NULL, \"legalName\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, \"bankAccountId\" integer NOT NULL, CONSTRAINT \"PK_ca17af38def58bfa19b841c7b81\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE UNIQUE INDEX \"IDX_factoringProvider_displayName\" ON \"public\".\"factoringProvider\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD \"factoringProviderId\" integer`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringProvider\" ADD CONSTRAINT \"FK_4b1f9a1d9f45356e49a27fac7c7\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringProvider\" ADD CONSTRAINT \"FK_e616221fe300ca7ceb6e2bd4ead\" FOREIGN KEY (\"bankAccountId\") REFERENCES \"public\".\"bank_account\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD CONSTRAINT \"FK_42e3f89cee2b09200cc0df70877\" FOREIGN KEY (\"factoringProviderId\") REFERENCES \"public\".\"factoringProvider\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP CONSTRAINT \"FK_42e3f89cee2b09200cc0df70877\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringProvider\" DROP CONSTRAINT \"FK_e616221fe300ca7ceb6e2bd4ead\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringProvider\" DROP CONSTRAINT \"FK_4b1f9a1d9f45356e49a27fac7c7\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP COLUMN \"factoringProviderId\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_factoringProvider_displayName\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"factoringProvider\"`);\n  }\n}\n",
    "apps/api/src/app/migrations/1619613873925-FactoringInvoicePrinting.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class FactoringInvoicePrinting1619613873925\n  implements MigrationInterface {\n  name = 'FactoringInvoicePrinting1619613873925';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"factoringContract\" (\"id\" SERIAL NOT NULL, \"updtTs\" TIMESTAMP NOT NULL DEFAULT now(), \"isActive\" boolean NOT NULL DEFAULT true, \"isCurrent\" boolean NOT NULL DEFAULT true, \"invoicePrintNote\" character varying NOT NULL, \"updtOpId\" integer NOT NULL, \"factoringProviderId\" integer NOT NULL, \"customerId\" integer NOT NULL, \"currencyId\" integer NOT NULL, CONSTRAINT \"PK_033bc754511e1929542eb1cc9b5\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" ADD \"printNote\" character varying`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringContract\" ADD CONSTRAINT \"FK_6f40d42ccc7ea435721230ba807\" FOREIGN KEY (\"updtOpId\") REFERENCES \"public\".\"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringContract\" ADD CONSTRAINT \"FK_41fe90ab93d40cd55e282ce7b2b\" FOREIGN KEY (\"factoringProviderId\") REFERENCES \"public\".\"factoringProvider\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringContract\" ADD CONSTRAINT \"FK_145c1881c0aa4bf2158d1bee85b\" FOREIGN KEY (\"customerId\") REFERENCES \"public\".\"customer\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringContract\" ADD CONSTRAINT \"FK_7d7e1db5908c7bc4ae9425f02a8\" FOREIGN KEY (\"currencyId\") REFERENCES \"public\".\"organization\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringContract\" DROP CONSTRAINT \"FK_7d7e1db5908c7bc4ae9425f02a8\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringContract\" DROP CONSTRAINT \"FK_145c1881c0aa4bf2158d1bee85b\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringContract\" DROP CONSTRAINT \"FK_41fe90ab93d40cd55e282ce7b2b\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"factoringContract\" DROP CONSTRAINT \"FK_6f40d42ccc7ea435721230ba807\"`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user\" ALTER COLUMN \"updtOpId\" SET DEFAULT '0'`,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"sales_invoice\" DROP COLUMN \"printNote\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"factoringContract\"`);\n  }\n}\n",
    "apps/api/src/app/migrations/1620224070916-EventLog.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class EventLog1620224070916 implements MigrationInterface {\n  name = 'EventLog1620224070916';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"eventLog\" (\"id\" SERIAL NOT NULL, \"content\" jsonb NOT NULL, \"displayName\" character varying NOT NULL, CONSTRAINT \"PK_6a6f72eac8c1a2099e1df9786bb\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_2b1a40ada41ba1d1eff5143185\" ON \"public\".\"eventLog\" (\"displayName\") `,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_2b1a40ada41ba1d1eff5143185\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"eventLog\"`);\n  }\n}\n",
    "apps/api/src/app/migrations/1620291421007-Config.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Config1620291421007 implements MigrationInterface {\n  name = 'Config1620291421007';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"config\" (\"id\" SERIAL NOT NULL, \"content\" jsonb NOT NULL, \"displayName\" character varying NOT NULL, CONSTRAINT \"PK_7839f7dd8f45e37933fb3e35cbb\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_a6e5cc808398e62bdcebad076f\" ON \"public\".\"config\" (\"displayName\") `,\n    );\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user\" ALTER COLUMN \"updtOpId\" SET DEFAULT 0`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `ALTER TABLE \"public\".\"user\" ALTER COLUMN \"updtOpId\" SET DEFAULT '0'`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_a6e5cc808398e62bdcebad076f\"`,\n    );\n    await queryRunner.query(`DROP TABLE \"public\".\"config\"`);\n  }\n}\n",
    "apps/api/src/app/migrations/1620312048836-Attachment.ts": "import { MigrationInterface, QueryRunner } from 'typeorm';\nimport { getTechnicalUser } from '../../model';\nimport { Menu } from '../../model/generated/entities/Menu';\nimport { createMenuItems } from './1612983991735-MenuContent';\n\nexport class Attachment1620312048836 implements MigrationInterface {\n  name = 'Attachment1620312048836';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `CREATE TABLE \"public\".\"attachment\" (\"id\" SERIAL NOT NULL, \"contentUrl\" character varying NOT NULL, \"displayName\" character varying NOT NULL, CONSTRAINT \"PK_9f047896764a10a0ade3514ccf0\" PRIMARY KEY (\"id\"))`,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_8c1dfd4ae09dd3235f2503f2cf\" ON \"public\".\"attachment\" (\"contentUrl\") `,\n    );\n    await queryRunner.query(\n      `CREATE INDEX \"IDX_10f262acf59123ffde85b5065e\" ON \"public\".\"attachment\" (\"displayName\") `,\n    );\n\n    const entityManager = queryRunner.manager;\n    const technicalUser = await getTechnicalUser(entityManager);\n\n    const menu = (await entityManager.getRepository(Menu).find())[0];\n\n    const items = [\n      { to: 'attachments', displayName: 'menu.items.Attachments' },\n    ];\n\n    await createMenuItems(menu, entityManager, items, technicalUser);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_10f262acf59123ffde85b5065e\"`,\n    );\n    await queryRunner.query(\n      `DROP INDEX \"public\".\"IDX_8c1dfd4ae09dd3235f2503f2cf\"`,\n    );\n  }\n}\n",
    "apps/api/src/app/resolvers/accounting.scheme.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { AccountingScheme } from '../../model/generated/entities/AccountingScheme';\nimport {\n  AccountingSchemeModel,\n  AccountingSchemeService,\n  AccountingSchemeServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { AccountingSchemeSaveArgs } from '../saveArgs/accounting.scheme.save.args';\n\n@Resolver(() => AccountingScheme)\n@UseGuards(GqlAuthGuard)\nexport class AccountingSchemeResolver {\n  constructor(\n    @Inject(AccountingSchemeServiceKey)\n    protected readonly accountingSchemeService: AccountingSchemeService,\n  ) {}\n\n  @Query(() => [AccountingScheme])\n  async accountingSchemes() {\n    return await this.accountingSchemeService.loadEntities(getManager());\n  }\n\n  @Query(() => AccountingScheme)\n  async accountingScheme(@Args('id', { type: () => Int }) id: number) {\n    const result = await this.accountingSchemeService.loadEntityById(\n      getManager(),\n      id,\n    );\n    return result;\n  }\n\n  @Mutation(() => AccountingScheme)\n  async saveAccountingScheme(\n    @Args('args') objData: AccountingSchemeSaveArgs,\n    @CurrentUser() user,\n  ): Promise<AccountingSchemeModel> {\n    return await this.accountingSchemeService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/attachment.resolver.ts": "import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { Attachment } from '../../model/generated/entities/Attachment';\nimport { getManager } from 'typeorm';\nimport {\n  AttachmentService,\n  AttachmentServiceKey,\n} from '../../model/lib/attachment.service';\nimport { AttachmentSaveArgs } from '../saveArgs/attachment.save.args';\nimport { AttachmentModel } from '../../model/lib/attachment.model';\n\n@Resolver(() => Attachment)\n@UseGuards(GqlAuthGuard)\nexport class AttachmentResolver {\n  constructor(\n    @Inject(AttachmentServiceKey)\n    protected readonly attachmentService: AttachmentService,\n  ) {}\n\n  @Query(() => [Attachment])\n  async attachments() {\n    const { files, folders } = await this.attachmentService.listCloudContent();\n    // const links = await this.attachmentService.loadEntities(getManager());\n    return [\n      ...files.map(x => ({ id: x.path, isFolder: false, displayName: x.path })),\n      ...folders.map(x => ({\n        id: x.prefix,\n        isFolder: true,\n        displayName: x.prefix,\n      })),\n    ];\n  }\n\n  @Query(() => Attachment)\n  async attachment(@Args('id', { type: () => String }) id: string) {\n    /*const { files, folders } = await this.attachmentService.listCloudContent();\n    // const links = await this.attachmentService.loadEntities(getManager());\n    return [\n      ...files.map(x => ({ id: x.path, isFolder: false, displayName: x.path })),\n      ...folders.map(x => ({ id: x.prefix, isFolder: true, displayName: x.prefix })),\n    ];\n    */\n    return { id } as any;\n  }\n\n  @Mutation(() => Attachment)\n  async saveAttachment(\n    @Args('args') objData: AttachmentSaveArgs,\n    @CurrentUser() user,\n  ): Promise<AttachmentModel> {\n    return await this.attachmentService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/bank.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { Bank } from '../../model/generated/entities/Bank';\nimport { BankModel, BankService, BankServiceKey } from '../../model';\nimport { getManager } from 'typeorm';\nimport { BankSaveArgs } from '../saveArgs/bank.save.args';\n\n@Resolver(() => Bank)\n@UseGuards(GqlAuthGuard)\nexport class BankResolver {\n  constructor(\n    @Inject(BankServiceKey)\n    protected readonly bankService: BankService,\n  ) {}\n\n  @Query(() => [Bank])\n  async banks() {\n    return await this.bankService.loadEntities(getManager());\n  }\n\n  @Query(() => Bank)\n  async bank(@Args('id', { type: () => Int }) id: number) {\n    return await this.bankService.loadEntityById(getManager(), id);\n  }\n\n  @Mutation(() => Bank)\n  async saveBank(\n    @Args('args') objData: BankSaveArgs,\n    @CurrentUser() user,\n  ): Promise<BankModel> {\n    return await this.bankService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/contact.person.company.relation.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { ContactPersonCompanyRelation } from '../../model/generated/entities/ContactPersonCompanyRelation';\nimport {\n  ContactPersonCompanyRelationModel,\n  ContactPersonCompanyRelationService,\n  ContactPersonCompanyRelationServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { ContactPersonCompanyRelationSaveArgs } from '../saveArgs/contact.person.company.relation.save.args';\n\n@Resolver(() => ContactPersonCompanyRelation)\n@UseGuards(GqlAuthGuard)\nexport class ContactPersonCompanyRelationResolver {\n  constructor(\n    @Inject(ContactPersonCompanyRelationServiceKey)\n    protected readonly contactPersonCompanyRelationService: ContactPersonCompanyRelationService,\n  ) {}\n\n  @Query(() => [ContactPersonCompanyRelation])\n  async contactPersonCompanyRelations() {\n    return await this.contactPersonCompanyRelationService.loadEntities(\n      getManager(),\n    );\n  }\n\n  @Query(() => ContactPersonCompanyRelation)\n  async contactPersonCompanyRelation(\n    @Args('id', { type: () => Int }) id: number,\n  ) {\n    return await this.contactPersonCompanyRelationService.loadEntityById(\n      getManager(),\n      id,\n    );\n  }\n\n  @Mutation(() => ContactPersonCompanyRelation)\n  async saveContactPersonCompanyRelation(\n    @Args('args') objData: ContactPersonCompanyRelationSaveArgs,\n    @CurrentUser() user,\n  ): Promise<ContactPersonCompanyRelationModel> {\n    return await this.contactPersonCompanyRelationService.save(\n      getManager(),\n      objData,\n      user,\n    );\n  }\n}\n",
    "apps/api/src/app/resolvers/contact.person.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { ContactPerson } from '../../model/generated/entities/ContactPerson';\nimport {\n  ContactPersonModel,\n  ContactPersonService,\n  ContactPersonServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { ContactPersonSaveArgs } from '../saveArgs/contact.person.save.args';\n\n@Resolver(() => ContactPerson)\n@UseGuards(GqlAuthGuard)\nexport class ContactPersonResolver {\n  constructor(\n    @Inject(ContactPersonServiceKey)\n    protected readonly contactPersonService: ContactPersonService,\n  ) {}\n\n  @Query(() => [ContactPerson])\n  async contactPersons() {\n    return await this.contactPersonService.loadEntities(getManager());\n  }\n\n  @Query(() => ContactPerson)\n  async contactPerson(@Args('id', { type: () => Int }) id: number) {\n    return await this.contactPersonService.loadEntityById(getManager(), id);\n  }\n\n  @Mutation(() => ContactPerson)\n  async saveContactPerson(\n    @Args('args') objData: ContactPersonSaveArgs,\n    @CurrentUser() user,\n  ): Promise<ContactPersonModel> {\n    return await this.contactPersonService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/country.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { Country } from '../../model/generated/entities/Country';\nimport { CountryModel, CountryService, CountryServiceKey } from '../../model';\nimport { getManager } from 'typeorm';\nimport { CountrySaveArgs } from '../saveArgs/country.save.args';\n\n@Resolver(() => Country)\n@UseGuards(GqlAuthGuard)\nexport class CountryResolver {\n  constructor(\n    @Inject(CountryServiceKey)\n    protected readonly countryService: CountryService,\n  ) {}\n\n  @Query(() => [Country])\n  async countries() {\n    return await this.countryService.loadEntities(getManager());\n  }\n\n  @Query(() => Country)\n  async country(@Args('id', { type: () => Int }) id: number) {\n    const result = await this.countryService.loadEntityById(getManager(), id);\n    return result;\n  }\n\n  @Mutation(() => Country)\n  async saveCountry(\n    @Args('args') objData: CountrySaveArgs,\n    @CurrentUser() user,\n  ): Promise<CountryModel> {\n    return await this.countryService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/currency.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { Currency } from '../../model/generated/entities/Currency';\nimport {\n  CurrencyModel,\n  CurrencyService,\n  CurrencyServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { CurrencySaveArgs } from '../saveArgs/currency.save.args';\n\n@Resolver(() => Currency)\n@UseGuards(GqlAuthGuard)\nexport class CurrencyResolver {\n  constructor(\n    @Inject(CurrencyServiceKey)\n    protected readonly currencyService: CurrencyService,\n  ) {}\n\n  @Query(() => [Currency])\n  async currencies() {\n    return await this.currencyService.loadEntities(getManager());\n  }\n\n  @Mutation(() => Currency)\n  async saveCurrency(\n    @Args('args') objData: CurrencySaveArgs,\n    @CurrentUser() user,\n  ): Promise<CurrencyModel> {\n    return await this.currencyService.save(getManager(), objData, user);\n  }\n\n  @Query(() => Currency)\n  async currency(@Args('id', { type: () => Int }) id: number) {\n    const result = await this.currencyService.loadEntityById(getManager(), id);\n    return result;\n  }\n}\n",
    "apps/api/src/app/resolvers/customer.group.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { CustomerGroup } from '../../model/generated/entities/CustomerGroup';\nimport {\n  CustomerGroupModel,\n  CustomerGroupService,\n  CustomerGroupServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { CustomerGroupSaveArgs } from '../saveArgs/customerGroup.save.args';\n\n@Resolver(() => CustomerGroup)\n@UseGuards(GqlAuthGuard)\nexport class CustomerGroupResolver {\n  constructor(\n    @Inject(CustomerGroupServiceKey)\n    protected readonly customerGroupService: CustomerGroupService,\n  ) {}\n\n  @Query(() => [CustomerGroup])\n  async customerGroups() {\n    return await this.customerGroupService.loadEntities(getManager());\n  }\n\n  @Query(() => CustomerGroup)\n  async customerGroup(@Args('id', { type: () => Int }) id: number) {\n    return await this.customerGroupService.loadEntityById(getManager(), id);\n  }\n\n  @Mutation(() => CustomerGroup)\n  async saveCustomerGroup(\n    @Args('args') objData: CustomerGroupSaveArgs,\n    @CurrentUser() user,\n  ): Promise<CustomerGroupModel> {\n    return await this.customerGroupService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/customer.price.list.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { CustomerPriceList } from '../../model/generated/entities/CustomerPriceList';\nimport {\n  CustomerPriceListModel,\n  CustomerPriceListService,\n  CustomerPriceListServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { CustomerPriceListSaveArgs } from '../saveArgs/customerPriceList.save.args';\n\n@Resolver(() => CustomerPriceList)\n@UseGuards(GqlAuthGuard)\nexport class CustomerPriceListResolver {\n  constructor(\n    @Inject(CustomerPriceListServiceKey)\n    protected readonly customerPriceListService: CustomerPriceListService,\n  ) {}\n\n  @Query(() => [CustomerPriceList])\n  async customerPriceLists() {\n    return await this.customerPriceListService.loadEntities(getManager());\n  }\n\n  @Query(() => CustomerPriceList)\n  async customerPriceList(@Args('id', { type: () => Int }) id: number) {\n    return await this.customerPriceListService.loadEntityById(getManager(), id);\n  }\n\n  @Mutation(() => CustomerPriceList)\n  async saveCustomerPriceList(\n    @Args('args') objData: CustomerPriceListSaveArgs,\n    @CurrentUser() user,\n  ): Promise<CustomerPriceListModel> {\n    return await this.customerPriceListService.save(\n      getManager(),\n      objData,\n      user,\n    );\n  }\n}\n",
    "apps/api/src/app/resolvers/customer.product.price.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { CustomerProductPrice } from '../../model/generated/entities/CustomerProductPrice';\nimport {\n  CustomerProductPriceModel,\n  CustomerProductPriceService,\n  CustomerProductPriceServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { CustomerProductPriceSaveArgs } from '../saveArgs/customer.product.price.save.args';\n\n@Resolver(() => CustomerProductPrice)\n@UseGuards(GqlAuthGuard)\nexport class CustomerProductPriceResolver {\n  constructor(\n    @Inject(CustomerProductPriceServiceKey)\n    protected readonly customerProductPriceService: CustomerProductPriceService,\n  ) {}\n\n  @Query(() => [CustomerProductPrice])\n  async customerProductPrices() {\n    return await this.customerProductPriceService.loadEntities(getManager());\n  }\n\n  @Query(() => CustomerProductPrice)\n  async customerProductPrice(@Args('id', { type: () => Int }) id: number) {\n    return await this.customerProductPriceService.loadEntityById(\n      getManager(),\n      id,\n    );\n  }\n\n  @Mutation(() => CustomerProductPrice)\n  async saveCustomerProductPrice(\n    @Args('args') objData: CustomerProductPriceSaveArgs,\n    @CurrentUser() user,\n  ): Promise<CustomerProductPriceModel> {\n    return await this.customerProductPriceService.save(\n      getManager(),\n      objData,\n      user,\n    );\n  }\n}\n",
    "apps/api/src/app/resolvers/customer.resolver.ts": "import {\n  Args,\n  Int,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport {\n  AddressService,\n  AddressServiceKey,\n  CustomerModel,\n  CustomerService,\n  CustomerServiceKey,\n} from '../../model';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { getManager } from 'typeorm';\nimport { CustomerSaveArgs } from '../saveArgs/customer.save.args';\nimport { Customer } from '../../model/generated/entities/Customer';\n\n@Resolver(() => Customer)\n@UseGuards(GqlAuthGuard)\nexport class CustomerResolver {\n  constructor(\n    @Inject(CustomerServiceKey)\n    protected readonly customerService: CustomerService,\n    @Inject(AddressServiceKey)\n    protected readonly addressService: AddressService,\n  ) {}\n\n  @Query(() => [Customer])\n  async customers() {\n    return await this.customerService.loadEntities(getManager());\n  }\n\n  @Query(() => Customer)\n  async customer(@Args('id', { type: () => Int }) id: number) {\n    return await this.customerService.loadEntityById(getManager(), id);\n  }\n\n  @Query(() => [Customer])\n  async customersByArgs(\n    @Args('displayName', { type: () => String, nullable: true })\n    displayName: string,\n    @Args('legalName', { type: () => String, nullable: true })\n    legalName: string,\n  ) {\n    const where: any = {};\n    if (displayName) {\n      where.displayName = displayName;\n    }\n    if (legalName) {\n      where.legalName = legalName;\n    }\n\n    return await this.customerService.loadEntities(getManager(), { where });\n  }\n\n  @ResolveField()\n  async legalAddress(@Parent() customer: Customer) {\n    const entityManager = getManager();\n    const { id } = customer;\n    const { customer_legalAddressId } = await this.customerService\n      .createQueryBuilder(entityManager, `customer`)\n      .where(`customer.id=:id`, { id })\n      .getRawOne();\n    return this.addressService.loadEntityById(\n      entityManager,\n      customer_legalAddressId,\n    );\n  }\n\n  @Mutation(() => Customer)\n  async saveCustomer(\n    @Args('args') objData: CustomerSaveArgs,\n    @CurrentUser() user,\n  ): Promise<CustomerModel> {\n    return await this.customerService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/factoring.contract.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { FactoringContract } from '../../model/generated/entities/FactoringContract';\nimport {\n  FactoringContractModel,\n  FactoringContractService,\n  FactoringContractServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { FactoringContractSaveArgs } from '../saveArgs/factoring.contract.save.args';\n\n@Resolver(() => FactoringContract)\n@UseGuards(GqlAuthGuard)\nexport class FactoringContractResolver {\n  constructor(\n    @Inject(FactoringContractServiceKey)\n    protected readonly factoringContractService: FactoringContractService,\n  ) {}\n\n  @Query(() => [FactoringContract])\n  async factoringContracts() {\n    return await this.factoringContractService.loadEntities(getManager(), {\n      relations: ['factoringProvider', 'customer', 'organization'],\n    });\n  }\n\n  @Query(() => FactoringContract)\n  async factoringContract(@Args('id', { type: () => Int }) id: number) {\n    return await this.factoringContractService.loadEntityById(getManager(), id);\n  }\n\n  @Mutation(() => FactoringContract)\n  async saveFactoringContract(\n    @Args('args') objData: FactoringContractSaveArgs,\n    @CurrentUser() user,\n  ): Promise<FactoringContractModel> {\n    return await this.factoringContractService.save(\n      getManager(),\n      objData,\n      user,\n    );\n  }\n}\n",
    "apps/api/src/app/resolvers/factoring.provider.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { FactoringProvider } from '../../model/generated/entities/FactoringProvider';\nimport {\n  FactoringProviderModel,\n  FactoringProviderService,\n  FactoringProviderServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { FactoringProviderSaveArgs } from '../saveArgs/factoring.provider.save.args';\nimport { FactoringContractSaveArgs } from '../saveArgs/factoring.contract.save.args';\n\n@Resolver(() => FactoringProvider)\n@UseGuards(GqlAuthGuard)\nexport class FactoringProviderResolver {\n  constructor(\n    @Inject(FactoringProviderServiceKey)\n    protected readonly factoringProviderService: FactoringProviderService,\n  ) {}\n\n  @Query(() => [FactoringProvider])\n  async factoringProviders() {\n    return await this.factoringProviderService.loadEntities(getManager());\n  }\n\n  @Query(() => [FactoringProvider])\n  async factoringProvidersForInvoice(\n    @Args('args') objData: FactoringContractSaveArgs,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @CurrentUser() user,\n  ) {\n    const manager = getManager();\n    return await this.factoringProviderService.getPossibleFactoringProviders(\n      manager,\n      objData.organizationId,\n      objData.customerId,\n    );\n  }\n\n  @Query(() => FactoringProvider)\n  async factoringProvider(@Args('id', { type: () => Int }) id: number) {\n    return await this.factoringProviderService.loadEntityById(getManager(), id);\n  }\n\n  @Mutation(() => FactoringProvider)\n  async saveFactoringProvider(\n    @Args('args') objData: FactoringProviderSaveArgs,\n    @CurrentUser() user,\n  ): Promise<FactoringProviderModel> {\n    return await this.factoringProviderService.save(\n      getManager(),\n      objData,\n      user,\n    );\n  }\n}\n",
    "apps/api/src/app/resolvers/menu.resolver.ts": "import { Query, Resolver } from '@nestjs/graphql';\nimport { Menu } from '../../model/generated/entities/Menu';\nimport { UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard } from '../../auth';\nimport { getManager } from 'typeorm';\n\n@Resolver(() => Menu)\n@UseGuards(GqlAuthGuard)\nexport class MenuResolver {\n  @Query(() => [Menu])\n  async menu() {\n    const manager = getManager();\n\n    return await manager.find(Menu);\n  }\n}\n",
    "apps/api/src/app/resolvers/organization.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { Organization } from '../../model/generated/entities/Organization';\nimport {\n  OrganizationModel,\n  OrganizationService,\n  OrganizationServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport { OrganizationSaveArgs } from '../saveArgs/organization.save.args';\n\n@Resolver(() => Organization)\n@UseGuards(GqlAuthGuard)\nexport class OrganizationResolver {\n  constructor(\n    @Inject(OrganizationServiceKey)\n    protected readonly organizationService: OrganizationService,\n  ) {}\n\n  @Query(() => [Organization])\n  async organizations() {\n    return await this.organizationService.loadEntities(getManager());\n  }\n\n  @Query(() => Organization)\n  async organization(@Args('id', { type: () => Int }) id: number) {\n    const result = await this.organizationService.loadEntityById(\n      getManager(),\n      id,\n    );\n    return result;\n  }\n\n  @Mutation(() => Organization)\n  async saveOrganization(\n    @Args('args') objData: OrganizationSaveArgs,\n    @CurrentUser() user,\n  ): Promise<OrganizationModel> {\n    return await this.organizationService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/product.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { Product } from '../../model/generated/entities/Product';\nimport { ProductModel, ProductService, ProductServiceKey } from '../../model';\nimport { getManager } from 'typeorm';\nimport { ProductSaveArgs } from '../saveArgs/product.save.args';\n\n@Resolver(() => Product)\n@UseGuards(GqlAuthGuard)\nexport class ProductResolver {\n  constructor(\n    @Inject(ProductServiceKey)\n    protected readonly productService: ProductService,\n  ) {}\n\n  @Query(() => [Product])\n  async products() {\n    return await this.productService.loadEntities(getManager());\n  }\n\n  @Query(() => Product)\n  async product(@Args('id', { type: () => Int }) id: number) {\n    const result = await this.productService.loadEntityById(getManager(), id);\n    return result;\n  }\n\n  @Mutation(() => Product)\n  async saveProduct(\n    @Args('args') objData: ProductSaveArgs,\n    @CurrentUser() user,\n  ): Promise<ProductModel> {\n    return await this.productService.save(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/sales.invoice.resolver.ts": "import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { CurrentUser, GqlAuthGuard } from '../../auth';\nimport { SalesInvoice } from '../../model/generated/entities/SalesInvoice';\nimport {\n  SalesInvoiceModel,\n  SalesInvoicePublishArgsModel,\n  SalesInvoiceService,\n  SalesInvoiceServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\nimport {\n  SalesInvoiceMonthlySaveArgs,\n  SalesInvoicePublishArgs,\n} from '../saveArgs/sales.invoice.monthly.save.args';\nimport { SalesInvoiceSaveArgs } from '../saveArgs/sales.invoice.save.args';\nimport { SalesInvoicesInTime } from '../dto/SalesInvoicesInTime';\nimport * as moment from 'moment';\nimport { BaseSaveArgs } from '../saveArgs/base.save.args';\n\n@Resolver(() => SalesInvoice)\n@UseGuards(GqlAuthGuard)\nexport class SalesInvoiceResolver {\n  constructor(\n    @Inject(SalesInvoiceServiceKey)\n    protected readonly salesInvoiceService: SalesInvoiceService,\n  ) {}\n\n  @Query(() => [SalesInvoice])\n  async salesInvoices() {\n    return await this.salesInvoiceService.loadEntities(getManager(), {\n      order: { id: 'DESC' },\n    });\n  }\n\n  @Query(() => SalesInvoice)\n  async salesInvoice(@Args('id', { type: () => Int }) id: number) {\n    return await this.salesInvoiceService.loadEntityById(getManager(), id);\n  }\n\n  @Mutation(() => SalesInvoice)\n  async duplicateSalesInvoice(\n    @Args('id', { type: () => Int }) id: number,\n    @CurrentUser() user,\n  ) {\n    return await this.salesInvoiceService.duplicate(getManager(), id, user);\n  }\n\n  @Query(() => [SalesInvoicesInTime])\n  async salesInvoicesReport() {\n    const result = await this.salesInvoiceService.salesInvoicesReport(\n      getManager(),\n    );\n\n    return result.map(({ year, month, organization_displayName, sum }) => ({\n      group: organization_displayName,\n      date: moment()\n        .year(year)\n        .month(month)\n        .date(1)\n        .format('YYYY-MM-DD'),\n      value: sum,\n    }));\n  }\n\n  @Mutation(() => [SalesInvoice])\n  async createMonthlyInvoice(\n    @Args('args') objData: SalesInvoiceMonthlySaveArgs,\n    @CurrentUser() user,\n  ): Promise<SalesInvoiceModel[]> {\n    return await this.salesInvoiceService.createMonthlyInvoice(\n      getManager(),\n      objData,\n      user,\n    );\n  }\n\n  @Mutation(() => SalesInvoice)\n  async saveSalesInvoice(\n    @Args('args') objData: SalesInvoiceSaveArgs,\n    @CurrentUser() user,\n  ): Promise<SalesInvoiceModel> {\n    return await this.salesInvoiceService.save(getManager(), objData, user);\n  }\n\n  @Mutation(() => SalesInvoice)\n  async confirmSalesInvoice(\n    @Args('args') objData: BaseSaveArgs,\n    @CurrentUser() user,\n  ): Promise<SalesInvoiceModel> {\n    const id = objData.id;\n    const invoice = await this.salesInvoiceService.loadEntityById(\n      getManager(),\n      id,\n    );\n    return await this.salesInvoiceService.confirm(getManager(), invoice, user);\n  }\n\n  @Mutation(() => SalesInvoice)\n  async publishSalesInvoice(\n    @Args('args') objData: SalesInvoicePublishArgs,\n    @CurrentUser() user,\n  ): Promise<SalesInvoiceModel> {\n    return await this.salesInvoiceService.publish(getManager(), objData, user);\n  }\n}\n",
    "apps/api/src/app/resolvers/unit.of.measurement.resolver.ts": "import { Query, Resolver } from '@nestjs/graphql';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard } from '../../auth';\nimport { UnitOfMeasurement } from '../../model/generated/entities/UnitOfMeasurement';\nimport {\n  UnitOfMeasurementService,\n  UnitOfMeasurementServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\n// import { UnitOfMeasurementSaveArgs } from '../saveArgs/unitOfMeasurement.save.args';\n\n@Resolver(() => UnitOfMeasurement)\n@UseGuards(GqlAuthGuard)\nexport class UnitOfMeasurementResolver {\n  constructor(\n    @Inject(UnitOfMeasurementServiceKey)\n    protected readonly unitOfMeasurementService: UnitOfMeasurementService,\n  ) {}\n\n  @Query(() => [UnitOfMeasurement])\n  async currencies() {\n    return await this.unitOfMeasurementService.loadEntities(getManager());\n  }\n\n  /*@Mutation(() => UnitOfMeasurement)\n  async saveUnitOfMeasurement(\n    @Args('args') objData: UnitOfMeasurementSaveArgs,\n    @CurrentUser() user,\n  ): Promise<UnitOfMeasurementModel> {\n    return await this.unitOfMeasurementService.save(\n      getManager(),\n      objData,\n      user,\n    );\n  }*/\n}\n",
    "apps/api/src/app/support/everything.subscriber.ts": "import { User } from '../../model/generated/entities/User';\nimport { EntityManager } from 'typeorm';\n\nexport class EverythingSubscriber {\n  static createTechnicalUser = async (manager: EntityManager) => {\n    const user = new User();\n    user.email = process.env.TECHNICAL_USER_EMAIL;\n    await manager.save(user);\n  };\n}\n",
    "apps/api/src/auth/lib/authentication.service.ts": "import { HttpService, Injectable } from '@nestjs/common';\nimport {\n  getService,\n  getTechnicalUser,\n  UserModel,\n  UserService,\n  UserServiceKey,\n} from '../../model';\nimport { getManager } from 'typeorm';\n\ninterface KeycloakUserInfoResponse {\n  sub: string;\n  email_verified: boolean;\n  name: string;\n  preferred_username: string;\n  given_name: string;\n  family_name: string;\n  email: string;\n}\n\nexport class AuthenticationError extends Error {}\n\n@Injectable()\nexport class AuthenticationService {\n  private readonly baseURL: string;\n  private readonly realm: string;\n\n  constructor(private httpService: HttpService) {\n    this.baseURL = process.env.KEYCLOAK_BASE_URL;\n    this.realm = process.env.KEYCLOAK_REALM;\n  }\n\n  /**\n   * Call the OpenId Connect UserInfo endpoint on Keycloak: https://openid.net/specs/openid-connect-core-1_0.html#UserInfo\n   *\n   * If it succeeds, the token is valid and we get the user infos in the response\n   * If it fails, the token is invalid or expired\n   */\n  async authenticate(accessToken: string): Promise<UserModel> {\n    const manager = getManager();\n    const technicalUser = await getTechnicalUser(manager);\n    if (accessToken === process.env.FAKE_TOKEN) {\n      return technicalUser;\n    }\n\n    const url = `${this.baseURL}/realms/${this.realm}/protocol/openid-connect/userinfo`;\n\n    try {\n      const response = await this.httpService\n        .get<KeycloakUserInfoResponse>(url, {\n          headers: {\n            authorization: `Bearer ${accessToken}`,\n          },\n        })\n        .toPromise();\n\n      const userService = getService<UserService>(UserServiceKey);\n      const profile = {\n        user_id: response.data.email,\n        name: response.data.preferred_username,\n        identities: [\n          {\n            user_id: response.data.email,\n            provider: 'keycloak',\n          },\n        ],\n      };\n\n      return await userService.handleLogin(manager, profile);\n    } catch (e) {\n      console.log('*** auth failed', accessToken, e);\n      throw new AuthenticationError(e.message);\n    }\n  }\n}\n",
    "apps/api/src/main.ts": "/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.enableCors();\n  const port = process.env.PORT || 3333;\n  await app.listen(port, () => {\n    Logger.log('Listening at http://localhost:' + port + '/');\n  });\n}\n\nbootstrap();\n",
    "apps/api/src/model/lib/address.service.ts": "import { BaseEntityService } from './base.entity.service';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { AddressModel } from './address.model';\nimport { AddressSaveArgsModel } from './address.save.args.model';\nimport { EntityManager, Repository } from 'typeorm';\nimport * as deepEqual from 'deep-equal';\nimport { CountryService, CountryServiceKey } from './country.service';\nimport { Address } from '../generated/entities/Address';\n\nexport const AddressServiceKey = 'AddressService';\n\n@Injectable()\nexport class AddressService extends BaseEntityService<\n  AddressModel,\n  AddressSaveArgsModel\n> {\n  constructor(\n    @Inject(CountryServiceKey) public readonly countryService: CountryService,\n  ) {\n    super();\n  }\n\n  createEntity(): AddressModel {\n    return new Address();\n  }\n\n  loadEntityByIdRelations(): string[] {\n    return ['country'];\n  }\n\n  protected async doSave(\n    transactionalEntityManager,\n    newAddress: AddressSaveArgsModel,\n  ): Promise<AddressModel> {\n    const oldAddress = newAddress.id\n      ? await this.loadEntityById(transactionalEntityManager, newAddress.id)\n      : null;\n\n    const oldAddressSimple: AddressSaveArgsModel = {\n      city: oldAddress ? oldAddress.city : '',\n      line1: oldAddress ? oldAddress.line1 : '',\n      zipCode: oldAddress ? oldAddress.zipCode : '',\n      countryIsoCode: oldAddress ? oldAddress.country.isoCode : '',\n    };\n\n    if (!deepEqual(oldAddressSimple, newAddress)) {\n      const address = await this.createEntity();\n      address.line1 = newAddress.line1;\n      address.zipCode = newAddress.zipCode;\n      address.city = newAddress.city;\n\n      if (newAddress.country) {\n        address.country = newAddress.country;\n      } else {\n        address.country = await this.countryService.getCountry(\n          transactionalEntityManager,\n          newAddress.countryIsoCode,\n          newAddress.countryId,\n        );\n      }\n\n      // address.country = Promise.resolve(newAddress.country ? newAddress.country : await base.loadCountry(newAddress.countryId));\n      return address;\n    }\n\n    return oldAddress;\n  }\n\n  protected getRepository(\n    transactionalEntityManager: EntityManager,\n  ): Repository<AddressModel> {\n    return transactionalEntityManager.getRepository(Address);\n  }\n\n  typeName(): string {\n    return AddressServiceKey;\n  }\n}\n",
    "apps/api/src/model/lib/attachment.service.ts": "import { EntityManager, Repository } from 'typeorm';\nimport { AttachmentModel } from './attachment.model';\nimport { AttachmentSaveArgsModel } from './attachment.save.args.model';\nimport { BaseEntityService } from './base.entity.service';\nimport {\n  Attachment,\n  CloudFile,\n  CloudFolder,\n} from '../generated/entities/Attachment';\nimport { SMCloudStore } from '../../../../../absorb/SMCloudStore/smcloudstore/src/SMCloudStore';\n\nexport const AttachmentServiceKey = 'AttachmentService';\n\nexport class AttachmentService extends BaseEntityService<\n  AttachmentModel,\n  AttachmentSaveArgsModel\n> {\n  createEntity(): AttachmentModel {\n    return new Attachment();\n  }\n\n  connection = {\n    accessKeyId: process.env.AWS_ACCESS_KEY,\n    secretAccessKey: process.env.AWS_SECRET,\n    region: process.env.AWS_REGION,\n  };\n\n  storage = SMCloudStore.create('aws-s3', this.connection, {\n    createListItemObject: () => new CloudFile(),\n    createListItemPrefix: () => new CloudFolder(),\n  });\n\n  ensureContainer = () =>\n    this.storage.ensureContainer(process.env.ATT_CONTAINER);\n\n  protected getRepository(\n    transactionalEntityManager,\n  ): Repository<AttachmentModel> {\n    return transactionalEntityManager.getRepository(Attachment);\n  }\n\n  protected async doSave(\n    transactionalEntityManager: EntityManager,\n    args: AttachmentSaveArgsModel,\n    attachment: AttachmentModel,\n  ): Promise<AttachmentModel> {\n    attachment.displayName = args.displayName;\n\n    // await ensureContainer();\n\n    attachment.content = args.content;\n    return attachment;\n  }\n\n  async listCloudContent() {\n    await this.ensureContainer();\n    return await this.storage.listObjects(process.env.ATT_CONTAINER);\n  }\n\n  async getFileAsBase64(id: string) {\n    await this.ensureContainer();\n    return await this.storage.getObjectBase64(process.env.ATT_CONTAINER, id);\n  }\n  async getFileAsStream(id: string) {\n    await this.ensureContainer();\n    return await this.storage.getObject(process.env.ATT_CONTAINER, id);\n  }\n\n  typeName(): string {\n    return AttachmentServiceKey;\n  }\n}\n",
    "apps/api/src/model/lib/base.entity.service.ts": "import { BaseModel } from './base.model';\nimport { BaseSaveArgsModel } from './base.save.args.model';\nimport { EntityManager, Repository, SelectQueryBuilder } from 'typeorm';\nimport { getService } from './module.reference.service';\nimport {\n  SaveArgsValidationService,\n  SaveArgsValidationServiceKey,\n} from './save.args.validation.service';\nimport { FindManyOptions } from 'typeorm/find-options/FindManyOptions';\nimport { FindOneOptions } from 'typeorm/find-options/FindOneOptions';\nimport { UserModel } from './user.model';\n\nexport abstract class BaseEntityService<\n  T extends BaseModel,\n  S extends BaseSaveArgsModel\n> {\n  abstract createEntity(): T;\n  protected abstract getRepository(\n    transactionalEntityManager: EntityManager,\n  ): Repository<T>;\n  protected abstract async doSave(\n    transactionalEntityManager: EntityManager,\n    args: S,\n    entity: T,\n    currentUser: UserModel,\n  ): Promise<T>;\n\n  abstract typeName(): string;\n\n  loadEntityByIdRelations(): string[] {\n    return [];\n  }\n\n  loadEntityById = async (\n    transactionalEntityManager: EntityManager,\n    id: number,\n    relations?: string[],\n  ): Promise<T> =>\n    await this.getRepository(transactionalEntityManager).findOne({\n      where: { id },\n      relations: relations || this.loadEntityByIdRelations(),\n    });\n\n  loadEntity = async (\n    transactionalEntityManager: EntityManager,\n    options: FindOneOptions<T>,\n  ): Promise<T> =>\n    await this.getRepository(transactionalEntityManager).findOne(options);\n\n  createQueryBuilder = (\n    transactionalEntityManager: EntityManager,\n    alias: string,\n  ): SelectQueryBuilder<T> =>\n    this.getRepository(transactionalEntityManager).createQueryBuilder(alias);\n\n  loadEntities = async (\n    transactionalEntityManager: EntityManager,\n    options?: FindManyOptions<T>,\n  ): Promise<Array<T>> =>\n    await this.getRepository(transactionalEntityManager).find(options);\n\n  async save(\n    transactionalEntityManager: EntityManager,\n    args: S,\n    currentUser: UserModel,\n  ): Promise<T> {\n    const saveArgsValidationService: SaveArgsValidationService = getService(\n      SaveArgsValidationServiceKey,\n    );\n\n    await saveArgsValidationService.checkIsSaveArgValid(\n      transactionalEntityManager,\n      this.typeName(),\n      args,\n    );\n\n    if (!args) throw new Error('Args must be set when saving an entity');\n    const entity = args.id\n      ? await this.loadEntityById(transactionalEntityManager, args.id)\n      : await this.createEntity();\n    (entity as any).updtOp = currentUser;\n    (entity as any).updtOpId = currentUser.id;\n    const toBeSaved = await this.doSave(\n      transactionalEntityManager,\n      args,\n      entity,\n      currentUser,\n    );\n    (toBeSaved as any).updtOp = currentUser;\n    (toBeSaved as any).updtOpId = currentUser.id;\n\n    return await this.getRepository(transactionalEntityManager).save(toBeSaved);\n  }\n  persist = async (\n    transactionalEntityManager: EntityManager,\n    t: T,\n    currentUser: UserModel,\n  ): Promise<T> => {\n    (t as any).updtOp = currentUser;\n    (t as any).updtOpId = currentUser.id;\n    return await this.getRepository(transactionalEntityManager).save(t);\n  };\n\n  delete = async (\n    transactionalEntityManager: EntityManager,\n    t: T,\n  ): Promise<void> => {\n    await this.getRepository(transactionalEntityManager).remove(t);\n  };\n  reloadEntity = async (\n    transactionalEntityManager: EntityManager,\n    entity: T,\n    relations?: string[],\n  ): Promise<T> => ({\n    ...entity,\n    ...(await this.getRepository(transactionalEntityManager).findOne({\n      where: { id: entity.id },\n      relations,\n    })),\n  });\n}\n",
    "apps/api/src/model/lib/currency.rate.service.ts": "import { CurrencyRateModel } from './currency.rate.model';\nimport { CurrencyRateSaveArgsModel } from './currency.rate.save.args.model';\nimport { CurrencyModel } from './currency.model';\nimport { EntityManager, Repository } from 'typeorm';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { CurrencyService, CurrencyServiceKey } from './currency.service';\nimport { BaseEntityService } from './base.entity.service';\nimport { OrganizationModel } from './organization.model';\nimport {\n  OrganizationService,\n  OrganizationServiceKey,\n} from './organization.service';\nimport { CurrencyRate } from '../generated/entities/CurrencyRate';\n\nexport const CurrencyRateServiceKey = 'CurrencyRateService';\n\n@Injectable()\nexport class CurrencyRateService extends BaseEntityService<\n  CurrencyRateModel,\n  CurrencyRateSaveArgsModel\n> {\n  constructor(\n    @Inject(CurrencyServiceKey)\n    protected readonly currencyService: CurrencyService,\n    @Inject(OrganizationServiceKey)\n    protected readonly organizationService: OrganizationService,\n  ) {\n    super();\n  }\n\n  getAccountingForDateAndOrg = async (\n    transactionalEntityManager: EntityManager,\n    transactionDate: Date,\n    from: CurrencyModel,\n    org: OrganizationModel,\n  ) => {\n    const toCurrency: CurrencyModel =\n      org?.accountingScheme?.currency ||\n      (\n        await this.organizationService.reloadEntity(\n          transactionalEntityManager,\n          org,\n          ['accountingScheme', 'accountingScheme.currency'],\n        )\n      ).accountingScheme.currency;\n\n    if (from.id === toCurrency.id)\n      return {\n        id: 0,\n        displayName: '',\n        currencyMultiplyingRate: 1,\n        from,\n        to: from,\n        start: transactionDate,\n        end: transactionDate,\n      };\n\n    return await this.getRepository(transactionalEntityManager)\n      .createQueryBuilder('currencyRate')\n      .where(\n        'currencyRate.from = :from AND currencyRate.to = :to ' +\n          ' AND currencyRate.start <= :transactionDate AND currencyRate.end >= :transactionDate',\n        {\n          from: from.id,\n          to: toCurrency.id,\n          transactionDate,\n        },\n      )\n      .getOne();\n  };\n\n  protected async doSave(\n    transactionalEntityManager: EntityManager,\n    args: CurrencyRateSaveArgsModel,\n    entity: CurrencyRateModel,\n  ): Promise<CurrencyRateModel> {\n    const currencyService = this.currencyService;\n    entity.currencyMultiplyingRate = args.currencyMultiplyingRate;\n    entity.end = args.end;\n    entity.start = args.start;\n    entity.from =\n      args.from ||\n      (await currencyService.getCurrency(\n        transactionalEntityManager,\n        args.fromIsoCode,\n      ));\n    entity.to =\n      args.to ||\n      (await currencyService.getCurrency(\n        transactionalEntityManager,\n        args.toIsoCode,\n      ));\n    return entity;\n  }\n\n  typeName(): string {\n    return CurrencyRateServiceKey;\n  }\n\n  createEntity(): CurrencyRateModel {\n    return new CurrencyRate();\n  }\n\n  protected getRepository(\n    transactionalEntityManager,\n  ): Repository<CurrencyRateModel> {\n    return transactionalEntityManager.getRepository(CurrencyRate);\n  }\n}\n",
    "apps/api/src/model/lib/customer.price.list.service.ts": "import { BaseEntityService } from './base.entity.service';\nimport { CustomerPriceListModel } from './customer.price.list.model';\nimport { CustomerPriceListSaveArgsModel } from './customer.price.list.save.args.model';\nimport { CustomerPriceList } from '../generated/entities/CustomerPriceList';\nimport { EntityManager, Repository } from 'typeorm';\nimport { UserModel } from './user.model';\nimport { Injectable } from '@nestjs/common';\nimport { getService } from './module.reference.service';\nimport {\n  CustomerGroupService,\n  CustomerGroupServiceKey,\n} from './customer.group.service';\nimport {\n  CustomerProductPriceService,\n  CustomerProductPriceServiceKey,\n} from './customer.product.price.service';\nimport { ProductModel } from './product.model';\nimport { CustomerGroupModel } from './customer.group.model';\n\nexport const CustomerPriceListServiceKey = 'CustomerPriceListService';\n\n@Injectable()\nexport class CustomerPriceListService extends BaseEntityService<\n  CustomerPriceListModel,\n  CustomerPriceListSaveArgsModel\n> {\n  createEntity(): CustomerPriceListModel {\n    return new CustomerPriceList();\n  }\n\n  protected async doSave(\n    transactionalEntityManager: EntityManager,\n    args: CustomerPriceListSaveArgsModel,\n    entity: CustomerPriceListModel,\n    currentUser: UserModel,\n  ): Promise<CustomerPriceListModel> {\n    const customerGroupService: CustomerGroupService = getService(\n      CustomerGroupServiceKey,\n    );\n    const customerProductPriceService: CustomerProductPriceService = getService(\n      CustomerProductPriceServiceKey,\n    );\n\n    entity.customerGroup = args.customerGroup\n      ? args.customerGroup\n      : await customerGroupService.loadEntity(transactionalEntityManager, {\n          where: { displayName: args.customerGroupDisplayName },\n        });\n    entity.validFrom = args.validFrom;\n    entity.validTo = args.validTo;\n    entity.displayName = args.displayName;\n\n    await this.persist(transactionalEntityManager, entity, currentUser);\n\n    entity.productPrices = [];\n    for (const productPrice of args.productPrices) {\n      entity.productPrices.push(\n        await customerProductPriceService.save(\n          transactionalEntityManager,\n          {\n            sellingPrice: productPrice.sellingPrice,\n            productId: productPrice.productId,\n            customerPriceList: entity,\n            currencyId: productPrice.currencyId,\n          },\n          currentUser,\n        ),\n      );\n    }\n\n    return entity;\n  }\n\n  protected getRepository(\n    transactionalEntityManager: EntityManager,\n  ): Repository<CustomerPriceListModel> {\n    return transactionalEntityManager.getRepository(CustomerPriceList);\n  }\n\n  typeName(): string {\n    return CustomerPriceListServiceKey;\n  }\n\n  async loadDateValidByCustomerGroupAndProduct(\n    transactionalEntityManager: EntityManager,\n    customerGroup: CustomerGroupModel,\n    product: ProductModel,\n  ): Promise<CustomerPriceListModel[]> {\n    const productId = product.id;\n    const customerGroupId = customerGroup.id;\n    return await this.getRepository(transactionalEntityManager)\n      .createQueryBuilder('customerPriceList')\n      .leftJoinAndSelect('customerPriceList.customerGroup', 'customerGroup')\n      .leftJoinAndSelect(\n        'customerPriceList.productPrices',\n        'customerProductPriceModel',\n      )\n      .leftJoinAndSelect('customerProductPriceModel.product', 'product')\n      .where(\n        'product.id=:productId AND customerGroup.id=:customerGroupId AND ' +\n          ' ( now() > customerPriceList.validFrom OR customerPriceList.validFrom IS NULL )' +\n          ' ( now() < customerPriceList.validTo customerPriceList.validTo IS NULL )',\n        {\n          productId,\n          customerGroupId,\n        },\n      )\n      .orderBy('customerPriceList.validFrom', 'DESC')\n      .getMany();\n  }\n}\n",
    "apps/api/src/model/lib/customer.product.price.service.ts": "import { BaseEntityService } from './base.entity.service';\nimport { CustomerProductPriceModel } from './customer.product.price.model';\nimport { CustomerProductPriceSaveArgsModel } from './customer.product.price.save.args.model';\nimport { CustomerProductPrice } from '../generated/entities/CustomerProductPrice';\nimport { EntityManager } from 'typeorm';\nimport { Repository } from 'typeorm';\nimport { getService } from './module.reference.service';\nimport {\n  CustomerPriceListService,\n  CustomerPriceListServiceKey,\n} from './customer.price.list.service';\nimport { ProductService, ProductServiceKey } from './product.service';\nimport { Inject } from '@nestjs/common';\nimport { CurrencyService, CurrencyServiceKey } from './currency.service';\n\nexport const CustomerProductPriceServiceKey = 'CustomerProductPriceServiceKey';\n\nexport class CustomerProductPriceService extends BaseEntityService<\n  CustomerProductPriceModel,\n  CustomerProductPriceSaveArgsModel\n> {\n  constructor(\n    @Inject(ProductServiceKey)\n    protected readonly productService: ProductService,\n    @Inject(CurrencyServiceKey)\n    protected readonly currencyService: CurrencyService,\n  ) {\n    super();\n  }\n\n  createEntity(): CustomerProductPriceModel {\n    return new CustomerProductPrice();\n  }\n\n  protected async doSave(\n    transactionalEntityManager: EntityManager,\n    args: CustomerProductPriceSaveArgsModel,\n    entity: CustomerProductPriceModel,\n  ): Promise<CustomerProductPriceModel> {\n    const customerPriceListService: CustomerPriceListService = getService(\n      CustomerPriceListServiceKey,\n    );\n    entity.product = await this.productService.loadEntityById(\n      transactionalEntityManager,\n      args.productId,\n    );\n    entity.sellingPrice = args.sellingPrice;\n    entity.customerPriceList = await customerPriceListService.loadEntityById(\n      transactionalEntityManager,\n      args.customerPriceListId,\n    );\n    return entity;\n  }\n\n  protected getRepository(\n    transactionalEntityManager: EntityManager,\n  ): Repository<CustomerProductPriceModel> {\n    return transactionalEntityManager.getRepository(CustomerProductPrice);\n  }\n\n  typeName(): string {\n    return CustomerProductPriceServiceKey;\n  }\n}\n",
    "apps/api/src/model/lib/document.numbering.service.ts": "import { EntityManager } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { BaseModel } from './base.model';\nimport { OrganizationModel } from './organization.model';\nimport { DocumentNumberSequence } from '../generated/entities/DocumentNumberSequence';\nimport { SalesInvoice } from '../generated/entities/SalesInvoice';\nimport { UserModel } from './user.model';\n\nexport const DocumentNumberingServiceKey = 'DocumentNumberingService';\n\n@Injectable()\nexport class DocumentNumberingService {\n  async getNextDocumentNumber<M extends BaseModel>(\n    manager: EntityManager,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    modelCtor: (new () => M) | Function,\n    organization: OrganizationModel,\n  ): Promise<string> {\n    const model = await manager.getRepository(DocumentNumberSequence).findOne({\n      where: { forType: modelCtor.name, organization },\n      order: { id: 'DESC' },\n    });\n    const result = model.current;\n    model.current = +model.current + 1;\n    await manager.save(model);\n    return result.toString();\n  }\n\n  async save(\n    entityManager: EntityManager,\n    current: number,\n    currentUser: UserModel,\n    organization: OrganizationModel,\n  ) {\n    const documentNumberSequence = new DocumentNumberSequence();\n    documentNumberSequence.current = current;\n    documentNumberSequence.forType = SalesInvoice.name;\n    documentNumberSequence.organization = organization;\n    documentNumberSequence.updtOp = currentUser;\n    await entityManager.save(documentNumberSequence);\n  }\n}\n",
    "apps/api/src/model/lib/factoring.provider.service.spec.ts": "import { Test } from '@nestjs/testing';\nimport {\n  SaveArgsValidationService,\n  SaveArgsValidationServiceKey,\n} from './save.args.validation.service';\nimport { UserModel } from './user.model';\nimport { BankModel } from './bank.model';\nimport { AddressServiceKey } from './address.service';\nimport { BankAccountServiceKey } from './bank.account.service';\nimport { AccountingSchemeServiceKey } from './accounting.scheme.service';\nimport { FactoringProviderService } from './factoring.provider.service';\n\nlet mockBankAccountServiceCalled = false;\n\nconst mockBankAccountService = {\n  save: x => {\n    mockBankAccountServiceCalled = true;\n    return x;\n  },\n};\nexport const mockBankAccountServiceProvider = {\n  provide: BankAccountServiceKey,\n  useValue: mockBankAccountService,\n};\nconst mockAddressService = {\n  save: x => x,\n};\nexport const mockAddressServiceProvider = {\n  provide: AddressServiceKey,\n  useValue: mockAddressService,\n};\nconst mockAccountingSchemeService = {};\nexport const mockAccountingSchemeServiceProvider = {\n  provide: AccountingSchemeServiceKey,\n  useValue: mockAccountingSchemeService,\n};\n\nconst mockEntityManager = {\n  getRepository: () => ({\n    save: x => x,\n  }),\n} as any;\n\n(global as any).moduleRef = {\n  get: () /*token*/ =>\n    /*token === SalesInvoiceServiceKey\n      ? mockSalesInvoiceService\n      :*/ new SaveArgsValidationService(),\n};\n\nconst saveArgsValidationServiceProvider = {\n  provide: SaveArgsValidationServiceKey,\n  useClass: SaveArgsValidationService,\n};\n\ndescribe('FactoringProviderService', () => {\n  let service: FactoringProviderService;\n\n  beforeAll(async () => {\n    const app = await Test.createTestingModule({\n      providers: [\n        FactoringProviderService,\n        mockBankAccountServiceProvider,\n        mockAddressServiceProvider,\n        saveArgsValidationServiceProvider,\n        mockAccountingSchemeServiceProvider,\n      ],\n    }).compile();\n\n    service = app.get<FactoringProviderService>(FactoringProviderService);\n  });\n\n  it('will create a new bank account if needed and set the document numbering', async () => {\n    mockBankAccountServiceCalled = false;\n    await service.save(\n      mockEntityManager,\n      {\n        displayName: '',\n        legalName: '',\n\n        newBankAccount: {\n          bank: {} as BankModel,\n          displayName: '',\n          bankAccountCustomerPrintableNumber: '',\n          iban: '',\n          swift: '',\n        },\n\n        contact: '',\n      },\n      { id: 1 } as UserModel,\n    );\n    expect(mockBankAccountServiceCalled).toBeTruthy();\n  });\n});\n",
    "apps/api/src/model/lib/mail.service.ts": "import { Inject, Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { EventLogService, EventLogServiceKey } from './eventLog.service';\nimport { getManager } from 'typeorm';\nimport { getTechnicalUser } from './user.service';\nimport { Address } from '@nestjs-modules/mailer/dist/interfaces/send-mail-options.interface';\nimport { ConfigService, ConfigServiceKey } from './config.service';\nimport { ConfigData } from './config.model';\n\nexport const MailServiceKey = 'MailServiceKey';\n\nexport interface MailConfiguration extends ConfigData {\n  __typeName: 'MailConfiguration';\n  from: string;\n}\n\nexport interface MailAttachment {\n  filename: string;\n  /**\n   * This can be Buffer or Stream directly. If it is a base64 string returned from S3,\n   * you must also include `encoding: 'base64'`\n   */\n  content?: any;\n  encoding?: string;\n}\n\n@Injectable()\nexport class MailService {\n  constructor(\n    private readonly mailerService: MailerService,\n    @Inject(EventLogServiceKey)\n    private readonly eventLogService: EventLogService,\n    @Inject(ConfigServiceKey)\n    private readonly configService: ConfigService<MailConfiguration>,\n  ) {}\n\n  async senderEmail() {\n    const manager = getManager();\n    return (\n      (\n        await this.configService.loadEntity(manager, {\n          where: { displayName: 'MailConfiguration' },\n        })\n      )?.content?.from || process.env.MAIL_USER\n    );\n  }\n\n  async send(\n    to: Address,\n    bcc: Address,\n    subject: string,\n    text: string,\n    html: string,\n    replyTo: string,\n    attachments: MailAttachment[] | undefined,\n  ) {\n    const manager = getManager();\n    try {\n      await this.mailerService.sendMail({\n        // list of receivers\n        to,\n        bcc,\n        // sender address\n        from: await this.senderEmail(),\n        subject, // Subject line\n        text,\n        html,\n        replyTo,\n        attachments,\n      });\n    } catch (exception) {\n      await this.eventLogService.save(\n        manager,\n        {\n          displayName: 'email sending failed',\n          content: { exception },\n        },\n        await getTechnicalUser(manager),\n      );\n    }\n  }\n}\n",
    "apps/api/src/model/lib/organization.service.spec.ts": "import { Test } from '@nestjs/testing';\nimport {\n  SaveArgsValidationService,\n  SaveArgsValidationServiceKey,\n} from './save.args.validation.service';\nimport { UserModel } from './user.model';\nimport { OrganizationService } from './organization.service';\nimport { CountryModel } from './country.model';\nimport { BankModel } from './bank.model';\nimport { AddressServiceKey } from './address.service';\nimport { BankAccountServiceKey } from './bank.account.service';\nimport { AccountingSchemeServiceKey } from './accounting.scheme.service';\nimport { AccountingSchemeModel } from './accounting.scheme.model';\nimport { DocumentNumberingServiceKey } from './document.numbering.service';\n\nlet mockBankAccountServiceCalled = false;\nlet mockDocumentNumberingServiceCalled = false;\n\nconst mockDocumentNumberingService = {\n  save: x => {\n    mockDocumentNumberingServiceCalled = true;\n    return x;\n  },\n};\nexport const mockDocumentNumberingServiceProvider = {\n  provide: DocumentNumberingServiceKey,\n  useValue: mockDocumentNumberingService,\n};\n\nconst mockBankAccountService = {\n  save: x => {\n    mockBankAccountServiceCalled = true;\n    return x;\n  },\n};\nexport const mockBankAccountServiceProvider = {\n  provide: BankAccountServiceKey,\n  useValue: mockBankAccountService,\n};\nconst mockAddressService = {\n  save: x => x,\n};\nexport const mockAddressServiceProvider = {\n  provide: AddressServiceKey,\n  useValue: mockAddressService,\n};\nconst mockAccountingSchemeService = {};\nexport const mockAccountingSchemeServiceProvider = {\n  provide: AccountingSchemeServiceKey,\n  useValue: mockAccountingSchemeService,\n};\n\nconst mockEntityManager = {\n  getRepository: () => ({\n    save: x => x,\n  }),\n} as any;\n\n(global as any).moduleRef = {\n  get: () /*token*/ =>\n    /*token === SalesInvoiceServiceKey\n      ? mockSalesInvoiceService\n      :*/ new SaveArgsValidationService(),\n};\n\nconst saveArgsValidationServiceProvider = {\n  provide: SaveArgsValidationServiceKey,\n  useClass: SaveArgsValidationService,\n};\n\ndescribe('OrganizationService', () => {\n  let service: OrganizationService;\n\n  beforeAll(async () => {\n    const app = await Test.createTestingModule({\n      providers: [\n        OrganizationService,\n        mockBankAccountServiceProvider,\n        mockAddressServiceProvider,\n        saveArgsValidationServiceProvider,\n        mockAccountingSchemeServiceProvider,\n        mockDocumentNumberingServiceProvider,\n      ],\n    }).compile();\n\n    service = app.get<OrganizationService>(OrganizationService);\n  });\n\n  it('will create a new bank account if needed and set the document numbering', async () => {\n    mockBankAccountServiceCalled = false;\n    await service.save(\n      mockEntityManager,\n      {\n        displayName: '',\n        legalName: '',\n        legalAddress: {\n          city: '',\n          line1: '',\n          zipCode: '',\n          country: {} as CountryModel,\n        },\n\n        newBankAccount: {\n          bank: {} as BankModel,\n          displayName: '',\n          bankAccountCustomerPrintableNumber: '',\n          iban: '',\n          swift: '',\n        },\n\n        accountingScheme: {} as AccountingSchemeModel,\n\n        registration: '',\n        contact: '',\n        idNumber: '',\n        vatNumber: null,\n\n        currentInvoiceDocumentNumber: 1000,\n      },\n      { id: 1 } as UserModel,\n    );\n    expect(mockBankAccountServiceCalled).toBeTruthy();\n    expect(mockDocumentNumberingServiceCalled).toBeTruthy();\n  });\n});\n",
    "apps/api/src/model/lib/sales.invoice.line.service.spec.ts": "import { Test } from '@nestjs/testing';\nimport { ProductModel } from './product.model';\nimport { CustomerModel } from './customer.model';\nimport { SalesInvoiceModel } from './sales.invoice.model';\nimport { TaxServiceKey } from './tax.service';\nimport { ProductServiceKey } from './product.service';\nimport {\n  SalesInvoiceLineService,\n  SalesInvoiceServiceKey,\n} from './sales.invoice.service';\nimport {\n  SaveArgsValidationService,\n  SaveArgsValidationServiceKey,\n} from './save.args.validation.service';\nimport { UserModel } from './user.model';\nimport { CustomerGroupModel } from './customer.group.model';\nimport { CustomerPriceListServiceKey } from './customer.price.list.service';\nimport { CustomerPriceListModel } from './customer.price.list.model';\nimport { CustomerProductPriceModel } from './customer.product.price.model';\nimport * as moment from 'moment';\nimport * as _ from 'lodash';\n\nconst customerGroup1: CustomerGroupModel = {\n  id: 0,\n  displayName: 'AAA',\n  customers: [],\n};\n\nconst customer: CustomerModel = {\n  contactPersonCompanyRelations: [],\n  invoicingEmail: '',\n  idNumber: '',\n  id: 0,\n  displayName: '',\n  legalName: '',\n  legalAddress: {} as any,\n  customerGroup: customerGroup1,\n};\n\nconst invoice: SalesInvoiceModel = {\n  printLanguage: undefined,\n  reverseCharge: false,\n  paymentTermInDays: 0,\n  currencyMultiplyingRateToAccountingSchemeCurrency: 1,\n  vatReport: [{} as any],\n  isCalculated: false,\n  isDraft: false,\n  id: 0,\n  lines: [{} as any],\n  customer: customer,\n  currency: {} as any,\n  totalLines: 0,\n  transactionDate: new Date(),\n  organization: {} as any,\n  dueDate: new Date(),\n  bankAccount: {} as any,\n  printed: false,\n  issuedOn: new Date(),\n  grandTotalAccountingSchemeCurrency: 0,\n  grandTotal: 0,\n  totalLinesAccountingSchemeCurrency: 0,\n};\n\nconst product1: ProductModel = {\n  sku: '',\n  id: 1,\n  displayName: '',\n};\nconst product2: ProductModel = {\n  sku: '',\n  id: 2,\n  displayName: '',\n};\n\nconst QUANTITY = 10;\nconst PRODUCT_GROUP_PRICE = 123;\n\nconst mockTaxService = {};\nexport const mockTaxServiceProvider = {\n  provide: TaxServiceKey,\n  useValue: mockTaxService,\n};\nconst mockProductService = {};\nexport const mockProductServiceProvider = {\n  provide: ProductServiceKey,\n  useValue: mockProductService,\n};\nconst mockSalesInvoiceService = {};\nexport const mockSalesInvoiceServiceProvider = {\n  provide: SalesInvoiceServiceKey,\n  useValue: mockSalesInvoiceService,\n};\nconst customerPriceListModel: CustomerPriceListModel = {\n  id: 1,\n  displayName: '',\n  customerGroup: customerGroup1,\n  productPrices: [\n    {\n      product: product2,\n      sellingPrice: PRODUCT_GROUP_PRICE,\n    } as CustomerProductPriceModel,\n  ],\n};\n\nconst mockCustomerPriceListService = {\n  loadDateValidByCustomerGroupAndProduct: (\n    transactionalEntityManager,\n    customerGroup,\n    product,\n  ): CustomerPriceListModel[] | null =>\n    product === product2 && customerGroup === customerGroup1\n      ? [customerPriceListModel]\n      : null,\n};\nconst mockCustomerPriceListServiceProvider = {\n  provide: CustomerPriceListServiceKey,\n  useValue: mockCustomerPriceListService,\n};\n\nconst mockEntityManager = {\n  getRepository: () => ({\n    save: x => x,\n  }),\n} as any;\n\n(global as any).moduleRef = {\n  get: token => {\n    switch (token) {\n      case SalesInvoiceServiceKey:\n        return mockSalesInvoiceService;\n      default:\n        return new SaveArgsValidationService();\n    }\n  },\n};\n\nconst saveArgsValidationServiceProvider = {\n  provide: SaveArgsValidationServiceKey,\n  useClass: SaveArgsValidationService,\n};\n\ndescribe('SalesInvoiceLineService', () => {\n  let service: SalesInvoiceLineService;\n\n  beforeAll(async () => {\n    const app = await Test.createTestingModule({\n      providers: [\n        SalesInvoiceLineService,\n        mockTaxServiceProvider,\n        mockProductServiceProvider,\n        mockSalesInvoiceServiceProvider,\n        saveArgsValidationServiceProvider,\n        mockCustomerPriceListServiceProvider,\n      ],\n    }).compile();\n\n    service = app.get<SalesInvoiceLineService>(SalesInvoiceLineService);\n  });\n\n  it('line price is taken from the linePrice field (no calculation yet)', async () => {\n    const line = await service.save(\n      mockEntityManager,\n      {\n        narration: '',\n        linePrice: 2 * QUANTITY,\n        invoice,\n        lineOrder: 0,\n        quantity: QUANTITY,\n        lineTax: {} as any,\n        product: product1,\n      },\n      { id: 1 } as UserModel,\n    );\n    expect(line.linePrice).toBe(2 * QUANTITY);\n  });\n\n  it('line price is taken from the customer group price list if that exists', async () => {\n    customerPriceListModel.validTo = null;\n    customerPriceListModel.validFrom = null;\n    const line = await service.save(\n      mockEntityManager,\n      {\n        narration: '',\n        linePrice: 2 * QUANTITY,\n        invoice,\n        lineOrder: 0,\n        quantity: QUANTITY,\n        lineTax: {} as any,\n        product: product2,\n      },\n      { id: 1 } as UserModel,\n    );\n    expect(line.linePrice).toBe(PRODUCT_GROUP_PRICE * QUANTITY);\n  });\n\n  it('line price is taken from the customer group price list if that exists and is valid', async () => {\n    customerPriceListModel.validTo = null;\n    customerPriceListModel.validFrom = moment()\n      .add(1, 'days')\n      .toDate();\n    const line = await service.save(\n      mockEntityManager,\n      {\n        narration: '',\n        linePrice: 2 * QUANTITY,\n        invoice,\n        lineOrder: 0,\n        quantity: QUANTITY,\n        lineTax: {} as any,\n        product: product2,\n      },\n      { id: 1 } as UserModel,\n    );\n    expect(line.linePrice).not.toBe(PRODUCT_GROUP_PRICE * QUANTITY);\n  });\n\n  it('line price is taken from the customer group price list that is with the newest start', async () => {\n    customerPriceListModel.validTo = null;\n    customerPriceListModel.validFrom = null;\n    const customerPriceListModel2: CustomerPriceListModel = _.cloneDeep(\n      customerPriceListModel,\n    );\n    customerPriceListModel2.validFrom = moment()\n      .add(-1, 'days')\n      .toDate();\n    customerPriceListModel2.productPrices[0].sellingPrice =\n      PRODUCT_GROUP_PRICE / 2;\n    const remember =\n      mockCustomerPriceListService.loadDateValidByCustomerGroupAndProduct;\n    mockCustomerPriceListService.loadDateValidByCustomerGroupAndProduct = (\n      transactionalEntityManager,\n      customerGroup,\n      product,\n    ): CustomerPriceListModel[] | null =>\n      product === product2 && customerGroup === customerGroup1\n        ? [customerPriceListModel, customerPriceListModel2]\n        : null;\n    try {\n      const line = await service.save(\n        mockEntityManager,\n        {\n          narration: '',\n          linePrice: 2 * QUANTITY,\n          invoice,\n          lineOrder: 0,\n          quantity: QUANTITY,\n          lineTax: {} as any,\n          product: product2,\n        },\n        { id: 1 } as UserModel,\n      );\n      expect(line.linePrice).toBe((PRODUCT_GROUP_PRICE / 2) * QUANTITY);\n    } finally {\n      mockCustomerPriceListService.loadDateValidByCustomerGroupAndProduct = remember;\n    }\n  });\n});\n",
    "apps/api/src/model/lib/sales.invoice.service.spec.ts": "import { Test } from '@nestjs/testing';\n\nimport * as _ from 'lodash';\nimport { EntityManager } from 'typeorm';\nimport { TaxServiceKey } from './tax.service';\nimport { ProductServiceKey } from './product.service';\nimport {\n  SalesInvoiceLineServiceKey,\n  SalesInvoiceService,\n} from './sales.invoice.service';\nimport { BankAccountServiceKey } from './bank.account.service';\nimport { CustomerServiceKey } from './customer.service';\nimport { OrganizationServiceKey } from './organization.service';\nimport { CurrencyServiceKey } from './currency.service';\nimport { ReportsServiceKey } from './reports.service';\nimport { LanguagesServiceKey } from './languages.service';\nimport { CurrencyModel } from './currency.model';\nimport { CurrencyRateServiceKey } from './currency.rate.service';\nimport { SalesInvoiceVatServiceKey } from './sales.invoice.vat.service';\nimport { DocumentNumberingServiceKey } from './document.numbering.service';\nimport {\n  SaveArgsValidationService,\n  SaveArgsValidationServiceKey,\n} from './save.args.validation.service';\nimport { TaxModel } from './tax.model';\nimport { SalesInvoiceLineModel } from './sales.invoice.line.model';\nimport { SalesInvoice } from '../generated/entities/SalesInvoice';\nimport { FactoringContractServiceKey } from './factoring.contract.service';\nimport { FactoringProviderServiceKey } from './factoring.provider.service';\nimport { FactoringContractModel } from './factoring.contract.model';\nimport { MailServiceKey } from './mail.service';\nimport { AttachmentServiceKey } from './attachment.service';\nimport { XmlService, XmlServiceKey } from './xml.service';\n\nconst mockTaxService = {\n  getZeroTax: () => ({}),\n};\nexport const mockTaxServiceProvider = {\n  provide: TaxServiceKey,\n  useValue: mockTaxService,\n};\nconst mockProductService = {};\nexport const mockProductServiceProvider = {\n  provide: ProductServiceKey,\n  useValue: mockProductService,\n};\nconst mockSalesInvoiceLineService = {\n  save: x => x,\n};\nexport const mockSalesInvoiceLineServiceProvider = {\n  provide: SalesInvoiceLineServiceKey,\n  useValue: mockSalesInvoiceLineService,\n};\nconst mockBankAccountService = {};\nexport const mockBankAccountServiceProvider = {\n  provide: BankAccountServiceKey,\n  useValue: mockBankAccountService,\n};\nconst mockCustomerService = {\n  getCustomer: () => ({ legalAddress: { country: { isoCode: 'undefined' } } }),\n};\nexport const mockCustomerServiceProvider = {\n  provide: CustomerServiceKey,\n  useValue: mockCustomerService,\n};\nconst mockOrganizationService = {\n  loadEntities: () => [\n    { id: 1, displayName: 'NUCZ' },\n    { id: 2, displayName: 'ABCD' },\n  ],\n  getOrg: () => ({ legalAddress: { country: { isoCode: 'undefined' } } }),\n};\nexport const mockOrganizationServiceProvider = {\n  provide: OrganizationServiceKey,\n  useValue: mockOrganizationService,\n};\nconst mockCurrencyService = {\n  getCurrency: () => ({}),\n};\nexport const mockCurrencyServiceProvider = {\n  provide: CurrencyServiceKey,\n  useValue: mockCurrencyService,\n};\nconst mockReportsService = {\n  printSalesInvoice: () => {\n    /* intentionally left blank */\n  },\n};\nexport const mockReportsServiceProvider = {\n  provide: ReportsServiceKey,\n  useValue: mockReportsService,\n};\nconst mockLanguagesService = {\n  loadEntities: () => [{ isoCode: 'undefined' }],\n};\nexport const mockLanguagesServiceProvider = {\n  provide: LanguagesServiceKey,\n  useValue: mockLanguagesService,\n};\nconst mockCurrencyRateService = {\n  rate: 1,\n  getAccountingForDateAndOrg: (\n    transactionalEntityManager: EntityManager,\n    transactionDate: Date,\n    from: CurrencyModel,\n  ) => ({\n    id: 0,\n    displayName: '',\n    currencyMultiplyingRate: mockCurrencyRateService.rate,\n    from,\n    to: from,\n    start: transactionDate,\n    end: transactionDate,\n  }),\n  save: () => {\n    /* intentionally left blank */\n  },\n};\nexport const mockCurrencyRateServiceProvider = {\n  provide: CurrencyRateServiceKey,\n  useValue: mockCurrencyRateService,\n};\nconst mockSalesInvoiceVatService = {\n  save: (transactionalEntityManager, entity) => entity,\n};\nexport const mockSalesInvoiceVatServiceProvider = {\n  provide: SalesInvoiceVatServiceKey,\n  useValue: mockSalesInvoiceVatService,\n};\nconst mockDocumentNumberingService = {\n  getNextDocumentNumber: () => 1,\n};\nexport const mockDocumentNumberingServiceProvider = {\n  provide: DocumentNumberingServiceKey,\n  useValue: mockDocumentNumberingService,\n};\nconst saveArgsValidationServiceProvider = {\n  provide: SaveArgsValidationServiceKey,\n  useClass: SaveArgsValidationService,\n  useValue: new SaveArgsValidationService(),\n};\nconst mockFactoringProvider = {\n  bankAccount: {\n    id: 8798,\n  },\n};\nconst mockFactoringContract: FactoringContractModel = {\n  id: 1,\n  isActive: true,\n  factoringProvider: mockFactoringProvider as any,\n  customer: {} as any,\n  organization: {} as any,\n  invoicePrintNote: 'this should be printed',\n};\nconst mockFactoringContractService = {\n  getFactoringContract: (_e, _o, provider) => ({\n    ...mockFactoringContract,\n    isActive: provider.id === 1,\n  }),\n};\nexport const mockFactoringContractServiceProvider = {\n  provide: FactoringContractServiceKey,\n  useValue: mockFactoringContractService,\n};\nconst mockFactoringProviderService = {\n  loadEntityById: (_manager, id) => ({ ...mockFactoringProvider, id }),\n};\nexport const mockFactoringProviderServiceProvider = {\n  provide: FactoringProviderServiceKey,\n  useValue: mockFactoringProviderService,\n};\nconst mockMailService = {};\nexport const mockMailServiceProvider = {\n  provide: MailServiceKey,\n  useValue: mockMailService,\n};\nconst mockAttachmentService = {};\nexport const mockAttachmentServiceProvider = {\n  provide: AttachmentServiceKey,\n  useValue: mockAttachmentService,\n};\nexport const xmlServiceProvider = {\n  provide: XmlServiceKey,\n  useValue: new XmlService(),\n};\n\nconst mockSalesInvoice = {\n  isDraft: true,\n  lines: [],\n  customer: {\n    legalAddress: {\n      country: {\n        isoCode: 'undefined',\n      },\n    },\n  },\n  organization: {\n    legalAddress: {\n      country: {\n        isoCode: 'undefined',\n      },\n    },\n    bankAccount: {\n      id: 18,\n    },\n  },\n  currency: {},\n  factoringProviderId: 2,\n  vatReport: [\n    {\n      vatRatePercent: 10,\n      vatTotalRaw: 100,\n      vatTotalAccountingSchemeCurrencyRaw: 100,\n      vatTotal: 100,\n      vatTotalAccountingSchemeCurrency: 100,\n    },\n  ],\n} as any;\n\nconst mockEntityManager = {\n  getRepository: () => ({\n    save: x => x,\n    findOne: () => mockSalesInvoice,\n  }),\n} as any;\n\nconst providers = [\n  SalesInvoiceService,\n  mockTaxServiceProvider,\n  mockProductServiceProvider,\n  mockSalesInvoiceLineServiceProvider,\n  mockBankAccountServiceProvider,\n  mockCustomerServiceProvider,\n  mockOrganizationServiceProvider,\n  mockCurrencyServiceProvider,\n  mockReportsServiceProvider,\n  mockLanguagesServiceProvider,\n  mockCurrencyRateServiceProvider,\n  mockSalesInvoiceVatServiceProvider,\n  mockDocumentNumberingServiceProvider,\n  saveArgsValidationServiceProvider,\n  mockFactoringContractServiceProvider,\n  mockFactoringProviderServiceProvider,\n  mockMailServiceProvider,\n  mockAttachmentServiceProvider,\n  xmlServiceProvider,\n];\n\n(global as any).moduleRef = {\n  get: (typeOrToken: string) => {\n    const found = providers.find(x => (x as any).provide === typeOrToken);\n    if (found) {\n      const val = (found as any).useValue;\n      if (val) return val;\n    }\n    return mockSalesInvoiceLineService;\n  },\n};\n\ndescribe('SalesInvoiceService', () => {\n  let service: SalesInvoiceService;\n\n  beforeAll(async () => {\n    const app = await Test.createTestingModule({\n      providers,\n    }).compile();\n\n    service = app.get<SalesInvoiceService>(SalesInvoiceService);\n  });\n\n  const tax1: TaxModel = {\n    id: 0,\n    displayName: null,\n    ratePercent: 10,\n    isStandard: false,\n  };\n  const tax2 = {\n    id: 0,\n    displayName: null,\n    ratePercent: 18.5,\n    isStandard: false,\n  };\n  const tax3 = {\n    id: 0,\n    displayName: null,\n    ratePercent: 21,\n    isStandard: false,\n  };\n\n  describe('SalesInvoiceService', () => {\n    it('calculatePrices nothing returns null', async () => {\n      const result = await service.calculatePrices(null, null, null);\n      expect(result).toBeNull();\n    });\n    it('calculatePrices somelines return correct', async () => {\n      const lines: Array<SalesInvoiceLineModel> = [\n        {\n          linePrice: 1000,\n          lineTax: tax1,\n          product: null,\n          quantity: 0,\n          narration: null,\n          id: 1,\n          lineOrder: 1,\n          invoice: null,\n        },\n        {\n          linePrice: 10,\n          lineTax: tax2,\n          product: null,\n          quantity: 0,\n          narration: null,\n          id: 2,\n          lineOrder: 2,\n          invoice: null,\n        },\n      ];\n      const invoice = new SalesInvoice();\n      invoice.lines = lines;\n      invoice.organization = { vatNumber: 'ABC' } as any;\n      invoice.lines.forEach(x => (x.invoice = invoice));\n      mockCurrencyRateService.rate = 1;\n      const result = await service.calculatePrices(null, invoice, null);\n      expect(result).not.toBeUndefined();\n      expect(result).not.toBeNull();\n      const resultLines = result.lines;\n      expect(resultLines).not.toBeNull();\n      expect(resultLines.length).toBe(lines.length);\n      expect(result.grandTotal).toBe(1111.85);\n      expect(result.totalLines).toBe(1010);\n      const vatReport = result.vatReport;\n      expect(vatReport).not.toBeUndefined();\n      expect(vatReport).not.toBeNull();\n      expect(vatReport.length).toBe(2);\n      expect(\n        _.round(\n          _.sum(vatReport.map(x => x.vatTotalAccountingSchemeCurrency)),\n          2,\n        ),\n      ).toBe(_.round(1111.85 - 1010, 2));\n    });\n    it('calculatePrices should round correctly', async () => {\n      const lines = [\n        {\n          linePrice: 0.5,\n          lineTax: tax1,\n          product: null,\n          quantity: 0,\n          narration: null,\n          lineOrder: 1,\n          id: 1,\n          invoice: null,\n        },\n        {\n          linePrice: 0.1,\n          lineTax: tax2,\n          product: null,\n          quantity: 0,\n          narration: null,\n          lineOrder: 2,\n          id: 2,\n          invoice: null,\n        },\n      ];\n      const invoice = new SalesInvoice();\n      invoice.lines = lines;\n      invoice.organization = { vatNumber: 'ABC' } as any;\n      invoice.lines.forEach(x => (x.invoice = invoice));\n      mockCurrencyRateService.rate = 1;\n      const result = await service.calculatePrices(null, invoice, null);\n      expect(result).not.toBeUndefined();\n      expect(result).not.toBeNull();\n      const resultLines = result.lines;\n      expect(resultLines).not.toBeNull();\n      expect(resultLines.length).toBe(lines.length);\n      expect(result.grandTotal).toBe(0.67);\n      expect(result.totalLines).toBe(0.6);\n      const vatReport = result.vatReport;\n      expect(vatReport.length).toBe(2);\n      expect(\n        _.round(\n          _.sum(vatReport.map(x => x.vatTotalAccountingSchemeCurrency)),\n          2,\n        ),\n      ).toBe(_.round(0.67 - 0.6, 2));\n    });\n    it('calculatePrices should work with the currency rate correctly', async () => {\n      const lines = [\n        {\n          linePrice: 45.0,\n          lineTax: tax3,\n          product: null,\n          quantity: 0,\n          narration: null,\n          lineOrder: 1,\n          id: 1,\n          invoice: null,\n        },\n      ];\n      const invoice = new SalesInvoice();\n      invoice.lines = lines;\n      invoice.organization = { vatNumber: 'ABC' } as any;\n      invoice.lines.forEach(x => (x.invoice = invoice));\n      mockCurrencyRateService.rate = 24.29;\n      const result = await service.calculatePrices(null, invoice, null);\n      expect(result).not.toBeUndefined();\n      expect(result).not.toBeNull();\n      const resultLines = result.lines;\n      expect(resultLines).not.toBeNull();\n      expect(resultLines.length).toBe(lines.length);\n      expect(result.grandTotal).toBe(54.45);\n      expect(result.totalLines).toBe(45);\n      const vatReport = result.vatReport;\n      expect(vatReport.length).toBe(1);\n      expect(vatReport[0].vatRatePercent).toBe((await tax3).ratePercent);\n      expect(vatReport[0].vatTotalAccountingSchemeCurrency).toBe(229.54);\n    });\n\n    it('bankAccount and printNote should be taken from the valid factoring provider and should not be taken from an invalid factoring provider', async () => {\n      const result = await service.save(\n        mockEntityManager,\n        {\n          lines: [],\n          customer: {\n            legalAddress: {\n              country: {\n                isoCode: 'undefined',\n              },\n            },\n          },\n          organization: {\n            legalAddress: {\n              country: {\n                isoCode: 'undefined',\n              },\n            },\n            bankAccount: {},\n          },\n          currency: {},\n          factoringProviderId: 1,\n        } as any,\n        { id: 1 } as any,\n      );\n      expect(result.printNote).toEqual(mockFactoringContract.invoicePrintNote);\n      expect(result.bankAccount).toEqual(mockFactoringProvider.bankAccount);\n    });\n    it('bankAccount and printNote should not be taken from an invalid factoring provider', async () => {\n      const args = {\n        lines: [],\n        customer: {\n          legalAddress: {\n            country: {\n              isoCode: 'undefined',\n            },\n          },\n        },\n        organization: {\n          legalAddress: {\n            country: {\n              isoCode: 'undefined',\n            },\n          },\n          bankAccount: {\n            id: 18,\n          },\n        },\n        currency: {},\n        factoringProviderId: 2,\n      } as any;\n      const result = await service.save(mockEntityManager, args, {\n        id: 1,\n      } as any);\n      expect(result.printNote).toBeNull();\n      expect(result.bankAccount).toEqual(args.organization.bankAccount);\n    });\n\n    it('duplicate creates a draft', async () => {\n      const result = await service.duplicate(mockEntityManager, 1, {\n        id: 1,\n      } as any);\n      expect(result.isDraft).toBeTruthy();\n    });\n\n    it('export to XML should work', async () => {\n      const args = {\n        lines: [],\n        customer: {\n          legalAddress: {\n            country: {\n              isoCode: 'undefined',\n            },\n          },\n        },\n        organization: {\n          legalAddress: {\n            country: {\n              isoCode: 'undefined',\n            },\n          },\n          bankAccount: {\n            id: 18,\n          },\n        },\n        currency: {},\n        vatReport: [\n          {\n            vatRatePercent: 10,\n            vatTotalRaw: 100,\n            vatTotalAccountingSchemeCurrencyRaw: 100,\n            vatTotal: 100,\n            vatTotalAccountingSchemeCurrency: 100,\n          },\n        ],\n        factoringProviderId: 2,\n        totalLinesAccountingSchemeCurrency: 1000,\n      } as any;\n      const result = await service.save(mockEntityManager, args, {\n        id: 1,\n      } as any);\n      const xml = service.exportToXml({\n        ...result,\n        vatReport: args.vatReport,\n        totalLinesAccountingSchemeCurrency:\n          args.totalLinesAccountingSchemeCurrency,\n      });\n      expect(xml).toContain('<rsm:CrossIndustryInvoice');\n      expect(xml).toContain('rn:factur-x.eu:1p0:minimum');\n    });\n  });\n});\n",
    "apps/api/src/model/lib/sales.invoice.service.ts": "import { SalesInvoiceModel } from './sales.invoice.model';\nimport { SalesInvoiceSaveArgsModel } from './sales.invoice.save.args.model';\nimport { EntityManager, Repository } from 'typeorm';\nimport {\n  BankAccountService,\n  BankAccountServiceKey,\n} from './bank.account.service';\nimport { CustomerService, CustomerServiceKey } from './customer.service';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { CurrencyService, CurrencyServiceKey } from './currency.service';\nimport { TaxService, TaxServiceKey } from './tax.service';\nimport { ReportsService, ReportsServiceKey } from './reports.service';\nimport { LanguagesService, LanguagesServiceKey } from './languages.service';\nimport {\n  CurrencyRateService,\n  CurrencyRateServiceKey,\n} from './currency.rate.service';\nimport * as _ from 'lodash';\nimport { SalesInvoiceVatModel } from './sales.invoice.vat.model';\nimport {\n  SalesInvoiceVatService,\n  SalesInvoiceVatServiceKey,\n} from './sales.invoice.vat.service';\nimport {\n  DocumentNumberingService,\n  DocumentNumberingServiceKey,\n} from './document.numbering.service';\nimport { BaseEntityService } from './base.entity.service';\nimport {\n  OrganizationService,\n  OrganizationServiceKey,\n} from './organization.service';\nimport { getService } from './module.reference.service';\nimport { SalesInvoiceLineModel } from './sales.invoice.line.model';\nimport { SalesInvoiceLineSaveArgsModel } from './sales.invoice.line.save.args.model';\nimport { ProductService, ProductServiceKey } from './product.service';\nimport { OrganizationModel } from './organization.model';\nimport { SalesInvoiceLine } from '../generated/entities/SalesInvoiceLine';\nimport { SalesInvoice } from '../generated/entities/SalesInvoice';\nimport { UserModel } from './user.model';\nimport { SalesInvoiceMonthlySaveArgsModel } from './sales.invoice.monthly.save.args.model';\nimport {\n  CustomerPriceListService,\n  CustomerPriceListServiceKey,\n} from './customer.price.list.service';\nimport { CustomerProductPriceModel } from './customer.product.price.model';\nimport {\n  FactoringContractService,\n  FactoringContractServiceKey,\n} from './factoring.contract.service';\nimport {\n  FactoringProviderService,\n  FactoringProviderServiceKey,\n} from './factoring.provider.service';\nimport { SalesInvoicePublishArgsModel } from './sales.invoice.vat.save.args.model';\nimport { MailAttachment, MailService, MailServiceKey } from './mail.service';\nimport { AttachmentService, AttachmentServiceKey } from './attachment.service';\nimport { CrossIndustryInvoiceType } from '../../../../../libs/ZUGFeRD-Factur-X/generated';\nimport {\n  DocumentContextParameterType,\n  ExchangedDocumentContextType,\n  ExchangedDocumentType,\n  HeaderTradeAgreementType,\n  HeaderTradeDeliveryType,\n  HeaderTradeSettlementType,\n  SupplyChainTradeTransactionType,\n  TradePartyType,\n  TradeSettlementHeaderMonetarySummationType,\n} from '../../../../../libs/ZUGFeRD-Factur-X/generated/ReusableAggregateBusinessInformationEntity_100';\nimport moment = require('moment');\nimport {\n  AmountType,\n  DateTimeType,\n  IDType,\n  TextType,\n} from '../../../../../libs/ZUGFeRD-Factur-X/generated/UnqualifiedDataType_100';\nimport { XmlService, XmlServiceKey } from './xml.service';\nimport {\n  CurrencyCodeType,\n  DocumentCodeType,\n} from '../../../../../libs/ZUGFeRD-Factur-X/generated/QualifiedDataType_100';\n\nexport const SalesInvoiceServiceKey = 'SalesInvoiceService';\n\nexport const SalesInvoiceLineServiceKey = 'SalesInvoiceLineService';\n\ntype LineCalculatedTax = {\n  vatRatePercent: number;\n  vatTotal: number;\n  vatTotalAccountingSchemeCurrency: number;\n};\n\n@Injectable()\nexport class SalesInvoiceLineService extends BaseEntityService<\n  SalesInvoiceLineModel,\n  SalesInvoiceLineSaveArgsModel\n> {\n  salesInvoiceService: SalesInvoiceService;\n\n  createEntity(): SalesInvoiceLineModel {\n    return new SalesInvoiceLine();\n  }\n\n  protected getRepository(\n    transactionalEntityManager,\n  ): Repository<SalesInvoiceLineModel> {\n    return transactionalEntityManager.getRepository(SalesInvoiceLine);\n  }\n\n  constructor(\n    @Inject(TaxServiceKey) public readonly taxService: TaxService,\n    @Inject(ProductServiceKey) public readonly productService: ProductService,\n    @Inject(CustomerPriceListServiceKey)\n    public readonly customerPriceListService: CustomerPriceListService,\n  ) {\n    super();\n    this.salesInvoiceService = getService<SalesInvoiceService>(\n      SalesInvoiceServiceKey,\n    );\n  }\n\n  protected async doSave(\n    transactionalEntityManager: EntityManager,\n    args: SalesInvoiceLineSaveArgsModel,\n    line: SalesInvoiceLineModel,\n  ): Promise<SalesInvoiceLineModel> {\n    line.lineTax =\n      args.lineTax ||\n      (args.lineTaxIsStandard\n        ? await this.taxService.getStandardTax(transactionalEntityManager)\n        : await this.taxService.loadEntityById(\n            transactionalEntityManager,\n            args.lineTaxId,\n          ));\n    line.product =\n      args.product ||\n      (args.productSku\n        ? await this.productService.getProduct(\n            transactionalEntityManager,\n            args.productSku,\n          )\n        : await this.productService.loadEntityById(\n            transactionalEntityManager,\n            args.productId,\n          ));\n    line.lineOrder = args.lineOrder;\n\n    const invoice =\n      args.invoice ||\n      (await this.salesInvoiceService.loadEntityById(\n        transactionalEntityManager,\n        args.invoiceId,\n      ));\n    line.invoice = invoice;\n\n    const customer = invoice.customer;\n    const customerGroup = customer.customerGroup;\n    const now = new Date();\n    const customerPriceListModels = customerGroup\n      ? (\n          await this.customerPriceListService.loadDateValidByCustomerGroupAndProduct(\n            transactionalEntityManager,\n            customerGroup,\n            line.product,\n          )\n        )?.filter(\n          x =>\n            (!x.validFrom || x.validFrom < now) &&\n            (!x.validTo || x.validTo > now),\n        )\n      : null;\n    if (customerPriceListModels) {\n      customerPriceListModels.sort((a, b) => {\n        if (!a.validFrom || a.validFrom < b.validFrom) {\n          return 1;\n        }\n        if (!b.validFrom || a.validFrom > b.validFrom) {\n          return -1;\n        }\n        return 0;\n      });\n    }\n\n    const customerProductPriceModel: CustomerProductPriceModel =\n      customerPriceListModels && customerPriceListModels.length > 0\n        ? customerPriceListModels[0].productPrices.find(\n            x => x.product.id === line.product.id,\n          )\n        : null;\n\n    line.linePrice = customerProductPriceModel\n      ? customerProductPriceModel.sellingPrice * args.quantity\n      : args.linePrice;\n    line.quantity = args.quantity;\n    line.narration = args.narration;\n\n    return line;\n  }\n\n  typeName(): string {\n    return SalesInvoiceLineServiceKey;\n  }\n}\n\n@Injectable()\nexport class SalesInvoiceService extends BaseEntityService<\n  SalesInvoiceModel,\n  SalesInvoiceSaveArgsModel\n> {\n  salesInvoiceLineService: SalesInvoiceLineService;\n  reportsService: ReportsService;\n\n  constructor(\n    @Inject(BankAccountServiceKey)\n    protected readonly bankAccountService: BankAccountService,\n    @Inject(CustomerServiceKey)\n    protected readonly customerService: CustomerService,\n    @Inject(OrganizationServiceKey)\n    protected readonly organizationService: OrganizationService,\n    @Inject(CurrencyServiceKey)\n    protected readonly currencyService: CurrencyService,\n    @Inject(TaxServiceKey) protected readonly taxService: TaxService,\n    @Inject(LanguagesServiceKey)\n    protected readonly languagesService: LanguagesService,\n    @Inject(CurrencyRateServiceKey)\n    protected readonly currencyRateService: CurrencyRateService,\n    @Inject(SalesInvoiceVatServiceKey)\n    protected readonly salesInvoiceVatService: SalesInvoiceVatService,\n    @Inject(DocumentNumberingServiceKey)\n    protected readonly documentNumberingServiceModel: DocumentNumberingService,\n    @Inject(FactoringContractServiceKey)\n    protected readonly factoringContractService: FactoringContractService,\n    @Inject(FactoringProviderServiceKey)\n    protected readonly factoringProviderService: FactoringProviderService,\n    @Inject(MailServiceKey) public readonly mailService: MailService,\n    @Inject(AttachmentServiceKey)\n    public readonly attachmentService: AttachmentService,\n    @Inject(XmlServiceKey)\n    public readonly xmlService: XmlService,\n  ) {\n    super();\n    this.salesInvoiceLineService = getService<SalesInvoiceLineService>(\n      SalesInvoiceLineServiceKey,\n    );\n    this.reportsService = getService<ReportsService>(ReportsServiceKey);\n  }\n\n  createEntity(): SalesInvoiceModel {\n    const result = new SalesInvoice();\n    result.isDraft = true;\n    return result;\n  }\n\n  protected async getOrganization(\n    transactionalEntityManager: EntityManager,\n    args: SalesInvoiceSaveArgsModel,\n  ): Promise<OrganizationModel> {\n    return (\n      (args.organization &&\n        args.organization.legalAddress &&\n        args.organization.legalAddress.country &&\n        args.organization.bankAccount &&\n        args.organization) ||\n      (await this.organizationService.getOrg(\n        transactionalEntityManager,\n        args.organizationId,\n        args.organizationDisplayName || args.organization?.displayName,\n        [\n          'legalAddress',\n          'legalAddress.country',\n          'bankAccount',\n          'accountingScheme',\n          'accountingScheme.currency',\n        ],\n      ))\n    );\n  }\n\n  protected getRepository(\n    transactionalEntityManager,\n  ): Repository<SalesInvoiceModel> {\n    return transactionalEntityManager.getRepository(SalesInvoice);\n  }\n\n  protected async doSave(\n    transactionalEntityManager: EntityManager,\n    args: SalesInvoiceSaveArgsModel,\n    invoice: SalesInvoiceModel,\n    currentUser: UserModel,\n  ): Promise<SalesInvoiceModel> {\n    if (!invoice.isDraft) throw new Error('Cannot modify an approved invoice');\n\n    invoice.customer =\n      (args.customer &&\n        args.customer.legalAddress &&\n        args.customer.legalAddress.country &&\n        args.customer) ||\n      (await this.customerService.getCustomer(\n        transactionalEntityManager,\n        args.customerId,\n        args.customerDisplayName || args.customer?.displayName,\n        ['legalAddress', 'legalAddress.country'],\n      ));\n    const organization = await this.getOrganization(\n      transactionalEntityManager,\n      args,\n    );\n\n    const factoringProvider = args.factoringProviderId\n      ? await this.factoringProviderService.loadEntityById(\n          transactionalEntityManager,\n          args.factoringProviderId,\n        )\n      : null;\n\n    const factoringContract = args.factoringProviderId\n      ? await this.factoringContractService.getFactoringContract(\n          transactionalEntityManager,\n          organization,\n          factoringProvider,\n          invoice.customer,\n        )\n      : null;\n    invoice.factoringProvider = factoringContract ? factoringProvider : null;\n\n    invoice.organization = organization;\n    invoice.bankAccount =\n      factoringContract && factoringContract.isActive\n        ? factoringContract.factoringProvider.bankAccount\n        : organization.bankAccount;\n    invoice.printNote =\n      factoringContract && factoringContract.isActive\n        ? factoringContract.invoicePrintNote\n        : null;\n    invoice.issuedOn = moment(args.issuedOn)\n      .startOf('day')\n      .toDate();\n    invoice.dueDate = moment(\n      new Date(+invoice.issuedOn + args.paymentTermInDays * 86400000),\n    )\n      .startOf('day')\n      .toDate();\n    invoice.grandTotal = 0;\n    invoice.grandTotalAccountingSchemeCurrency = 0;\n    invoice.totalLines = 0;\n    invoice.totalLinesAccountingSchemeCurrency = 0;\n    invoice.transactionDate = args.transactionDate;\n    invoice.paymentTermInDays = args.paymentTermInDays;\n    invoice.currency = args.currency\n      ? args.currency\n      : await this.currencyService.getCurrency(\n          transactionalEntityManager,\n          args.currencyIsoCode,\n          args.currencyId,\n        );\n    invoice.currencyMultiplyingRateToAccountingSchemeCurrency = 0;\n    invoice.isDraft = true;\n    invoice.isCalculated = false;\n    // TODO: implement also other reverse charge conditions\n    // see e.g. https://europa.eu/youreurope/business/taxation/vat/cross-border-vat/index_en.htm\n    // or https://www.uctovani.net/clanek.php?t=Preneseni-danove-povinnosti-neboli-reverse-charge&idc=217\n    const customerCountry = invoice.customer.legalAddress.country;\n    const supplierCountry = organization.legalAddress.country;\n    invoice.reverseCharge =\n      customerCountry.isEUMember &&\n      supplierCountry.isEUMember &&\n      customerCountry.isoCode !== supplierCountry.isoCode;\n\n    // TODO: get better printLanguage implementation\n    const languages = await this.languagesService.loadEntities(\n      transactionalEntityManager,\n    );\n    const language =\n      customerCountry.isoCode === supplierCountry.isoCode\n        ? languages.find(\n            x =>\n              x.isoCode.toLowerCase() === customerCountry.isoCode.toLowerCase(),\n          )\n        : languages.find(\n            x =>\n              x.isoCode.toLowerCase() ===\n              `${supplierCountry.isoCode}-${customerCountry.isoCode}`.toLowerCase(),\n          );\n    if (!language)\n      throw new Error(\n        `No language for ${supplierCountry.isoCode} -> ${customerCountry.isoCode}`,\n      );\n    invoice.printLanguage = language;\n\n    await this.persist(transactionalEntityManager, invoice, currentUser);\n\n    const vatRegistered = !!organization.vatNumber;\n\n    let lineOrder = 10;\n    const invoiceLines = [];\n    for (const line1 of args.lines) {\n      const line = await this.salesInvoiceLineService.save(\n        transactionalEntityManager,\n        {\n          ...line1,\n          product: line1.product,\n          lineTax:\n            vatRegistered && !invoice.reverseCharge\n              ? line1.lineTax\n              : await this.taxService.getZeroTax(transactionalEntityManager),\n          invoice,\n          lineOrder,\n        },\n        currentUser,\n      );\n      lineOrder += 10;\n      invoiceLines.push(line);\n    }\n    invoice.lines = invoiceLines;\n\n    const result = await this.calculatePrices(\n      transactionalEntityManager,\n      invoice,\n      currentUser,\n    );\n\n    await this.reportsService.printSalesInvoice(result, result.printLanguage);\n\n    return result;\n  }\n\n  typeName(): string {\n    return SalesInvoiceServiceKey;\n  }\n\n  async calculatePrices(\n    transactionalEntityManager: EntityManager,\n    invoiceWithLines: SalesInvoiceModel,\n    currentUser: UserModel,\n  ): Promise<SalesInvoiceModel> {\n    if (!invoiceWithLines) return invoiceWithLines;\n\n    const currencyRate = await this.currencyRateService.getAccountingForDateAndOrg(\n      transactionalEntityManager,\n      invoiceWithLines.transactionDate,\n      invoiceWithLines.currency,\n      invoiceWithLines.organization,\n    );\n    if (!currencyRate)\n      throw new Error(\n        `No currency rate for ${invoiceWithLines.currency.displayName} at ${invoiceWithLines.transactionDate}`,\n      );\n    const currencyMultiplyingRateToAccountingSchemeCurrency: number =\n      currencyRate.currencyMultiplyingRate;\n    const lines = invoiceWithLines.lines;\n\n    invoiceWithLines.totalLines = 0;\n    invoiceWithLines.grandTotal = 0;\n    const org = await invoiceWithLines.organization;\n    const vatRegistered = !!org.vatNumber;\n    const lineCalculatedTaxes = [];\n    if (lines) {\n      for (const line of lines) {\n        if (vatRegistered && !line.lineTax)\n          throw new Error('Vat registered and no line tax');\n\n        // make sure we work with number, so do not use +=\n        invoiceWithLines.totalLines =\n          +invoiceWithLines.totalLines + line.linePrice;\n        const lineTax = line.lineTax;\n        const vatTotal = vatRegistered\n          ? +line.linePrice * (+lineTax.ratePercent / 100)\n          : 0;\n\n        const lineCalculatedTax = {\n          vatRatePercent: vatRegistered ? lineTax.ratePercent : 0,\n          vatTotal,\n          vatTotalAccountingSchemeCurrency:\n            vatTotal * currencyMultiplyingRateToAccountingSchemeCurrency,\n        };\n        lineCalculatedTaxes.push(lineCalculatedTax);\n        // make sure we work with number, so do not use +=\n        invoiceWithLines.grandTotal =\n          +invoiceWithLines.grandTotal +\n          line.linePrice +\n          lineCalculatedTax.vatTotal;\n      }\n    }\n    const taxes = _.groupBy(lineCalculatedTaxes, x => x.vatRatePercent);\n    const vatReport: SalesInvoiceVatModel[] = [];\n\n    // remove the old invoiceWithLines.vatReport\n    const oldVatReports = invoiceWithLines.vatReport;\n    if (oldVatReports) {\n      for (const oldVatReport of oldVatReports) {\n        await this.salesInvoiceVatService.delete(\n          transactionalEntityManager,\n          oldVatReport,\n        );\n      }\n    }\n\n    for (const [vatRatePercent, _toBeSummed] of Object.entries(taxes)) {\n      const toBeSummed = _toBeSummed as LineCalculatedTax[];\n      const vatTotal = _.sum(toBeSummed.map(x => x.vatTotal));\n      const vatTotalAccountingSchemeCurrency = _.sum(\n        toBeSummed.map(x => x.vatTotalAccountingSchemeCurrency),\n      );\n      vatReport.push(\n        await this.salesInvoiceVatService.save(\n          transactionalEntityManager,\n          {\n            vatRatePercent: +vatRatePercent,\n            vatTotalRaw: vatTotal,\n            vatTotal: _.round(vatTotal, 2),\n            vatTotalAccountingSchemeCurrencyRaw: vatTotalAccountingSchemeCurrency,\n            vatTotalAccountingSchemeCurrency: _.round(\n              vatTotalAccountingSchemeCurrency,\n              2,\n            ),\n            invoice: invoiceWithLines,\n          },\n          currentUser,\n        ),\n      );\n    }\n\n    invoiceWithLines.vatReport = vatReport;\n    invoiceWithLines.totalLinesAccountingSchemeCurrency = _.round(\n      invoiceWithLines.totalLines *\n        currencyMultiplyingRateToAccountingSchemeCurrency,\n      2,\n    );\n    invoiceWithLines.totalLines = _.round(invoiceWithLines.totalLines, 2);\n    invoiceWithLines.grandTotalAccountingSchemeCurrency = _.round(\n      invoiceWithLines.grandTotal *\n        currencyMultiplyingRateToAccountingSchemeCurrency,\n      2,\n    );\n    invoiceWithLines.grandTotal = _.round(invoiceWithLines.grandTotal, 2);\n\n    invoiceWithLines.currencyMultiplyingRateToAccountingSchemeCurrency = currencyMultiplyingRateToAccountingSchemeCurrency;\n    invoiceWithLines.isCalculated = true;\n\n    return invoiceWithLines;\n  }\n\n  async confirm(\n    manager: EntityManager,\n    invoice: SalesInvoiceModel,\n    currentUser: UserModel,\n  ): Promise<SalesInvoiceModel> {\n    invoice.isDraft = false;\n    await this.assignDocumentNumbersToInvoices(manager, [invoice]);\n    await this.reportsService.printSalesInvoice(invoice, invoice.printLanguage);\n    await this.persist(manager, invoice, currentUser);\n    return invoice;\n  }\n\n  async fixPrint(manager: EntityManager) {\n    console.log('Fix print started');\n    const invoices = await manager\n      .createQueryBuilder()\n      .setLock('pessimistic_write')\n      .select('invoice')\n      .from(SalesInvoice, 'invoice')\n      .where(`invoice.content is NULL`, {})\n      .orderBy('id')\n      .getMany();\n\n    for (const i of invoices) {\n      const invoice = await this.loadEntityById(manager, i.id);\n      console.log('Fixing content of ', invoice);\n      const printed = await this.reportsService.printSalesInvoice(\n        invoice,\n        invoice.printLanguage,\n      );\n      await manager.save(printed);\n    }\n    console.log('Fix print done');\n  }\n\n  async assignDocumentNumbersToInvoices(\n    manager: EntityManager,\n    notDraftInvoicesWithoutDocumentNumber: Array<SalesInvoiceModel>,\n  ) {\n    for (const invoice of notDraftInvoicesWithoutDocumentNumber) {\n      if (invoice.documentNo || invoice.isDraft) {\n        throw new Error(\n          'Call with non draft invoices without document number only!',\n        );\n      }\n      invoice.documentNo = await this.documentNumberingServiceModel.getNextDocumentNumber(\n        manager,\n        invoice.constructor,\n        await invoice.organization,\n      );\n    }\n  }\n\n  loadEntityByIdRelations(): string[] {\n    return ['lines', 'vatReport', 'factoringProvider'];\n  }\n\n  async createMonthlyInvoice(\n    entityManager: EntityManager,\n    objData: SalesInvoiceMonthlySaveArgsModel,\n    currentUser: UserModel,\n  ) {\n    const organizationService: OrganizationService = getService(\n      OrganizationServiceKey,\n    );\n    const nucz = (await organizationService.loadEntities(entityManager)).find(\n      x => x.displayName === `NUCZ`,\n    );\n    const NUCZPercentage = objData.organizationDivider.find(\n      x => x.id === nucz.id,\n    ).value;\n    const hours = objData.totalHours;\n    const dailyRate = objData.dailyRate;\n    const narration = objData.narration;\n\n    const evalue = async (\n      entityManager: EntityManager,\n      technicalUser: UserModel,\n    ): Promise<SalesInvoiceModel[]> => {\n      const result: SalesInvoiceModel[] = [];\n      if (hours === 0) return result;\n\n      const issuedOn = new Date(objData.year, objData.month - 1, objData.day);\n      if (NUCZPercentage > 0) {\n        const lines: SalesInvoiceLineSaveArgsModel[] = [\n          {\n            lineTaxIsStandard: true,\n            productSku: `EX`,\n            linePrice: _.round((NUCZPercentage * hours * dailyRate) / 8, 2),\n            quantity: _.round(hours * NUCZPercentage, 2),\n            narration,\n            lineOrder: 1,\n          },\n        ];\n        const invoice = await this.save(\n          entityManager,\n          {\n            customerDisplayName: 'evalue',\n            organizationDisplayName: `NUCZ`,\n            paymentTermInDays: 14,\n            transactionDate: issuedOn,\n            issuedOn,\n            currencyIsoCode: `CZK`,\n            lines,\n          },\n          technicalUser,\n        );\n        result.push(await this.confirm(entityManager, invoice, currentUser));\n      }\n\n      const lines2: SalesInvoiceLineSaveArgsModel[] = [\n        {\n          lineTaxIsStandard: true,\n          productSku: `EX`,\n          linePrice: _.round(((1 - NUCZPercentage) * hours * dailyRate) / 8, 2),\n          quantity: _.round(hours * (1 - NUCZPercentage), 2),\n          narration,\n          lineOrder: 1,\n        },\n      ];\n      const invoice2 = await this.save(\n        entityManager,\n        {\n          customerDisplayName: 'evalue',\n          organizationDisplayName: `DP`,\n          paymentTermInDays: 14,\n          transactionDate: issuedOn,\n          issuedOn,\n          currencyIsoCode: `CZK`,\n          lines: lines2,\n        },\n        technicalUser,\n      );\n      result.push(await this.confirm(entityManager, invoice2, currentUser));\n      return result;\n    };\n\n    const realityZaPrahou = async (\n      entityManager: EntityManager,\n      technicalUser: UserModel,\n    ): Promise<SalesInvoiceModel> => {\n      const currencyRateService: CurrencyRateService = getService(\n        CurrencyRateServiceKey,\n      );\n\n      const issuedOn = new Date(objData.year, objData.month - 1, objData.day);\n      const start = moment(issuedOn)\n        .startOf('day')\n        .toDate();\n      const end = moment(issuedOn)\n        .endOf('day')\n        .toDate();\n      await currencyRateService.save(\n        entityManager,\n        {\n          start,\n          end,\n          currencyMultiplyingRate: objData.eurToCzkRate,\n          fromIsoCode: 'EUR',\n          toIsoCode: 'CZK',\n        },\n        technicalUser,\n      );\n      const lines: SalesInvoiceLineSaveArgsModel[] = [\n        {\n          lineTaxIsStandard: true,\n          productSku: 'MS.O365.BP.M',\n          linePrice: 4 * 12.7,\n          quantity: 4,\n          narration: 'Licence Office 365 Business Premium',\n          lineOrder: 1,\n        },\n      ];\n      const invoice = await this.save(\n        entityManager,\n        {\n          customerDisplayName: 'RealityzaPrahou',\n          organizationDisplayName: `NUCZ`,\n          paymentTermInDays: 23,\n          transactionDate: issuedOn,\n          issuedOn,\n          currencyIsoCode: `EUR`,\n          lines,\n        },\n        technicalUser,\n      );\n      return await this.confirm(entityManager, invoice, currentUser);\n    };\n\n    return [\n      ...(await evalue(entityManager, currentUser)),\n      await realityZaPrahou(entityManager, currentUser),\n    ];\n  }\n\n  async salesInvoicesReport(manager: EntityManager) {\n    return await manager\n      .getRepository(SalesInvoice)\n      .createQueryBuilder('salesInvoice')\n      .innerJoinAndSelect('salesInvoice.organization', 'organization')\n      .select('EXTRACT(YEAR from salesInvoice.transactionDate)', 'year')\n      .addSelect('EXTRACT(MONTH from salesInvoice.transactionDate)', 'month')\n      .addSelect('salesInvoice.organization')\n      .addSelect('SUM(salesInvoice.totalLinesAccountingSchemeCurrency)', 'sum')\n      .addSelect('organization.displayName')\n      .groupBy('EXTRACT(YEAR from salesInvoice.transactionDate)')\n      .addGroupBy('EXTRACT(MONTH from salesInvoice.transactionDate)')\n      .addGroupBy('salesInvoice.organization')\n      .addGroupBy('organization.displayName')\n      .where('salesInvoice.isActive=true AND salesInvoice.isDraft=false')\n      .getRawMany();\n  }\n\n  duplicate = async (\n    transactionalEntityManager: EntityManager,\n    id: number,\n    currentUser: UserModel,\n  ): Promise<SalesInvoiceModel> => {\n    const source = await this.loadEntityById(transactionalEntityManager, id);\n    source.isDraft = true;\n    return this.save(transactionalEntityManager, source, currentUser);\n  };\n\n  publish = async (\n    transactionalEntityManager: EntityManager,\n    args: SalesInvoicePublishArgsModel,\n    currentUser: UserModel,\n  ): Promise<SalesInvoiceModel> => {\n    const source = await this.loadEntityById(\n      transactionalEntityManager,\n      args.id,\n    );\n    const attachments: MailAttachment[] = [\n      {\n        filename: `Invoice${source.documentNo}.pdf`,\n        content: source.content,\n      },\n    ];\n    for (const filename of args.attachmentIds) {\n      attachments.push({\n        filename,\n        content: await this.attachmentService.getFileAsStream(filename),\n      });\n    }\n    await this.mailService.send(\n      {\n        name: 'ABC',\n        address: 'abc@xyz.com',\n      },\n      undefined,\n      'Invoice ' + source.documentNo,\n      'Hello, sending invoice ' + source.documentNo + '. Thanks, ABC Team',\n      '<p>Hello,</p><p>sending invoice ' +\n        source.documentNo +\n        '.</p><p>Thanks, ABC Team</p>',\n      undefined,\n      attachments,\n    );\n\n    return source;\n  };\n\n  exportToCrossIndustryInvoice = (\n    i: SalesInvoiceModel,\n  ): CrossIndustryInvoiceType => {\n    const ExchangedDocumentContext = new ExchangedDocumentContextType();\n    ExchangedDocumentContext.GuidelineSpecifiedDocumentContextParameter = new DocumentContextParameterType(\n      {\n        ID: new IDType('urn:factur-x.eu:1p0:minimum'),\n      },\n    );\n    const ExchangedDocument = new ExchangedDocumentType({\n      ID: new IDType(i.documentNo),\n      /*\n\n      Only the following code may be used for the BASIC WL and MINIMUM profiles:\n751: Booking aid - NO invoice\n       */\n      TypeCode: new DocumentCodeType('751'),\n      IssueDateTime: new DateTimeType(i.issuedOn),\n    });\n    const SupplyChainTradeTransaction = new SupplyChainTradeTransactionType({\n      ApplicableHeaderTradeAgreement: new HeaderTradeAgreementType({\n        SellerTradeParty: new TradePartyType({\n          Name: new TextType(i.organization.legalName),\n        }),\n        BuyerTradeParty: new TradePartyType({\n          Name: new TextType(i.customer.legalName),\n        }),\n      }),\n      ApplicableHeaderTradeDelivery: new HeaderTradeDeliveryType(),\n      ApplicableHeaderTradeSettlement: new HeaderTradeSettlementType({\n        InvoiceCurrencyCode: new CurrencyCodeType(i.currency.isoCode),\n        SpecifiedTradeSettlementHeaderMonetarySummation: new TradeSettlementHeaderMonetarySummationType(\n          {\n            TaxBasisTotalAmount: new AmountType(\n              i.totalLinesAccountingSchemeCurrency,\n            ),\n            TaxTotalAmount: new AmountType(\n              i.vatReport.reduce(\n                (a, b) =>\n                  ({\n                    vatTotalAccountingSchemeCurrency:\n                      a.vatTotalAccountingSchemeCurrency +\n                      b.vatTotalAccountingSchemeCurrency,\n                  } as any),\n              ).vatTotalAccountingSchemeCurrency,\n            ),\n            GrandTotalAmount: new AmountType(i.grandTotal),\n            DuePayableAmount: new AmountType(i.grandTotal),\n          },\n        ),\n      }),\n    });\n    return new CrossIndustryInvoiceType({\n      ExchangedDocumentContext,\n      ExchangedDocument,\n      SupplyChainTradeTransaction,\n    });\n  };\n\n  exportToXml = (i: SalesInvoiceModel): string => {\n    return this.xmlService.generateCrossIndustryDocument(\n      this.exportToCrossIndustryInvoice(i),\n    );\n  };\n}\n",
    "apps/api/src/model/lib/tax.service.ts": "import { TaxModel } from './tax.model';\nimport { TaxSaveArgsModel } from './tax.save.args.model';\nimport { EntityManager, Repository } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { BaseEntityService } from './base.entity.service';\nimport { Tax } from '../generated/entities/Tax';\n\nexport const TaxServiceKey = 'TaxService';\n\n@Injectable()\nexport class TaxService extends BaseEntityService<TaxModel, TaxSaveArgsModel> {\n  createEntity(): TaxModel {\n    return new Tax();\n  }\n\n  protected getRepository(transactionalEntityManager): Repository<TaxModel> {\n    return transactionalEntityManager.getRepository(Tax);\n  }\n\n  protected async doSave(\n    transactionalEntityManager: EntityManager,\n    args: TaxSaveArgsModel,\n    tax: TaxModel,\n  ): Promise<TaxModel> {\n    tax.ratePercent = args.ratePercent;\n    tax.displayName = args.displayName;\n    // TODO: if setting isStandard === true, remove old standard first\n    tax.isStandard = args.isStandard;\n    return tax;\n  }\n\n  typeName(): string {\n    return TaxServiceKey;\n  }\n\n  getZeroTax = async (transactionalEntityManager: EntityManager) =>\n    await this.getRepository(transactionalEntityManager).findOne({\n      where: { ratePercent: 0 },\n    });\n  getStandardTax = async (transactionalEntityManager: EntityManager) =>\n    await this.getRepository(transactionalEntityManager).findOne({\n      where: { isStandard: true },\n    });\n}\n",
    "apps/api/src/model/lib/user.service.ts": "import { UserModel } from './user.model';\nimport { UserProfileModel } from './user.profile.model';\nimport { UserSaveArgsModel } from './user.save.args.model';\nimport { BaseEntityService } from './base.entity.service';\nimport { EntityManager, Repository } from 'typeorm';\nimport { UserProfileModelIdentity } from './user.profile.model.identity';\nimport { User } from '../generated/entities/User';\nimport { UserIdentity } from '../generated/entities/UserIdentity';\nimport { Injectable } from '@nestjs/common';\n\nexport const UserServiceKey = 'UserService';\n\nexport interface LoginHandler {\n  /**\n   * Handle successful user login and map to UserModel\n   * @param manager - entity manager\n   * @param login - a user profile of a successfully logged user\n   */\n  handleLogin(\n    manager: EntityManager,\n    login: UserProfileModel,\n  ): Promise<UserModel>;\n}\n\nexport const getTechnicalUser = (manager: EntityManager) =>\n  manager\n    .getRepository(User)\n    .findOne({ where: { email: process.env.TECHNICAL_USER_EMAIL } });\n\n/**\n * User service to handle possibly multiple user identities and automatic user creation on a successful login-\n */\n@Injectable()\nexport class UserService extends BaseEntityService<UserModel, UserSaveArgsModel>\n  implements LoginHandler {\n  createEntity(): UserModel {\n    return new User();\n  }\n\n  protected getRepository(transactionalEntityManager): Repository<UserModel> {\n    return transactionalEntityManager.getRepository(User);\n  }\n\n  async findUserByEmail(manager: EntityManager, email: string): Promise<User> {\n    if (!email) return null;\n    const found = await manager\n      .getRepository(User)\n      .findOne({ where: { email } });\n    return found || null;\n  }\n\n  async findUserIdentity(\n    manager: EntityManager,\n    userProfileIdentities: Array<UserProfileModelIdentity>,\n  ): Promise<UserIdentity> {\n    const userId = userProfileIdentities[0].user_id;\n    const provider = userProfileIdentities[0].provider;\n    if (!userId || !provider) return null;\n    const found = await manager\n      .getRepository(UserIdentity)\n      .findOne({ where: { externalUser: userId, provider } });\n    return found || null;\n  }\n  async findUser(\n    manager: EntityManager,\n    userProfileModel: UserProfileModel,\n  ): Promise<UserModel> {\n    const email = userProfileModel.email;\n    return await this.findUserByEmail(manager, email);\n  }\n  async convertProfileIdentities(\n    manager: EntityManager,\n    user: UserModel,\n    userProfileIdentities: Array<UserProfileModelIdentity>,\n  ): Promise<Array<UserIdentity>> {\n    const result: Array<UserIdentity> = [];\n    for (const userProfileIdentity of userProfileIdentities) {\n      const userIdentity = new UserIdentity();\n      userIdentity.externalUser = userProfileIdentity.user_id;\n      userIdentity.provider = userProfileIdentity.provider;\n      userIdentity.user = user;\n      userIdentity.updtOp = user;\n      try {\n        await manager.save(userIdentity);\n        result.push(userIdentity);\n      } catch (err) {\n        console.log('FAILED:', err);\n        throw err;\n      }\n    }\n    return result;\n  }\n  async createNewUser(\n    manager: EntityManager,\n    userProfileModel: UserProfileModel,\n    technicalUser: UserModel,\n  ): Promise<User> {\n    const result = new User();\n    result.email = userProfileModel.email;\n    result.name = userProfileModel.name;\n    result.updtOpId = technicalUser.id;\n    await manager.save(result);\n    const ident = userProfileModel.identities[0];\n    const userIdentity = new UserIdentity();\n    userIdentity.externalUser = ident.user_id;\n    userIdentity.provider = ident.provider;\n    userIdentity.user = result;\n    userIdentity.updtOp = result;\n    await manager.save(userIdentity);\n    result.identities = [userIdentity];\n    return result;\n  }\n\n  protected async doSave(\n    manager: EntityManager,\n    args: UserSaveArgsModel,\n    entity: UserModel,\n  ): Promise<UserModel> {\n    return manager && args && entity;\n  }\n\n  typeName(): string {\n    return UserServiceKey;\n  }\n\n  /**\n   * Handle successful user login and map to UserModel\n   * @param manager - entity manager\n   * @param login - a user profile of a successfully logged user\n   */\n  async handleLogin(\n    manager: EntityManager,\n    login: UserProfileModel,\n  ): Promise<UserModel> {\n    if (!login || !login.identities) return null;\n    const existingUserIdentity = await this.findUserIdentity(\n      manager,\n      login.identities,\n    );\n    if (existingUserIdentity) {\n      return existingUserIdentity.user;\n    } else {\n      // we do not have the identity; we must first try to find out if we have the same User already\n      const technicalUser = await getTechnicalUser(manager);\n      const existingUser = await this.findUser(manager, login);\n      if (existingUser) {\n        const converted = await this.convertProfileIdentities(\n          manager,\n          existingUser,\n          login.identities,\n        );\n        existingUser.identities.push(...converted);\n        return existingUser;\n      } else {\n        // this is a completely new user\n        return await this.createNewUser(manager, login, technicalUser);\n      }\n    }\n  }\n}\n",
    "apps/api/src/model/lib/xml.service.spec.ts": "import { Test } from '@nestjs/testing';\nimport { XmlService } from './xml.service';\n\ndescribe('XmlService', () => {\n  let service: XmlService;\n\n  beforeAll(async () => {\n    const app = await Test.createTestingModule({\n      providers: [XmlService],\n    }).compile();\n\n    service = app.get<XmlService>(XmlService);\n  });\n\n  describe('XmlService', () => {\n    it('works for null', async () => {\n      service.test();\n    });\n  });\n});\n",
    "apps/api/test/app.e2e-spec.ts": "import { Test, TestingModule } from '@nestjs/testing';\nimport * as request from 'supertest';\nimport { AppModule } from '../src/app/app.module';\n\ndescribe('AppController (e2e)', () => {\n  let app;\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n\n  it('/ (GET)', () => {\n    return request(app.getHttpServer())\n      .get('/')\n      .expect(200)\n      .expect('Hello World!');\n  });\n});\n",
    "clients/admin/src/lib/core/attachment.ts": "import type {\n    AttachmentByIdQuery,\n    AttachmentDetailPartsFragment,\n    AttachmentListPartsFragment,\n    AttachmentsQuery,\n    SaveAttachmentMutation,\n    SaveAttachmentMutationVariables,\n} from '../../generated/graphql';\nimport { BaseEntityService } from './entityStore';\nimport type { DocumentNode } from '@apollo/client/core';\nimport { ATTACHMENTS } from '../queries/attachments';\nimport { GET_ATTACHMENT_BY_ID, SAVE_ATTACHMENT } from '../queries/attachment';\n\nclass AttachmentService extends BaseEntityService<\n    AttachmentDetailPartsFragment,\n    AttachmentListPartsFragment,\n    SaveAttachmentMutationVariables,\n    AttachmentByIdQuery,\n    AttachmentsQuery,\n    SaveAttachmentMutation\n> {\n    protected convertDetail(q: AttachmentByIdQuery): AttachmentDetailPartsFragment {\n        return q.attachment;\n    }\n\n    protected convertListItem(q: AttachmentsQuery): AttachmentListPartsFragment[] {\n        return q.attachments;\n    }\n\n    protected getDetailByIdGql(): DocumentNode {\n        return GET_ATTACHMENT_BY_ID;\n    }\n\n    getDetailSafeEntity(): AttachmentDetailPartsFragment {\n        return {} as any;\n    }\n\n    protected getListGql(): DocumentNode {\n        return ATTACHMENTS;\n    }\n\n    protected getSaveGql(): DocumentNode {\n        return SAVE_ATTACHMENT;\n    }\n\n    async download(baseUrl: string | undefined, token: string | undefined, id: string) {\n        if (!baseUrl) throw new Error('baseUrl must be specified');\n        const json = await (\n            await fetch(baseUrl + '/../file/attachment/' + id, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            })\n        ).json();\n        const a = document.createElement('a');\n        a.href = `data:application/octet-stream;base64,${json.data}`;\n        a.setAttribute('download', id);\n        a.click();\n    }\n}\n\nexport const attachmentService: AttachmentService = new AttachmentService();\n",
    "clients/admin/src/lib/core/customer.ts": "import type {\n    CustomerByIdQuery,\n    CustomersQuery,\n    SaveCustomerMutation,\n    SaveCustomerMutationVariables,\n} from '../../generated/graphql';\nimport { GET_CUSTOMER_BY_ID, SAVE_CUSTOMER } from '../queries/customer';\nimport { throwOnUndefined } from '../support/util';\nimport { BaseEntityService } from './entityStore';\nimport type { DocumentNode } from '@apollo/client/core';\nimport type { CustomerDetail, CustomerRow } from '../model/customer';\nimport { CUSTOMERS } from '../queries/customers';\nimport { addressService } from './address';\nimport { customerGroupService } from './customerGroup';\n\nclass CustomerService extends BaseEntityService<\n    CustomerDetail,\n    CustomerRow,\n    SaveCustomerMutationVariables,\n    CustomerByIdQuery,\n    CustomersQuery,\n    SaveCustomerMutation\n> {\n    protected convertDetail(q: CustomerByIdQuery): CustomerDetail {\n        return {\n            ...q.customer,\n            safeAddress: q.customer.address || addressService.getDetailSafeEntity(),\n            safeCustomerGroup:\n                q.customer.customerGroup || customerGroupService.getDetailSafeEntity(),\n        };\n    }\n\n    protected convertListItem(q: CustomersQuery): CustomerRow[] {\n        return q.customers;\n    }\n\n    protected getDetailByIdGql(): DocumentNode {\n        return GET_CUSTOMER_BY_ID;\n    }\n\n    getDetailSafeEntity(): CustomerDetail {\n        return {\n            address: addressService.getDetailSafeEntity(),\n            legalAddress: addressService.getDetailSafeEntity(),\n            safeAddress: addressService.getDetailSafeEntity(),\n            customerGroup: customerGroupService.getDetailSafeEntity(),\n            safeCustomerGroup: customerGroupService.getDetailSafeEntity(),\n        } as any;\n    }\n\n    protected getListGql(): DocumentNode {\n        return CUSTOMERS;\n    }\n\n    protected getSaveGql(): DocumentNode {\n        return SAVE_CUSTOMER;\n    }\n\n    loadCustomerPhotoContent = async (id: number): Promise<string> => {\n        const baseUrl = process.env.API_BASE_URL || throwOnUndefined();\n        const result = await fetch(baseUrl.replace('graphql', 'file/customer-photo/' + id), {\n            headers: {\n                Authorization: 'Bearer ' + (process.env.FAKE_TOKEN || (window as any).token),\n            },\n        });\n        const { data } = await result.json();\n        return data;\n    };\n\n    upload = async (files: any, customerId: number): Promise<void> => {\n        if (!files || files.length === 0) return;\n        const formData = new FormData();\n        formData.append('file', files[0]);\n        const baseUrl = process.env.API_BASE_URL || throwOnUndefined();\n        const upload = (\n            await fetch(baseUrl.replace('graphql', 'file/upload-customer-photo/' + customerId), {\n                method: 'POST',\n                body: formData,\n                headers: {\n                    Authorization: 'Bearer ' + (process.env.FAKE_TOKEN || (window as any).token),\n                },\n            })\n        ).json();\n    };\n}\n\nexport const customerService: CustomerService = new CustomerService();\n",
    "clients/admin/src/lib/core/salesInvoice.ts": "import type {\n    ConfirmSalesInvoiceMutation,\n    PublishSalesInvoiceMutation,\n    PublishSalesInvoiceMutationVariables,\n    SalesInvoiceByIdQuery,\n    SalesInvoicesQuery,\n    SaveSalesInvoiceMutation,\n    SaveSalesInvoiceMutationVariables,\n} from '../../generated/graphql';\nimport {\n    CONFIRM_SALES_INVOICE,\n    DUPLICATE_SALES_INVOICE,\n    GET_SALES_INVOICE_BY_ID,\n    PUBLISH_SALES_INVOICE,\n    SAVE_SALES_INVOICE,\n} from '../queries/salesInvoice';\nimport { mutation } from '../../absorb/svelte-apollo';\nimport { BaseEntityService, initDetail, invalidate } from './entityStore';\nimport type { DocumentNode } from '@apollo/client/core';\nimport type { SalesInvoiceDetail, SalesInvoiceRow } from '../model/salesInvoice';\nimport { SALES_INVOICES } from '../queries/salesInvoices';\n\nclass SalesInvoiceService extends BaseEntityService<\n    SalesInvoiceDetail,\n    SalesInvoiceRow,\n    SaveSalesInvoiceMutationVariables,\n    SalesInvoiceByIdQuery,\n    SalesInvoicesQuery,\n    SaveSalesInvoiceMutation\n> {\n    protected convertDetail(q: SalesInvoiceByIdQuery): SalesInvoiceDetail {\n        return q.salesInvoice;\n    }\n\n    protected convertListItem(q: SalesInvoicesQuery): SalesInvoiceRow[] {\n        return q.salesInvoices;\n    }\n\n    protected getDetailByIdGql(): DocumentNode {\n        return GET_SALES_INVOICE_BY_ID;\n    }\n\n    getDetailSafeEntity(): SalesInvoiceDetail {\n        return { currency: {} } as any;\n    }\n\n    protected getListGql(): DocumentNode {\n        return SALES_INVOICES;\n    }\n\n    protected getSaveGql(): DocumentNode {\n        return SAVE_SALES_INVOICE;\n    }\n\n    async makeSimpleCall<Q>(\n        id: number | string,\n        query: DocumentNode,\n    ): Promise<number | string | undefined> {\n        const refetchQueries = [\n            {\n                query: this.getListGql(),\n            },\n            {\n                query: this.getDetailByIdGql(),\n                variables: { id },\n            },\n        ];\n        const confirmSalesInvoice = mutation<Q>(query);\n\n        const result = await confirmSalesInvoice({\n            variables: {\n                id,\n            },\n            refetchQueries,\n        });\n        if (result.errors) invalidate(this.stores.list);\n        initDetail(this.stores.detail);\n        return (result?.data || ({} as any)).id;\n    }\n\n    /**\n     * Confirms the item, invalidates `stores.list`\n     * @params id - the invoice id\n     */\n    async confirm(id: number) {\n        return this.makeSimpleCall<ConfirmSalesInvoiceMutation>(id, CONFIRM_SALES_INVOICE);\n    }\n\n    /**\n     * Duplicates the item, invalidates `stores.list`\n     * @params id - the invoice id\n     */\n    async duplicate(id: number) {\n        return this.makeSimpleCall<ConfirmSalesInvoiceMutation>(id, DUPLICATE_SALES_INVOICE);\n    }\n\n    /**\n     * Duplicates the item, invalidates `stores.list`\n     * @params id - the invoice id\n     */\n    async publish(id: number, attachmentIds: string[]) {\n        const publishSalesInvoice = mutation<\n            PublishSalesInvoiceMutation,\n            PublishSalesInvoiceMutationVariables\n        >(PUBLISH_SALES_INVOICE);\n        await publishSalesInvoice({\n            variables: {\n                id,\n                attachmentIds,\n            },\n        });\n    }\n\n    async downloadInvoice(baseUrl: string | undefined, token: string | undefined, id: number) {\n        if (!baseUrl) throw new Error('baseUrl must be specified');\n        const json = await (\n            await fetch(baseUrl + '/../file/sales-invoice/' + id, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            })\n        ).json();\n        const a = document.createElement('a');\n        a.href = `data:application/pdf;base64,${json.data}`;\n        a.setAttribute('download', id + '.pdf');\n        a.click();\n    }\n}\n\nexport const salesInvoiceService: SalesInvoiceService = new SalesInvoiceService();\n",
    "clients/admin/src/lib/support/testHelpers.ts": "import { render, RenderOptions, RenderResult } from '@testing-library/svelte';\nimport type { SvelteComponent } from 'svelte';\n\nexport interface GetFormElementsResult {\n    elements: any;\n    renderResult: RenderResult;\n}\n\ntype SvelteComponentOptions = any;\n\nexport const getFormElements = async (\n    page: typeof SvelteComponent,\n    ids: string[],\n    componentOptions?: SvelteComponentOptions,\n    renderOptions?: Omit<RenderOptions, 'queries'>,\n): Promise<GetFormElementsResult> => {\n    const renderResult = render(page, componentOptions, renderOptions);\n    const { findByTestId } = renderResult;\n    const elements: any = {};\n    for (const id of ids) {\n        elements[id] = await findByTestId(id);\n    }\n    return {\n        elements,\n        renderResult,\n    };\n};\n",
    "clients/mobile/app/lib/apollo.ts": "import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloLink } from 'apollo-link';\n\nexport const apollo = (token, uri = process.env.API_BASE_URL) =>\n    new ApolloClient({\n        link: new ApolloLink((operation, forward) => {\n            operation.setContext({\n                headers: {\n                    authorization: `Bearer ${token}`,\n                },\n            });\n            return forward(operation);\n        }).concat(createHttpLink({ uri })),\n        cache: new InMemoryCache(),\n    });\n\nexport const gqlQuery = async (this_component, session, gql) => {\n    const { token } = session;\n\n    if (!token) {\n        return this_component.redirect(302, 'login');\n    }\n\n    try {\n        return {\n            token,\n            cache: await apollo(token).query({\n                query: gql,\n            }),\n        };\n    } catch (e) {\n        if (\n            e.graphQLErrors &&\n            e.message &&\n            e.message.indexOf('Request failed with status code 401') > 0\n        ) {\n            console.log('-> login');\n            return this_component.redirect(302, 'login');\n        }\n        throw e;\n    }\n};\n"
  }
}